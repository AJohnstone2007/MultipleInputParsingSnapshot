package uk.ac.rhul.cs.csle.art.v3.manager.parser;

import java.io.FileNotFoundException;
import uk.ac.rhul.cs.csle.art.v3.alg.gll.support.*;
import uk.ac.rhul.cs.csle.art.v3.lex.*;
import uk.ac.rhul.cs.csle.art.v3.manager.*;
import uk.ac.rhul.cs.csle.art.v3.manager.grammar.*;
import uk.ac.rhul.cs.csle.art.v3.manager.mode.*;
import uk.ac.rhul.cs.csle.art.util.text.*;
import uk.ac.rhul.cs.csle.art.term.*;
import uk.ac.rhul.cs.csle.art.util.bitset.ARTBitSet;
/*******************************************************************************
*
* ARTV3Parser.java
*
*******************************************************************************/

  import uk.ac.rhul.cs.csle.art.v3.value.ARTValueTerm;
  import uk.ac.rhul.cs.csle.art.v3.manager.module.*;
  import uk.ac.rhul.cs.csle.art.v3.manager.grammar.element.*;
  import uk.ac.rhul.cs.csle.art.core.ARTUncheckedException;
  import java.nio.file.Files;
  import java.nio.file.Paths;

@SuppressWarnings("fallthrough") public class ARTV3Parser extends ARTGLLParserHashPool {
private static boolean[] ARTSet1;
private static boolean[] ARTSet2;
private static boolean[] ARTSet3;
private static boolean[] ARTSet4;
private static boolean[] ARTSet5;
private static boolean[] ARTSet6;
private static boolean[] ARTSet7;
private static boolean[] ARTSet8;
private static boolean[] ARTSet9;
private static boolean[] ARTSet10;
private static boolean[] ARTSet11;
private static boolean[] ARTSet12;
private static boolean[] ARTSet13;
private static boolean[] ARTSet14;
private static boolean[] ARTSet15;
private static boolean[] ARTSet16;
private static boolean[] ARTSet17;
private static boolean[] ARTSet18;
private static boolean[] ARTSet19;
private static boolean[] ARTSet20;
private static boolean[] ARTSet21;
private static boolean[] ARTSet22;
private static boolean[] ARTSet23;
private static boolean[] ARTSet24;
private static boolean[] ARTSet25;
private static boolean[] ARTSet26;
private static boolean[] ARTSet27;
private static boolean[] ARTSet28;
private static boolean[] ARTSet29;
private static boolean[] ARTSet30;
private static boolean[] ARTSet31;
private static boolean[] ARTSet32;
private static boolean[] ARTSet33;
private static boolean[] ARTSet34;
private static boolean[] ARTSet35;
private static boolean[] ARTSet36;
private static boolean[] ARTSet37;
private static boolean[] ARTSet38;
private static boolean[] ARTSet39;
private static boolean[] ARTSet40;
private static boolean[] ARTSet41;
private static boolean[] ARTSet42;
private static boolean[] ARTSet43;
private static boolean[] ARTSet44;
private static boolean[] ARTSet45;
private static boolean[] ARTSet46;
private static boolean[] ARTSet47;
private static boolean[] ARTSet48;
private static boolean[] ARTSet49;
private static boolean[] ARTSet50;
private static boolean[] ARTSet51;
private static boolean[] ARTSet52;
private static boolean[] ARTSet53;
private static boolean[] ARTSet54;
private static boolean[] ARTSet55;
private static boolean[] ARTSet56;
private static boolean[] ARTSet57;
private static boolean[] ARTSet58;
private static boolean[] ARTSet59;
private static boolean[] ARTSet60;
private static boolean[] ARTSet61;
private static boolean[] ARTSet62;
private static boolean[] ARTSet63;
private static boolean[] ARTSet64;
private static boolean[] ARTSet65;
private static boolean[] ARTSet66;
private static boolean[] ARTSet67;
private static boolean[] ARTSet68;
private static boolean[] ARTSet69;
private static boolean[] ARTSet70;
private static boolean[] ARTSet71;
private static boolean[] ARTSet72;
private static boolean[] ARTSet73;
private static boolean[] ARTSet74;
private static boolean[] ARTSet75;
private static boolean[] ARTSet76;
private static boolean[] ARTSet77;
private static boolean[] ARTSet78;
private static boolean[] ARTSet79;
private static boolean[] ARTSet80;
private static boolean[] ARTSet81;
private static boolean[] ARTSet82;
private static boolean[] ARTSet83;
private static boolean[] ARTSet84;
private static boolean[] ARTSet85;
private static boolean[] ARTSet86;
private static boolean[] ARTSet87;
private static boolean[] ARTSet88;
private static boolean[] ARTSet89;
private static boolean[] ARTSet90;
private static boolean[] ARTSet91;
private static boolean[] ARTSet92;
private static boolean[] ARTSet93;
private static boolean[] ARTSet94;
private static boolean[] ARTSet95;
private static boolean[] ARTSet96;
private static boolean[] ARTSet97;
private static boolean[] ARTSet98;
private static boolean[] ARTSet99;
private static boolean[] ARTSet100;
private static boolean[] ARTSet101;
private static boolean[] ARTSet102;
private static boolean[] ARTSet103;
private static boolean[] ARTSet104;
private static boolean[] ARTSet105;
private static boolean[] ARTSet106;
private static boolean[] ARTSet107;
private static boolean[] ARTSet108;
private static boolean[] ARTSet109;
private static boolean[] ARTSet110;
private static boolean[] ARTSet111;
private static boolean[] ARTSet112;
private static boolean[] ARTSet113;
private static boolean[] ARTSet114;
private static boolean[] ARTSet115;
private static boolean[] ARTSet116;
private static boolean[] ARTSet117;
private static boolean[] ARTSet118;
private static boolean[] ARTSet119;
private static boolean[] ARTSet120;
private static boolean[] ARTSet121;
private static boolean[] ARTSet122;
private static boolean[] ARTSet123;
private static boolean[] ARTSet124;
private static boolean[] ARTSet125;
private static boolean[] ARTSet126;
private static boolean[] ARTSet127;
private static boolean[] ARTSet128;
private static boolean[] ARTSet129;
private static boolean[] ARTSet130;
private static boolean[] ARTSet131;
private static boolean[] ARTSet132;
private static boolean[] ARTSet133;
private static boolean[] ARTSet134;
private static boolean[] ARTSet135;
private static boolean[] ARTSet136;
private static boolean[] ARTSet137;
private static boolean[] ARTSet138;
private static boolean[] ARTSet139;
private static boolean[] ARTSet140;
private static boolean[] ARTSet141;
private static boolean[] ARTSet142;
private static boolean[] ARTSet143;
private static boolean[] ARTSet144;
private static boolean[] ARTSet145;
private static boolean[] ARTSet146;
private static boolean[] ARTSet147;
private static boolean[] ARTSet148;
private static boolean[] ARTSet149;
private static boolean[] ARTSet150;
private static boolean[] ARTSet151;
private static boolean[] ARTSet152;
private static boolean[] ARTSet153;
private static boolean[] ARTSet154;
private static boolean[] ARTSet155;
private static boolean[] ARTSet156;
private static boolean[] ARTSet157;
private static boolean[] ARTSet158;
private static boolean[] ARTSet159;
private static boolean[] ARTSet160;
private static boolean[] ARTSet161;
private static boolean[] ARTSet162;
private static boolean[] ARTSet163;
private static boolean[] ARTSet164;
private static boolean[] ARTSet165;
private static boolean[] ARTSet166;
private static boolean[] ARTSet167;
private static boolean[] ARTSet168;
private static boolean[] ARTSet169;
private static boolean[] ARTSet170;
private static boolean[] ARTSet171;
private static boolean[] ARTSet172;
private static boolean[] ARTSet173;
private static boolean[] ARTSet174;
private static boolean[] ARTSet175;
private static boolean[] ARTSet176;
private static boolean[] ARTSet177;
private static boolean[] ARTSet178;
private static boolean[] ARTSet179;
private static boolean[] ARTSet180;
private static boolean[] ARTSet181;
private static boolean[] ARTSet182;
private static boolean[] ARTSet183;
private static boolean[] ARTSet184;
private static boolean[] ARTSet185;
private static boolean[] ARTSet186;
private static boolean[] ARTSet187;
private static boolean[] ARTSet188;
private static boolean[] ARTSet189;
private static boolean[] ARTSet190;
private static boolean[] ARTSet191;
private static boolean[] ARTSet192;
private static boolean[] ARTSet193;
private static boolean[] ARTSet194;
private static boolean[] ARTSet195;
private static boolean[] ARTSet196;
private static boolean[] ARTSet197;
private static boolean[] ARTSet198;
private static boolean[] ARTSet199;
private static boolean[] ARTSet200;
private static boolean[] ARTSet201;
private static boolean[] ARTSet202;
private static boolean[] ARTSet203;
private static boolean[] ARTSet204;
private static boolean[] ARTSet205;
private static boolean[] ARTSet206;
private static boolean[] ARTSet207;
private static boolean[] ARTSet208;
private static boolean[] ARTSet209;
private static boolean[] ARTSet210;
private static boolean[] ARTSet211;
private static boolean[] ARTSet212;
private static boolean[] ARTSet213;
private static boolean[] ARTSet214;
private static boolean[] ARTSet215;
private static boolean[] ARTSet216;
private static boolean[] ARTSet217;
private static boolean[] ARTSet218;
private static boolean[] ARTSet219;
private static boolean[] ARTSet220;
private static boolean[] ARTSet221;
private static boolean[] ARTSet222;
private static boolean[] ARTSet223;
private static boolean[] ARTSet224;
private static boolean[] ARTSet225;
private static boolean[] ARTSet226;
private static boolean[] ARTSet227;
private static boolean[] ARTSet228;
private static boolean[] ARTSet229;
private static boolean[] ARTSet230;

/* Start of artLabel enumeration */
public static final int ARTX_EOS = 0;
public static final int ARTTB_CHAR_BQ = 1;
public static final int ARTTB_ID = 2;
public static final int ARTTB_INTEGER = 3;
public static final int ARTTB_REAL = 4;
public static final int ARTTB_STRING_BRACE_NEST = 5;
public static final int ARTTB_STRING_DOLLAR = 6;
public static final int ARTTB_STRING_DQ = 7;
public static final int ARTTB_STRING_PLAIN_SQ = 8;
public static final int ARTTS__SHREIK = 9;
public static final int ARTTS__HASH = 10;
public static final int ARTTS__PERCENT_PERCENT = 11;
public static final int ARTTS__AMPERSAND = 12;
public static final int ARTTS__LPAR = 13;
public static final int ARTTS__RPAR = 14;
public static final int ARTTS__STAR = 15;
public static final int ARTTS__PLUS = 16;
public static final int ARTTS__COMMA = 17;
public static final int ARTTS__PERIOD = 18;
public static final int ARTTS__PERIOD_PERIOD = 19;
public static final int ARTTS__SLASH = 20;
public static final int ARTTS__COLON = 21;
public static final int ARTTS__COLON_COLON_EQUAL = 22;
public static final int ARTTS__LT = 23;
public static final int ARTTS__LT_LT = 24;
public static final int ARTTS__EQUAL = 25;
public static final int ARTTS__GT = 26;
public static final int ARTTS__GT_GT = 27;
public static final int ARTTS__QUERY = 28;
public static final int ARTTS__AT = 29;
public static final int ARTTS_FIFODescriptors = 30;
public static final int ARTTS__BACKSLASH = 31;
public static final int ARTTS__BACKSLASH_BACKSLASH = 32;
public static final int ARTTS__UPARROW = 33;
public static final int ARTTS__UPARROW_UPARROW = 34;
public static final int ARTTS__UPARROW_UPARROW_UPARROW = 35;
public static final int ARTTS__UPARROW_ = 36;
public static final int ARTTS_absorb = 37;
public static final int ARTTS_anyBuiltinTerminal = 38;
public static final int ARTTS_anyCaseInsensitiveTerminal = 39;
public static final int ARTTS_anyCaseSensitiveTerminal = 40;
public static final int ARTTS_anyCharacterTerminal = 41;
public static final int ARTTS_anyLiteralTerminal = 42;
public static final int ARTTS_anyNonterminal = 43;
public static final int ARTTS_anyParaterminal = 44;
public static final int ARTTS_anyTerminal = 45;
public static final int ARTTS_choose = 46;
public static final int ARTTS_cnp = 47;
public static final int ARTTS_cnpGeneratorPool = 48;
public static final int ARTTS_cnpIndexedAPI = 49;
public static final int ARTTS_cnpIndexedPool = 50;
public static final int ARTTS_cnpLinkedAPI = 51;
public static final int ARTTS_earley = 52;
public static final int ARTTS_earley2007LinkedAPI = 53;
public static final int ARTTS_earleyIndexedAPI = 54;
public static final int ARTTS_earleyIndexedData = 55;
public static final int ARTTS_earleyIndexedPool = 56;
public static final int ARTTS_earleyLinkedAPI = 57;
public static final int ARTTS_earleyTable = 58;
public static final int ARTTS_earleyTableIndexedAPI = 59;
public static final int ARTTS_earleyTableIndexedData = 60;
public static final int ARTTS_earleyTableIndexedPool = 61;
public static final int ARTTS_earleyTableLinkedAPI = 62;
public static final int ARTTS_element = 63;
public static final int ARTTS_false = 64;
public static final int ARTTS_generateDynamic = 65;
public static final int ARTTS_generateFragment = 66;
public static final int ARTTS_generatePool = 67;
public static final int ARTTS_generateState = 68;
public static final int ARTTS_generateStatic = 69;
public static final int ARTTS_gll = 70;
public static final int ARTTS_gllClusteredGeneratorPool = 71;
public static final int ARTTS_gllGeneratorPool = 72;
public static final int ARTTS_gllTWEGeneratorPool = 73;
public static final int ARTTS_grammarWrite = 74;
public static final int ARTTS_gssShow = 75;
public static final int ARTTS_import = 76;
public static final int ARTTS_injectInstance = 77;
public static final int ARTTS_injectProduction = 78;
public static final int ARTTS_injectProductionOff = 79;
public static final int ARTTS_inputPrint = 80;
public static final int ARTTS_lcnp = 81;
public static final int ARTTS_lcnpGeneratorPool = 82;
public static final int ARTTS_lcnpIndexedAPI = 83;
public static final int ARTTS_lcnpIndexedPool = 84;
public static final int ARTTS_lcnpLinkedAPI = 85;
public static final int ARTTS_lexDFA = 86;
public static final int ARTTS_lexerData = 87;
public static final int ARTTS_lexerName = 88;
public static final int ARTTS_longest = 89;
public static final int ARTTS_mgll = 90;
public static final int ARTTS_mgllGeneratorPool = 91;
public static final int ARTTS_namespace = 92;
public static final int ARTTS_osbrd = 93;
public static final int ARTTS_osbrdGenerator = 94;
public static final int ARTTS_outputDirectory = 95;
public static final int ARTTS_paraterminal = 96;
public static final int ARTTS_parseCounts = 97;
public static final int ARTTS_parserName = 98;
public static final int ARTTS_predictivePops = 99;
public static final int ARTTS_prelude = 100;
public static final int ARTTS_shortest = 101;
public static final int ARTTS_sppfLongest = 102;
public static final int ARTTS_sppfPriority = 103;
public static final int ARTTS_sppfShow = 104;
public static final int ARTTS_start = 105;
public static final int ARTTS_support = 106;
public static final int ARTTS_suppressPopGuard = 107;
public static final int ARTTS_suppressProductionGuard = 108;
public static final int ARTTS_suppressSemantics = 109;
public static final int ARTTS_suppressTestRepeat = 110;
public static final int ARTTS_termPrint = 111;
public static final int ARTTS_termWrite = 112;
public static final int ARTTS_trace = 113;
public static final int ARTTS_treePrint = 114;
public static final int ARTTS_treeShow = 115;
public static final int ARTTS_true = 116;
public static final int ARTTS_tweDead = 117;
public static final int ARTTS_tweExtents = 118;
public static final int ARTTS_tweFromSPPF = 119;
public static final int ARTTS_tweLexicalisations = 120;
public static final int ARTTS_tweLongest = 121;
public static final int ARTTS_twePrint = 122;
public static final int ARTTS_twePrintFull = 123;
public static final int ARTTS_twePrintSummary = 124;
public static final int ARTTS_twePriority = 125;
public static final int ARTTS_tweRecursive = 126;
public static final int ARTTS_tweSegments = 127;
public static final int ARTTS_tweShortCircuit = 128;
public static final int ARTTS_tweTokenWrite = 129;
public static final int ARTTS_verbosity = 130;
public static final int ARTTS_whitespace = 131;
public static final int ARTTS__BAR = 132;
public static final int ARTTS__BAR_BAR = 133;
public static final int ARTX_EPSILON = 134;
public static final int ARTL_ART_BOOLEAN = 135;
public static final int ARTL_ART_CHAR_BQ = 136;
public static final int ARTL_ART_ID = 137;
public static final int ARTL_ART_INTEGER = 138;
public static final int ARTL_ART_REAL = 139;
public static final int ARTL_ART_STRING_BRACE_NEST = 140;
public static final int ARTL_ART_STRING_DOLLAR = 141;
public static final int ARTL_ART_STRING_DQ = 142;
public static final int ARTL_ART_STRING_PLAIN_SQ = 143;
public static final int ARTL_ART_TYPE = 144;
public static final int ARTL_ART_TypeList = 145;
public static final int ARTL_ART_TypeNest = 146;
public static final int ARTL_ART_abbrev = 147;
public static final int ARTL_ART_action = 148;
public static final int ARTL_ART_alt = 149;
public static final int ARTL_ART_alt1 = 150;
public static final int ARTL_ART_annotation = 151;
public static final int ARTL_ART_annotations = 152;
public static final int ARTL_ART_attribute = 153;
public static final int ARTL_ART_attributes = 154;
public static final int ARTL_ART_attributesOpt = 155;
public static final int ARTL_ART_builtinTerminal = 156;
public static final int ARTL_ART_caseInsensitiveTerminal = 157;
public static final int ARTL_ART_caseSensitiveTerminal = 158;
public static final int ARTL_ART_cat = 159;
public static final int ARTL_ART_catTail = 160;
public static final int ARTL_ART_characterSetTerminal = 161;
public static final int ARTL_ART_characterTerminal = 162;
public static final int ARTL_ART_choiceSlot = 163;
public static final int ARTL_ART_chooseDiff = 164;
public static final int ARTL_ART_chooseElement = 165;
public static final int ARTL_ART_chooseUnionIntersection = 166;
public static final int ARTL_ART_chooser = 167;
public static final int ARTL_ART_choosers = 168;
public static final int ARTL_ART_delay = 169;
public static final int ARTL_ART_diff = 170;
public static final int ARTL_ART_directive = 171;
public static final int ARTL_ART_element1 = 172;
public static final int ARTL_ART_elementUpdater = 173;
public static final int ARTL_ART_elementUpdaters = 174;
public static final int ARTL_ART_epsilon = 175;
public static final int ARTL_ART_fold = 176;
public static final int ARTL_ART_grammarRule = 177;
public static final int ARTL_ART_insertionName = 178;
public static final int ARTL_ART_iter = 179;
public static final int ARTL_ART_name = 180;
public static final int ARTL_ART_nonterminal = 181;
public static final int ARTL_ART_not = 182;
public static final int ARTL_ART_paraterminalisers = 183;
public static final int ARTL_ART_rhs = 184;
public static final int ARTL_ART_slot = 185;
public static final int ARTL_ART_text = 186;
public static final int ARTL_ART_textElement = 187;
public static final int ARTL_ART_textElements = 188;
public static final int ARTL_ART_trueFalse = 189;
public static final int ARTL_ART_union = 190;
public static final int ARTL_ART_whitespacer = 191;
public static final int ARTL_ART_whitespacers = 192;
public static final int ARTL_ART_BOOLEAN_1477 = 193;
public static final int ARTL_ART_BOOLEAN_1478 = 194;
public static final int ARTL_ART_BOOLEAN_1479 = 195;
public static final int ARTL_ART_BOOLEAN_1480 = 196;
public static final int ARTL_ART_BOOLEAN_1483 = 197;
public static final int ARTL_ART_BOOLEAN_1484 = 198;
public static final int ARTL_ART_BOOLEAN_1485 = 199;
public static final int ARTL_ART_BOOLEAN_1486 = 200;
public static final int ARTL_ART_CHAR_BQ_1437 = 201;
public static final int ARTL_ART_CHAR_BQ_1438 = 202;
public static final int ARTL_ART_CHAR_BQ_1439 = 203;
public static final int ARTL_ART_CHAR_BQ_1440 = 204;
public static final int ARTL_ART_ID_639 = 205;
public static final int ARTL_ART_ID_640 = 206;
public static final int ARTL_ART_ID_641 = 207;
public static final int ARTL_ART_ID_642 = 208;
public static final int ARTL_ART_INTEGER_763 = 209;
public static final int ARTL_ART_INTEGER_764 = 210;
public static final int ARTL_ART_INTEGER_765 = 211;
public static final int ARTL_ART_INTEGER_766 = 212;
public static final int ARTL_ART_REAL_1489 = 213;
public static final int ARTL_ART_REAL_1490 = 214;
public static final int ARTL_ART_REAL_1491 = 215;
public static final int ARTL_ART_REAL_1492 = 216;
public static final int ARTL_ART_STRING_BRACE_NEST_757 = 217;
public static final int ARTL_ART_STRING_BRACE_NEST_758 = 218;
public static final int ARTL_ART_STRING_BRACE_NEST_759 = 219;
public static final int ARTL_ART_STRING_BRACE_NEST_760 = 220;
public static final int ARTL_ART_STRING_DOLLAR_1431 = 221;
public static final int ARTL_ART_STRING_DOLLAR_1432 = 222;
public static final int ARTL_ART_STRING_DOLLAR_1433 = 223;
public static final int ARTL_ART_STRING_DOLLAR_1434 = 224;
public static final int ARTL_ART_STRING_DQ_893 = 225;
public static final int ARTL_ART_STRING_DQ_894 = 226;
public static final int ARTL_ART_STRING_DQ_895 = 227;
public static final int ARTL_ART_STRING_DQ_896 = 228;
public static final int ARTL_ART_STRING_PLAIN_SQ_803 = 229;
public static final int ARTL_ART_STRING_PLAIN_SQ_804 = 230;
public static final int ARTL_ART_STRING_PLAIN_SQ_805 = 231;
public static final int ARTL_ART_STRING_PLAIN_SQ_806 = 232;
public static final int ARTL_ART_TYPE_1169 = 233;
public static final int ARTL_ART_TYPE_1170 = 234;
public static final int ARTL_ART_TYPE_1171 = 235;
public static final int ARTL_ART_TYPE_1172 = 236;
public static final int ARTL_ART_TypeList_1465 = 237;
public static final int ARTL_ART_TypeList_1466 = 238;
public static final int ARTL_ART_TypeList_1467 = 239;
public static final int ARTL_ART_TypeList_1468 = 240;
public static final int ARTL_ART_TypeList_1469 = 241;
public static final int ARTL_ART_TypeList_1470 = 242;
public static final int ARTL_ART_TypeList_1471 = 243;
public static final int ARTL_ART_TypeList_1472 = 244;
public static final int ARTL_ART_TypeList_1473 = 245;
public static final int ARTL_ART_TypeList_1474 = 246;
public static final int ARTL_ART_TypeList_1475 = 247;
public static final int ARTL_ART_TypeList_1476 = 248;
public static final int ARTL_ART_TypeNest_1451 = 249;
public static final int ARTL_ART_TypeNest_1452 = 250;
public static final int ARTL_ART_TypeNest_1453 = 251;
public static final int ARTL_ART_TypeNest_1454 = 252;
public static final int ARTL_ART_TypeNest_1455 = 253;
public static final int ARTL_ART_TypeNest_1456 = 254;
public static final int ARTL_ART_TypeNest_1457 = 255;
public static final int ARTL_ART_TypeNest_1458 = 256;
public static final int ARTL_ART_TypeNest_1459 = 257;
public static final int ARTL_ART_TypeNest_1460 = 258;
public static final int ARTL_ART_TypeNest_1461 = 259;
public static final int ARTL_ART_TypeNest_1462 = 260;
public static final int ARTL_ART_TypeNest_1463 = 261;
public static final int ARTL_ART_TypeNest_1464 = 262;
public static final int ARTL_ART_abbrev_1227 = 263;
public static final int ARTL_ART_abbrev_1228 = 264;
public static final int ARTL_ART_abbrev_1229 = 265;
public static final int ARTL_ART_abbrev_1230 = 266;
public static final int ARTL_ART_abbrev_1231 = 267;
public static final int ARTL_ART_abbrev_1232 = 268;
public static final int ARTL_ART_abbrev_1233 = 269;
public static final int ARTL_ART_abbrev_1234 = 270;
public static final int ARTL_ART_abbrev_1235 = 271;
public static final int ARTL_ART_abbrev_1236 = 272;
public static final int ARTL_ART_abbrev_1237 = 273;
public static final int ARTL_ART_abbrev_1238 = 274;
public static final int ARTL_ART_abbrev_1239 = 275;
public static final int ARTL_ART_abbrev_1240 = 276;
public static final int ARTL_ART_abbrev_1241 = 277;
public static final int ARTL_ART_abbrev_1242 = 278;
public static final int ARTL_ART_abbrev_1243 = 279;
public static final int ARTL_ART_abbrev_1244 = 280;
public static final int ARTL_ART_abbrev_1245 = 281;
public static final int ARTL_ART_abbrev_1246 = 282;
public static final int ARTL_ART_abbrev_1247 = 283;
public static final int ARTL_ART_abbrev_1248 = 284;
public static final int ARTL_ART_action_1249 = 285;
public static final int ARTL_ART_action_1250 = 286;
public static final int ARTL_ART_action_1251 = 287;
public static final int ARTL_ART_action_1252 = 288;
public static final int ARTL_ART_alt_1181 = 289;
public static final int ARTL_ART_alt_1182 = 290;
public static final int ARTL_ART_alt_1183 = 291;
public static final int ARTL_ART_alt_1184 = 292;
public static final int ARTL_ART_alt_1185 = 293;
public static final int ARTL_ART_alt_1186 = 294;
public static final int ARTL_ART_alt_1187 = 295;
public static final int ARTL_ART_alt_1188 = 296;
public static final int ARTL_ART_alt_1189 = 297;
public static final int ARTL_ART_alt_1190 = 298;
public static final int ARTL_ART_alt_1191 = 299;
public static final int ARTL_ART_alt_1192 = 300;
public static final int ARTL_ART_alt1_1193 = 301;
public static final int ARTL_ART_alt1_1194 = 302;
public static final int ARTL_ART_alt1_1195 = 303;
public static final int ARTL_ART_alt1_1196 = 304;
public static final int ARTL_ART_alt1_1197 = 305;
public static final int ARTL_ART_alt1_1198 = 306;
public static final int ARTL_ART_alt1_1199 = 307;
public static final int ARTL_ART_alt1_1200 = 308;
public static final int ARTL_ART_alt1_1201 = 309;
public static final int ARTL_ART_alt1_1202 = 310;
public static final int ARTL_ART_alt1_1203 = 311;
public static final int ARTL_ART_alt1_1204 = 312;
public static final int ARTL_ART_annotation_1393 = 313;
public static final int ARTL_ART_annotation_1394 = 314;
public static final int ARTL_ART_annotation_1395 = 315;
public static final int ARTL_ART_annotation_1396 = 316;
public static final int ARTL_ART_annotation_1397 = 317;
public static final int ARTL_ART_annotation_1398 = 318;
public static final int ARTL_ART_annotation_1399 = 319;
public static final int ARTL_ART_annotation_1400 = 320;
public static final int ARTL_ART_annotation_1401 = 321;
public static final int ARTL_ART_annotation_1402 = 322;
public static final int ARTL_ART_annotation_1403 = 323;
public static final int ARTL_ART_annotation_1404 = 324;
public static final int ARTL_ART_annotations_1383 = 325;
public static final int ARTL_ART_annotations_1384 = 326;
public static final int ARTL_ART_annotations_1385 = 327;
public static final int ARTL_ART_annotations_1386 = 328;
public static final int ARTL_ART_annotations_1387 = 329;
public static final int ARTL_ART_annotations_1388 = 330;
public static final int ARTL_ART_annotations_1389 = 331;
public static final int ARTL_ART_annotations_1390 = 332;
public static final int ARTL_ART_annotations_1391 = 333;
public static final int ARTL_ART_annotations_1392 = 334;
public static final int ARTL_ART_attribute_1153 = 335;
public static final int ARTL_ART_attribute_1154 = 336;
public static final int ARTL_ART_attribute_1155 = 337;
public static final int ARTL_ART_attribute_1156 = 338;
public static final int ARTL_ART_attribute_1157 = 339;
public static final int ARTL_ART_attribute_1158 = 340;
public static final int ARTL_ART_attribute_1159 = 341;
public static final int ARTL_ART_attribute_1160 = 342;
public static final int ARTL_ART_attribute_1163 = 343;
public static final int ARTL_ART_attribute_1164 = 344;
public static final int ARTL_ART_attribute_1165 = 345;
public static final int ARTL_ART_attribute_1166 = 346;
public static final int ARTL_ART_attributes_1141 = 347;
public static final int ARTL_ART_attributes_1142 = 348;
public static final int ARTL_ART_attributes_1145 = 349;
public static final int ARTL_ART_attributes_1146 = 350;
public static final int ARTL_ART_attributes_1147 = 351;
public static final int ARTL_ART_attributes_1148 = 352;
public static final int ARTL_ART_attributes_1149 = 353;
public static final int ARTL_ART_attributes_1150 = 354;
public static final int ARTL_ART_attributes_1151 = 355;
public static final int ARTL_ART_attributes_1152 = 356;
public static final int ARTL_ART_attributesOpt_1127 = 357;
public static final int ARTL_ART_attributesOpt_1128 = 358;
public static final int ARTL_ART_attributesOpt_1131 = 359;
public static final int ARTL_ART_attributesOpt_1132 = 360;
public static final int ARTL_ART_attributesOpt_1133 = 361;
public static final int ARTL_ART_attributesOpt_1134 = 362;
public static final int ARTL_ART_attributesOpt_1135 = 363;
public static final int ARTL_ART_attributesOpt_1136 = 364;
public static final int ARTL_ART_attributesOpt_1137 = 365;
public static final int ARTL_ART_attributesOpt_1138 = 366;
public static final int ARTL_ART_attributesOpt_1139 = 367;
public static final int ARTL_ART_attributesOpt_1140 = 368;
public static final int ARTL_ART_builtinTerminal_885 = 369;
public static final int ARTL_ART_builtinTerminal_886 = 370;
public static final int ARTL_ART_builtinTerminal_887 = 371;
public static final int ARTL_ART_builtinTerminal_888 = 372;
public static final int ARTL_ART_builtinTerminal_889 = 373;
public static final int ARTL_ART_builtinTerminal_890 = 374;
public static final int ARTL_ART_caseInsensitiveTerminal_861 = 375;
public static final int ARTL_ART_caseInsensitiveTerminal_862 = 376;
public static final int ARTL_ART_caseInsensitiveTerminal_863 = 377;
public static final int ARTL_ART_caseInsensitiveTerminal_864 = 378;
public static final int ARTL_ART_caseSensitiveTerminal_855 = 379;
public static final int ARTL_ART_caseSensitiveTerminal_856 = 380;
public static final int ARTL_ART_caseSensitiveTerminal_857 = 381;
public static final int ARTL_ART_caseSensitiveTerminal_858 = 382;
public static final int ARTL_ART_cat_1175 = 383;
public static final int ARTL_ART_cat_1176 = 384;
public static final int ARTL_ART_cat_1177 = 385;
public static final int ARTL_ART_cat_1178 = 386;
public static final int ARTL_ART_cat_1179 = 387;
public static final int ARTL_ART_cat_1180 = 388;
public static final int ARTL_ART_catTail_1213 = 389;
public static final int ARTL_ART_catTail_1214 = 390;
public static final int ARTL_ART_catTail_1215 = 391;
public static final int ARTL_ART_catTail_1216 = 392;
public static final int ARTL_ART_catTail_1217 = 393;
public static final int ARTL_ART_catTail_1218 = 394;
public static final int ARTL_ART_catTail_1219 = 395;
public static final int ARTL_ART_catTail_1220 = 396;
public static final int ARTL_ART_catTail_1221 = 397;
public static final int ARTL_ART_catTail_1222 = 398;
public static final int ARTL_ART_catTail_1223 = 399;
public static final int ARTL_ART_catTail_1224 = 400;
public static final int ARTL_ART_catTail_1225 = 401;
public static final int ARTL_ART_catTail_1226 = 402;
public static final int ARTL_ART_characterSetTerminal_873 = 403;
public static final int ARTL_ART_characterSetTerminal_874 = 404;
public static final int ARTL_ART_characterSetTerminal_875 = 405;
public static final int ARTL_ART_characterSetTerminal_876 = 406;
public static final int ARTL_ART_characterSetTerminal_879 = 407;
public static final int ARTL_ART_characterSetTerminal_880 = 408;
public static final int ARTL_ART_characterSetTerminal_881 = 409;
public static final int ARTL_ART_characterSetTerminal_882 = 410;
public static final int ARTL_ART_characterTerminal_867 = 411;
public static final int ARTL_ART_characterTerminal_868 = 412;
public static final int ARTL_ART_characterTerminal_869 = 413;
public static final int ARTL_ART_characterTerminal_870 = 414;
public static final int ARTL_ART_choiceSlot_1025 = 415;
public static final int ARTL_ART_choiceSlot_1026 = 416;
public static final int ARTL_ART_choiceSlot_1027 = 417;
public static final int ARTL_ART_choiceSlot_1028 = 418;
public static final int ARTL_ART_choiceSlot_1031 = 419;
public static final int ARTL_ART_choiceSlot_1032 = 420;
public static final int ARTL_ART_choiceSlot_1033 = 421;
public static final int ARTL_ART_choiceSlot_1034 = 422;
public static final int ARTL_ART_choiceSlot_1035 = 423;
public static final int ARTL_ART_choiceSlot_1036 = 424;
public static final int ARTL_ART_chooseDiff_973 = 425;
public static final int ARTL_ART_chooseDiff_974 = 426;
public static final int ARTL_ART_chooseDiff_975 = 427;
public static final int ARTL_ART_chooseDiff_976 = 428;
public static final int ARTL_ART_chooseDiff_979 = 429;
public static final int ARTL_ART_chooseDiff_980 = 430;
public static final int ARTL_ART_chooseDiff_981 = 431;
public static final int ARTL_ART_chooseDiff_982 = 432;
public static final int ARTL_ART_chooseDiff_983 = 433;
public static final int ARTL_ART_chooseDiff_984 = 434;
public static final int ARTL_ART_chooseDiff_985 = 435;
public static final int ARTL_ART_chooseDiff_986 = 436;
public static final int ARTL_ART_chooseDiff_989 = 437;
public static final int ARTL_ART_chooseDiff_990 = 438;
public static final int ARTL_ART_chooseDiff_991 = 439;
public static final int ARTL_ART_chooseDiff_992 = 440;
public static final int ARTL_ART_chooseDiff_993 = 441;
public static final int ARTL_ART_chooseDiff_994 = 442;
public static final int ARTL_ART_chooseDiff_995 = 443;
public static final int ARTL_ART_chooseDiff_996 = 444;
public static final int ARTL_ART_chooseElement_1039 = 445;
public static final int ARTL_ART_chooseElement_1040 = 446;
public static final int ARTL_ART_chooseElement_1041 = 447;
public static final int ARTL_ART_chooseElement_1042 = 448;
public static final int ARTL_ART_chooseElement_1045 = 449;
public static final int ARTL_ART_chooseElement_1046 = 450;
public static final int ARTL_ART_chooseElement_1047 = 451;
public static final int ARTL_ART_chooseElement_1048 = 452;
public static final int ARTL_ART_chooseElement_1051 = 453;
public static final int ARTL_ART_chooseElement_1052 = 454;
public static final int ARTL_ART_chooseElement_1053 = 455;
public static final int ARTL_ART_chooseElement_1054 = 456;
public static final int ARTL_ART_chooseElement_1057 = 457;
public static final int ARTL_ART_chooseElement_1058 = 458;
public static final int ARTL_ART_chooseElement_1059 = 459;
public static final int ARTL_ART_chooseElement_1060 = 460;
public static final int ARTL_ART_chooseElement_1063 = 461;
public static final int ARTL_ART_chooseElement_1064 = 462;
public static final int ARTL_ART_chooseElement_1065 = 463;
public static final int ARTL_ART_chooseElement_1066 = 464;
public static final int ARTL_ART_chooseElement_1069 = 465;
public static final int ARTL_ART_chooseElement_1070 = 466;
public static final int ARTL_ART_chooseElement_1071 = 467;
public static final int ARTL_ART_chooseElement_1072 = 468;
public static final int ARTL_ART_chooseElement_1075 = 469;
public static final int ARTL_ART_chooseElement_1076 = 470;
public static final int ARTL_ART_chooseElement_1077 = 471;
public static final int ARTL_ART_chooseElement_1078 = 472;
public static final int ARTL_ART_chooseElement_1081 = 473;
public static final int ARTL_ART_chooseElement_1082 = 474;
public static final int ARTL_ART_chooseElement_1083 = 475;
public static final int ARTL_ART_chooseElement_1084 = 476;
public static final int ARTL_ART_chooseElement_1087 = 477;
public static final int ARTL_ART_chooseElement_1088 = 478;
public static final int ARTL_ART_chooseElement_1089 = 479;
public static final int ARTL_ART_chooseElement_1090 = 480;
public static final int ARTL_ART_chooseElement_1093 = 481;
public static final int ARTL_ART_chooseElement_1094 = 482;
public static final int ARTL_ART_chooseElement_1095 = 483;
public static final int ARTL_ART_chooseElement_1096 = 484;
public static final int ARTL_ART_chooseElement_1099 = 485;
public static final int ARTL_ART_chooseElement_1100 = 486;
public static final int ARTL_ART_chooseElement_1101 = 487;
public static final int ARTL_ART_chooseElement_1102 = 488;
public static final int ARTL_ART_chooseElement_1105 = 489;
public static final int ARTL_ART_chooseElement_1106 = 490;
public static final int ARTL_ART_chooseElement_1107 = 491;
public static final int ARTL_ART_chooseElement_1108 = 492;
public static final int ARTL_ART_chooseElement_1111 = 493;
public static final int ARTL_ART_chooseElement_1112 = 494;
public static final int ARTL_ART_chooseElement_1113 = 495;
public static final int ARTL_ART_chooseElement_1114 = 496;
public static final int ARTL_ART_chooseElement_1117 = 497;
public static final int ARTL_ART_chooseElement_1118 = 498;
public static final int ARTL_ART_chooseElement_1119 = 499;
public static final int ARTL_ART_chooseElement_1120 = 500;
public static final int ARTL_ART_chooseElement_1121 = 501;
public static final int ARTL_ART_chooseElement_1122 = 502;
public static final int ARTL_ART_chooseElement_1123 = 503;
public static final int ARTL_ART_chooseElement_1124 = 504;
public static final int ARTL_ART_chooseUnionIntersection_999 = 505;
public static final int ARTL_ART_chooseUnionIntersection_1000 = 506;
public static final int ARTL_ART_chooseUnionIntersection_1001 = 507;
public static final int ARTL_ART_chooseUnionIntersection_1002 = 508;
public static final int ARTL_ART_chooseUnionIntersection_1005 = 509;
public static final int ARTL_ART_chooseUnionIntersection_1006 = 510;
public static final int ARTL_ART_chooseUnionIntersection_1007 = 511;
public static final int ARTL_ART_chooseUnionIntersection_1008 = 512;
public static final int ARTL_ART_chooseUnionIntersection_1009 = 513;
public static final int ARTL_ART_chooseUnionIntersection_1010 = 514;
public static final int ARTL_ART_chooseUnionIntersection_1011 = 515;
public static final int ARTL_ART_chooseUnionIntersection_1012 = 516;
public static final int ARTL_ART_chooseUnionIntersection_1015 = 517;
public static final int ARTL_ART_chooseUnionIntersection_1016 = 518;
public static final int ARTL_ART_chooseUnionIntersection_1017 = 519;
public static final int ARTL_ART_chooseUnionIntersection_1018 = 520;
public static final int ARTL_ART_chooseUnionIntersection_1019 = 521;
public static final int ARTL_ART_chooseUnionIntersection_1020 = 522;
public static final int ARTL_ART_chooseUnionIntersection_1021 = 523;
public static final int ARTL_ART_chooseUnionIntersection_1022 = 524;
public static final int ARTL_ART_chooser_917 = 525;
public static final int ARTL_ART_chooser_918 = 526;
public static final int ARTL_ART_chooser_919 = 527;
public static final int ARTL_ART_chooser_920 = 528;
public static final int ARTL_ART_chooser_921 = 529;
public static final int ARTL_ART_chooser_922 = 530;
public static final int ARTL_ART_chooser_923 = 531;
public static final int ARTL_ART_chooser_924 = 532;
public static final int ARTL_ART_chooser_927 = 533;
public static final int ARTL_ART_chooser_928 = 534;
public static final int ARTL_ART_chooser_929 = 535;
public static final int ARTL_ART_chooser_930 = 536;
public static final int ARTL_ART_chooser_931 = 537;
public static final int ARTL_ART_chooser_932 = 538;
public static final int ARTL_ART_chooser_933 = 539;
public static final int ARTL_ART_chooser_934 = 540;
public static final int ARTL_ART_chooser_937 = 541;
public static final int ARTL_ART_chooser_938 = 542;
public static final int ARTL_ART_chooser_939 = 543;
public static final int ARTL_ART_chooser_940 = 544;
public static final int ARTL_ART_chooser_941 = 545;
public static final int ARTL_ART_chooser_942 = 546;
public static final int ARTL_ART_chooser_943 = 547;
public static final int ARTL_ART_chooser_944 = 548;
public static final int ARTL_ART_chooser_947 = 549;
public static final int ARTL_ART_chooser_948 = 550;
public static final int ARTL_ART_chooser_949 = 551;
public static final int ARTL_ART_chooser_950 = 552;
public static final int ARTL_ART_chooser_951 = 553;
public static final int ARTL_ART_chooser_952 = 554;
public static final int ARTL_ART_chooser_953 = 555;
public static final int ARTL_ART_chooser_954 = 556;
public static final int ARTL_ART_chooser_957 = 557;
public static final int ARTL_ART_chooser_958 = 558;
public static final int ARTL_ART_chooser_959 = 559;
public static final int ARTL_ART_chooser_960 = 560;
public static final int ARTL_ART_chooser_961 = 561;
public static final int ARTL_ART_chooser_962 = 562;
public static final int ARTL_ART_chooser_965 = 563;
public static final int ARTL_ART_chooser_966 = 564;
public static final int ARTL_ART_chooser_967 = 565;
public static final int ARTL_ART_chooser_968 = 566;
public static final int ARTL_ART_chooser_969 = 567;
public static final int ARTL_ART_chooser_970 = 568;
public static final int ARTL_ART_choosers_743 = 569;
public static final int ARTL_ART_choosers_744 = 570;
public static final int ARTL_ART_choosers_745 = 571;
public static final int ARTL_ART_choosers_746 = 572;
public static final int ARTL_ART_choosers_749 = 573;
public static final int ARTL_ART_choosers_750 = 574;
public static final int ARTL_ART_choosers_751 = 575;
public static final int ARTL_ART_choosers_752 = 576;
public static final int ARTL_ART_choosers_755 = 577;
public static final int ARTL_ART_choosers_756 = 578;
public static final int ARTL_ART_delay_1411 = 579;
public static final int ARTL_ART_delay_1412 = 580;
public static final int ARTL_ART_delay_1413 = 581;
public static final int ARTL_ART_delay_1414 = 582;
public static final int ARTL_ART_diff_1267 = 583;
public static final int ARTL_ART_diff_1268 = 584;
public static final int ARTL_ART_diff_1269 = 585;
public static final int ARTL_ART_diff_1270 = 586;
public static final int ARTL_ART_diff_1271 = 587;
public static final int ARTL_ART_diff_1272 = 588;
public static final int ARTL_ART_diff_1273 = 589;
public static final int ARTL_ART_diff_1274 = 590;
public static final int ARTL_ART_diff_1275 = 591;
public static final int ARTL_ART_diff_1276 = 592;
public static final int ARTL_ART_diff_1277 = 593;
public static final int ARTL_ART_diff_1278 = 594;
public static final int ARTL_ART_directive_27 = 595;
public static final int ARTL_ART_directive_28 = 596;
public static final int ARTL_ART_directive_29 = 597;
public static final int ARTL_ART_directive_30 = 598;
public static final int ARTL_ART_directive_31 = 599;
public static final int ARTL_ART_directive_32 = 600;
public static final int ARTL_ART_directive_33 = 601;
public static final int ARTL_ART_directive_34 = 602;
public static final int ARTL_ART_directive_35 = 603;
public static final int ARTL_ART_directive_36 = 604;
public static final int ARTL_ART_directive_37 = 605;
public static final int ARTL_ART_directive_38 = 606;
public static final int ARTL_ART_directive_39 = 607;
public static final int ARTL_ART_directive_40 = 608;
public static final int ARTL_ART_directive_41 = 609;
public static final int ARTL_ART_directive_42 = 610;
public static final int ARTL_ART_directive_43 = 611;
public static final int ARTL_ART_directive_44 = 612;
public static final int ARTL_ART_directive_47 = 613;
public static final int ARTL_ART_directive_48 = 614;
public static final int ARTL_ART_directive_49 = 615;
public static final int ARTL_ART_directive_50 = 616;
public static final int ARTL_ART_directive_51 = 617;
public static final int ARTL_ART_directive_52 = 618;
public static final int ARTL_ART_directive_53 = 619;
public static final int ARTL_ART_directive_54 = 620;
public static final int ARTL_ART_directive_55 = 621;
public static final int ARTL_ART_directive_56 = 622;
public static final int ARTL_ART_directive_57 = 623;
public static final int ARTL_ART_directive_58 = 624;
public static final int ARTL_ART_directive_59 = 625;
public static final int ARTL_ART_directive_60 = 626;
public static final int ARTL_ART_directive_61 = 627;
public static final int ARTL_ART_directive_62 = 628;
public static final int ARTL_ART_directive_65 = 629;
public static final int ARTL_ART_directive_66 = 630;
public static final int ARTL_ART_directive_67 = 631;
public static final int ARTL_ART_directive_68 = 632;
public static final int ARTL_ART_directive_69 = 633;
public static final int ARTL_ART_directive_70 = 634;
public static final int ARTL_ART_directive_73 = 635;
public static final int ARTL_ART_directive_74 = 636;
public static final int ARTL_ART_directive_75 = 637;
public static final int ARTL_ART_directive_76 = 638;
public static final int ARTL_ART_directive_77 = 639;
public static final int ARTL_ART_directive_78 = 640;
public static final int ARTL_ART_directive_81 = 641;
public static final int ARTL_ART_directive_82 = 642;
public static final int ARTL_ART_directive_83 = 643;
public static final int ARTL_ART_directive_84 = 644;
public static final int ARTL_ART_directive_85 = 645;
public static final int ARTL_ART_directive_86 = 646;
public static final int ARTL_ART_directive_89 = 647;
public static final int ARTL_ART_directive_90 = 648;
public static final int ARTL_ART_directive_91 = 649;
public static final int ARTL_ART_directive_92 = 650;
public static final int ARTL_ART_directive_95 = 651;
public static final int ARTL_ART_directive_96 = 652;
public static final int ARTL_ART_directive_97 = 653;
public static final int ARTL_ART_directive_98 = 654;
public static final int ARTL_ART_directive_99 = 655;
public static final int ARTL_ART_directive_100 = 656;
public static final int ARTL_ART_directive_101 = 657;
public static final int ARTL_ART_directive_102 = 658;
public static final int ARTL_ART_directive_105 = 659;
public static final int ARTL_ART_directive_106 = 660;
public static final int ARTL_ART_directive_107 = 661;
public static final int ARTL_ART_directive_108 = 662;
public static final int ARTL_ART_directive_109 = 663;
public static final int ARTL_ART_directive_110 = 664;
public static final int ARTL_ART_directive_111 = 665;
public static final int ARTL_ART_directive_112 = 666;
public static final int ARTL_ART_directive_115 = 667;
public static final int ARTL_ART_directive_116 = 668;
public static final int ARTL_ART_directive_117 = 669;
public static final int ARTL_ART_directive_118 = 670;
public static final int ARTL_ART_directive_119 = 671;
public static final int ARTL_ART_directive_120 = 672;
public static final int ARTL_ART_directive_123 = 673;
public static final int ARTL_ART_directive_124 = 674;
public static final int ARTL_ART_directive_125 = 675;
public static final int ARTL_ART_directive_126 = 676;
public static final int ARTL_ART_directive_127 = 677;
public static final int ARTL_ART_directive_128 = 678;
public static final int ARTL_ART_directive_131 = 679;
public static final int ARTL_ART_directive_132 = 680;
public static final int ARTL_ART_directive_133 = 681;
public static final int ARTL_ART_directive_134 = 682;
public static final int ARTL_ART_directive_135 = 683;
public static final int ARTL_ART_directive_136 = 684;
public static final int ARTL_ART_directive_139 = 685;
public static final int ARTL_ART_directive_140 = 686;
public static final int ARTL_ART_directive_141 = 687;
public static final int ARTL_ART_directive_142 = 688;
public static final int ARTL_ART_directive_143 = 689;
public static final int ARTL_ART_directive_144 = 690;
public static final int ARTL_ART_directive_147 = 691;
public static final int ARTL_ART_directive_148 = 692;
public static final int ARTL_ART_directive_149 = 693;
public static final int ARTL_ART_directive_150 = 694;
public static final int ARTL_ART_directive_151 = 695;
public static final int ARTL_ART_directive_152 = 696;
public static final int ARTL_ART_directive_155 = 697;
public static final int ARTL_ART_directive_156 = 698;
public static final int ARTL_ART_directive_157 = 699;
public static final int ARTL_ART_directive_158 = 700;
public static final int ARTL_ART_directive_159 = 701;
public static final int ARTL_ART_directive_160 = 702;
public static final int ARTL_ART_directive_163 = 703;
public static final int ARTL_ART_directive_164 = 704;
public static final int ARTL_ART_directive_165 = 705;
public static final int ARTL_ART_directive_166 = 706;
public static final int ARTL_ART_directive_167 = 707;
public static final int ARTL_ART_directive_168 = 708;
public static final int ARTL_ART_directive_171 = 709;
public static final int ARTL_ART_directive_172 = 710;
public static final int ARTL_ART_directive_173 = 711;
public static final int ARTL_ART_directive_174 = 712;
public static final int ARTL_ART_directive_175 = 713;
public static final int ARTL_ART_directive_176 = 714;
public static final int ARTL_ART_directive_179 = 715;
public static final int ARTL_ART_directive_180 = 716;
public static final int ARTL_ART_directive_181 = 717;
public static final int ARTL_ART_directive_182 = 718;
public static final int ARTL_ART_directive_183 = 719;
public static final int ARTL_ART_directive_184 = 720;
public static final int ARTL_ART_directive_187 = 721;
public static final int ARTL_ART_directive_188 = 722;
public static final int ARTL_ART_directive_189 = 723;
public static final int ARTL_ART_directive_190 = 724;
public static final int ARTL_ART_directive_191 = 725;
public static final int ARTL_ART_directive_192 = 726;
public static final int ARTL_ART_directive_195 = 727;
public static final int ARTL_ART_directive_196 = 728;
public static final int ARTL_ART_directive_197 = 729;
public static final int ARTL_ART_directive_198 = 730;
public static final int ARTL_ART_directive_199 = 731;
public static final int ARTL_ART_directive_200 = 732;
public static final int ARTL_ART_directive_203 = 733;
public static final int ARTL_ART_directive_204 = 734;
public static final int ARTL_ART_directive_205 = 735;
public static final int ARTL_ART_directive_206 = 736;
public static final int ARTL_ART_directive_207 = 737;
public static final int ARTL_ART_directive_208 = 738;
public static final int ARTL_ART_directive_211 = 739;
public static final int ARTL_ART_directive_212 = 740;
public static final int ARTL_ART_directive_213 = 741;
public static final int ARTL_ART_directive_214 = 742;
public static final int ARTL_ART_directive_215 = 743;
public static final int ARTL_ART_directive_216 = 744;
public static final int ARTL_ART_directive_219 = 745;
public static final int ARTL_ART_directive_220 = 746;
public static final int ARTL_ART_directive_221 = 747;
public static final int ARTL_ART_directive_222 = 748;
public static final int ARTL_ART_directive_223 = 749;
public static final int ARTL_ART_directive_224 = 750;
public static final int ARTL_ART_directive_227 = 751;
public static final int ARTL_ART_directive_228 = 752;
public static final int ARTL_ART_directive_229 = 753;
public static final int ARTL_ART_directive_230 = 754;
public static final int ARTL_ART_directive_231 = 755;
public static final int ARTL_ART_directive_232 = 756;
public static final int ARTL_ART_directive_235 = 757;
public static final int ARTL_ART_directive_236 = 758;
public static final int ARTL_ART_directive_237 = 759;
public static final int ARTL_ART_directive_238 = 760;
public static final int ARTL_ART_directive_239 = 761;
public static final int ARTL_ART_directive_240 = 762;
public static final int ARTL_ART_directive_243 = 763;
public static final int ARTL_ART_directive_244 = 764;
public static final int ARTL_ART_directive_245 = 765;
public static final int ARTL_ART_directive_246 = 766;
public static final int ARTL_ART_directive_247 = 767;
public static final int ARTL_ART_directive_248 = 768;
public static final int ARTL_ART_directive_251 = 769;
public static final int ARTL_ART_directive_252 = 770;
public static final int ARTL_ART_directive_253 = 771;
public static final int ARTL_ART_directive_254 = 772;
public static final int ARTL_ART_directive_255 = 773;
public static final int ARTL_ART_directive_256 = 774;
public static final int ARTL_ART_directive_259 = 775;
public static final int ARTL_ART_directive_260 = 776;
public static final int ARTL_ART_directive_261 = 777;
public static final int ARTL_ART_directive_262 = 778;
public static final int ARTL_ART_directive_263 = 779;
public static final int ARTL_ART_directive_264 = 780;
public static final int ARTL_ART_directive_267 = 781;
public static final int ARTL_ART_directive_268 = 782;
public static final int ARTL_ART_directive_269 = 783;
public static final int ARTL_ART_directive_270 = 784;
public static final int ARTL_ART_directive_271 = 785;
public static final int ARTL_ART_directive_272 = 786;
public static final int ARTL_ART_directive_275 = 787;
public static final int ARTL_ART_directive_276 = 788;
public static final int ARTL_ART_directive_277 = 789;
public static final int ARTL_ART_directive_278 = 790;
public static final int ARTL_ART_directive_279 = 791;
public static final int ARTL_ART_directive_280 = 792;
public static final int ARTL_ART_directive_283 = 793;
public static final int ARTL_ART_directive_284 = 794;
public static final int ARTL_ART_directive_285 = 795;
public static final int ARTL_ART_directive_286 = 796;
public static final int ARTL_ART_directive_287 = 797;
public static final int ARTL_ART_directive_288 = 798;
public static final int ARTL_ART_directive_291 = 799;
public static final int ARTL_ART_directive_292 = 800;
public static final int ARTL_ART_directive_293 = 801;
public static final int ARTL_ART_directive_294 = 802;
public static final int ARTL_ART_directive_295 = 803;
public static final int ARTL_ART_directive_296 = 804;
public static final int ARTL_ART_directive_299 = 805;
public static final int ARTL_ART_directive_300 = 806;
public static final int ARTL_ART_directive_301 = 807;
public static final int ARTL_ART_directive_302 = 808;
public static final int ARTL_ART_directive_303 = 809;
public static final int ARTL_ART_directive_304 = 810;
public static final int ARTL_ART_directive_307 = 811;
public static final int ARTL_ART_directive_308 = 812;
public static final int ARTL_ART_directive_309 = 813;
public static final int ARTL_ART_directive_310 = 814;
public static final int ARTL_ART_directive_311 = 815;
public static final int ARTL_ART_directive_312 = 816;
public static final int ARTL_ART_directive_315 = 817;
public static final int ARTL_ART_directive_316 = 818;
public static final int ARTL_ART_directive_317 = 819;
public static final int ARTL_ART_directive_318 = 820;
public static final int ARTL_ART_directive_319 = 821;
public static final int ARTL_ART_directive_320 = 822;
public static final int ARTL_ART_directive_323 = 823;
public static final int ARTL_ART_directive_324 = 824;
public static final int ARTL_ART_directive_325 = 825;
public static final int ARTL_ART_directive_326 = 826;
public static final int ARTL_ART_directive_327 = 827;
public static final int ARTL_ART_directive_328 = 828;
public static final int ARTL_ART_directive_331 = 829;
public static final int ARTL_ART_directive_332 = 830;
public static final int ARTL_ART_directive_333 = 831;
public static final int ARTL_ART_directive_334 = 832;
public static final int ARTL_ART_directive_335 = 833;
public static final int ARTL_ART_directive_336 = 834;
public static final int ARTL_ART_directive_339 = 835;
public static final int ARTL_ART_directive_340 = 836;
public static final int ARTL_ART_directive_341 = 837;
public static final int ARTL_ART_directive_342 = 838;
public static final int ARTL_ART_directive_343 = 839;
public static final int ARTL_ART_directive_344 = 840;
public static final int ARTL_ART_directive_347 = 841;
public static final int ARTL_ART_directive_348 = 842;
public static final int ARTL_ART_directive_349 = 843;
public static final int ARTL_ART_directive_350 = 844;
public static final int ARTL_ART_directive_351 = 845;
public static final int ARTL_ART_directive_352 = 846;
public static final int ARTL_ART_directive_355 = 847;
public static final int ARTL_ART_directive_356 = 848;
public static final int ARTL_ART_directive_357 = 849;
public static final int ARTL_ART_directive_358 = 850;
public static final int ARTL_ART_directive_361 = 851;
public static final int ARTL_ART_directive_362 = 852;
public static final int ARTL_ART_directive_363 = 853;
public static final int ARTL_ART_directive_364 = 854;
public static final int ARTL_ART_directive_367 = 855;
public static final int ARTL_ART_directive_368 = 856;
public static final int ARTL_ART_directive_369 = 857;
public static final int ARTL_ART_directive_370 = 858;
public static final int ARTL_ART_directive_373 = 859;
public static final int ARTL_ART_directive_374 = 860;
public static final int ARTL_ART_directive_375 = 861;
public static final int ARTL_ART_directive_376 = 862;
public static final int ARTL_ART_directive_379 = 863;
public static final int ARTL_ART_directive_380 = 864;
public static final int ARTL_ART_directive_381 = 865;
public static final int ARTL_ART_directive_382 = 866;
public static final int ARTL_ART_directive_385 = 867;
public static final int ARTL_ART_directive_386 = 868;
public static final int ARTL_ART_directive_387 = 869;
public static final int ARTL_ART_directive_388 = 870;
public static final int ARTL_ART_directive_389 = 871;
public static final int ARTL_ART_directive_390 = 872;
public static final int ARTL_ART_directive_393 = 873;
public static final int ARTL_ART_directive_394 = 874;
public static final int ARTL_ART_directive_395 = 875;
public static final int ARTL_ART_directive_396 = 876;
public static final int ARTL_ART_directive_397 = 877;
public static final int ARTL_ART_directive_398 = 878;
public static final int ARTL_ART_directive_401 = 879;
public static final int ARTL_ART_directive_402 = 880;
public static final int ARTL_ART_directive_403 = 881;
public static final int ARTL_ART_directive_404 = 882;
public static final int ARTL_ART_directive_405 = 883;
public static final int ARTL_ART_directive_406 = 884;
public static final int ARTL_ART_directive_409 = 885;
public static final int ARTL_ART_directive_410 = 886;
public static final int ARTL_ART_directive_411 = 887;
public static final int ARTL_ART_directive_412 = 888;
public static final int ARTL_ART_directive_413 = 889;
public static final int ARTL_ART_directive_414 = 890;
public static final int ARTL_ART_directive_417 = 891;
public static final int ARTL_ART_directive_418 = 892;
public static final int ARTL_ART_directive_419 = 893;
public static final int ARTL_ART_directive_420 = 894;
public static final int ARTL_ART_directive_421 = 895;
public static final int ARTL_ART_directive_422 = 896;
public static final int ARTL_ART_directive_425 = 897;
public static final int ARTL_ART_directive_426 = 898;
public static final int ARTL_ART_directive_427 = 899;
public static final int ARTL_ART_directive_428 = 900;
public static final int ARTL_ART_directive_429 = 901;
public static final int ARTL_ART_directive_430 = 902;
public static final int ARTL_ART_directive_433 = 903;
public static final int ARTL_ART_directive_434 = 904;
public static final int ARTL_ART_directive_435 = 905;
public static final int ARTL_ART_directive_436 = 906;
public static final int ARTL_ART_directive_439 = 907;
public static final int ARTL_ART_directive_440 = 908;
public static final int ARTL_ART_directive_441 = 909;
public static final int ARTL_ART_directive_442 = 910;
public static final int ARTL_ART_directive_445 = 911;
public static final int ARTL_ART_directive_446 = 912;
public static final int ARTL_ART_directive_447 = 913;
public static final int ARTL_ART_directive_448 = 914;
public static final int ARTL_ART_directive_451 = 915;
public static final int ARTL_ART_directive_452 = 916;
public static final int ARTL_ART_directive_453 = 917;
public static final int ARTL_ART_directive_454 = 918;
public static final int ARTL_ART_directive_457 = 919;
public static final int ARTL_ART_directive_458 = 920;
public static final int ARTL_ART_directive_459 = 921;
public static final int ARTL_ART_directive_460 = 922;
public static final int ARTL_ART_directive_463 = 923;
public static final int ARTL_ART_directive_464 = 924;
public static final int ARTL_ART_directive_465 = 925;
public static final int ARTL_ART_directive_466 = 926;
public static final int ARTL_ART_directive_469 = 927;
public static final int ARTL_ART_directive_470 = 928;
public static final int ARTL_ART_directive_471 = 929;
public static final int ARTL_ART_directive_472 = 930;
public static final int ARTL_ART_directive_475 = 931;
public static final int ARTL_ART_directive_476 = 932;
public static final int ARTL_ART_directive_477 = 933;
public static final int ARTL_ART_directive_478 = 934;
public static final int ARTL_ART_directive_481 = 935;
public static final int ARTL_ART_directive_482 = 936;
public static final int ARTL_ART_directive_483 = 937;
public static final int ARTL_ART_directive_484 = 938;
public static final int ARTL_ART_directive_487 = 939;
public static final int ARTL_ART_directive_488 = 940;
public static final int ARTL_ART_directive_489 = 941;
public static final int ARTL_ART_directive_490 = 942;
public static final int ARTL_ART_directive_493 = 943;
public static final int ARTL_ART_directive_494 = 944;
public static final int ARTL_ART_directive_495 = 945;
public static final int ARTL_ART_directive_496 = 946;
public static final int ARTL_ART_directive_499 = 947;
public static final int ARTL_ART_directive_500 = 948;
public static final int ARTL_ART_directive_501 = 949;
public static final int ARTL_ART_directive_502 = 950;
public static final int ARTL_ART_directive_505 = 951;
public static final int ARTL_ART_directive_506 = 952;
public static final int ARTL_ART_directive_507 = 953;
public static final int ARTL_ART_directive_508 = 954;
public static final int ARTL_ART_directive_511 = 955;
public static final int ARTL_ART_directive_512 = 956;
public static final int ARTL_ART_directive_513 = 957;
public static final int ARTL_ART_directive_514 = 958;
public static final int ARTL_ART_directive_517 = 959;
public static final int ARTL_ART_directive_518 = 960;
public static final int ARTL_ART_directive_519 = 961;
public static final int ARTL_ART_directive_520 = 962;
public static final int ARTL_ART_directive_523 = 963;
public static final int ARTL_ART_directive_524 = 964;
public static final int ARTL_ART_directive_525 = 965;
public static final int ARTL_ART_directive_526 = 966;
public static final int ARTL_ART_directive_529 = 967;
public static final int ARTL_ART_directive_530 = 968;
public static final int ARTL_ART_directive_531 = 969;
public static final int ARTL_ART_directive_532 = 970;
public static final int ARTL_ART_directive_535 = 971;
public static final int ARTL_ART_directive_536 = 972;
public static final int ARTL_ART_directive_537 = 973;
public static final int ARTL_ART_directive_538 = 974;
public static final int ARTL_ART_directive_541 = 975;
public static final int ARTL_ART_directive_542 = 976;
public static final int ARTL_ART_directive_543 = 977;
public static final int ARTL_ART_directive_544 = 978;
public static final int ARTL_ART_directive_547 = 979;
public static final int ARTL_ART_directive_548 = 980;
public static final int ARTL_ART_directive_549 = 981;
public static final int ARTL_ART_directive_550 = 982;
public static final int ARTL_ART_directive_553 = 983;
public static final int ARTL_ART_directive_554 = 984;
public static final int ARTL_ART_directive_555 = 985;
public static final int ARTL_ART_directive_556 = 986;
public static final int ARTL_ART_directive_559 = 987;
public static final int ARTL_ART_directive_560 = 988;
public static final int ARTL_ART_directive_561 = 989;
public static final int ARTL_ART_directive_562 = 990;
public static final int ARTL_ART_directive_565 = 991;
public static final int ARTL_ART_directive_566 = 992;
public static final int ARTL_ART_directive_567 = 993;
public static final int ARTL_ART_directive_568 = 994;
public static final int ARTL_ART_directive_571 = 995;
public static final int ARTL_ART_directive_572 = 996;
public static final int ARTL_ART_directive_573 = 997;
public static final int ARTL_ART_directive_574 = 998;
public static final int ARTL_ART_directive_577 = 999;
public static final int ARTL_ART_directive_578 = 1000;
public static final int ARTL_ART_directive_579 = 1001;
public static final int ARTL_ART_directive_580 = 1002;
public static final int ARTL_ART_directive_583 = 1003;
public static final int ARTL_ART_directive_584 = 1004;
public static final int ARTL_ART_directive_585 = 1005;
public static final int ARTL_ART_directive_586 = 1006;
public static final int ARTL_ART_directive_589 = 1007;
public static final int ARTL_ART_directive_590 = 1008;
public static final int ARTL_ART_directive_591 = 1009;
public static final int ARTL_ART_directive_592 = 1010;
public static final int ARTL_ART_directive_595 = 1011;
public static final int ARTL_ART_directive_596 = 1012;
public static final int ARTL_ART_directive_597 = 1013;
public static final int ARTL_ART_directive_598 = 1014;
public static final int ARTL_ART_directive_601 = 1015;
public static final int ARTL_ART_directive_602 = 1016;
public static final int ARTL_ART_directive_603 = 1017;
public static final int ARTL_ART_directive_604 = 1018;
public static final int ARTL_ART_directive_607 = 1019;
public static final int ARTL_ART_directive_608 = 1020;
public static final int ARTL_ART_directive_609 = 1021;
public static final int ARTL_ART_directive_610 = 1022;
public static final int ARTL_ART_directive_613 = 1023;
public static final int ARTL_ART_directive_614 = 1024;
public static final int ARTL_ART_directive_615 = 1025;
public static final int ARTL_ART_directive_616 = 1026;
public static final int ARTL_ART_directive_619 = 1027;
public static final int ARTL_ART_directive_620 = 1028;
public static final int ARTL_ART_directive_621 = 1029;
public static final int ARTL_ART_directive_622 = 1030;
public static final int ARTL_ART_element1_1301 = 1031;
public static final int ARTL_ART_element1_1302 = 1032;
public static final int ARTL_ART_element1_1303 = 1033;
public static final int ARTL_ART_element1_1304 = 1034;
public static final int ARTL_ART_element1_1305 = 1035;
public static final int ARTL_ART_element1_1306 = 1036;
public static final int ARTL_ART_element1_1307 = 1037;
public static final int ARTL_ART_element1_1308 = 1038;
public static final int ARTL_ART_element1_1311 = 1039;
public static final int ARTL_ART_element1_1312 = 1040;
public static final int ARTL_ART_element1_1313 = 1041;
public static final int ARTL_ART_element1_1314 = 1042;
public static final int ARTL_ART_element1_1315 = 1043;
public static final int ARTL_ART_element1_1316 = 1044;
public static final int ARTL_ART_element1_1317 = 1045;
public static final int ARTL_ART_element1_1318 = 1046;
public static final int ARTL_ART_element1_1319 = 1047;
public static final int ARTL_ART_element1_1320 = 1048;
public static final int ARTL_ART_element1_1321 = 1049;
public static final int ARTL_ART_element1_1322 = 1050;
public static final int ARTL_ART_element1_1323 = 1051;
public static final int ARTL_ART_element1_1324 = 1052;
public static final int ARTL_ART_element1_1325 = 1053;
public static final int ARTL_ART_element1_1326 = 1054;
public static final int ARTL_ART_element1_1327 = 1055;
public static final int ARTL_ART_element1_1328 = 1056;
public static final int ARTL_ART_element1_1329 = 1057;
public static final int ARTL_ART_element1_1330 = 1058;
public static final int ARTL_ART_element1_1331 = 1059;
public static final int ARTL_ART_element1_1332 = 1060;
public static final int ARTL_ART_element1_1333 = 1061;
public static final int ARTL_ART_element1_1334 = 1062;
public static final int ARTL_ART_element1_1335 = 1063;
public static final int ARTL_ART_element1_1336 = 1064;
public static final int ARTL_ART_element1_1337 = 1065;
public static final int ARTL_ART_element1_1338 = 1066;
public static final int ARTL_ART_element1_1339 = 1067;
public static final int ARTL_ART_element1_1340 = 1068;
public static final int ARTL_ART_element1_1343 = 1069;
public static final int ARTL_ART_element1_1344 = 1070;
public static final int ARTL_ART_element1_1345 = 1071;
public static final int ARTL_ART_element1_1346 = 1072;
public static final int ARTL_ART_element1_1347 = 1073;
public static final int ARTL_ART_element1_1348 = 1074;
public static final int ARTL_ART_element1_1349 = 1075;
public static final int ARTL_ART_element1_1350 = 1076;
public static final int ARTL_ART_element1_1351 = 1077;
public static final int ARTL_ART_element1_1352 = 1078;
public static final int ARTL_ART_element1_1353 = 1079;
public static final int ARTL_ART_element1_1354 = 1080;
public static final int ARTL_ART_element1_1355 = 1081;
public static final int ARTL_ART_element1_1356 = 1082;
public static final int ARTL_ART_element1_1357 = 1083;
public static final int ARTL_ART_element1_1358 = 1084;
public static final int ARTL_ART_element1_1359 = 1085;
public static final int ARTL_ART_element1_1360 = 1086;
public static final int ARTL_ART_element1_1361 = 1087;
public static final int ARTL_ART_element1_1362 = 1088;
public static final int ARTL_ART_element1_1363 = 1089;
public static final int ARTL_ART_element1_1364 = 1090;
public static final int ARTL_ART_element1_1365 = 1091;
public static final int ARTL_ART_element1_1366 = 1092;
public static final int ARTL_ART_element1_1367 = 1093;
public static final int ARTL_ART_element1_1368 = 1094;
public static final int ARTL_ART_element1_1369 = 1095;
public static final int ARTL_ART_element1_1370 = 1096;
public static final int ARTL_ART_element1_1371 = 1097;
public static final int ARTL_ART_element1_1372 = 1098;
public static final int ARTL_ART_element1_1373 = 1099;
public static final int ARTL_ART_element1_1374 = 1100;
public static final int ARTL_ART_element1_1375 = 1101;
public static final int ARTL_ART_element1_1376 = 1102;
public static final int ARTL_ART_element1_1377 = 1103;
public static final int ARTL_ART_element1_1378 = 1104;
public static final int ARTL_ART_element1_1379 = 1105;
public static final int ARTL_ART_element1_1380 = 1106;
public static final int ARTL_ART_element1_1381 = 1107;
public static final int ARTL_ART_element1_1382 = 1108;
public static final int ARTL_ART_elementUpdater_809 = 1109;
public static final int ARTL_ART_elementUpdater_810 = 1110;
public static final int ARTL_ART_elementUpdater_811 = 1111;
public static final int ARTL_ART_elementUpdater_812 = 1112;
public static final int ARTL_ART_elementUpdater_815 = 1113;
public static final int ARTL_ART_elementUpdater_816 = 1114;
public static final int ARTL_ART_elementUpdater_817 = 1115;
public static final int ARTL_ART_elementUpdater_818 = 1116;
public static final int ARTL_ART_elementUpdater_821 = 1117;
public static final int ARTL_ART_elementUpdater_822 = 1118;
public static final int ARTL_ART_elementUpdater_823 = 1119;
public static final int ARTL_ART_elementUpdater_824 = 1120;
public static final int ARTL_ART_elementUpdater_827 = 1121;
public static final int ARTL_ART_elementUpdater_828 = 1122;
public static final int ARTL_ART_elementUpdater_829 = 1123;
public static final int ARTL_ART_elementUpdater_830 = 1124;
public static final int ARTL_ART_elementUpdater_833 = 1125;
public static final int ARTL_ART_elementUpdater_834 = 1126;
public static final int ARTL_ART_elementUpdater_835 = 1127;
public static final int ARTL_ART_elementUpdater_836 = 1128;
public static final int ARTL_ART_elementUpdater_839 = 1129;
public static final int ARTL_ART_elementUpdater_840 = 1130;
public static final int ARTL_ART_elementUpdater_841 = 1131;
public static final int ARTL_ART_elementUpdater_842 = 1132;
public static final int ARTL_ART_elementUpdater_845 = 1133;
public static final int ARTL_ART_elementUpdater_846 = 1134;
public static final int ARTL_ART_elementUpdater_847 = 1135;
public static final int ARTL_ART_elementUpdater_848 = 1136;
public static final int ARTL_ART_elementUpdaters_645 = 1137;
public static final int ARTL_ART_elementUpdaters_646 = 1138;
public static final int ARTL_ART_elementUpdaters_647 = 1139;
public static final int ARTL_ART_elementUpdaters_648 = 1140;
public static final int ARTL_ART_elementUpdaters_649 = 1141;
public static final int ARTL_ART_elementUpdaters_650 = 1142;
public static final int ARTL_ART_elementUpdaters_651 = 1143;
public static final int ARTL_ART_elementUpdaters_652 = 1144;
public static final int ARTL_ART_elementUpdaters_653 = 1145;
public static final int ARTL_ART_elementUpdaters_654 = 1146;
public static final int ARTL_ART_elementUpdaters_655 = 1147;
public static final int ARTL_ART_elementUpdaters_656 = 1148;
public static final int ARTL_ART_epsilon_851 = 1149;
public static final int ARTL_ART_epsilon_852 = 1150;
public static final int ARTL_ART_epsilon_853 = 1151;
public static final int ARTL_ART_epsilon_854 = 1152;
public static final int ARTL_ART_fold_1415 = 1153;
public static final int ARTL_ART_fold_1416 = 1154;
public static final int ARTL_ART_fold_1417 = 1155;
public static final int ARTL_ART_fold_1418 = 1156;
public static final int ARTL_ART_fold_1419 = 1157;
public static final int ARTL_ART_fold_1420 = 1158;
public static final int ARTL_ART_fold_1421 = 1159;
public static final int ARTL_ART_fold_1422 = 1160;
public static final int ARTL_ART_fold_1423 = 1161;
public static final int ARTL_ART_fold_1424 = 1162;
public static final int ARTL_ART_fold_1425 = 1163;
public static final int ARTL_ART_fold_1426 = 1164;
public static final int ARTL_ART_fold_1427 = 1165;
public static final int ARTL_ART_fold_1428 = 1166;
public static final int ARTL_ART_fold_1429 = 1167;
public static final int ARTL_ART_fold_1430 = 1168;
public static final int ARTL_ART_grammarRule_625 = 1169;
public static final int ARTL_ART_grammarRule_626 = 1170;
public static final int ARTL_ART_grammarRule_627 = 1171;
public static final int ARTL_ART_grammarRule_628 = 1172;
public static final int ARTL_ART_grammarRule_631 = 1173;
public static final int ARTL_ART_grammarRule_632 = 1174;
public static final int ARTL_ART_grammarRule_633 = 1175;
public static final int ARTL_ART_grammarRule_634 = 1176;
public static final int ARTL_ART_grammarRule_637 = 1177;
public static final int ARTL_ART_grammarRule_638 = 1178;
public static final int ARTL_ART_insertionName_1443 = 1179;
public static final int ARTL_ART_insertionName_1444 = 1180;
public static final int ARTL_ART_insertionName_1445 = 1181;
public static final int ARTL_ART_insertionName_1446 = 1182;
public static final int ARTL_ART_insertionName_1447 = 1183;
public static final int ARTL_ART_insertionName_1448 = 1184;
public static final int ARTL_ART_iter_1255 = 1185;
public static final int ARTL_ART_iter_1256 = 1186;
public static final int ARTL_ART_iter_1257 = 1187;
public static final int ARTL_ART_iter_1258 = 1188;
public static final int ARTL_ART_iter_1259 = 1189;
public static final int ARTL_ART_iter_1260 = 1190;
public static final int ARTL_ART_iter_1261 = 1191;
public static final int ARTL_ART_iter_1262 = 1192;
public static final int ARTL_ART_iter_1263 = 1193;
public static final int ARTL_ART_iter_1264 = 1194;
public static final int ARTL_ART_iter_1265 = 1195;
public static final int ARTL_ART_iter_1266 = 1196;
public static final int ARTL_ART_name_1405 = 1197;
public static final int ARTL_ART_name_1406 = 1198;
public static final int ARTL_ART_name_1407 = 1199;
public static final int ARTL_ART_name_1408 = 1200;
public static final int ARTL_ART_name_1409 = 1201;
public static final int ARTL_ART_name_1410 = 1202;
public static final int ARTL_ART_nonterminal_657 = 1203;
public static final int ARTL_ART_nonterminal_658 = 1204;
public static final int ARTL_ART_nonterminal_659 = 1205;
public static final int ARTL_ART_nonterminal_660 = 1206;
public static final int ARTL_ART_nonterminal_663 = 1207;
public static final int ARTL_ART_nonterminal_664 = 1208;
public static final int ARTL_ART_nonterminal_665 = 1209;
public static final int ARTL_ART_nonterminal_666 = 1210;
public static final int ARTL_ART_not_1291 = 1211;
public static final int ARTL_ART_not_1292 = 1212;
public static final int ARTL_ART_not_1293 = 1213;
public static final int ARTL_ART_not_1294 = 1214;
public static final int ARTL_ART_not_1295 = 1215;
public static final int ARTL_ART_not_1296 = 1216;
public static final int ARTL_ART_not_1297 = 1217;
public static final int ARTL_ART_not_1298 = 1218;
public static final int ARTL_ART_not_1299 = 1219;
public static final int ARTL_ART_not_1300 = 1220;
public static final int ARTL_ART_paraterminalisers_681 = 1221;
public static final int ARTL_ART_paraterminalisers_682 = 1222;
public static final int ARTL_ART_paraterminalisers_683 = 1223;
public static final int ARTL_ART_paraterminalisers_684 = 1224;
public static final int ARTL_ART_paraterminalisers_687 = 1225;
public static final int ARTL_ART_paraterminalisers_688 = 1226;
public static final int ARTL_ART_paraterminalisers_689 = 1227;
public static final int ARTL_ART_paraterminalisers_690 = 1228;
public static final int ARTL_ART_paraterminalisers_693 = 1229;
public static final int ARTL_ART_paraterminalisers_694 = 1230;
public static final int ARTL_ART_paraterminalisers_695 = 1231;
public static final int ARTL_ART_paraterminalisers_696 = 1232;
public static final int ARTL_ART_paraterminalisers_697 = 1233;
public static final int ARTL_ART_paraterminalisers_698 = 1234;
public static final int ARTL_ART_paraterminalisers_699 = 1235;
public static final int ARTL_ART_paraterminalisers_700 = 1236;
public static final int ARTL_ART_paraterminalisers_703 = 1237;
public static final int ARTL_ART_paraterminalisers_704 = 1238;
public static final int ARTL_ART_paraterminalisers_705 = 1239;
public static final int ARTL_ART_paraterminalisers_706 = 1240;
public static final int ARTL_ART_paraterminalisers_709 = 1241;
public static final int ARTL_ART_paraterminalisers_710 = 1242;
public static final int ARTL_ART_paraterminalisers_711 = 1243;
public static final int ARTL_ART_paraterminalisers_712 = 1244;
public static final int ARTL_ART_paraterminalisers_715 = 1245;
public static final int ARTL_ART_paraterminalisers_716 = 1246;
public static final int ARTL_ART_paraterminalisers_717 = 1247;
public static final int ARTL_ART_paraterminalisers_718 = 1248;
public static final int ARTL_ART_paraterminalisers_721 = 1249;
public static final int ARTL_ART_paraterminalisers_722 = 1250;
public static final int ARTL_ART_paraterminalisers_723 = 1251;
public static final int ARTL_ART_paraterminalisers_724 = 1252;
public static final int ARTL_ART_rhs_725 = 1253;
public static final int ARTL_ART_rhs_726 = 1254;
public static final int ARTL_ART_rhs_727 = 1255;
public static final int ARTL_ART_rhs_728 = 1256;
public static final int ARTL_ART_rhs_731 = 1257;
public static final int ARTL_ART_rhs_732 = 1258;
public static final int ARTL_ART_rhs_733 = 1259;
public static final int ARTL_ART_rhs_734 = 1260;
public static final int ARTL_ART_rhs_737 = 1261;
public static final int ARTL_ART_rhs_738 = 1262;
public static final int ARTL_ART_rhs_741 = 1263;
public static final int ARTL_ART_rhs_742 = 1264;
public static final int ARTL_ART_slot_1205 = 1265;
public static final int ARTL_ART_slot_1206 = 1266;
public static final int ARTL_ART_slot_1207 = 1267;
public static final int ARTL_ART_slot_1208 = 1268;
public static final int ARTL_ART_slot_1209 = 1269;
public static final int ARTL_ART_slot_1210 = 1270;
public static final int ARTL_ART_slot_1211 = 1271;
public static final int ARTL_ART_slot_1212 = 1272;
public static final int ARTL_ART_text_1 = 1273;
public static final int ARTL_ART_text_2 = 1274;
public static final int ARTL_ART_text_5 = 1275;
public static final int ARTL_ART_text_6 = 1276;
public static final int ARTL_ART_textElement_17 = 1277;
public static final int ARTL_ART_textElement_18 = 1278;
public static final int ARTL_ART_textElement_19 = 1279;
public static final int ARTL_ART_textElement_20 = 1280;
public static final int ARTL_ART_textElement_21 = 1281;
public static final int ARTL_ART_textElement_22 = 1282;
public static final int ARTL_ART_textElement_23 = 1283;
public static final int ARTL_ART_textElement_24 = 1284;
public static final int ARTL_ART_textElement_25 = 1285;
public static final int ARTL_ART_textElement_26 = 1286;
public static final int ARTL_ART_textElements_7 = 1287;
public static final int ARTL_ART_textElements_8 = 1288;
public static final int ARTL_ART_textElements_9 = 1289;
public static final int ARTL_ART_textElements_10 = 1290;
public static final int ARTL_ART_textElements_11 = 1291;
public static final int ARTL_ART_textElements_12 = 1292;
public static final int ARTL_ART_textElements_13 = 1293;
public static final int ARTL_ART_textElements_14 = 1294;
public static final int ARTL_ART_textElements_15 = 1295;
public static final int ARTL_ART_textElements_16 = 1296;
public static final int ARTL_ART_trueFalse_769 = 1297;
public static final int ARTL_ART_trueFalse_770 = 1298;
public static final int ARTL_ART_trueFalse_771 = 1299;
public static final int ARTL_ART_trueFalse_772 = 1300;
public static final int ARTL_ART_trueFalse_775 = 1301;
public static final int ARTL_ART_trueFalse_776 = 1302;
public static final int ARTL_ART_trueFalse_777 = 1303;
public static final int ARTL_ART_trueFalse_778 = 1304;
public static final int ARTL_ART_trueFalse_781 = 1305;
public static final int ARTL_ART_trueFalse_782 = 1306;
public static final int ARTL_ART_trueFalse_783 = 1307;
public static final int ARTL_ART_trueFalse_784 = 1308;
public static final int ARTL_ART_trueFalse_787 = 1309;
public static final int ARTL_ART_trueFalse_788 = 1310;
public static final int ARTL_ART_trueFalse_789 = 1311;
public static final int ARTL_ART_trueFalse_790 = 1312;
public static final int ARTL_ART_trueFalse_791 = 1313;
public static final int ARTL_ART_trueFalse_792 = 1314;
public static final int ARTL_ART_trueFalse_795 = 1315;
public static final int ARTL_ART_trueFalse_796 = 1316;
public static final int ARTL_ART_trueFalse_797 = 1317;
public static final int ARTL_ART_trueFalse_798 = 1318;
public static final int ARTL_ART_trueFalse_799 = 1319;
public static final int ARTL_ART_trueFalse_800 = 1320;
public static final int ARTL_ART_union_1279 = 1321;
public static final int ARTL_ART_union_1280 = 1322;
public static final int ARTL_ART_union_1281 = 1323;
public static final int ARTL_ART_union_1282 = 1324;
public static final int ARTL_ART_union_1283 = 1325;
public static final int ARTL_ART_union_1284 = 1326;
public static final int ARTL_ART_union_1285 = 1327;
public static final int ARTL_ART_union_1286 = 1328;
public static final int ARTL_ART_union_1287 = 1329;
public static final int ARTL_ART_union_1288 = 1330;
public static final int ARTL_ART_union_1289 = 1331;
public static final int ARTL_ART_union_1290 = 1332;
public static final int ARTL_ART_whitespacer_899 = 1333;
public static final int ARTL_ART_whitespacer_900 = 1334;
public static final int ARTL_ART_whitespacer_901 = 1335;
public static final int ARTL_ART_whitespacer_902 = 1336;
public static final int ARTL_ART_whitespacer_905 = 1337;
public static final int ARTL_ART_whitespacer_906 = 1338;
public static final int ARTL_ART_whitespacer_907 = 1339;
public static final int ARTL_ART_whitespacer_908 = 1340;
public static final int ARTL_ART_whitespacer_911 = 1341;
public static final int ARTL_ART_whitespacer_912 = 1342;
public static final int ARTL_ART_whitespacer_913 = 1343;
public static final int ARTL_ART_whitespacer_914 = 1344;
public static final int ARTL_ART_whitespacers_669 = 1345;
public static final int ARTL_ART_whitespacers_670 = 1346;
public static final int ARTL_ART_whitespacers_671 = 1347;
public static final int ARTL_ART_whitespacers_672 = 1348;
public static final int ARTL_ART_whitespacers_673 = 1349;
public static final int ARTL_ART_whitespacers_674 = 1350;
public static final int ARTL_ART_whitespacers_675 = 1351;
public static final int ARTL_ART_whitespacers_676 = 1352;
public static final int ARTL_ART_whitespacers_677 = 1353;
public static final int ARTL_ART_whitespacers_678 = 1354;
public static final int ARTL_ART_whitespacers_679 = 1355;
public static final int ARTL_ART_whitespacers_680 = 1356;
public static final int ARTX_DESPATCH = 1357;
public static final int ARTX_DUMMY = 1358;
public static final int ARTX_LABEL_EXTENT = 1359;
/* End of artLabel enumeration */

/* Start of artName enumeration */
public static final int ARTNAME_NONE = 0;
public static final int ARTNAME_EXTENT = 1;
/* End of artName enumeration */
public void ARTPF_ART_BOOLEAN() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal BOOLEAN production descriptor loads*/
    case ARTL_ART_BOOLEAN: 
      if (ARTSet3[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_BOOLEAN_1478, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet5[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_BOOLEAN_1484, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal BOOLEAN: match production*/
    case ARTL_ART_BOOLEAN_1478: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_true, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_BOOLEAN_1480, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet1[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal BOOLEAN: match production*/
    case ARTL_ART_BOOLEAN_1484: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_false, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_BOOLEAN_1486, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet1[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_CHAR_BQ() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal CHAR_BQ production descriptor loads*/
    case ARTL_ART_CHAR_BQ: 
      if (ARTSet6[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_CHAR_BQ_1438, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal CHAR_BQ: match production*/
    case ARTL_ART_CHAR_BQ_1438: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTB_CHAR_BQ, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_CHAR_BQ_1440, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet7[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_ID() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal ID production descriptor loads*/
    case ARTL_ART_ID: 
      if (ARTSet8[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_ID_640, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal ID: match production*/
    case ARTL_ART_ID_640: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTB_ID, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_ID_642, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet9[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_INTEGER() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal INTEGER production descriptor loads*/
    case ARTL_ART_INTEGER: 
      if (ARTSet10[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_INTEGER_764, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal INTEGER: match production*/
    case ARTL_ART_INTEGER_764: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTB_INTEGER, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_INTEGER_766, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_REAL() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal REAL production descriptor loads*/
    case ARTL_ART_REAL: 
      if (ARTSet12[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_REAL_1490, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal REAL: match production*/
    case ARTL_ART_REAL_1490: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTB_REAL, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_REAL_1492, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet1[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_STRING_BRACE_NEST() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal STRING_BRACE_NEST production descriptor loads*/
    case ARTL_ART_STRING_BRACE_NEST: 
      if (ARTSet13[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_STRING_BRACE_NEST_758, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal STRING_BRACE_NEST: match production*/
    case ARTL_ART_STRING_BRACE_NEST_758: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTB_STRING_BRACE_NEST, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_STRING_BRACE_NEST_760, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet14[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_STRING_DOLLAR() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal STRING_DOLLAR production descriptor loads*/
    case ARTL_ART_STRING_DOLLAR: 
      if (ARTSet15[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_STRING_DOLLAR_1432, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal STRING_DOLLAR: match production*/
    case ARTL_ART_STRING_DOLLAR_1432: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTB_STRING_DOLLAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_STRING_DOLLAR_1434, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet16[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_STRING_DQ() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal STRING_DQ production descriptor loads*/
    case ARTL_ART_STRING_DQ: 
      if (ARTSet17[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_STRING_DQ_894, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal STRING_DQ: match production*/
    case ARTL_ART_STRING_DQ_894: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTB_STRING_DQ, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_STRING_DQ_896, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet18[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_STRING_PLAIN_SQ() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal STRING_PLAIN_SQ production descriptor loads*/
    case ARTL_ART_STRING_PLAIN_SQ: 
      if (ARTSet19[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_STRING_PLAIN_SQ_804, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal STRING_PLAIN_SQ: match production*/
    case ARTL_ART_STRING_PLAIN_SQ_804: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTB_STRING_PLAIN_SQ, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_STRING_PLAIN_SQ_806, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet18[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_TYPE() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal TYPE production descriptor loads*/
    case ARTL_ART_TYPE: 
      if (ARTSet20[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_TYPE_1170, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal TYPE: match production*/
    case ARTL_ART_TYPE_1170: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_TYPE_1172, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_TypeNest; return; }
    case ARTL_ART_TYPE_1172: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet21[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_TypeList() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal TypeList production descriptor loads*/
    case ARTL_ART_TypeList: 
      if (ARTSet20[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_TypeList_1466, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet20[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_TypeList_1470, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal TypeList: match production*/
    case ARTL_ART_TypeList_1466: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_TypeList_1468, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_TypeNest; return; }
    case ARTL_ART_TypeList_1468: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet22[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal TypeList: match production*/
    case ARTL_ART_TypeList_1470: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_TypeList_1472, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_TypeNest; return; }
    case ARTL_ART_TypeList_1472: 
      /* Nonterminal template end */
      if (!ARTSet23[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COMMA, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_TypeList_1474, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet24[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_TypeList_1476, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_TypeList; return; }
    case ARTL_ART_TypeList_1476: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet22[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_TypeNest() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal TypeNest production descriptor loads*/
    case ARTL_ART_TypeNest: 
      if (ARTSet8[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_TypeNest_1452, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet8[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_TypeNest_1456, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal TypeNest: match production*/
    case ARTL_ART_TypeNest_1452: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTB_ID, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_TypeNest_1454, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet25[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal TypeNest: match production*/
    case ARTL_ART_TypeNest_1456: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTB_ID, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_TypeNest_1458, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet26[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__LT, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_TypeNest_1460, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet24[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_TypeNest_1462, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_TypeList; return; }
    case ARTL_ART_TypeNest_1462: 
      /* Nonterminal template end */
      if (!ARTSet22[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__GT, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_TypeNest_1464, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet25[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_abbrev() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal abbrev production descriptor loads*/
    case ARTL_ART_abbrev: 
      if (ARTSet27[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_abbrev_1228, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet27[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_abbrev_1232, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet27[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_abbrev_1238, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet27[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_abbrev_1244, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal abbrev: match production*/
    case ARTL_ART_abbrev_1228: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_abbrev_1230, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_iter; return; }
    case ARTL_ART_abbrev_1230: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet28[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal abbrev: match production*/
    case ARTL_ART_abbrev_1232: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_abbrev_1234, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_iter; return; }
    case ARTL_ART_abbrev_1234: 
      /* Nonterminal template end */
      if (!ARTSet29[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__STAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_abbrev_1236, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet28[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal abbrev: match production*/
    case ARTL_ART_abbrev_1238: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_abbrev_1240, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_iter; return; }
    case ARTL_ART_abbrev_1240: 
      /* Nonterminal template end */
      if (!ARTSet30[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__PLUS, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_abbrev_1242, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet28[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal abbrev: match production*/
    case ARTL_ART_abbrev_1244: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_abbrev_1246, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_iter; return; }
    case ARTL_ART_abbrev_1246: 
      /* Nonterminal template end */
      if (!ARTSet31[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__QUERY, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_abbrev_1248, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet28[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_action() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal action production descriptor loads*/
    case ARTL_ART_action: 
      if (ARTSet32[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_action_1250, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal action: match production*/
    case ARTL_ART_action_1250: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_action_1252, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_STRING_BRACE_NEST; return; }
    case ARTL_ART_action_1252: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet14[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_alt() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal alt production descriptor loads*/
    case ARTL_ART_alt: 
      if (ARTSet33[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_alt_1182, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet33[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_alt_1186, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal alt: match production*/
    case ARTL_ART_alt_1182: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_alt_1184, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cat; return; }
    case ARTL_ART_alt_1184: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet34[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal alt: match production*/
    case ARTL_ART_alt_1186: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_alt_1188, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cat; return; }
    case ARTL_ART_alt_1188: 
      /* Nonterminal template end */
      if (!ARTSet35[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__BAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_alt_1190, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet36[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_alt_1192, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_alt1; return; }
    case ARTL_ART_alt_1192: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet34[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_alt1() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal alt1 production descriptor loads*/
    case ARTL_ART_alt1: 
      if (ARTSet33[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_alt1_1194, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet33[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_alt1_1198, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal alt1: match production*/
    case ARTL_ART_alt1_1194: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_alt1_1196, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cat; return; }
    case ARTL_ART_alt1_1196: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet34[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal alt1: match production*/
    case ARTL_ART_alt1_1198: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_alt1_1200, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cat; return; }
    case ARTL_ART_alt1_1200: 
      /* Nonterminal template end */
      if (!ARTSet35[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__BAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_alt1_1202, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet36[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_alt1_1204, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_alt1; return; }
    case ARTL_ART_alt1_1204: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet34[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_annotation() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal annotation production descriptor loads*/
    case ARTL_ART_annotation: 
      if (ARTSet39[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_annotation_1394, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet40[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_annotation_1398, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet41[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_annotation_1402, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal annotation: match production*/
    case ARTL_ART_annotation_1394: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_annotation_1396, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_name; return; }
    case ARTL_ART_annotation_1396: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet38[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal annotation: match production*/
    case ARTL_ART_annotation_1398: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_annotation_1400, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_delay; return; }
    case ARTL_ART_annotation_1400: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet38[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal annotation: match production*/
    case ARTL_ART_annotation_1402: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_annotation_1404, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_fold; return; }
    case ARTL_ART_annotation_1404: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet38[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_annotations() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal annotations production descriptor loads*/
    case ARTL_ART_annotations: 
      if (ARTSet42[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_annotations_1384, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet42[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_annotations_1388, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal annotations: match production*/
    case ARTL_ART_annotations_1384: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_annotations_1386, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_annotation; return; }
    case ARTL_ART_annotations_1386: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet43[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal annotations: match production*/
    case ARTL_ART_annotations_1388: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_annotations_1390, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_annotation; return; }
    case ARTL_ART_annotations_1390: 
      /* Nonterminal template end */
      if (!ARTSet44[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_annotations_1392, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_annotations; return; }
    case ARTL_ART_annotations_1392: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet43[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_attribute() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal attribute production descriptor loads*/
    case ARTL_ART_attribute: 
      if (ARTSet45[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_attribute_1154, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet45[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_attribute_1164, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal attribute: match production*/
    case ARTL_ART_attribute_1154: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_attribute_1156, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_ID; return; }
    case ARTL_ART_attribute_1156: 
      /* Nonterminal template end */
      if (!ARTSet46[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COLON, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_attribute_1158, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet47[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_attribute_1160, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_TYPE; return; }
    case ARTL_ART_attribute_1160: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet21[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal attribute: match production*/
    case ARTL_ART_attribute_1164: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_attribute_1166, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_ID; return; }
    case ARTL_ART_attribute_1166: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet21[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_attributes() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal attributes production descriptor loads*/
    case ARTL_ART_attributes: 
      if (ARTSet49[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_attributes_1142, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet22[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_attributes_1150, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal attributes: match production*/
    case ARTL_ART_attributes_1142: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_attributes_1146, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_attribute; return; }
    case ARTL_ART_attributes_1146: 
      /* Nonterminal template end */
      if (!ARTSet21[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_attributes_1148, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_attributes; return; }
    case ARTL_ART_attributes_1148: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet22[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal attributes: match production*/
    case ARTL_ART_attributes_1150: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_attributes_1152, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet22[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_attributesOpt() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal attributesOpt production descriptor loads*/
    case ARTL_ART_attributesOpt: 
      if (ARTSet26[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_attributesOpt_1128, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet52[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_attributesOpt_1138, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal attributesOpt: match production*/
    case ARTL_ART_attributesOpt_1128: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__LT, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_attributesOpt_1132, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet21[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_attributesOpt_1134, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_attributes; return; }
    case ARTL_ART_attributesOpt_1134: 
      /* Nonterminal template end */
      if (!ARTSet22[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__GT, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_attributesOpt_1136, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet52[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal attributesOpt: match production*/
    case ARTL_ART_attributesOpt_1138: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_attributesOpt_1140, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet52[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_builtinTerminal() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal builtinTerminal production descriptor loads*/
    case ARTL_ART_builtinTerminal: 
      if (ARTSet53[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_builtinTerminal_886, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal builtinTerminal: match production*/
    case ARTL_ART_builtinTerminal_886: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__AMPERSAND, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_builtinTerminal_888, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet45[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_builtinTerminal_890, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_ID; return; }
    case ARTL_ART_builtinTerminal_890: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet18[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_caseInsensitiveTerminal() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal caseInsensitiveTerminal production descriptor loads*/
    case ARTL_ART_caseInsensitiveTerminal: 
      if (ARTSet54[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_caseInsensitiveTerminal_862, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal caseInsensitiveTerminal: match production*/
    case ARTL_ART_caseInsensitiveTerminal_862: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_caseInsensitiveTerminal_864, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_STRING_DQ; return; }
    case ARTL_ART_caseInsensitiveTerminal_864: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet18[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_caseSensitiveTerminal() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal caseSensitiveTerminal production descriptor loads*/
    case ARTL_ART_caseSensitiveTerminal: 
      if (ARTSet55[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_caseSensitiveTerminal_856, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal caseSensitiveTerminal: match production*/
    case ARTL_ART_caseSensitiveTerminal_856: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_caseSensitiveTerminal_858, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_STRING_PLAIN_SQ; return; }
    case ARTL_ART_caseSensitiveTerminal_858: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet18[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_cat() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal cat production descriptor loads*/
    case ARTL_ART_cat: 
      if (ARTSet56[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cat_1176, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal cat: match production*/
    case ARTL_ART_cat_1176: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cat_1178, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_slot; return; }
    case ARTL_ART_cat_1178: 
      /* Nonterminal template end */
      if (!ARTSet59[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cat_1180, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_catTail; return; }
    case ARTL_ART_cat_1180: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet57[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_catTail() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal catTail production descriptor loads*/
    case ARTL_ART_catTail: 
      if (ARTSet60[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_catTail_1214, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet60[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_catTail_1220, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal catTail: match production*/
    case ARTL_ART_catTail_1214: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_catTail_1216, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_abbrev; return; }
    case ARTL_ART_catTail_1216: 
      /* Nonterminal template end */
      if (!ARTSet61[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_catTail_1218, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_slot; return; }
    case ARTL_ART_catTail_1218: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet57[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal catTail: match production*/
    case ARTL_ART_catTail_1220: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_catTail_1222, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_abbrev; return; }
    case ARTL_ART_catTail_1222: 
      /* Nonterminal template end */
      if (!ARTSet56[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_catTail_1224, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_slot; return; }
    case ARTL_ART_catTail_1224: 
      /* Nonterminal template end */
      if (!ARTSet59[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_catTail_1226, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_catTail; return; }
    case ARTL_ART_catTail_1226: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet57[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_characterSetTerminal() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal characterSetTerminal production descriptor loads*/
    case ARTL_ART_characterSetTerminal: 
      if (ARTSet62[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_characterSetTerminal_874, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal characterSetTerminal: match production*/
    case ARTL_ART_characterSetTerminal_874: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_characterSetTerminal_876, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_CHAR_BQ; return; }
    case ARTL_ART_characterSetTerminal_876: 
      /* Nonterminal template end */
      if (!ARTSet64[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__PERIOD_PERIOD, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_characterSetTerminal_880, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet62[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_characterSetTerminal_882, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_CHAR_BQ; return; }
    case ARTL_ART_characterSetTerminal_882: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet63[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_characterTerminal() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal characterTerminal production descriptor loads*/
    case ARTL_ART_characterTerminal: 
      if (ARTSet62[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_characterTerminal_868, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal characterTerminal: match production*/
    case ARTL_ART_characterTerminal_868: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_characterTerminal_870, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_CHAR_BQ; return; }
    case ARTL_ART_characterTerminal_870: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet63[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_choiceSlot() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal choiceSlot production descriptor loads*/
    case ARTL_ART_choiceSlot: 
      if (ARTSet65[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_choiceSlot_1026, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet65[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_choiceSlot_1032, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal choiceSlot: match production*/
    case ARTL_ART_choiceSlot_1026: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_choiceSlot_1028, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_chooseElement; return; }
    case ARTL_ART_choiceSlot_1028: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet66[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal choiceSlot: match production*/
    case ARTL_ART_choiceSlot_1032: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_choiceSlot_1034, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_chooseElement; return; }
    case ARTL_ART_choiceSlot_1034: 
      /* Nonterminal template end */
      if (!ARTSet67[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_choiceSlot_1036, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_choiceSlot; return; }
    case ARTL_ART_choiceSlot_1036: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet66[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_chooseDiff() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal chooseDiff production descriptor loads*/
    case ARTL_ART_chooseDiff: 
      if (ARTSet69[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_chooseDiff_974, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet68[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_chooseDiff_980, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet71[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_chooseDiff_990, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal chooseDiff: match production*/
    case ARTL_ART_chooseDiff_974: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_chooseDiff_976, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_chooseUnionIntersection; return; }
    case ARTL_ART_chooseDiff_976: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet66[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal chooseDiff: match production*/
    case ARTL_ART_chooseDiff_980: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_chooseDiff_982, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_chooseDiff; return; }
    case ARTL_ART_chooseDiff_982: 
      /* Nonterminal template end */
      if (!ARTSet70[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__BACKSLASH, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_chooseDiff_984, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet69[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_chooseDiff_986, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_chooseUnionIntersection; return; }
    case ARTL_ART_chooseDiff_986: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet66[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal chooseDiff: match production*/
    case ARTL_ART_chooseDiff_990: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_chooseDiff_992, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_nonterminal; return; }
    case ARTL_ART_chooseDiff_992: 
      /* Nonterminal template end */
      if (!ARTSet52[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COLON_COLON_EQUAL, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_chooseDiff_994, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet67[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_chooseDiff_996, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_choiceSlot; return; }
    case ARTL_ART_chooseDiff_996: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet66[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_chooseElement() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal chooseElement production descriptor loads*/
    case ARTL_ART_chooseElement: 
      if (ARTSet71[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_chooseElement_1040, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet74[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_chooseElement_1046, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet75[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_chooseElement_1052, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet76[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_chooseElement_1058, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet77[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_chooseElement_1064, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet78[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_chooseElement_1070, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet79[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_chooseElement_1076, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet80[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_chooseElement_1082, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet81[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_chooseElement_1088, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet82[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_chooseElement_1094, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet83[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_chooseElement_1100, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet84[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_chooseElement_1106, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet85[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_chooseElement_1112, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet86[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_chooseElement_1118, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal chooseElement: match production*/
    case ARTL_ART_chooseElement_1040: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_chooseElement_1042, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_nonterminal; return; }
    case ARTL_ART_chooseElement_1042: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet73[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal chooseElement: match production*/
    case ARTL_ART_chooseElement_1046: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_chooseElement_1048, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_caseSensitiveTerminal; return; }
    case ARTL_ART_chooseElement_1048: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet73[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal chooseElement: match production*/
    case ARTL_ART_chooseElement_1052: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_chooseElement_1054, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_caseInsensitiveTerminal; return; }
    case ARTL_ART_chooseElement_1054: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet73[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal chooseElement: match production*/
    case ARTL_ART_chooseElement_1058: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_chooseElement_1060, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_builtinTerminal; return; }
    case ARTL_ART_chooseElement_1060: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet73[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal chooseElement: match production*/
    case ARTL_ART_chooseElement_1064: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__PERIOD, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_chooseElement_1066, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet73[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal chooseElement: match production*/
    case ARTL_ART_chooseElement_1070: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_anyCharacterTerminal, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_chooseElement_1072, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet73[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal chooseElement: match production*/
    case ARTL_ART_chooseElement_1076: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_anyBuiltinTerminal, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_chooseElement_1078, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet73[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal chooseElement: match production*/
    case ARTL_ART_chooseElement_1082: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_anyCaseSensitiveTerminal, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_chooseElement_1084, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet73[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal chooseElement: match production*/
    case ARTL_ART_chooseElement_1088: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_anyCaseInsensitiveTerminal, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_chooseElement_1090, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet73[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal chooseElement: match production*/
    case ARTL_ART_chooseElement_1094: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_anyParaterminal, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_chooseElement_1096, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet73[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal chooseElement: match production*/
    case ARTL_ART_chooseElement_1100: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_anyNonterminal, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_chooseElement_1102, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet73[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal chooseElement: match production*/
    case ARTL_ART_chooseElement_1106: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_anyLiteralTerminal, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_chooseElement_1108, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet73[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal chooseElement: match production*/
    case ARTL_ART_chooseElement_1112: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_anyTerminal, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_chooseElement_1114, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet73[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal chooseElement: match production*/
    case ARTL_ART_chooseElement_1118: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__LPAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_chooseElement_1120, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet68[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_chooseElement_1122, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_chooseDiff; return; }
    case ARTL_ART_chooseElement_1122: 
      /* Nonterminal template end */
      if (!ARTSet34[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__RPAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_chooseElement_1124, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet73[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_chooseUnionIntersection() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal chooseUnionIntersection production descriptor loads*/
    case ARTL_ART_chooseUnionIntersection: 
      if (ARTSet65[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_chooseUnionIntersection_1000, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet69[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_chooseUnionIntersection_1006, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet69[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_chooseUnionIntersection_1016, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal chooseUnionIntersection: match production*/
    case ARTL_ART_chooseUnionIntersection_1000: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_chooseUnionIntersection_1002, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_chooseElement; return; }
    case ARTL_ART_chooseUnionIntersection_1002: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet87[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal chooseUnionIntersection: match production*/
    case ARTL_ART_chooseUnionIntersection_1006: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_chooseUnionIntersection_1008, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_chooseUnionIntersection; return; }
    case ARTL_ART_chooseUnionIntersection_1008: 
      /* Nonterminal template end */
      if (!ARTSet35[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__BAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_chooseUnionIntersection_1010, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet65[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_chooseUnionIntersection_1012, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_chooseElement; return; }
    case ARTL_ART_chooseUnionIntersection_1012: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet87[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal chooseUnionIntersection: match production*/
    case ARTL_ART_chooseUnionIntersection_1016: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_chooseUnionIntersection_1018, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_chooseUnionIntersection; return; }
    case ARTL_ART_chooseUnionIntersection_1018: 
      /* Nonterminal template end */
      if (!ARTSet88[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SLASH, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_chooseUnionIntersection_1020, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet65[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_chooseUnionIntersection_1022, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_chooseElement; return; }
    case ARTL_ART_chooseUnionIntersection_1022: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet87[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_chooser() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal chooser production descriptor loads*/
    case ARTL_ART_chooser: 
      if (ARTSet68[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_chooser_918, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet68[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_chooser_928, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet68[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_chooser_938, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet68[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_chooser_948, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet93[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_chooser_958, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_chooser_966, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal chooser: match production*/
    case ARTL_ART_chooser_918: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_chooser_920, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_chooseDiff; return; }
    case ARTL_ART_chooser_920: 
      /* Nonterminal template end */
      if (!ARTSet22[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__GT, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_chooser_922, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet68[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_chooser_924, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_chooseDiff; return; }
    case ARTL_ART_chooser_924: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet90[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal chooser: match production*/
    case ARTL_ART_chooser_928: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_chooser_930, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_chooseDiff; return; }
    case ARTL_ART_chooser_930: 
      /* Nonterminal template end */
      if (!ARTSet26[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__LT, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_chooser_932, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet68[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_chooser_934, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_chooseDiff; return; }
    case ARTL_ART_chooser_934: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet90[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal chooser: match production*/
    case ARTL_ART_chooser_938: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_chooser_940, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_chooseDiff; return; }
    case ARTL_ART_chooser_940: 
      /* Nonterminal template end */
      if (!ARTSet91[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__GT_GT, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_chooser_942, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet68[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_chooser_944, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_chooseDiff; return; }
    case ARTL_ART_chooser_944: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet90[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal chooser: match production*/
    case ARTL_ART_chooser_948: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_chooser_950, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_chooseDiff; return; }
    case ARTL_ART_chooser_950: 
      /* Nonterminal template end */
      if (!ARTSet92[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__LT_LT, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_chooser_952, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet68[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_chooser_954, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_chooseDiff; return; }
    case ARTL_ART_chooser_954: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet90[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal chooser: match production*/
    case ARTL_ART_chooser_958: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_longest, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_chooser_960, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet68[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_chooser_962, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_chooseDiff; return; }
    case ARTL_ART_chooser_962: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet90[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal chooser: match production*/
    case ARTL_ART_chooser_966: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_shortest, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_chooser_968, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet68[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_chooser_970, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_chooseDiff; return; }
    case ARTL_ART_chooser_970: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet90[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_choosers() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal choosers production descriptor loads*/
    case ARTL_ART_choosers: 
      if (ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_choosers_744, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_choosers_750, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal choosers: match production*/
    case ARTL_ART_choosers_744: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_choosers_746, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_chooser; return; }
    case ARTL_ART_choosers_746: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal choosers: match production*/
    case ARTL_ART_choosers_750: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_choosers_752, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_chooser; return; }
    case ARTL_ART_choosers_752: 
      /* Nonterminal template end */
      if (!ARTSet96[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_choosers_756, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_choosers; return; }
    case ARTL_ART_choosers_756: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_delay() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal delay production descriptor loads*/
    case ARTL_ART_delay: 
      if (ARTSet26[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_delay_1412, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal delay: match production*/
    case ARTL_ART_delay_1412: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__LT, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_delay_1414, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet38[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_diff() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal diff production descriptor loads*/
    case ARTL_ART_diff: 
      if (ARTSet99[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_diff_1268, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet97[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_diff_1272, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal diff: match production*/
    case ARTL_ART_diff_1268: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_diff_1270, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_union; return; }
    case ARTL_ART_diff_1270: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet98[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal diff: match production*/
    case ARTL_ART_diff_1272: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_diff_1274, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_diff; return; }
    case ARTL_ART_diff_1274: 
      /* Nonterminal template end */
      if (!ARTSet100[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__BACKSLASH_BACKSLASH, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_diff_1276, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet99[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_diff_1278, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_union; return; }
    case ARTL_ART_diff_1278: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet98[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_directive() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal directive production descriptor loads*/
    case ARTL_ART_directive: 
      if (ARTSet102[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_28, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet103[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_34, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet105[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_40, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet106[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_48, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet108[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_54, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet110[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_60, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet112[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_68, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet113[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_76, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet114[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_82, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet115[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_90, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet115[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_98, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet116[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_108, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet117[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_116, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet118[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_124, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet120[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_132, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet123[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_140, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet124[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_148, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet125[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_156, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet126[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_164, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet127[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_172, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet128[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_180, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet129[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_188, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet130[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_196, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet131[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_204, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet132[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_212, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet133[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_220, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet134[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_228, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet135[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_236, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet136[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_244, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet137[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_252, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet138[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_260, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet139[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_268, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet140[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_276, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet141[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_284, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet142[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_292, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet143[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_300, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet144[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_308, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet145[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_316, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet146[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_324, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet147[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_332, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet148[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_340, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet149[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_348, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet150[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_356, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet151[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_362, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet152[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_368, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet153[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_374, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet154[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_380, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet155[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_386, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet156[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_394, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet157[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_402, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet158[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_410, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet159[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_418, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet160[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_426, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet161[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_434, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet162[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_440, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet163[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_446, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet164[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_452, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet165[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_458, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet166[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_464, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet167[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_470, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet168[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_476, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet169[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_482, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet170[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_488, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet171[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_494, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet172[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_500, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet173[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_506, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet174[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_512, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet175[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_518, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet176[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_524, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet177[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_530, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet178[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_536, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet179[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_542, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet180[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_548, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet181[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_554, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet182[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_560, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet183[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_566, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet184[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_572, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet185[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_578, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet186[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_584, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet187[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_590, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet188[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_596, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet189[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_602, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet190[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_608, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet191[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_614, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet192[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_620, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_28: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_import, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_30, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet45[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_32, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_ID; return; }
    case ARTL_ART_directive_32: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_34: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_element, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_36, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet104[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_38, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_elementUpdaters; return; }
    case ARTL_ART_directive_38: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_40: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_start, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_42, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet71[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_44, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_nonterminal; return; }
    case ARTL_ART_directive_44: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_48: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_whitespace, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_50, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet107[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_52, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_whitespacers; return; }
    case ARTL_ART_directive_52: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_54: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_paraterminal, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_56, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet109[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_58, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_paraterminalisers; return; }
    case ARTL_ART_directive_58: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_60: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_injectInstance, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_62, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet111[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_66, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_rhs; return; }
    case ARTL_ART_directive_66: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_68: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_injectProduction, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_70, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet111[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_74, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_rhs; return; }
    case ARTL_ART_directive_74: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_76: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_injectProductionOff, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_78, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_82: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_absorb, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_84, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet71[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_86, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_nonterminal; return; }
    case ARTL_ART_directive_86: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_90: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_choose, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_92, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet96[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_96, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_choosers; return; }
    case ARTL_ART_directive_96: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_98: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_choose, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_100, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet45[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_102, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_ID; return; }
    case ARTL_ART_directive_102: 
      /* Nonterminal template end */
      if (!ARTSet96[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_106, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_choosers; return; }
    case ARTL_ART_directive_106: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_108: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_prelude, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_110, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet32[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_112, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_STRING_BRACE_NEST; return; }
    case ARTL_ART_directive_112: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_116: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_support, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_118, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet32[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_120, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_STRING_BRACE_NEST; return; }
    case ARTL_ART_directive_120: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_124: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_verbosity, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_126, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet119[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_128, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_INTEGER; return; }
    case ARTL_ART_directive_128: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_132: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_trace, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_134, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet122[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_136, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trueFalse; return; }
    case ARTL_ART_directive_136: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_140: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_inputPrint, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_142, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet122[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_144, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trueFalse; return; }
    case ARTL_ART_directive_144: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_148: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_tweLexicalisations, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_150, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet122[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_152, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trueFalse; return; }
    case ARTL_ART_directive_152: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_156: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_tweExtents, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_158, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet122[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_160, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trueFalse; return; }
    case ARTL_ART_directive_160: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_164: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_tweSegments, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_166, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet122[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_168, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trueFalse; return; }
    case ARTL_ART_directive_168: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_172: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_tweRecursive, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_174, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet122[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_176, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trueFalse; return; }
    case ARTL_ART_directive_176: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_180: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_twePrintSummary, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_182, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet122[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_184, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trueFalse; return; }
    case ARTL_ART_directive_184: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_188: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_twePrint, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_190, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet122[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_192, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trueFalse; return; }
    case ARTL_ART_directive_192: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_196: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_twePrintFull, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_198, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet122[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_200, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trueFalse; return; }
    case ARTL_ART_directive_200: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_204: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_tweDead, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_206, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet122[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_208, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trueFalse; return; }
    case ARTL_ART_directive_208: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_212: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_tweLongest, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_214, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet122[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_216, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trueFalse; return; }
    case ARTL_ART_directive_216: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_220: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_twePriority, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_222, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet122[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_224, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trueFalse; return; }
    case ARTL_ART_directive_224: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_228: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_tweShortCircuit, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_230, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet122[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_232, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trueFalse; return; }
    case ARTL_ART_directive_232: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_236: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_sppfLongest, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_238, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet122[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_240, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trueFalse; return; }
    case ARTL_ART_directive_240: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_244: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_sppfPriority, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_246, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet122[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_248, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trueFalse; return; }
    case ARTL_ART_directive_248: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_252: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_tweFromSPPF, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_254, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet122[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_256, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trueFalse; return; }
    case ARTL_ART_directive_256: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_260: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_tweTokenWrite, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_262, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet122[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_264, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trueFalse; return; }
    case ARTL_ART_directive_264: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_268: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_sppfShow, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_270, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet122[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_272, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trueFalse; return; }
    case ARTL_ART_directive_272: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_276: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_gssShow, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_278, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet122[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_280, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trueFalse; return; }
    case ARTL_ART_directive_280: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_284: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_treeShow, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_286, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet122[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_288, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trueFalse; return; }
    case ARTL_ART_directive_288: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_292: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_treePrint, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_294, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet122[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_296, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trueFalse; return; }
    case ARTL_ART_directive_296: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_300: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_termPrint, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_302, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet122[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_304, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trueFalse; return; }
    case ARTL_ART_directive_304: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_308: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_termWrite, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_310, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet122[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_312, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trueFalse; return; }
    case ARTL_ART_directive_312: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_316: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_parseCounts, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_318, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet122[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_320, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trueFalse; return; }
    case ARTL_ART_directive_320: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_324: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_outputDirectory, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_326, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet55[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_328, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_STRING_PLAIN_SQ; return; }
    case ARTL_ART_directive_328: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_332: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_namespace, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_334, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet55[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_336, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_STRING_PLAIN_SQ; return; }
    case ARTL_ART_directive_336: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_340: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_lexerName, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_342, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet55[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_344, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_STRING_PLAIN_SQ; return; }
    case ARTL_ART_directive_344: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_348: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_parserName, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_350, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet55[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_352, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_STRING_PLAIN_SQ; return; }
    case ARTL_ART_directive_352: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_356: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_generateDynamic, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_358, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_362: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_generateStatic, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_364, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_368: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_generateState, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_370, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_374: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_generateFragment, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_376, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_380: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_generatePool, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_382, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_386: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_predictivePops, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_388, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet122[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_390, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trueFalse; return; }
    case ARTL_ART_directive_390: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_394: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_FIFODescriptors, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_396, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet122[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_398, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trueFalse; return; }
    case ARTL_ART_directive_398: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_402: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_suppressPopGuard, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_404, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet122[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_406, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trueFalse; return; }
    case ARTL_ART_directive_406: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_410: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_suppressProductionGuard, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_412, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet122[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_414, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trueFalse; return; }
    case ARTL_ART_directive_414: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_418: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_suppressTestRepeat, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_420, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet122[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_422, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trueFalse; return; }
    case ARTL_ART_directive_422: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_426: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_suppressSemantics, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_428, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet122[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_430, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trueFalse; return; }
    case ARTL_ART_directive_430: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_434: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_lexerData, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_436, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_440: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_lexDFA, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_442, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_446: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_earley, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_448, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_452: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_earley2007LinkedAPI, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_454, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_458: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_earleyLinkedAPI, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_460, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_464: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_earleyIndexedAPI, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_466, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_470: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_earleyIndexedPool, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_472, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_476: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_earleyIndexedData, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_478, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_482: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_earleyTable, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_484, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_488: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_earleyTableLinkedAPI, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_490, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_494: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_earleyTableIndexedAPI, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_496, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_500: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_earleyTableIndexedPool, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_502, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_506: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_earleyTableIndexedData, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_508, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_512: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_cnp, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_514, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_518: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_cnpLinkedAPI, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_520, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_524: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_cnpIndexedAPI, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_526, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_530: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_cnpIndexedPool, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_532, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_536: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_cnpGeneratorPool, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_538, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_542: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_lcnp, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_544, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_548: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_lcnpLinkedAPI, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_550, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_554: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_lcnpIndexedAPI, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_556, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_560: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_lcnpIndexedPool, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_562, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_566: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_lcnpGeneratorPool, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_568, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_572: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_gll, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_574, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_578: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_gllGeneratorPool, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_580, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_584: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_gllTWEGeneratorPool, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_586, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_590: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_gllClusteredGeneratorPool, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_592, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_596: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_mgll, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_598, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_602: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_mgllGeneratorPool, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_604, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_608: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_osbrd, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_610, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_614: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_osbrdGenerator, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_616, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_620: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_grammarWrite, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_622, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_element1() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal element1 production descriptor loads*/
    case ARTL_ART_element1: 
      if (ARTSet194[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_element1_1302, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet71[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_element1_1306, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet74[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_element1_1312, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet75[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_element1_1316, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet195[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_element1_1320, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet196[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_element1_1324, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet76[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_element1_1328, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet194[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_element1_1332, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet71[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_element1_1338, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet74[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_element1_1346, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet75[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_element1_1352, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet195[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_element1_1358, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet196[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_element1_1364, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet76[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_element1_1370, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet86[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_element1_1376, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal element1: match production*/
    case ARTL_ART_element1_1302: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_element1_1304, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_epsilon; return; }
    case ARTL_ART_element1_1304: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet43[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal element1: match production*/
    case ARTL_ART_element1_1306: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_element1_1308, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_nonterminal; return; }
    case ARTL_ART_element1_1308: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet43[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal element1: match production*/
    case ARTL_ART_element1_1312: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_element1_1314, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_caseSensitiveTerminal; return; }
    case ARTL_ART_element1_1314: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet43[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal element1: match production*/
    case ARTL_ART_element1_1316: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_element1_1318, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_caseInsensitiveTerminal; return; }
    case ARTL_ART_element1_1318: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet43[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal element1: match production*/
    case ARTL_ART_element1_1320: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_element1_1322, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_characterTerminal; return; }
    case ARTL_ART_element1_1322: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet43[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal element1: match production*/
    case ARTL_ART_element1_1324: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_element1_1326, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_characterSetTerminal; return; }
    case ARTL_ART_element1_1326: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet43[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal element1: match production*/
    case ARTL_ART_element1_1328: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_element1_1330, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_builtinTerminal; return; }
    case ARTL_ART_element1_1330: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet43[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal element1: match production*/
    case ARTL_ART_element1_1332: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_element1_1334, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_epsilon; return; }
    case ARTL_ART_element1_1334: 
      /* Nonterminal template end */
      if (!ARTSet44[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_element1_1336, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_annotations; return; }
    case ARTL_ART_element1_1336: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet43[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal element1: match production*/
    case ARTL_ART_element1_1338: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_element1_1340, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_nonterminal; return; }
    case ARTL_ART_element1_1340: 
      /* Nonterminal template end */
      if (!ARTSet44[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_element1_1344, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_annotations; return; }
    case ARTL_ART_element1_1344: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet43[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal element1: match production*/
    case ARTL_ART_element1_1346: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_element1_1348, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_caseSensitiveTerminal; return; }
    case ARTL_ART_element1_1348: 
      /* Nonterminal template end */
      if (!ARTSet44[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_element1_1350, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_annotations; return; }
    case ARTL_ART_element1_1350: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet43[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal element1: match production*/
    case ARTL_ART_element1_1352: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_element1_1354, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_caseInsensitiveTerminal; return; }
    case ARTL_ART_element1_1354: 
      /* Nonterminal template end */
      if (!ARTSet44[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_element1_1356, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_annotations; return; }
    case ARTL_ART_element1_1356: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet43[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal element1: match production*/
    case ARTL_ART_element1_1358: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_element1_1360, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_characterTerminal; return; }
    case ARTL_ART_element1_1360: 
      /* Nonterminal template end */
      if (!ARTSet44[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_element1_1362, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_annotations; return; }
    case ARTL_ART_element1_1362: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet43[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal element1: match production*/
    case ARTL_ART_element1_1364: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_element1_1366, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_characterSetTerminal; return; }
    case ARTL_ART_element1_1366: 
      /* Nonterminal template end */
      if (!ARTSet44[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_element1_1368, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_annotations; return; }
    case ARTL_ART_element1_1368: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet43[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal element1: match production*/
    case ARTL_ART_element1_1370: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_element1_1372, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_builtinTerminal; return; }
    case ARTL_ART_element1_1372: 
      /* Nonterminal template end */
      if (!ARTSet44[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_element1_1374, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_annotations; return; }
    case ARTL_ART_element1_1374: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet43[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal element1: match production*/
    case ARTL_ART_element1_1376: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__LPAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_element1_1378, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet197[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_element1_1380, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_alt; return; }
    case ARTL_ART_element1_1380: 
      /* Nonterminal template end */
      if (!ARTSet34[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__RPAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_element1_1382, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet43[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_elementUpdater() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal elementUpdater production descriptor loads*/
    case ARTL_ART_elementUpdater: 
      if (ARTSet194[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_elementUpdater_810, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet71[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_elementUpdater_816, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet74[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_elementUpdater_822, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet75[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_elementUpdater_828, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet195[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_elementUpdater_834, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet196[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_elementUpdater_840, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet76[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_elementUpdater_846, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal elementUpdater: match production*/
    case ARTL_ART_elementUpdater_810: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_elementUpdater_812, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_epsilon; return; }
    case ARTL_ART_elementUpdater_812: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet199[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal elementUpdater: match production*/
    case ARTL_ART_elementUpdater_816: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_elementUpdater_818, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_nonterminal; return; }
    case ARTL_ART_elementUpdater_818: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet199[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal elementUpdater: match production*/
    case ARTL_ART_elementUpdater_822: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_elementUpdater_824, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_caseSensitiveTerminal; return; }
    case ARTL_ART_elementUpdater_824: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet199[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal elementUpdater: match production*/
    case ARTL_ART_elementUpdater_828: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_elementUpdater_830, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_caseInsensitiveTerminal; return; }
    case ARTL_ART_elementUpdater_830: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet199[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal elementUpdater: match production*/
    case ARTL_ART_elementUpdater_834: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_elementUpdater_836, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_characterTerminal; return; }
    case ARTL_ART_elementUpdater_836: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet199[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal elementUpdater: match production*/
    case ARTL_ART_elementUpdater_840: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_elementUpdater_842, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_characterSetTerminal; return; }
    case ARTL_ART_elementUpdater_842: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet199[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal elementUpdater: match production*/
    case ARTL_ART_elementUpdater_846: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_elementUpdater_848, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_builtinTerminal; return; }
    case ARTL_ART_elementUpdater_848: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet199[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_elementUpdaters() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal elementUpdaters production descriptor loads*/
    case ARTL_ART_elementUpdaters: 
      if (ARTSet200[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_elementUpdaters_646, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet200[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_elementUpdaters_654, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal elementUpdaters: match production*/
    case ARTL_ART_elementUpdaters_646: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_elementUpdaters_648, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_elementUpdater; return; }
    case ARTL_ART_elementUpdaters_648: 
      /* Nonterminal template end */
      if (!ARTSet23[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COMMA, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_elementUpdaters_650, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet104[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_elementUpdaters_652, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_elementUpdaters; return; }
    case ARTL_ART_elementUpdaters_652: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal elementUpdaters: match production*/
    case ARTL_ART_elementUpdaters_654: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_elementUpdaters_656, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_elementUpdater; return; }
    case ARTL_ART_elementUpdaters_656: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_epsilon() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal epsilon production descriptor loads*/
    case ARTL_ART_epsilon: 
      if (ARTSet201[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_epsilon_852, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal epsilon: match production*/
    case ARTL_ART_epsilon_852: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__HASH, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_epsilon_854, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet63[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_fold() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal fold production descriptor loads*/
    case ARTL_ART_fold: 
      if (ARTSet203[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_fold_1416, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet204[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_fold_1420, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet205[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_fold_1424, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet206[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_fold_1428, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal fold: match production*/
    case ARTL_ART_fold_1416: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__UPARROW_, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_fold_1418, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet38[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal fold: match production*/
    case ARTL_ART_fold_1420: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__UPARROW, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_fold_1422, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet38[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal fold: match production*/
    case ARTL_ART_fold_1424: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__UPARROW_UPARROW, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_fold_1426, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet38[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal fold: match production*/
    case ARTL_ART_fold_1428: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__UPARROW_UPARROW_UPARROW, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_fold_1430, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet38[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_grammarRule() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal grammarRule production descriptor loads*/
    case ARTL_ART_grammarRule: 
      if (ARTSet71[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_grammarRule_626, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal grammarRule: match production*/
    case ARTL_ART_grammarRule_626: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_grammarRule_628, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_nonterminal; return; }
    case ARTL_ART_grammarRule_628: 
      /* Nonterminal template end */
      if (!ARTSet207[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_grammarRule_632, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_attributesOpt; return; }
    case ARTL_ART_grammarRule_632: 
      /* Nonterminal template end */
      if (!ARTSet52[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COLON_COLON_EQUAL, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_grammarRule_634, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet111[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_grammarRule_638, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_rhs; return; }
    case ARTL_ART_grammarRule_638: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_insertionName() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal insertionName production descriptor loads*/
    case ARTL_ART_insertionName: 
      if (ARTSet209[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_insertionName_1444, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal insertionName: match production*/
    case ARTL_ART_insertionName_1444: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__PERCENT_PERCENT, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_insertionName_1446, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet45[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_insertionName_1448, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_ID; return; }
    case ARTL_ART_insertionName_1448: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet1[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_iter() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal iter production descriptor loads*/
    case ARTL_ART_iter: 
      if (ARTSet97[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_iter_1256, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet97[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_iter_1260, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal iter: match production*/
    case ARTL_ART_iter_1256: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_iter_1258, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_diff; return; }
    case ARTL_ART_iter_1258: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet210[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal iter: match production*/
    case ARTL_ART_iter_1260: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_iter_1262, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_diff; return; }
    case ARTL_ART_iter_1262: 
      /* Nonterminal template end */
      if (!ARTSet211[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__AT, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_iter_1264, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet27[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_iter_1266, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_iter; return; }
    case ARTL_ART_iter_1266: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet210[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_name() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal name production descriptor loads*/
    case ARTL_ART_name: 
      if (ARTSet46[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_name_1406, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal name: match production*/
    case ARTL_ART_name_1406: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COLON, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_name_1408, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet45[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_name_1410, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_ID; return; }
    case ARTL_ART_name_1410: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet38[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_nonterminal() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal nonterminal production descriptor loads*/
    case ARTL_ART_nonterminal: 
      if (ARTSet45[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_nonterminal_658, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet213[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_nonterminal_664, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal nonterminal: match production*/
    case ARTL_ART_nonterminal_658: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_nonterminal_660, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_ID; return; }
    case ARTL_ART_nonterminal_660: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet16[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal nonterminal: match production*/
    case ARTL_ART_nonterminal_664: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_nonterminal_666, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_STRING_DOLLAR; return; }
    case ARTL_ART_nonterminal_666: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet16[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_not() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal not production descriptor loads*/
    case ARTL_ART_not: 
      if (ARTSet215[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_not_1292, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet100[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_not_1296, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal not: match production*/
    case ARTL_ART_not_1292: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_not_1294, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_element1; return; }
    case ARTL_ART_not_1294: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet43[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal not: match production*/
    case ARTL_ART_not_1296: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__BACKSLASH_BACKSLASH, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_not_1298, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet215[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_not_1300, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_element1; return; }
    case ARTL_ART_not_1300: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet43[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_paraterminalisers() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal paraterminalisers production descriptor loads*/
    case ARTL_ART_paraterminalisers: 
      if (ARTSet71[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_paraterminalisers_682, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet71[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_paraterminalisers_688, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet71[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_paraterminalisers_698, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet71[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_paraterminalisers_710, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal paraterminalisers: match production*/
    case ARTL_ART_paraterminalisers_682: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_paraterminalisers_684, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_nonterminal; return; }
    case ARTL_ART_paraterminalisers_684: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal paraterminalisers: match production*/
    case ARTL_ART_paraterminalisers_688: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_paraterminalisers_690, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_nonterminal; return; }
    case ARTL_ART_paraterminalisers_690: 
      /* Nonterminal template end */
      if (!ARTSet23[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COMMA, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_paraterminalisers_694, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet109[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_paraterminalisers_696, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_paraterminalisers; return; }
    case ARTL_ART_paraterminalisers_696: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal paraterminalisers: match production*/
    case ARTL_ART_paraterminalisers_698: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_paraterminalisers_700, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_nonterminal; return; }
    case ARTL_ART_paraterminalisers_700: 
      /* Nonterminal template end */
      if (!ARTSet216[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__EQUAL, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_paraterminalisers_704, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet54[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_paraterminalisers_706, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_STRING_DQ; return; }
    case ARTL_ART_paraterminalisers_706: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal paraterminalisers: match production*/
    case ARTL_ART_paraterminalisers_710: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_paraterminalisers_712, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_nonterminal; return; }
    case ARTL_ART_paraterminalisers_712: 
      /* Nonterminal template end */
      if (!ARTSet216[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__EQUAL, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_paraterminalisers_716, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet54[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_paraterminalisers_718, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_STRING_DQ; return; }
    case ARTL_ART_paraterminalisers_718: 
      /* Nonterminal template end */
      if (!ARTSet23[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COMMA, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_paraterminalisers_722, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet109[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_paraterminalisers_724, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_paraterminalisers; return; }
    case ARTL_ART_paraterminalisers_724: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_rhs() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal rhs production descriptor loads*/
    case ARTL_ART_rhs: 
      if (ARTSet33[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_rhs_726, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet33[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_rhs_732, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal rhs: match production*/
    case ARTL_ART_rhs_726: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_rhs_728, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cat; return; }
    case ARTL_ART_rhs_728: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal rhs: match production*/
    case ARTL_ART_rhs_732: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_rhs_734, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cat; return; }
    case ARTL_ART_rhs_734: 
      /* Nonterminal template end */
      if (!ARTSet35[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__BAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_rhs_738, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet111[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_rhs_742, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_rhs; return; }
    case ARTL_ART_rhs_742: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_slot() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal slot production descriptor loads*/
    case ARTL_ART_slot: 
      if (ARTSet14[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_slot_1206, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet218[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_slot_1210, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal slot: match production*/
    case ARTL_ART_slot_1206: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_slot_1208, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet14[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal slot: match production*/
    case ARTL_ART_slot_1210: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_slot_1212, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_action; return; }
    case ARTL_ART_slot_1212: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet14[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_text() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal text production descriptor loads*/
    case ARTL_ART_text: 
      if (ARTSet219[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_text_2, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal text: match production*/
    case ARTL_ART_text_2: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_text_6, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_textElements; return; }
    case ARTL_ART_text_6: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet220[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_textElement() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal textElement production descriptor loads*/
    case ARTL_ART_textElement: 
      if (ARTSet222[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_textElement_18, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet224[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_textElement_24, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal textElement: match production*/
    case ARTL_ART_textElement_18: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIK, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_textElement_20, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet223[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_textElement_22, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_directive; return; }
    case ARTL_ART_textElement_22: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal textElement: match production*/
    case ARTL_ART_textElement_24: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_textElement_26, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_grammarRule; return; }
    case ARTL_ART_textElement_26: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_textElements() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal textElements production descriptor loads*/
    case ARTL_ART_textElements: 
      if (ARTSet225[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_textElements_8, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet225[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_textElements_14, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal textElements: match production*/
    case ARTL_ART_textElements_8: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_textElements_10, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_textElement; return; }
    case ARTL_ART_textElements_10: 
      /* Nonterminal template end */
      if (!ARTSet219[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_textElements_12, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_textElements; return; }
    case ARTL_ART_textElements_12: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet220[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal textElements: match production*/
    case ARTL_ART_textElements_14: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_textElements_16, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_textElement; return; }
    case ARTL_ART_textElements_16: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet220[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_trueFalse() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal trueFalse production descriptor loads*/
    case ARTL_ART_trueFalse: 
      if (ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_trueFalse_770, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet3[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_trueFalse_776, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet5[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_trueFalse_782, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet46[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_trueFalse_788, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet46[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_trueFalse_796, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal trueFalse: match production*/
    case ARTL_ART_trueFalse_770: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_trueFalse_772, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal trueFalse: match production*/
    case ARTL_ART_trueFalse_776: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_true, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_trueFalse_778, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal trueFalse: match production*/
    case ARTL_ART_trueFalse_782: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_false, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_trueFalse_784, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal trueFalse: match production*/
    case ARTL_ART_trueFalse_788: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COLON, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_trueFalse_790, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet3[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_true, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_trueFalse_792, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal trueFalse: match production*/
    case ARTL_ART_trueFalse_796: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COLON, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_trueFalse_798, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet5[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_false, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_trueFalse_800, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_union() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal union production descriptor loads*/
    case ARTL_ART_union: 
      if (ARTSet227[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_union_1280, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet99[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_union_1284, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal union: match production*/
    case ARTL_ART_union_1280: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_union_1282, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_not; return; }
    case ARTL_ART_union_1282: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet43[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal union: match production*/
    case ARTL_ART_union_1284: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_union_1286, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_union; return; }
    case ARTL_ART_union_1286: 
      /* Nonterminal template end */
      if (!ARTSet228[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__BAR_BAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_union_1288, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet227[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_union_1290, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_not; return; }
    case ARTL_ART_union_1290: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet43[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_whitespacer() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal whitespacer production descriptor loads*/
    case ARTL_ART_whitespacer: 
      if (ARTSet71[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_whitespacer_900, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet76[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_whitespacer_906, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet195[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_whitespacer_912, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal whitespacer: match production*/
    case ARTL_ART_whitespacer_900: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_whitespacer_902, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_nonterminal; return; }
    case ARTL_ART_whitespacer_902: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet199[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal whitespacer: match production*/
    case ARTL_ART_whitespacer_906: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_whitespacer_908, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_builtinTerminal; return; }
    case ARTL_ART_whitespacer_908: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet199[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal whitespacer: match production*/
    case ARTL_ART_whitespacer_912: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_whitespacer_914, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_characterTerminal; return; }
    case ARTL_ART_whitespacer_914: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet199[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_whitespacers() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal whitespacers production descriptor loads*/
    case ARTL_ART_whitespacers: 
      if (ARTSet230[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_whitespacers_670, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet230[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_whitespacers_674, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal whitespacers: match production*/
    case ARTL_ART_whitespacers_670: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_whitespacers_672, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_whitespacer; return; }
    case ARTL_ART_whitespacers_672: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal whitespacers: match production*/
    case ARTL_ART_whitespacers_674: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_whitespacers_676, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_whitespacer; return; }
    case ARTL_ART_whitespacers_676: 
      /* Nonterminal template end */
      if (!ARTSet23[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COMMA, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_whitespacers_678, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet107[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_whitespacers_680, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_whitespacers; return; }
    case ARTL_ART_whitespacers_680: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void artParseBody(int artStartLabel) {
  artSetupCompleteTime = artReadClock();
  artStartSymbolLabel = artStartLabel;
  artIsInLanguage = false;
  artTokenExtent = 193;
  artLexicaliseForV3GLL(artInputString, null);
  artLexCompleteTime = artReadClock();
  artDummySPPFNode = artFindSPPFInitial(ARTL_DUMMY, 0, 0);
  artCurrentSPPFNode = artDummySPPFNode;
  artRootGSSNode = artFindGSS(ARTL_EOS, 0, 0, 0);
  artCurrentGSSNode = artRootGSSNode;
  artCurrentRestartLabel = artStartSymbolLabel;
  artCurrentInputPairIndex = 0;
  artCurrentInputPairReference = 0;
  while (true)
    switch (artlhsL[artCurrentRestartLabel]) {
      case ARTL_ART_BOOLEAN: 
        ARTPF_ART_BOOLEAN();
        break;
      case ARTL_ART_CHAR_BQ: 
        ARTPF_ART_CHAR_BQ();
        break;
      case ARTL_ART_ID: 
        ARTPF_ART_ID();
        break;
      case ARTL_ART_INTEGER: 
        ARTPF_ART_INTEGER();
        break;
      case ARTL_ART_REAL: 
        ARTPF_ART_REAL();
        break;
      case ARTL_ART_STRING_BRACE_NEST: 
        ARTPF_ART_STRING_BRACE_NEST();
        break;
      case ARTL_ART_STRING_DOLLAR: 
        ARTPF_ART_STRING_DOLLAR();
        break;
      case ARTL_ART_STRING_DQ: 
        ARTPF_ART_STRING_DQ();
        break;
      case ARTL_ART_STRING_PLAIN_SQ: 
        ARTPF_ART_STRING_PLAIN_SQ();
        break;
      case ARTL_ART_TYPE: 
        ARTPF_ART_TYPE();
        break;
      case ARTL_ART_TypeList: 
        ARTPF_ART_TypeList();
        break;
      case ARTL_ART_TypeNest: 
        ARTPF_ART_TypeNest();
        break;
      case ARTL_ART_abbrev: 
        ARTPF_ART_abbrev();
        break;
      case ARTL_ART_action: 
        ARTPF_ART_action();
        break;
      case ARTL_ART_alt: 
        ARTPF_ART_alt();
        break;
      case ARTL_ART_alt1: 
        ARTPF_ART_alt1();
        break;
      case ARTL_ART_annotation: 
        ARTPF_ART_annotation();
        break;
      case ARTL_ART_annotations: 
        ARTPF_ART_annotations();
        break;
      case ARTL_ART_attribute: 
        ARTPF_ART_attribute();
        break;
      case ARTL_ART_attributes: 
        ARTPF_ART_attributes();
        break;
      case ARTL_ART_attributesOpt: 
        ARTPF_ART_attributesOpt();
        break;
      case ARTL_ART_builtinTerminal: 
        ARTPF_ART_builtinTerminal();
        break;
      case ARTL_ART_caseInsensitiveTerminal: 
        ARTPF_ART_caseInsensitiveTerminal();
        break;
      case ARTL_ART_caseSensitiveTerminal: 
        ARTPF_ART_caseSensitiveTerminal();
        break;
      case ARTL_ART_cat: 
        ARTPF_ART_cat();
        break;
      case ARTL_ART_catTail: 
        ARTPF_ART_catTail();
        break;
      case ARTL_ART_characterSetTerminal: 
        ARTPF_ART_characterSetTerminal();
        break;
      case ARTL_ART_characterTerminal: 
        ARTPF_ART_characterTerminal();
        break;
      case ARTL_ART_choiceSlot: 
        ARTPF_ART_choiceSlot();
        break;
      case ARTL_ART_chooseDiff: 
        ARTPF_ART_chooseDiff();
        break;
      case ARTL_ART_chooseElement: 
        ARTPF_ART_chooseElement();
        break;
      case ARTL_ART_chooseUnionIntersection: 
        ARTPF_ART_chooseUnionIntersection();
        break;
      case ARTL_ART_chooser: 
        ARTPF_ART_chooser();
        break;
      case ARTL_ART_choosers: 
        ARTPF_ART_choosers();
        break;
      case ARTL_ART_delay: 
        ARTPF_ART_delay();
        break;
      case ARTL_ART_diff: 
        ARTPF_ART_diff();
        break;
      case ARTL_ART_directive: 
        ARTPF_ART_directive();
        break;
      case ARTL_ART_element1: 
        ARTPF_ART_element1();
        break;
      case ARTL_ART_elementUpdater: 
        ARTPF_ART_elementUpdater();
        break;
      case ARTL_ART_elementUpdaters: 
        ARTPF_ART_elementUpdaters();
        break;
      case ARTL_ART_epsilon: 
        ARTPF_ART_epsilon();
        break;
      case ARTL_ART_fold: 
        ARTPF_ART_fold();
        break;
      case ARTL_ART_grammarRule: 
        ARTPF_ART_grammarRule();
        break;
      case ARTL_ART_insertionName: 
        ARTPF_ART_insertionName();
        break;
      case ARTL_ART_iter: 
        ARTPF_ART_iter();
        break;
      case ARTL_ART_name: 
        ARTPF_ART_name();
        break;
      case ARTL_ART_nonterminal: 
        ARTPF_ART_nonterminal();
        break;
      case ARTL_ART_not: 
        ARTPF_ART_not();
        break;
      case ARTL_ART_paraterminalisers: 
        ARTPF_ART_paraterminalisers();
        break;
      case ARTL_ART_rhs: 
        ARTPF_ART_rhs();
        break;
      case ARTL_ART_slot: 
        ARTPF_ART_slot();
        break;
      case ARTL_ART_text: 
        ARTPF_ART_text();
        break;
      case ARTL_ART_textElement: 
        ARTPF_ART_textElement();
        break;
      case ARTL_ART_textElements: 
        ARTPF_ART_textElements();
        break;
      case ARTL_ART_trueFalse: 
        ARTPF_ART_trueFalse();
        break;
      case ARTL_ART_union: 
        ARTPF_ART_union();
        break;
      case ARTL_ART_whitespacer: 
        ARTPF_ART_whitespacer();
        break;
      case ARTL_ART_whitespacers: 
        ARTPF_ART_whitespacers();
        break;
      case ARTX_DESPATCH: 
        if (artNoDescriptors()) { 
          artCheckAcceptance();
          artParseCompleteTime = artReadClock();
          return;
         }
        artUnloadDescriptor();
    }
}

public void ARTSet1initialise() {
  ARTSet1 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet1, 0, artSetExtent, false);
}

public void ARTSet20initialise() {
  ARTSet20 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet20, 0, artSetExtent, false);
  ARTSet20[ARTTB_ID] = true;
  ARTSet20[ARTL_ART_TypeNest] = true;
}

public void ARTSet197initialise() {
  ARTSet197 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet197, 0, artSetExtent, false);
  ARTSet197[ARTTB_CHAR_BQ] = true;
  ARTSet197[ARTTB_ID] = true;
  ARTSet197[ARTTB_STRING_BRACE_NEST] = true;
  ARTSet197[ARTTB_STRING_DOLLAR] = true;
  ARTSet197[ARTTB_STRING_DQ] = true;
  ARTSet197[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet197[ARTTS__HASH] = true;
  ARTSet197[ARTTS__AMPERSAND] = true;
  ARTSet197[ARTTS__LPAR] = true;
  ARTSet197[ARTTS__BACKSLASH_BACKSLASH] = true;
  ARTSet197[ARTL_ART_CHAR_BQ] = true;
  ARTSet197[ARTL_ART_ID] = true;
  ARTSet197[ARTL_ART_STRING_BRACE_NEST] = true;
  ARTSet197[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet197[ARTL_ART_STRING_DQ] = true;
  ARTSet197[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet197[ARTL_ART_abbrev] = true;
  ARTSet197[ARTL_ART_action] = true;
  ARTSet197[ARTL_ART_alt] = true;
  ARTSet197[ARTL_ART_builtinTerminal] = true;
  ARTSet197[ARTL_ART_caseInsensitiveTerminal] = true;
  ARTSet197[ARTL_ART_caseSensitiveTerminal] = true;
  ARTSet197[ARTL_ART_cat] = true;
  ARTSet197[ARTL_ART_catTail] = true;
  ARTSet197[ARTL_ART_characterSetTerminal] = true;
  ARTSet197[ARTL_ART_characterTerminal] = true;
  ARTSet197[ARTL_ART_diff] = true;
  ARTSet197[ARTL_ART_element1] = true;
  ARTSet197[ARTL_ART_epsilon] = true;
  ARTSet197[ARTL_ART_iter] = true;
  ARTSet197[ARTL_ART_nonterminal] = true;
  ARTSet197[ARTL_ART_not] = true;
  ARTSet197[ARTL_ART_slot] = true;
  ARTSet197[ARTL_ART_union] = true;
}

public void ARTSet129initialise() {
  ARTSet129 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet129, 0, artSetExtent, false);
  ARTSet129[ARTTS_twePrint] = true;
}

public void ARTSet55initialise() {
  ARTSet55 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet55, 0, artSetExtent, false);
  ARTSet55[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet55[ARTL_ART_STRING_PLAIN_SQ] = true;
}

public void ARTSet39initialise() {
  ARTSet39 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet39, 0, artSetExtent, false);
  ARTSet39[ARTTS__COLON] = true;
  ARTSet39[ARTL_ART_name] = true;
}

public void ARTSet180initialise() {
  ARTSet180 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet180, 0, artSetExtent, false);
  ARTSet180[ARTTS_lcnpLinkedAPI] = true;
}

public void ARTSet150initialise() {
  ARTSet150 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet150, 0, artSetExtent, false);
  ARTSet150[ARTTS_generateDynamic] = true;
}

public void ARTSet67initialise() {
  ARTSet67 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet67, 0, artSetExtent, false);
  ARTSet67[ARTTB_ID] = true;
  ARTSet67[ARTTB_STRING_DOLLAR] = true;
  ARTSet67[ARTTB_STRING_DQ] = true;
  ARTSet67[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet67[ARTTS__AMPERSAND] = true;
  ARTSet67[ARTTS__LPAR] = true;
  ARTSet67[ARTTS__PERIOD] = true;
  ARTSet67[ARTTS_anyBuiltinTerminal] = true;
  ARTSet67[ARTTS_anyCaseInsensitiveTerminal] = true;
  ARTSet67[ARTTS_anyCaseSensitiveTerminal] = true;
  ARTSet67[ARTTS_anyCharacterTerminal] = true;
  ARTSet67[ARTTS_anyLiteralTerminal] = true;
  ARTSet67[ARTTS_anyNonterminal] = true;
  ARTSet67[ARTTS_anyParaterminal] = true;
  ARTSet67[ARTTS_anyTerminal] = true;
  ARTSet67[ARTL_ART_ID] = true;
  ARTSet67[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet67[ARTL_ART_STRING_DQ] = true;
  ARTSet67[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet67[ARTL_ART_builtinTerminal] = true;
  ARTSet67[ARTL_ART_caseInsensitiveTerminal] = true;
  ARTSet67[ARTL_ART_caseSensitiveTerminal] = true;
  ARTSet67[ARTL_ART_choiceSlot] = true;
  ARTSet67[ARTL_ART_chooseElement] = true;
  ARTSet67[ARTL_ART_nonterminal] = true;
}

public void ARTSet71initialise() {
  ARTSet71 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet71, 0, artSetExtent, false);
  ARTSet71[ARTTB_ID] = true;
  ARTSet71[ARTTB_STRING_DOLLAR] = true;
  ARTSet71[ARTL_ART_ID] = true;
  ARTSet71[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet71[ARTL_ART_nonterminal] = true;
}

public void ARTSet33initialise() {
  ARTSet33 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet33, 0, artSetExtent, false);
  ARTSet33[ARTTB_CHAR_BQ] = true;
  ARTSet33[ARTTB_ID] = true;
  ARTSet33[ARTTB_STRING_BRACE_NEST] = true;
  ARTSet33[ARTTB_STRING_DOLLAR] = true;
  ARTSet33[ARTTB_STRING_DQ] = true;
  ARTSet33[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet33[ARTTS__HASH] = true;
  ARTSet33[ARTTS__AMPERSAND] = true;
  ARTSet33[ARTTS__LPAR] = true;
  ARTSet33[ARTTS__BACKSLASH_BACKSLASH] = true;
  ARTSet33[ARTL_ART_CHAR_BQ] = true;
  ARTSet33[ARTL_ART_ID] = true;
  ARTSet33[ARTL_ART_STRING_BRACE_NEST] = true;
  ARTSet33[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet33[ARTL_ART_STRING_DQ] = true;
  ARTSet33[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet33[ARTL_ART_abbrev] = true;
  ARTSet33[ARTL_ART_action] = true;
  ARTSet33[ARTL_ART_builtinTerminal] = true;
  ARTSet33[ARTL_ART_caseInsensitiveTerminal] = true;
  ARTSet33[ARTL_ART_caseSensitiveTerminal] = true;
  ARTSet33[ARTL_ART_cat] = true;
  ARTSet33[ARTL_ART_catTail] = true;
  ARTSet33[ARTL_ART_characterSetTerminal] = true;
  ARTSet33[ARTL_ART_characterTerminal] = true;
  ARTSet33[ARTL_ART_diff] = true;
  ARTSet33[ARTL_ART_element1] = true;
  ARTSet33[ARTL_ART_epsilon] = true;
  ARTSet33[ARTL_ART_iter] = true;
  ARTSet33[ARTL_ART_nonterminal] = true;
  ARTSet33[ARTL_ART_not] = true;
  ARTSet33[ARTL_ART_slot] = true;
  ARTSet33[ARTL_ART_union] = true;
}

public void ARTSet165initialise() {
  ARTSet165 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet165, 0, artSetExtent, false);
  ARTSet165[ARTTS_earleyLinkedAPI] = true;
}

public void ARTSet195initialise() {
  ARTSet195 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet195, 0, artSetExtent, false);
  ARTSet195[ARTTB_CHAR_BQ] = true;
  ARTSet195[ARTL_ART_CHAR_BQ] = true;
  ARTSet195[ARTL_ART_characterTerminal] = true;
}

public void ARTSet192initialise() {
  ARTSet192 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet192, 0, artSetExtent, false);
  ARTSet192[ARTTS_grammarWrite] = true;
}

public void ARTSet43initialise() {
  ARTSet43 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet43, 0, artSetExtent, false);
  ARTSet43[ARTX_EOS] = true;
  ARTSet43[ARTTB_CHAR_BQ] = true;
  ARTSet43[ARTTB_ID] = true;
  ARTSet43[ARTTB_STRING_BRACE_NEST] = true;
  ARTSet43[ARTTB_STRING_DOLLAR] = true;
  ARTSet43[ARTTB_STRING_DQ] = true;
  ARTSet43[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet43[ARTTS__SHREIK] = true;
  ARTSet43[ARTTS__HASH] = true;
  ARTSet43[ARTTS__AMPERSAND] = true;
  ARTSet43[ARTTS__LPAR] = true;
  ARTSet43[ARTTS__RPAR] = true;
  ARTSet43[ARTTS__STAR] = true;
  ARTSet43[ARTTS__PLUS] = true;
  ARTSet43[ARTTS__QUERY] = true;
  ARTSet43[ARTTS__AT] = true;
  ARTSet43[ARTTS__BACKSLASH_BACKSLASH] = true;
  ARTSet43[ARTTS__BAR] = true;
  ARTSet43[ARTTS__BAR_BAR] = true;
  ARTSet43[ARTL_ART_CHAR_BQ] = true;
  ARTSet43[ARTL_ART_ID] = true;
  ARTSet43[ARTL_ART_STRING_BRACE_NEST] = true;
  ARTSet43[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet43[ARTL_ART_STRING_DQ] = true;
  ARTSet43[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet43[ARTL_ART_abbrev] = true;
  ARTSet43[ARTL_ART_action] = true;
  ARTSet43[ARTL_ART_builtinTerminal] = true;
  ARTSet43[ARTL_ART_caseInsensitiveTerminal] = true;
  ARTSet43[ARTL_ART_caseSensitiveTerminal] = true;
  ARTSet43[ARTL_ART_catTail] = true;
  ARTSet43[ARTL_ART_characterSetTerminal] = true;
  ARTSet43[ARTL_ART_characterTerminal] = true;
  ARTSet43[ARTL_ART_diff] = true;
  ARTSet43[ARTL_ART_element1] = true;
  ARTSet43[ARTL_ART_epsilon] = true;
  ARTSet43[ARTL_ART_grammarRule] = true;
  ARTSet43[ARTL_ART_iter] = true;
  ARTSet43[ARTL_ART_nonterminal] = true;
  ARTSet43[ARTL_ART_not] = true;
  ARTSet43[ARTL_ART_slot] = true;
  ARTSet43[ARTL_ART_textElement] = true;
  ARTSet43[ARTL_ART_textElements] = true;
  ARTSet43[ARTL_ART_union] = true;
}

public void ARTSet98initialise() {
  ARTSet98 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet98, 0, artSetExtent, false);
  ARTSet98[ARTX_EOS] = true;
  ARTSet98[ARTTB_CHAR_BQ] = true;
  ARTSet98[ARTTB_ID] = true;
  ARTSet98[ARTTB_STRING_BRACE_NEST] = true;
  ARTSet98[ARTTB_STRING_DOLLAR] = true;
  ARTSet98[ARTTB_STRING_DQ] = true;
  ARTSet98[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet98[ARTTS__SHREIK] = true;
  ARTSet98[ARTTS__HASH] = true;
  ARTSet98[ARTTS__AMPERSAND] = true;
  ARTSet98[ARTTS__LPAR] = true;
  ARTSet98[ARTTS__RPAR] = true;
  ARTSet98[ARTTS__STAR] = true;
  ARTSet98[ARTTS__PLUS] = true;
  ARTSet98[ARTTS__QUERY] = true;
  ARTSet98[ARTTS__AT] = true;
  ARTSet98[ARTTS__BACKSLASH_BACKSLASH] = true;
  ARTSet98[ARTTS__BAR] = true;
  ARTSet98[ARTL_ART_CHAR_BQ] = true;
  ARTSet98[ARTL_ART_ID] = true;
  ARTSet98[ARTL_ART_STRING_BRACE_NEST] = true;
  ARTSet98[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet98[ARTL_ART_STRING_DQ] = true;
  ARTSet98[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet98[ARTL_ART_abbrev] = true;
  ARTSet98[ARTL_ART_action] = true;
  ARTSet98[ARTL_ART_builtinTerminal] = true;
  ARTSet98[ARTL_ART_caseInsensitiveTerminal] = true;
  ARTSet98[ARTL_ART_caseSensitiveTerminal] = true;
  ARTSet98[ARTL_ART_catTail] = true;
  ARTSet98[ARTL_ART_characterSetTerminal] = true;
  ARTSet98[ARTL_ART_characterTerminal] = true;
  ARTSet98[ARTL_ART_diff] = true;
  ARTSet98[ARTL_ART_element1] = true;
  ARTSet98[ARTL_ART_epsilon] = true;
  ARTSet98[ARTL_ART_grammarRule] = true;
  ARTSet98[ARTL_ART_iter] = true;
  ARTSet98[ARTL_ART_nonterminal] = true;
  ARTSet98[ARTL_ART_not] = true;
  ARTSet98[ARTL_ART_slot] = true;
  ARTSet98[ARTL_ART_textElement] = true;
  ARTSet98[ARTL_ART_textElements] = true;
  ARTSet98[ARTL_ART_union] = true;
}

public void ARTSet81initialise() {
  ARTSet81 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet81, 0, artSetExtent, false);
  ARTSet81[ARTTS_anyCaseInsensitiveTerminal] = true;
}

public void ARTSet47initialise() {
  ARTSet47 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet47, 0, artSetExtent, false);
  ARTSet47[ARTTB_ID] = true;
  ARTSet47[ARTL_ART_TYPE] = true;
  ARTSet47[ARTL_ART_TypeNest] = true;
}

public void ARTSet170initialise() {
  ARTSet170 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet170, 0, artSetExtent, false);
  ARTSet170[ARTTS_earleyTableLinkedAPI] = true;
}

public void ARTSet42initialise() {
  ARTSet42 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet42, 0, artSetExtent, false);
  ARTSet42[ARTTS__COLON] = true;
  ARTSet42[ARTTS__LT] = true;
  ARTSet42[ARTTS__UPARROW] = true;
  ARTSet42[ARTTS__UPARROW_UPARROW] = true;
  ARTSet42[ARTTS__UPARROW_UPARROW_UPARROW] = true;
  ARTSet42[ARTTS__UPARROW_] = true;
  ARTSet42[ARTL_ART_annotation] = true;
  ARTSet42[ARTL_ART_delay] = true;
  ARTSet42[ARTL_ART_fold] = true;
  ARTSet42[ARTL_ART_name] = true;
}

public void ARTSet97initialise() {
  ARTSet97 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet97, 0, artSetExtent, false);
  ARTSet97[ARTTB_CHAR_BQ] = true;
  ARTSet97[ARTTB_ID] = true;
  ARTSet97[ARTTB_STRING_DOLLAR] = true;
  ARTSet97[ARTTB_STRING_DQ] = true;
  ARTSet97[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet97[ARTTS__HASH] = true;
  ARTSet97[ARTTS__AMPERSAND] = true;
  ARTSet97[ARTTS__LPAR] = true;
  ARTSet97[ARTTS__BACKSLASH_BACKSLASH] = true;
  ARTSet97[ARTL_ART_CHAR_BQ] = true;
  ARTSet97[ARTL_ART_ID] = true;
  ARTSet97[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet97[ARTL_ART_STRING_DQ] = true;
  ARTSet97[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet97[ARTL_ART_builtinTerminal] = true;
  ARTSet97[ARTL_ART_caseInsensitiveTerminal] = true;
  ARTSet97[ARTL_ART_caseSensitiveTerminal] = true;
  ARTSet97[ARTL_ART_characterSetTerminal] = true;
  ARTSet97[ARTL_ART_characterTerminal] = true;
  ARTSet97[ARTL_ART_diff] = true;
  ARTSet97[ARTL_ART_element1] = true;
  ARTSet97[ARTL_ART_epsilon] = true;
  ARTSet97[ARTL_ART_nonterminal] = true;
  ARTSet97[ARTL_ART_not] = true;
  ARTSet97[ARTL_ART_union] = true;
}

public void ARTSet65initialise() {
  ARTSet65 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet65, 0, artSetExtent, false);
  ARTSet65[ARTTB_ID] = true;
  ARTSet65[ARTTB_STRING_DOLLAR] = true;
  ARTSet65[ARTTB_STRING_DQ] = true;
  ARTSet65[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet65[ARTTS__AMPERSAND] = true;
  ARTSet65[ARTTS__LPAR] = true;
  ARTSet65[ARTTS__PERIOD] = true;
  ARTSet65[ARTTS_anyBuiltinTerminal] = true;
  ARTSet65[ARTTS_anyCaseInsensitiveTerminal] = true;
  ARTSet65[ARTTS_anyCaseSensitiveTerminal] = true;
  ARTSet65[ARTTS_anyCharacterTerminal] = true;
  ARTSet65[ARTTS_anyLiteralTerminal] = true;
  ARTSet65[ARTTS_anyNonterminal] = true;
  ARTSet65[ARTTS_anyParaterminal] = true;
  ARTSet65[ARTTS_anyTerminal] = true;
  ARTSet65[ARTL_ART_ID] = true;
  ARTSet65[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet65[ARTL_ART_STRING_DQ] = true;
  ARTSet65[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet65[ARTL_ART_builtinTerminal] = true;
  ARTSet65[ARTL_ART_caseInsensitiveTerminal] = true;
  ARTSet65[ARTL_ART_caseSensitiveTerminal] = true;
  ARTSet65[ARTL_ART_chooseElement] = true;
  ARTSet65[ARTL_ART_nonterminal] = true;
}

public void ARTSet125initialise() {
  ARTSet125 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet125, 0, artSetExtent, false);
  ARTSet125[ARTTS_tweExtents] = true;
}

public void ARTSet161initialise() {
  ARTSet161 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet161, 0, artSetExtent, false);
  ARTSet161[ARTTS_lexerData] = true;
}

public void ARTSet173initialise() {
  ARTSet173 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet173, 0, artSetExtent, false);
  ARTSet173[ARTTS_earleyTableIndexedData] = true;
}

public void ARTSet127initialise() {
  ARTSet127 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet127, 0, artSetExtent, false);
  ARTSet127[ARTTS_tweRecursive] = true;
}

public void ARTSet3initialise() {
  ARTSet3 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet3, 0, artSetExtent, false);
  ARTSet3[ARTTS_true] = true;
}

public void ARTSet64initialise() {
  ARTSet64 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet64, 0, artSetExtent, false);
  ARTSet64[ARTTS__PERIOD_PERIOD] = true;
}

public void ARTSet91initialise() {
  ARTSet91 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet91, 0, artSetExtent, false);
  ARTSet91[ARTTS__GT_GT] = true;
}

public void ARTSet205initialise() {
  ARTSet205 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet205, 0, artSetExtent, false);
  ARTSet205[ARTTS__UPARROW_UPARROW] = true;
}

public void ARTSet203initialise() {
  ARTSet203 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet203, 0, artSetExtent, false);
  ARTSet203[ARTTS__UPARROW_] = true;
}

public void ARTSet108initialise() {
  ARTSet108 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet108, 0, artSetExtent, false);
  ARTSet108[ARTTS_paraterminal] = true;
}

public void ARTSet220initialise() {
  ARTSet220 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet220, 0, artSetExtent, false);
  ARTSet220[ARTX_EOS] = true;
}

public void ARTSet45initialise() {
  ARTSet45 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet45, 0, artSetExtent, false);
  ARTSet45[ARTTB_ID] = true;
  ARTSet45[ARTL_ART_ID] = true;
}

public void ARTSet99initialise() {
  ARTSet99 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet99, 0, artSetExtent, false);
  ARTSet99[ARTTB_CHAR_BQ] = true;
  ARTSet99[ARTTB_ID] = true;
  ARTSet99[ARTTB_STRING_DOLLAR] = true;
  ARTSet99[ARTTB_STRING_DQ] = true;
  ARTSet99[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet99[ARTTS__HASH] = true;
  ARTSet99[ARTTS__AMPERSAND] = true;
  ARTSet99[ARTTS__LPAR] = true;
  ARTSet99[ARTTS__BACKSLASH_BACKSLASH] = true;
  ARTSet99[ARTL_ART_CHAR_BQ] = true;
  ARTSet99[ARTL_ART_ID] = true;
  ARTSet99[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet99[ARTL_ART_STRING_DQ] = true;
  ARTSet99[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet99[ARTL_ART_builtinTerminal] = true;
  ARTSet99[ARTL_ART_caseInsensitiveTerminal] = true;
  ARTSet99[ARTL_ART_caseSensitiveTerminal] = true;
  ARTSet99[ARTL_ART_characterSetTerminal] = true;
  ARTSet99[ARTL_ART_characterTerminal] = true;
  ARTSet99[ARTL_ART_element1] = true;
  ARTSet99[ARTL_ART_epsilon] = true;
  ARTSet99[ARTL_ART_nonterminal] = true;
  ARTSet99[ARTL_ART_not] = true;
  ARTSet99[ARTL_ART_union] = true;
}

public void ARTSet54initialise() {
  ARTSet54 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet54, 0, artSetExtent, false);
  ARTSet54[ARTTB_STRING_DQ] = true;
  ARTSet54[ARTL_ART_STRING_DQ] = true;
}

public void ARTSet78initialise() {
  ARTSet78 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet78, 0, artSetExtent, false);
  ARTSet78[ARTTS_anyCharacterTerminal] = true;
}

public void ARTSet115initialise() {
  ARTSet115 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet115, 0, artSetExtent, false);
  ARTSet115[ARTTS_choose] = true;
}

public void ARTSet5initialise() {
  ARTSet5 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet5, 0, artSetExtent, false);
  ARTSet5[ARTTS_false] = true;
}

public void ARTSet105initialise() {
  ARTSet105 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet105, 0, artSetExtent, false);
  ARTSet105[ARTTS_start] = true;
}

public void ARTSet189initialise() {
  ARTSet189 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet189, 0, artSetExtent, false);
  ARTSet189[ARTTS_mgllGeneratorPool] = true;
}

public void ARTSet185initialise() {
  ARTSet185 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet185, 0, artSetExtent, false);
  ARTSet185[ARTTS_gllGeneratorPool] = true;
}

public void ARTSet40initialise() {
  ARTSet40 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet40, 0, artSetExtent, false);
  ARTSet40[ARTTS__LT] = true;
  ARTSet40[ARTL_ART_delay] = true;
}

public void ARTSet75initialise() {
  ARTSet75 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet75, 0, artSetExtent, false);
  ARTSet75[ARTTB_STRING_DQ] = true;
  ARTSet75[ARTL_ART_STRING_DQ] = true;
  ARTSet75[ARTL_ART_caseInsensitiveTerminal] = true;
}

public void ARTSet207initialise() {
  ARTSet207 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet207, 0, artSetExtent, false);
  ARTSet207[ARTTS__COLON_COLON_EQUAL] = true;
  ARTSet207[ARTTS__LT] = true;
  ARTSet207[ARTL_ART_attributesOpt] = true;
}

public void ARTSet138initialise() {
  ARTSet138 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet138, 0, artSetExtent, false);
  ARTSet138[ARTTS_tweTokenWrite] = true;
}

public void ARTSet32initialise() {
  ARTSet32 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet32, 0, artSetExtent, false);
  ARTSet32[ARTTB_STRING_BRACE_NEST] = true;
  ARTSet32[ARTL_ART_STRING_BRACE_NEST] = true;
}

public void ARTSet163initialise() {
  ARTSet163 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet163, 0, artSetExtent, false);
  ARTSet163[ARTTS_earley] = true;
}

public void ARTSet191initialise() {
  ARTSet191 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet191, 0, artSetExtent, false);
  ARTSet191[ARTTS_osbrdGenerator] = true;
}

public void ARTSet218initialise() {
  ARTSet218 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet218, 0, artSetExtent, false);
  ARTSet218[ARTTB_STRING_BRACE_NEST] = true;
  ARTSet218[ARTL_ART_STRING_BRACE_NEST] = true;
  ARTSet218[ARTL_ART_action] = true;
}

public void ARTSet95initialise() {
  ARTSet95 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet95, 0, artSetExtent, false);
  ARTSet95[ARTTB_ID] = true;
  ARTSet95[ARTTB_STRING_DOLLAR] = true;
  ARTSet95[ARTTB_STRING_DQ] = true;
  ARTSet95[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet95[ARTTS__AMPERSAND] = true;
  ARTSet95[ARTTS__LPAR] = true;
  ARTSet95[ARTTS__PERIOD] = true;
  ARTSet95[ARTTS_anyBuiltinTerminal] = true;
  ARTSet95[ARTTS_anyCaseInsensitiveTerminal] = true;
  ARTSet95[ARTTS_anyCaseSensitiveTerminal] = true;
  ARTSet95[ARTTS_anyCharacterTerminal] = true;
  ARTSet95[ARTTS_anyLiteralTerminal] = true;
  ARTSet95[ARTTS_anyNonterminal] = true;
  ARTSet95[ARTTS_anyParaterminal] = true;
  ARTSet95[ARTTS_anyTerminal] = true;
  ARTSet95[ARTTS_longest] = true;
  ARTSet95[ARTTS_shortest] = true;
  ARTSet95[ARTL_ART_ID] = true;
  ARTSet95[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet95[ARTL_ART_STRING_DQ] = true;
  ARTSet95[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet95[ARTL_ART_builtinTerminal] = true;
  ARTSet95[ARTL_ART_caseInsensitiveTerminal] = true;
  ARTSet95[ARTL_ART_caseSensitiveTerminal] = true;
  ARTSet95[ARTL_ART_chooseDiff] = true;
  ARTSet95[ARTL_ART_chooseElement] = true;
  ARTSet95[ARTL_ART_chooseUnionIntersection] = true;
  ARTSet95[ARTL_ART_chooser] = true;
  ARTSet95[ARTL_ART_nonterminal] = true;
}

public void ARTSet76initialise() {
  ARTSet76 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet76, 0, artSetExtent, false);
  ARTSet76[ARTTS__AMPERSAND] = true;
  ARTSet76[ARTL_ART_builtinTerminal] = true;
}

public void ARTSet90initialise() {
  ARTSet90 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet90, 0, artSetExtent, false);
  ARTSet90[ARTX_EOS] = true;
  ARTSet90[ARTTB_ID] = true;
  ARTSet90[ARTTB_STRING_DOLLAR] = true;
  ARTSet90[ARTTB_STRING_DQ] = true;
  ARTSet90[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet90[ARTTS__SHREIK] = true;
  ARTSet90[ARTTS__AMPERSAND] = true;
  ARTSet90[ARTTS__LPAR] = true;
  ARTSet90[ARTTS__PERIOD] = true;
  ARTSet90[ARTTS_anyBuiltinTerminal] = true;
  ARTSet90[ARTTS_anyCaseInsensitiveTerminal] = true;
  ARTSet90[ARTTS_anyCaseSensitiveTerminal] = true;
  ARTSet90[ARTTS_anyCharacterTerminal] = true;
  ARTSet90[ARTTS_anyLiteralTerminal] = true;
  ARTSet90[ARTTS_anyNonterminal] = true;
  ARTSet90[ARTTS_anyParaterminal] = true;
  ARTSet90[ARTTS_anyTerminal] = true;
  ARTSet90[ARTTS_longest] = true;
  ARTSet90[ARTTS_shortest] = true;
  ARTSet90[ARTL_ART_ID] = true;
  ARTSet90[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet90[ARTL_ART_STRING_DQ] = true;
  ARTSet90[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet90[ARTL_ART_builtinTerminal] = true;
  ARTSet90[ARTL_ART_caseInsensitiveTerminal] = true;
  ARTSet90[ARTL_ART_caseSensitiveTerminal] = true;
  ARTSet90[ARTL_ART_chooseDiff] = true;
  ARTSet90[ARTL_ART_chooseElement] = true;
  ARTSet90[ARTL_ART_chooseUnionIntersection] = true;
  ARTSet90[ARTL_ART_chooser] = true;
  ARTSet90[ARTL_ART_choosers] = true;
  ARTSet90[ARTL_ART_grammarRule] = true;
  ARTSet90[ARTL_ART_nonterminal] = true;
  ARTSet90[ARTL_ART_textElement] = true;
  ARTSet90[ARTL_ART_textElements] = true;
}

public void ARTSet202initialise() {
  ARTSet202 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet202, 0, artSetExtent, false);
  ARTSet202[ARTTS__UPARROW] = true;
  ARTSet202[ARTTS__UPARROW_UPARROW] = true;
  ARTSet202[ARTTS__UPARROW_UPARROW_UPARROW] = true;
  ARTSet202[ARTTS__UPARROW_] = true;
}

public void ARTSet116initialise() {
  ARTSet116 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet116, 0, artSetExtent, false);
  ARTSet116[ARTTS_prelude] = true;
}

public void ARTSet89initialise() {
  ARTSet89 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet89, 0, artSetExtent, false);
  ARTSet89[ARTTB_ID] = true;
  ARTSet89[ARTTB_STRING_DOLLAR] = true;
  ARTSet89[ARTTB_STRING_DQ] = true;
  ARTSet89[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet89[ARTTS__AMPERSAND] = true;
  ARTSet89[ARTTS__LPAR] = true;
  ARTSet89[ARTTS__PERIOD] = true;
  ARTSet89[ARTTS_anyBuiltinTerminal] = true;
  ARTSet89[ARTTS_anyCaseInsensitiveTerminal] = true;
  ARTSet89[ARTTS_anyCaseSensitiveTerminal] = true;
  ARTSet89[ARTTS_anyCharacterTerminal] = true;
  ARTSet89[ARTTS_anyLiteralTerminal] = true;
  ARTSet89[ARTTS_anyNonterminal] = true;
  ARTSet89[ARTTS_anyParaterminal] = true;
  ARTSet89[ARTTS_anyTerminal] = true;
  ARTSet89[ARTTS_longest] = true;
  ARTSet89[ARTTS_shortest] = true;
  ARTSet89[ARTL_ART_ID] = true;
  ARTSet89[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet89[ARTL_ART_STRING_DQ] = true;
  ARTSet89[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet89[ARTL_ART_builtinTerminal] = true;
  ARTSet89[ARTL_ART_caseInsensitiveTerminal] = true;
  ARTSet89[ARTL_ART_caseSensitiveTerminal] = true;
  ARTSet89[ARTL_ART_chooseDiff] = true;
  ARTSet89[ARTL_ART_chooseElement] = true;
  ARTSet89[ARTL_ART_chooseUnionIntersection] = true;
  ARTSet89[ARTL_ART_nonterminal] = true;
}

public void ARTSet118initialise() {
  ARTSet118 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet118, 0, artSetExtent, false);
  ARTSet118[ARTTS_verbosity] = true;
}

public void ARTSet156initialise() {
  ARTSet156 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet156, 0, artSetExtent, false);
  ARTSet156[ARTTS_FIFODescriptors] = true;
}

public void ARTSet19initialise() {
  ARTSet19 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet19, 0, artSetExtent, false);
  ARTSet19[ARTTB_STRING_PLAIN_SQ] = true;
}

public void ARTSet106initialise() {
  ARTSet106 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet106, 0, artSetExtent, false);
  ARTSet106[ARTTS_whitespace] = true;
}

public void ARTSet181initialise() {
  ARTSet181 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet181, 0, artSetExtent, false);
  ARTSet181[ARTTS_lcnpIndexedAPI] = true;
}

public void ARTSet193initialise() {
  ARTSet193 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet193, 0, artSetExtent, false);
  ARTSet193[ARTTB_CHAR_BQ] = true;
  ARTSet193[ARTTB_ID] = true;
  ARTSet193[ARTTB_STRING_DOLLAR] = true;
  ARTSet193[ARTTB_STRING_DQ] = true;
  ARTSet193[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet193[ARTTS__HASH] = true;
  ARTSet193[ARTTS__AMPERSAND] = true;
  ARTSet193[ARTTS__LPAR] = true;
  ARTSet193[ARTL_ART_CHAR_BQ] = true;
  ARTSet193[ARTL_ART_ID] = true;
  ARTSet193[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet193[ARTL_ART_STRING_DQ] = true;
  ARTSet193[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet193[ARTL_ART_builtinTerminal] = true;
  ARTSet193[ARTL_ART_caseInsensitiveTerminal] = true;
  ARTSet193[ARTL_ART_caseSensitiveTerminal] = true;
  ARTSet193[ARTL_ART_characterSetTerminal] = true;
  ARTSet193[ARTL_ART_characterTerminal] = true;
  ARTSet193[ARTL_ART_epsilon] = true;
  ARTSet193[ARTL_ART_nonterminal] = true;
}

public void ARTSet140initialise() {
  ARTSet140 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet140, 0, artSetExtent, false);
  ARTSet140[ARTTS_gssShow] = true;
}

public void ARTSet190initialise() {
  ARTSet190 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet190, 0, artSetExtent, false);
  ARTSet190[ARTTS_osbrd] = true;
}

public void ARTSet107initialise() {
  ARTSet107 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet107, 0, artSetExtent, false);
  ARTSet107[ARTTB_CHAR_BQ] = true;
  ARTSet107[ARTTB_ID] = true;
  ARTSet107[ARTTB_STRING_DOLLAR] = true;
  ARTSet107[ARTTS__AMPERSAND] = true;
  ARTSet107[ARTL_ART_CHAR_BQ] = true;
  ARTSet107[ARTL_ART_ID] = true;
  ARTSet107[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet107[ARTL_ART_builtinTerminal] = true;
  ARTSet107[ARTL_ART_characterTerminal] = true;
  ARTSet107[ARTL_ART_nonterminal] = true;
  ARTSet107[ARTL_ART_whitespacer] = true;
  ARTSet107[ARTL_ART_whitespacers] = true;
}

public void ARTSet68initialise() {
  ARTSet68 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet68, 0, artSetExtent, false);
  ARTSet68[ARTTB_ID] = true;
  ARTSet68[ARTTB_STRING_DOLLAR] = true;
  ARTSet68[ARTTB_STRING_DQ] = true;
  ARTSet68[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet68[ARTTS__AMPERSAND] = true;
  ARTSet68[ARTTS__LPAR] = true;
  ARTSet68[ARTTS__PERIOD] = true;
  ARTSet68[ARTTS_anyBuiltinTerminal] = true;
  ARTSet68[ARTTS_anyCaseInsensitiveTerminal] = true;
  ARTSet68[ARTTS_anyCaseSensitiveTerminal] = true;
  ARTSet68[ARTTS_anyCharacterTerminal] = true;
  ARTSet68[ARTTS_anyLiteralTerminal] = true;
  ARTSet68[ARTTS_anyNonterminal] = true;
  ARTSet68[ARTTS_anyParaterminal] = true;
  ARTSet68[ARTTS_anyTerminal] = true;
  ARTSet68[ARTL_ART_ID] = true;
  ARTSet68[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet68[ARTL_ART_STRING_DQ] = true;
  ARTSet68[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet68[ARTL_ART_builtinTerminal] = true;
  ARTSet68[ARTL_ART_caseInsensitiveTerminal] = true;
  ARTSet68[ARTL_ART_caseSensitiveTerminal] = true;
  ARTSet68[ARTL_ART_chooseDiff] = true;
  ARTSet68[ARTL_ART_chooseElement] = true;
  ARTSet68[ARTL_ART_chooseUnionIntersection] = true;
  ARTSet68[ARTL_ART_nonterminal] = true;
}

public void ARTSet119initialise() {
  ARTSet119 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet119, 0, artSetExtent, false);
  ARTSet119[ARTTB_INTEGER] = true;
  ARTSet119[ARTL_ART_INTEGER] = true;
}

public void ARTSet114initialise() {
  ARTSet114 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet114, 0, artSetExtent, false);
  ARTSet114[ARTTS_absorb] = true;
}

public void ARTSet73initialise() {
  ARTSet73 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet73, 0, artSetExtent, false);
  ARTSet73[ARTX_EOS] = true;
  ARTSet73[ARTTB_ID] = true;
  ARTSet73[ARTTB_STRING_DOLLAR] = true;
  ARTSet73[ARTTB_STRING_DQ] = true;
  ARTSet73[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet73[ARTTS__SHREIK] = true;
  ARTSet73[ARTTS__AMPERSAND] = true;
  ARTSet73[ARTTS__LPAR] = true;
  ARTSet73[ARTTS__RPAR] = true;
  ARTSet73[ARTTS__PERIOD] = true;
  ARTSet73[ARTTS__SLASH] = true;
  ARTSet73[ARTTS__LT] = true;
  ARTSet73[ARTTS__LT_LT] = true;
  ARTSet73[ARTTS__GT] = true;
  ARTSet73[ARTTS__GT_GT] = true;
  ARTSet73[ARTTS__BACKSLASH] = true;
  ARTSet73[ARTTS_anyBuiltinTerminal] = true;
  ARTSet73[ARTTS_anyCaseInsensitiveTerminal] = true;
  ARTSet73[ARTTS_anyCaseSensitiveTerminal] = true;
  ARTSet73[ARTTS_anyCharacterTerminal] = true;
  ARTSet73[ARTTS_anyLiteralTerminal] = true;
  ARTSet73[ARTTS_anyNonterminal] = true;
  ARTSet73[ARTTS_anyParaterminal] = true;
  ARTSet73[ARTTS_anyTerminal] = true;
  ARTSet73[ARTTS_longest] = true;
  ARTSet73[ARTTS_shortest] = true;
  ARTSet73[ARTTS__BAR] = true;
  ARTSet73[ARTL_ART_ID] = true;
  ARTSet73[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet73[ARTL_ART_STRING_DQ] = true;
  ARTSet73[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet73[ARTL_ART_builtinTerminal] = true;
  ARTSet73[ARTL_ART_caseInsensitiveTerminal] = true;
  ARTSet73[ARTL_ART_caseSensitiveTerminal] = true;
  ARTSet73[ARTL_ART_choiceSlot] = true;
  ARTSet73[ARTL_ART_chooseDiff] = true;
  ARTSet73[ARTL_ART_chooseElement] = true;
  ARTSet73[ARTL_ART_chooseUnionIntersection] = true;
  ARTSet73[ARTL_ART_chooser] = true;
  ARTSet73[ARTL_ART_choosers] = true;
  ARTSet73[ARTL_ART_grammarRule] = true;
  ARTSet73[ARTL_ART_nonterminal] = true;
  ARTSet73[ARTL_ART_textElement] = true;
  ARTSet73[ARTL_ART_textElements] = true;
}

public void ARTSet177initialise() {
  ARTSet177 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet177, 0, artSetExtent, false);
  ARTSet177[ARTTS_cnpIndexedPool] = true;
}

public void ARTSet215initialise() {
  ARTSet215 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet215, 0, artSetExtent, false);
  ARTSet215[ARTTB_CHAR_BQ] = true;
  ARTSet215[ARTTB_ID] = true;
  ARTSet215[ARTTB_STRING_DOLLAR] = true;
  ARTSet215[ARTTB_STRING_DQ] = true;
  ARTSet215[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet215[ARTTS__HASH] = true;
  ARTSet215[ARTTS__AMPERSAND] = true;
  ARTSet215[ARTTS__LPAR] = true;
  ARTSet215[ARTL_ART_CHAR_BQ] = true;
  ARTSet215[ARTL_ART_ID] = true;
  ARTSet215[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet215[ARTL_ART_STRING_DQ] = true;
  ARTSet215[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet215[ARTL_ART_builtinTerminal] = true;
  ARTSet215[ARTL_ART_caseInsensitiveTerminal] = true;
  ARTSet215[ARTL_ART_caseSensitiveTerminal] = true;
  ARTSet215[ARTL_ART_characterSetTerminal] = true;
  ARTSet215[ARTL_ART_characterTerminal] = true;
  ARTSet215[ARTL_ART_element1] = true;
  ARTSet215[ARTL_ART_epsilon] = true;
  ARTSet215[ARTL_ART_nonterminal] = true;
}

public void ARTSet151initialise() {
  ARTSet151 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet151, 0, artSetExtent, false);
  ARTSet151[ARTTS_generateStatic] = true;
}

public void ARTSet227initialise() {
  ARTSet227 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet227, 0, artSetExtent, false);
  ARTSet227[ARTTB_CHAR_BQ] = true;
  ARTSet227[ARTTB_ID] = true;
  ARTSet227[ARTTB_STRING_DOLLAR] = true;
  ARTSet227[ARTTB_STRING_DQ] = true;
  ARTSet227[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet227[ARTTS__HASH] = true;
  ARTSet227[ARTTS__AMPERSAND] = true;
  ARTSet227[ARTTS__LPAR] = true;
  ARTSet227[ARTTS__BACKSLASH_BACKSLASH] = true;
  ARTSet227[ARTL_ART_CHAR_BQ] = true;
  ARTSet227[ARTL_ART_ID] = true;
  ARTSet227[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet227[ARTL_ART_STRING_DQ] = true;
  ARTSet227[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet227[ARTL_ART_builtinTerminal] = true;
  ARTSet227[ARTL_ART_caseInsensitiveTerminal] = true;
  ARTSet227[ARTL_ART_caseSensitiveTerminal] = true;
  ARTSet227[ARTL_ART_characterSetTerminal] = true;
  ARTSet227[ARTL_ART_characterTerminal] = true;
  ARTSet227[ARTL_ART_element1] = true;
  ARTSet227[ARTL_ART_epsilon] = true;
  ARTSet227[ARTL_ART_nonterminal] = true;
  ARTSet227[ARTL_ART_not] = true;
}

public void ARTSet214initialise() {
  ARTSet214 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet214, 0, artSetExtent, false);
  ARTSet214[ARTTB_CHAR_BQ] = true;
  ARTSet214[ARTTB_ID] = true;
  ARTSet214[ARTTB_STRING_DOLLAR] = true;
  ARTSet214[ARTTB_STRING_DQ] = true;
  ARTSet214[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet214[ARTTS__HASH] = true;
  ARTSet214[ARTTS__AMPERSAND] = true;
  ARTSet214[ARTTS__LPAR] = true;
  ARTSet214[ARTTS__BACKSLASH_BACKSLASH] = true;
  ARTSet214[ARTL_ART_CHAR_BQ] = true;
  ARTSet214[ARTL_ART_ID] = true;
  ARTSet214[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet214[ARTL_ART_STRING_DQ] = true;
  ARTSet214[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet214[ARTL_ART_builtinTerminal] = true;
  ARTSet214[ARTL_ART_caseInsensitiveTerminal] = true;
  ARTSet214[ARTL_ART_caseSensitiveTerminal] = true;
  ARTSet214[ARTL_ART_characterSetTerminal] = true;
  ARTSet214[ARTL_ART_characterTerminal] = true;
  ARTSet214[ARTL_ART_element1] = true;
  ARTSet214[ARTL_ART_epsilon] = true;
  ARTSet214[ARTL_ART_nonterminal] = true;
}

public void ARTSet196initialise() {
  ARTSet196 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet196, 0, artSetExtent, false);
  ARTSet196[ARTTB_CHAR_BQ] = true;
  ARTSet196[ARTL_ART_CHAR_BQ] = true;
  ARTSet196[ARTL_ART_characterSetTerminal] = true;
}

public void ARTSet57initialise() {
  ARTSet57 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet57, 0, artSetExtent, false);
  ARTSet57[ARTX_EOS] = true;
  ARTSet57[ARTTB_ID] = true;
  ARTSet57[ARTTB_STRING_DOLLAR] = true;
  ARTSet57[ARTTS__SHREIK] = true;
  ARTSet57[ARTTS__RPAR] = true;
  ARTSet57[ARTTS__BAR] = true;
  ARTSet57[ARTL_ART_ID] = true;
  ARTSet57[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet57[ARTL_ART_grammarRule] = true;
  ARTSet57[ARTL_ART_nonterminal] = true;
  ARTSet57[ARTL_ART_textElement] = true;
  ARTSet57[ARTL_ART_textElements] = true;
}

public void ARTSet222initialise() {
  ARTSet222 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet222, 0, artSetExtent, false);
  ARTSet222[ARTTS__SHREIK] = true;
}

public void ARTSet201initialise() {
  ARTSet201 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet201, 0, artSetExtent, false);
  ARTSet201[ARTTS__HASH] = true;
}

public void ARTSet53initialise() {
  ARTSet53 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet53, 0, artSetExtent, false);
  ARTSet53[ARTTS__AMPERSAND] = true;
}

public void ARTSet184initialise() {
  ARTSet184 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet184, 0, artSetExtent, false);
  ARTSet184[ARTTS_gll] = true;
}

public void ARTSet69initialise() {
  ARTSet69 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet69, 0, artSetExtent, false);
  ARTSet69[ARTTB_ID] = true;
  ARTSet69[ARTTB_STRING_DOLLAR] = true;
  ARTSet69[ARTTB_STRING_DQ] = true;
  ARTSet69[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet69[ARTTS__AMPERSAND] = true;
  ARTSet69[ARTTS__LPAR] = true;
  ARTSet69[ARTTS__PERIOD] = true;
  ARTSet69[ARTTS_anyBuiltinTerminal] = true;
  ARTSet69[ARTTS_anyCaseInsensitiveTerminal] = true;
  ARTSet69[ARTTS_anyCaseSensitiveTerminal] = true;
  ARTSet69[ARTTS_anyCharacterTerminal] = true;
  ARTSet69[ARTTS_anyLiteralTerminal] = true;
  ARTSet69[ARTTS_anyNonterminal] = true;
  ARTSet69[ARTTS_anyParaterminal] = true;
  ARTSet69[ARTTS_anyTerminal] = true;
  ARTSet69[ARTL_ART_ID] = true;
  ARTSet69[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet69[ARTL_ART_STRING_DQ] = true;
  ARTSet69[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet69[ARTL_ART_builtinTerminal] = true;
  ARTSet69[ARTL_ART_caseInsensitiveTerminal] = true;
  ARTSet69[ARTL_ART_caseSensitiveTerminal] = true;
  ARTSet69[ARTL_ART_chooseElement] = true;
  ARTSet69[ARTL_ART_chooseUnionIntersection] = true;
  ARTSet69[ARTL_ART_nonterminal] = true;
}

public void ARTSet86initialise() {
  ARTSet86 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet86, 0, artSetExtent, false);
  ARTSet86[ARTTS__LPAR] = true;
}

public void ARTSet34initialise() {
  ARTSet34 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet34, 0, artSetExtent, false);
  ARTSet34[ARTTS__RPAR] = true;
}

public void ARTSet29initialise() {
  ARTSet29 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet29, 0, artSetExtent, false);
  ARTSet29[ARTTS__STAR] = true;
}

public void ARTSet153initialise() {
  ARTSet153 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet153, 0, artSetExtent, false);
  ARTSet153[ARTTS_generateFragment] = true;
}

public void ARTSet30initialise() {
  ARTSet30 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet30, 0, artSetExtent, false);
  ARTSet30[ARTTS__PLUS] = true;
}

public void ARTSet229initialise() {
  ARTSet229 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet229, 0, artSetExtent, false);
  ARTSet229[ARTTB_CHAR_BQ] = true;
  ARTSet229[ARTTB_ID] = true;
  ARTSet229[ARTTB_STRING_DOLLAR] = true;
  ARTSet229[ARTTS__AMPERSAND] = true;
  ARTSet229[ARTL_ART_CHAR_BQ] = true;
  ARTSet229[ARTL_ART_ID] = true;
  ARTSet229[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet229[ARTL_ART_builtinTerminal] = true;
  ARTSet229[ARTL_ART_characterTerminal] = true;
  ARTSet229[ARTL_ART_nonterminal] = true;
}

public void ARTSet23initialise() {
  ARTSet23 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet23, 0, artSetExtent, false);
  ARTSet23[ARTTS__COMMA] = true;
}

public void ARTSet141initialise() {
  ARTSet141 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet141, 0, artSetExtent, false);
  ARTSet141[ARTTS_treeShow] = true;
}

public void ARTSet77initialise() {
  ARTSet77 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet77, 0, artSetExtent, false);
  ARTSet77[ARTTS__PERIOD] = true;
}

public void ARTSet59initialise() {
  ARTSet59 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet59, 0, artSetExtent, false);
  ARTSet59[ARTTB_CHAR_BQ] = true;
  ARTSet59[ARTTB_ID] = true;
  ARTSet59[ARTTB_STRING_DOLLAR] = true;
  ARTSet59[ARTTB_STRING_DQ] = true;
  ARTSet59[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet59[ARTTS__HASH] = true;
  ARTSet59[ARTTS__AMPERSAND] = true;
  ARTSet59[ARTTS__LPAR] = true;
  ARTSet59[ARTTS__BACKSLASH_BACKSLASH] = true;
  ARTSet59[ARTL_ART_CHAR_BQ] = true;
  ARTSet59[ARTL_ART_ID] = true;
  ARTSet59[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet59[ARTL_ART_STRING_DQ] = true;
  ARTSet59[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet59[ARTL_ART_abbrev] = true;
  ARTSet59[ARTL_ART_builtinTerminal] = true;
  ARTSet59[ARTL_ART_caseInsensitiveTerminal] = true;
  ARTSet59[ARTL_ART_caseSensitiveTerminal] = true;
  ARTSet59[ARTL_ART_catTail] = true;
  ARTSet59[ARTL_ART_characterSetTerminal] = true;
  ARTSet59[ARTL_ART_characterTerminal] = true;
  ARTSet59[ARTL_ART_diff] = true;
  ARTSet59[ARTL_ART_element1] = true;
  ARTSet59[ARTL_ART_epsilon] = true;
  ARTSet59[ARTL_ART_iter] = true;
  ARTSet59[ARTL_ART_nonterminal] = true;
  ARTSet59[ARTL_ART_not] = true;
  ARTSet59[ARTL_ART_union] = true;
}

public void ARTSet88initialise() {
  ARTSet88 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet88, 0, artSetExtent, false);
  ARTSet88[ARTTS__SLASH] = true;
}

public void ARTSet123initialise() {
  ARTSet123 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet123, 0, artSetExtent, false);
  ARTSet123[ARTTS_inputPrint] = true;
}

public void ARTSet172initialise() {
  ARTSet172 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet172, 0, artSetExtent, false);
  ARTSet172[ARTTS_earleyTableIndexedPool] = true;
}

public void ARTSet72initialise() {
  ARTSet72 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet72, 0, artSetExtent, false);
  ARTSet72[ARTTB_ID] = true;
  ARTSet72[ARTTB_STRING_DOLLAR] = true;
  ARTSet72[ARTTB_STRING_DQ] = true;
  ARTSet72[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet72[ARTTS__AMPERSAND] = true;
  ARTSet72[ARTTS__LPAR] = true;
  ARTSet72[ARTTS__PERIOD] = true;
  ARTSet72[ARTTS_anyBuiltinTerminal] = true;
  ARTSet72[ARTTS_anyCaseInsensitiveTerminal] = true;
  ARTSet72[ARTTS_anyCaseSensitiveTerminal] = true;
  ARTSet72[ARTTS_anyCharacterTerminal] = true;
  ARTSet72[ARTTS_anyLiteralTerminal] = true;
  ARTSet72[ARTTS_anyNonterminal] = true;
  ARTSet72[ARTTS_anyParaterminal] = true;
  ARTSet72[ARTTS_anyTerminal] = true;
  ARTSet72[ARTL_ART_ID] = true;
  ARTSet72[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet72[ARTL_ART_STRING_DQ] = true;
  ARTSet72[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet72[ARTL_ART_builtinTerminal] = true;
  ARTSet72[ARTL_ART_caseInsensitiveTerminal] = true;
  ARTSet72[ARTL_ART_caseSensitiveTerminal] = true;
  ARTSet72[ARTL_ART_nonterminal] = true;
}

public void ARTSet223initialise() {
  ARTSet223 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet223, 0, artSetExtent, false);
  ARTSet223[ARTTS_FIFODescriptors] = true;
  ARTSet223[ARTTS_absorb] = true;
  ARTSet223[ARTTS_choose] = true;
  ARTSet223[ARTTS_cnp] = true;
  ARTSet223[ARTTS_cnpGeneratorPool] = true;
  ARTSet223[ARTTS_cnpIndexedAPI] = true;
  ARTSet223[ARTTS_cnpIndexedPool] = true;
  ARTSet223[ARTTS_cnpLinkedAPI] = true;
  ARTSet223[ARTTS_earley] = true;
  ARTSet223[ARTTS_earley2007LinkedAPI] = true;
  ARTSet223[ARTTS_earleyIndexedAPI] = true;
  ARTSet223[ARTTS_earleyIndexedData] = true;
  ARTSet223[ARTTS_earleyIndexedPool] = true;
  ARTSet223[ARTTS_earleyLinkedAPI] = true;
  ARTSet223[ARTTS_earleyTable] = true;
  ARTSet223[ARTTS_earleyTableIndexedAPI] = true;
  ARTSet223[ARTTS_earleyTableIndexedData] = true;
  ARTSet223[ARTTS_earleyTableIndexedPool] = true;
  ARTSet223[ARTTS_earleyTableLinkedAPI] = true;
  ARTSet223[ARTTS_element] = true;
  ARTSet223[ARTTS_generateDynamic] = true;
  ARTSet223[ARTTS_generateFragment] = true;
  ARTSet223[ARTTS_generatePool] = true;
  ARTSet223[ARTTS_generateState] = true;
  ARTSet223[ARTTS_generateStatic] = true;
  ARTSet223[ARTTS_gll] = true;
  ARTSet223[ARTTS_gllClusteredGeneratorPool] = true;
  ARTSet223[ARTTS_gllGeneratorPool] = true;
  ARTSet223[ARTTS_gllTWEGeneratorPool] = true;
  ARTSet223[ARTTS_grammarWrite] = true;
  ARTSet223[ARTTS_gssShow] = true;
  ARTSet223[ARTTS_import] = true;
  ARTSet223[ARTTS_injectInstance] = true;
  ARTSet223[ARTTS_injectProduction] = true;
  ARTSet223[ARTTS_injectProductionOff] = true;
  ARTSet223[ARTTS_inputPrint] = true;
  ARTSet223[ARTTS_lcnp] = true;
  ARTSet223[ARTTS_lcnpGeneratorPool] = true;
  ARTSet223[ARTTS_lcnpIndexedAPI] = true;
  ARTSet223[ARTTS_lcnpIndexedPool] = true;
  ARTSet223[ARTTS_lcnpLinkedAPI] = true;
  ARTSet223[ARTTS_lexDFA] = true;
  ARTSet223[ARTTS_lexerData] = true;
  ARTSet223[ARTTS_lexerName] = true;
  ARTSet223[ARTTS_mgll] = true;
  ARTSet223[ARTTS_mgllGeneratorPool] = true;
  ARTSet223[ARTTS_namespace] = true;
  ARTSet223[ARTTS_osbrd] = true;
  ARTSet223[ARTTS_osbrdGenerator] = true;
  ARTSet223[ARTTS_outputDirectory] = true;
  ARTSet223[ARTTS_paraterminal] = true;
  ARTSet223[ARTTS_parseCounts] = true;
  ARTSet223[ARTTS_parserName] = true;
  ARTSet223[ARTTS_predictivePops] = true;
  ARTSet223[ARTTS_prelude] = true;
  ARTSet223[ARTTS_sppfLongest] = true;
  ARTSet223[ARTTS_sppfPriority] = true;
  ARTSet223[ARTTS_sppfShow] = true;
  ARTSet223[ARTTS_start] = true;
  ARTSet223[ARTTS_support] = true;
  ARTSet223[ARTTS_suppressPopGuard] = true;
  ARTSet223[ARTTS_suppressProductionGuard] = true;
  ARTSet223[ARTTS_suppressSemantics] = true;
  ARTSet223[ARTTS_suppressTestRepeat] = true;
  ARTSet223[ARTTS_termPrint] = true;
  ARTSet223[ARTTS_termWrite] = true;
  ARTSet223[ARTTS_trace] = true;
  ARTSet223[ARTTS_treePrint] = true;
  ARTSet223[ARTTS_treeShow] = true;
  ARTSet223[ARTTS_tweDead] = true;
  ARTSet223[ARTTS_tweExtents] = true;
  ARTSet223[ARTTS_tweFromSPPF] = true;
  ARTSet223[ARTTS_tweLexicalisations] = true;
  ARTSet223[ARTTS_tweLongest] = true;
  ARTSet223[ARTTS_twePrint] = true;
  ARTSet223[ARTTS_twePrintFull] = true;
  ARTSet223[ARTTS_twePrintSummary] = true;
  ARTSet223[ARTTS_twePriority] = true;
  ARTSet223[ARTTS_tweRecursive] = true;
  ARTSet223[ARTTS_tweSegments] = true;
  ARTSet223[ARTTS_tweShortCircuit] = true;
  ARTSet223[ARTTS_tweTokenWrite] = true;
  ARTSet223[ARTTS_verbosity] = true;
  ARTSet223[ARTTS_whitespace] = true;
  ARTSet223[ARTL_ART_directive] = true;
}

public void ARTSet16initialise() {
  ARTSet16 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet16, 0, artSetExtent, false);
  ARTSet16[ARTX_EOS] = true;
  ARTSet16[ARTTB_CHAR_BQ] = true;
  ARTSet16[ARTTB_ID] = true;
  ARTSet16[ARTTB_STRING_BRACE_NEST] = true;
  ARTSet16[ARTTB_STRING_DOLLAR] = true;
  ARTSet16[ARTTB_STRING_DQ] = true;
  ARTSet16[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet16[ARTTS__SHREIK] = true;
  ARTSet16[ARTTS__HASH] = true;
  ARTSet16[ARTTS__AMPERSAND] = true;
  ARTSet16[ARTTS__LPAR] = true;
  ARTSet16[ARTTS__RPAR] = true;
  ARTSet16[ARTTS__STAR] = true;
  ARTSet16[ARTTS__PLUS] = true;
  ARTSet16[ARTTS__COMMA] = true;
  ARTSet16[ARTTS__PERIOD] = true;
  ARTSet16[ARTTS__SLASH] = true;
  ARTSet16[ARTTS__COLON] = true;
  ARTSet16[ARTTS__COLON_COLON_EQUAL] = true;
  ARTSet16[ARTTS__LT] = true;
  ARTSet16[ARTTS__LT_LT] = true;
  ARTSet16[ARTTS__EQUAL] = true;
  ARTSet16[ARTTS__GT] = true;
  ARTSet16[ARTTS__GT_GT] = true;
  ARTSet16[ARTTS__QUERY] = true;
  ARTSet16[ARTTS__AT] = true;
  ARTSet16[ARTTS__BACKSLASH] = true;
  ARTSet16[ARTTS__BACKSLASH_BACKSLASH] = true;
  ARTSet16[ARTTS__UPARROW] = true;
  ARTSet16[ARTTS__UPARROW_UPARROW] = true;
  ARTSet16[ARTTS__UPARROW_UPARROW_UPARROW] = true;
  ARTSet16[ARTTS__UPARROW_] = true;
  ARTSet16[ARTTS_anyBuiltinTerminal] = true;
  ARTSet16[ARTTS_anyCaseInsensitiveTerminal] = true;
  ARTSet16[ARTTS_anyCaseSensitiveTerminal] = true;
  ARTSet16[ARTTS_anyCharacterTerminal] = true;
  ARTSet16[ARTTS_anyLiteralTerminal] = true;
  ARTSet16[ARTTS_anyNonterminal] = true;
  ARTSet16[ARTTS_anyParaterminal] = true;
  ARTSet16[ARTTS_anyTerminal] = true;
  ARTSet16[ARTTS_longest] = true;
  ARTSet16[ARTTS_shortest] = true;
  ARTSet16[ARTTS__BAR] = true;
  ARTSet16[ARTTS__BAR_BAR] = true;
  ARTSet16[ARTL_ART_CHAR_BQ] = true;
  ARTSet16[ARTL_ART_ID] = true;
  ARTSet16[ARTL_ART_STRING_BRACE_NEST] = true;
  ARTSet16[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet16[ARTL_ART_STRING_DQ] = true;
  ARTSet16[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet16[ARTL_ART_abbrev] = true;
  ARTSet16[ARTL_ART_action] = true;
  ARTSet16[ARTL_ART_annotation] = true;
  ARTSet16[ARTL_ART_annotations] = true;
  ARTSet16[ARTL_ART_attributesOpt] = true;
  ARTSet16[ARTL_ART_builtinTerminal] = true;
  ARTSet16[ARTL_ART_caseInsensitiveTerminal] = true;
  ARTSet16[ARTL_ART_caseSensitiveTerminal] = true;
  ARTSet16[ARTL_ART_catTail] = true;
  ARTSet16[ARTL_ART_characterSetTerminal] = true;
  ARTSet16[ARTL_ART_characterTerminal] = true;
  ARTSet16[ARTL_ART_choiceSlot] = true;
  ARTSet16[ARTL_ART_chooseDiff] = true;
  ARTSet16[ARTL_ART_chooseElement] = true;
  ARTSet16[ARTL_ART_chooseUnionIntersection] = true;
  ARTSet16[ARTL_ART_chooser] = true;
  ARTSet16[ARTL_ART_choosers] = true;
  ARTSet16[ARTL_ART_delay] = true;
  ARTSet16[ARTL_ART_diff] = true;
  ARTSet16[ARTL_ART_element1] = true;
  ARTSet16[ARTL_ART_epsilon] = true;
  ARTSet16[ARTL_ART_fold] = true;
  ARTSet16[ARTL_ART_grammarRule] = true;
  ARTSet16[ARTL_ART_iter] = true;
  ARTSet16[ARTL_ART_name] = true;
  ARTSet16[ARTL_ART_nonterminal] = true;
  ARTSet16[ARTL_ART_not] = true;
  ARTSet16[ARTL_ART_slot] = true;
  ARTSet16[ARTL_ART_textElement] = true;
  ARTSet16[ARTL_ART_textElements] = true;
  ARTSet16[ARTL_ART_union] = true;
}

public void ARTSet160initialise() {
  ARTSet160 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet160, 0, artSetExtent, false);
  ARTSet160[ARTTS_suppressSemantics] = true;
}

public void ARTSet46initialise() {
  ARTSet46 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet46, 0, artSetExtent, false);
  ARTSet46[ARTTS__COLON] = true;
}

public void ARTSet128initialise() {
  ARTSet128 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet128, 0, artSetExtent, false);
  ARTSet128[ARTTS_twePrintSummary] = true;
}

public void ARTSet26initialise() {
  ARTSet26 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet26, 0, artSetExtent, false);
  ARTSet26[ARTTS__LT] = true;
}

public void ARTSet219initialise() {
  ARTSet219 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet219, 0, artSetExtent, false);
  ARTSet219[ARTTB_ID] = true;
  ARTSet219[ARTTB_STRING_DOLLAR] = true;
  ARTSet219[ARTTS__SHREIK] = true;
  ARTSet219[ARTL_ART_ID] = true;
  ARTSet219[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet219[ARTL_ART_grammarRule] = true;
  ARTSet219[ARTL_ART_nonterminal] = true;
  ARTSet219[ARTL_ART_textElement] = true;
  ARTSet219[ARTL_ART_textElements] = true;
}

public void ARTSet216initialise() {
  ARTSet216 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet216, 0, artSetExtent, false);
  ARTSet216[ARTTS__EQUAL] = true;
}

public void ARTSet4initialise() {
  ARTSet4 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet4, 0, artSetExtent, false);
}

public void ARTSet22initialise() {
  ARTSet22 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet22, 0, artSetExtent, false);
  ARTSet22[ARTTS__GT] = true;
}

public void ARTSet31initialise() {
  ARTSet31 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet31, 0, artSetExtent, false);
  ARTSet31[ARTTS__QUERY] = true;
}

public void ARTSet211initialise() {
  ARTSet211 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet211, 0, artSetExtent, false);
  ARTSet211[ARTTS__AT] = true;
}

public void ARTSet48initialise() {
  ARTSet48 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet48, 0, artSetExtent, false);
  ARTSet48[ARTTB_ID] = true;
  ARTSet48[ARTL_ART_ID] = true;
  ARTSet48[ARTL_ART_attribute] = true;
}

public void ARTSet80initialise() {
  ARTSet80 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet80, 0, artSetExtent, false);
  ARTSet80[ARTTS_anyCaseSensitiveTerminal] = true;
}

public void ARTSet79initialise() {
  ARTSet79 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet79, 0, artSetExtent, false);
  ARTSet79[ARTTS_anyBuiltinTerminal] = true;
}

public void ARTSet62initialise() {
  ARTSet62 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet62, 0, artSetExtent, false);
  ARTSet62[ARTTB_CHAR_BQ] = true;
  ARTSet62[ARTL_ART_CHAR_BQ] = true;
}

public void ARTSet169initialise() {
  ARTSet169 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet169, 0, artSetExtent, false);
  ARTSet169[ARTTS_earleyTable] = true;
}

public void ARTSet24initialise() {
  ARTSet24 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet24, 0, artSetExtent, false);
  ARTSet24[ARTTB_ID] = true;
  ARTSet24[ARTL_ART_TypeList] = true;
  ARTSet24[ARTL_ART_TypeNest] = true;
}

public void ARTSet38initialise() {
  ARTSet38 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet38, 0, artSetExtent, false);
  ARTSet38[ARTX_EOS] = true;
  ARTSet38[ARTTB_CHAR_BQ] = true;
  ARTSet38[ARTTB_ID] = true;
  ARTSet38[ARTTB_STRING_BRACE_NEST] = true;
  ARTSet38[ARTTB_STRING_DOLLAR] = true;
  ARTSet38[ARTTB_STRING_DQ] = true;
  ARTSet38[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet38[ARTTS__SHREIK] = true;
  ARTSet38[ARTTS__HASH] = true;
  ARTSet38[ARTTS__AMPERSAND] = true;
  ARTSet38[ARTTS__LPAR] = true;
  ARTSet38[ARTTS__RPAR] = true;
  ARTSet38[ARTTS__STAR] = true;
  ARTSet38[ARTTS__PLUS] = true;
  ARTSet38[ARTTS__COLON] = true;
  ARTSet38[ARTTS__LT] = true;
  ARTSet38[ARTTS__QUERY] = true;
  ARTSet38[ARTTS__AT] = true;
  ARTSet38[ARTTS__BACKSLASH_BACKSLASH] = true;
  ARTSet38[ARTTS__UPARROW] = true;
  ARTSet38[ARTTS__UPARROW_UPARROW] = true;
  ARTSet38[ARTTS__UPARROW_UPARROW_UPARROW] = true;
  ARTSet38[ARTTS__UPARROW_] = true;
  ARTSet38[ARTTS__BAR] = true;
  ARTSet38[ARTTS__BAR_BAR] = true;
  ARTSet38[ARTL_ART_CHAR_BQ] = true;
  ARTSet38[ARTL_ART_ID] = true;
  ARTSet38[ARTL_ART_STRING_BRACE_NEST] = true;
  ARTSet38[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet38[ARTL_ART_STRING_DQ] = true;
  ARTSet38[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet38[ARTL_ART_abbrev] = true;
  ARTSet38[ARTL_ART_action] = true;
  ARTSet38[ARTL_ART_annotation] = true;
  ARTSet38[ARTL_ART_annotations] = true;
  ARTSet38[ARTL_ART_builtinTerminal] = true;
  ARTSet38[ARTL_ART_caseInsensitiveTerminal] = true;
  ARTSet38[ARTL_ART_caseSensitiveTerminal] = true;
  ARTSet38[ARTL_ART_catTail] = true;
  ARTSet38[ARTL_ART_characterSetTerminal] = true;
  ARTSet38[ARTL_ART_characterTerminal] = true;
  ARTSet38[ARTL_ART_delay] = true;
  ARTSet38[ARTL_ART_diff] = true;
  ARTSet38[ARTL_ART_element1] = true;
  ARTSet38[ARTL_ART_epsilon] = true;
  ARTSet38[ARTL_ART_fold] = true;
  ARTSet38[ARTL_ART_grammarRule] = true;
  ARTSet38[ARTL_ART_iter] = true;
  ARTSet38[ARTL_ART_name] = true;
  ARTSet38[ARTL_ART_nonterminal] = true;
  ARTSet38[ARTL_ART_not] = true;
  ARTSet38[ARTL_ART_slot] = true;
  ARTSet38[ARTL_ART_textElement] = true;
  ARTSet38[ARTL_ART_textElements] = true;
  ARTSet38[ARTL_ART_union] = true;
}

public void ARTSet6initialise() {
  ARTSet6 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet6, 0, artSetExtent, false);
  ARTSet6[ARTTB_CHAR_BQ] = true;
}

public void ARTSet93initialise() {
  ARTSet93 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet93, 0, artSetExtent, false);
  ARTSet93[ARTTS_longest] = true;
}

public void ARTSet25initialise() {
  ARTSet25 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet25, 0, artSetExtent, false);
  ARTSet25[ARTTB_ID] = true;
  ARTSet25[ARTTS__COMMA] = true;
  ARTSet25[ARTTS__GT] = true;
  ARTSet25[ARTL_ART_ID] = true;
  ARTSet25[ARTL_ART_attribute] = true;
  ARTSet25[ARTL_ART_attributes] = true;
}

public void ARTSet210initialise() {
  ARTSet210 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet210, 0, artSetExtent, false);
  ARTSet210[ARTX_EOS] = true;
  ARTSet210[ARTTB_CHAR_BQ] = true;
  ARTSet210[ARTTB_ID] = true;
  ARTSet210[ARTTB_STRING_BRACE_NEST] = true;
  ARTSet210[ARTTB_STRING_DOLLAR] = true;
  ARTSet210[ARTTB_STRING_DQ] = true;
  ARTSet210[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet210[ARTTS__SHREIK] = true;
  ARTSet210[ARTTS__HASH] = true;
  ARTSet210[ARTTS__AMPERSAND] = true;
  ARTSet210[ARTTS__LPAR] = true;
  ARTSet210[ARTTS__RPAR] = true;
  ARTSet210[ARTTS__STAR] = true;
  ARTSet210[ARTTS__PLUS] = true;
  ARTSet210[ARTTS__QUERY] = true;
  ARTSet210[ARTTS__BACKSLASH_BACKSLASH] = true;
  ARTSet210[ARTTS__BAR] = true;
  ARTSet210[ARTL_ART_CHAR_BQ] = true;
  ARTSet210[ARTL_ART_ID] = true;
  ARTSet210[ARTL_ART_STRING_BRACE_NEST] = true;
  ARTSet210[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet210[ARTL_ART_STRING_DQ] = true;
  ARTSet210[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet210[ARTL_ART_abbrev] = true;
  ARTSet210[ARTL_ART_action] = true;
  ARTSet210[ARTL_ART_builtinTerminal] = true;
  ARTSet210[ARTL_ART_caseInsensitiveTerminal] = true;
  ARTSet210[ARTL_ART_caseSensitiveTerminal] = true;
  ARTSet210[ARTL_ART_catTail] = true;
  ARTSet210[ARTL_ART_characterSetTerminal] = true;
  ARTSet210[ARTL_ART_characterTerminal] = true;
  ARTSet210[ARTL_ART_diff] = true;
  ARTSet210[ARTL_ART_element1] = true;
  ARTSet210[ARTL_ART_epsilon] = true;
  ARTSet210[ARTL_ART_grammarRule] = true;
  ARTSet210[ARTL_ART_iter] = true;
  ARTSet210[ARTL_ART_nonterminal] = true;
  ARTSet210[ARTL_ART_not] = true;
  ARTSet210[ARTL_ART_slot] = true;
  ARTSet210[ARTL_ART_textElement] = true;
  ARTSet210[ARTL_ART_textElements] = true;
  ARTSet210[ARTL_ART_union] = true;
}

public void ARTSet70initialise() {
  ARTSet70 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet70, 0, artSetExtent, false);
  ARTSet70[ARTTS__BACKSLASH] = true;
}

public void ARTSet221initialise() {
  ARTSet221 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet221, 0, artSetExtent, false);
  ARTSet221[ARTTB_ID] = true;
  ARTSet221[ARTTB_STRING_DOLLAR] = true;
  ARTSet221[ARTTS__SHREIK] = true;
  ARTSet221[ARTL_ART_ID] = true;
  ARTSet221[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet221[ARTL_ART_grammarRule] = true;
  ARTSet221[ARTL_ART_nonterminal] = true;
}

public void ARTSet28initialise() {
  ARTSet28 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet28, 0, artSetExtent, false);
  ARTSet28[ARTX_EOS] = true;
  ARTSet28[ARTTB_CHAR_BQ] = true;
  ARTSet28[ARTTB_ID] = true;
  ARTSet28[ARTTB_STRING_BRACE_NEST] = true;
  ARTSet28[ARTTB_STRING_DOLLAR] = true;
  ARTSet28[ARTTB_STRING_DQ] = true;
  ARTSet28[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet28[ARTTS__SHREIK] = true;
  ARTSet28[ARTTS__HASH] = true;
  ARTSet28[ARTTS__AMPERSAND] = true;
  ARTSet28[ARTTS__LPAR] = true;
  ARTSet28[ARTTS__RPAR] = true;
  ARTSet28[ARTTS__BACKSLASH_BACKSLASH] = true;
  ARTSet28[ARTTS__BAR] = true;
  ARTSet28[ARTL_ART_CHAR_BQ] = true;
  ARTSet28[ARTL_ART_ID] = true;
  ARTSet28[ARTL_ART_STRING_BRACE_NEST] = true;
  ARTSet28[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet28[ARTL_ART_STRING_DQ] = true;
  ARTSet28[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet28[ARTL_ART_abbrev] = true;
  ARTSet28[ARTL_ART_action] = true;
  ARTSet28[ARTL_ART_builtinTerminal] = true;
  ARTSet28[ARTL_ART_caseInsensitiveTerminal] = true;
  ARTSet28[ARTL_ART_caseSensitiveTerminal] = true;
  ARTSet28[ARTL_ART_catTail] = true;
  ARTSet28[ARTL_ART_characterSetTerminal] = true;
  ARTSet28[ARTL_ART_characterTerminal] = true;
  ARTSet28[ARTL_ART_diff] = true;
  ARTSet28[ARTL_ART_element1] = true;
  ARTSet28[ARTL_ART_epsilon] = true;
  ARTSet28[ARTL_ART_grammarRule] = true;
  ARTSet28[ARTL_ART_iter] = true;
  ARTSet28[ARTL_ART_nonterminal] = true;
  ARTSet28[ARTL_ART_not] = true;
  ARTSet28[ARTL_ART_slot] = true;
  ARTSet28[ARTL_ART_textElement] = true;
  ARTSet28[ARTL_ART_textElements] = true;
  ARTSet28[ARTL_ART_union] = true;
}

public void ARTSet204initialise() {
  ARTSet204 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet204, 0, artSetExtent, false);
  ARTSet204[ARTTS__UPARROW] = true;
}

public void ARTSet13initialise() {
  ARTSet13 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet13, 0, artSetExtent, false);
  ARTSet13[ARTTB_STRING_BRACE_NEST] = true;
}

public void ARTSet198initialise() {
  ARTSet198 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet198, 0, artSetExtent, false);
  ARTSet198[ARTTB_CHAR_BQ] = true;
  ARTSet198[ARTTB_ID] = true;
  ARTSet198[ARTTB_STRING_DOLLAR] = true;
  ARTSet198[ARTTB_STRING_DQ] = true;
  ARTSet198[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet198[ARTTS__HASH] = true;
  ARTSet198[ARTTS__AMPERSAND] = true;
  ARTSet198[ARTL_ART_CHAR_BQ] = true;
  ARTSet198[ARTL_ART_ID] = true;
  ARTSet198[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet198[ARTL_ART_STRING_DQ] = true;
  ARTSet198[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet198[ARTL_ART_builtinTerminal] = true;
  ARTSet198[ARTL_ART_caseInsensitiveTerminal] = true;
  ARTSet198[ARTL_ART_caseSensitiveTerminal] = true;
  ARTSet198[ARTL_ART_characterSetTerminal] = true;
  ARTSet198[ARTL_ART_characterTerminal] = true;
  ARTSet198[ARTL_ART_epsilon] = true;
  ARTSet198[ARTL_ART_nonterminal] = true;
}

public void ARTSet10initialise() {
  ARTSet10 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet10, 0, artSetExtent, false);
  ARTSet10[ARTTB_INTEGER] = true;
}

public void ARTSet175initialise() {
  ARTSet175 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet175, 0, artSetExtent, false);
  ARTSet175[ARTTS_cnpLinkedAPI] = true;
}

public void ARTSet41initialise() {
  ARTSet41 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet41, 0, artSetExtent, false);
  ARTSet41[ARTTS__UPARROW] = true;
  ARTSet41[ARTTS__UPARROW_UPARROW] = true;
  ARTSet41[ARTTS__UPARROW_UPARROW_UPARROW] = true;
  ARTSet41[ARTTS__UPARROW_] = true;
  ARTSet41[ARTL_ART_fold] = true;
}

public void ARTSet112initialise() {
  ARTSet112 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet112, 0, artSetExtent, false);
  ARTSet112[ARTTS_injectProduction] = true;
}

public void ARTSet101initialise() {
  ARTSet101 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet101, 0, artSetExtent, false);
  ARTSet101[ARTTS_FIFODescriptors] = true;
  ARTSet101[ARTTS_absorb] = true;
  ARTSet101[ARTTS_choose] = true;
  ARTSet101[ARTTS_cnp] = true;
  ARTSet101[ARTTS_cnpGeneratorPool] = true;
  ARTSet101[ARTTS_cnpIndexedAPI] = true;
  ARTSet101[ARTTS_cnpIndexedPool] = true;
  ARTSet101[ARTTS_cnpLinkedAPI] = true;
  ARTSet101[ARTTS_earley] = true;
  ARTSet101[ARTTS_earley2007LinkedAPI] = true;
  ARTSet101[ARTTS_earleyIndexedAPI] = true;
  ARTSet101[ARTTS_earleyIndexedData] = true;
  ARTSet101[ARTTS_earleyIndexedPool] = true;
  ARTSet101[ARTTS_earleyLinkedAPI] = true;
  ARTSet101[ARTTS_earleyTable] = true;
  ARTSet101[ARTTS_earleyTableIndexedAPI] = true;
  ARTSet101[ARTTS_earleyTableIndexedData] = true;
  ARTSet101[ARTTS_earleyTableIndexedPool] = true;
  ARTSet101[ARTTS_earleyTableLinkedAPI] = true;
  ARTSet101[ARTTS_element] = true;
  ARTSet101[ARTTS_generateDynamic] = true;
  ARTSet101[ARTTS_generateFragment] = true;
  ARTSet101[ARTTS_generatePool] = true;
  ARTSet101[ARTTS_generateState] = true;
  ARTSet101[ARTTS_generateStatic] = true;
  ARTSet101[ARTTS_gll] = true;
  ARTSet101[ARTTS_gllClusteredGeneratorPool] = true;
  ARTSet101[ARTTS_gllGeneratorPool] = true;
  ARTSet101[ARTTS_gllTWEGeneratorPool] = true;
  ARTSet101[ARTTS_grammarWrite] = true;
  ARTSet101[ARTTS_gssShow] = true;
  ARTSet101[ARTTS_import] = true;
  ARTSet101[ARTTS_injectInstance] = true;
  ARTSet101[ARTTS_injectProduction] = true;
  ARTSet101[ARTTS_injectProductionOff] = true;
  ARTSet101[ARTTS_inputPrint] = true;
  ARTSet101[ARTTS_lcnp] = true;
  ARTSet101[ARTTS_lcnpGeneratorPool] = true;
  ARTSet101[ARTTS_lcnpIndexedAPI] = true;
  ARTSet101[ARTTS_lcnpIndexedPool] = true;
  ARTSet101[ARTTS_lcnpLinkedAPI] = true;
  ARTSet101[ARTTS_lexDFA] = true;
  ARTSet101[ARTTS_lexerData] = true;
  ARTSet101[ARTTS_lexerName] = true;
  ARTSet101[ARTTS_mgll] = true;
  ARTSet101[ARTTS_mgllGeneratorPool] = true;
  ARTSet101[ARTTS_namespace] = true;
  ARTSet101[ARTTS_osbrd] = true;
  ARTSet101[ARTTS_osbrdGenerator] = true;
  ARTSet101[ARTTS_outputDirectory] = true;
  ARTSet101[ARTTS_paraterminal] = true;
  ARTSet101[ARTTS_parseCounts] = true;
  ARTSet101[ARTTS_parserName] = true;
  ARTSet101[ARTTS_predictivePops] = true;
  ARTSet101[ARTTS_prelude] = true;
  ARTSet101[ARTTS_sppfLongest] = true;
  ARTSet101[ARTTS_sppfPriority] = true;
  ARTSet101[ARTTS_sppfShow] = true;
  ARTSet101[ARTTS_start] = true;
  ARTSet101[ARTTS_support] = true;
  ARTSet101[ARTTS_suppressPopGuard] = true;
  ARTSet101[ARTTS_suppressProductionGuard] = true;
  ARTSet101[ARTTS_suppressSemantics] = true;
  ARTSet101[ARTTS_suppressTestRepeat] = true;
  ARTSet101[ARTTS_termPrint] = true;
  ARTSet101[ARTTS_termWrite] = true;
  ARTSet101[ARTTS_trace] = true;
  ARTSet101[ARTTS_treePrint] = true;
  ARTSet101[ARTTS_treeShow] = true;
  ARTSet101[ARTTS_tweDead] = true;
  ARTSet101[ARTTS_tweExtents] = true;
  ARTSet101[ARTTS_tweFromSPPF] = true;
  ARTSet101[ARTTS_tweLexicalisations] = true;
  ARTSet101[ARTTS_tweLongest] = true;
  ARTSet101[ARTTS_twePrint] = true;
  ARTSet101[ARTTS_twePrintFull] = true;
  ARTSet101[ARTTS_twePrintSummary] = true;
  ARTSet101[ARTTS_twePriority] = true;
  ARTSet101[ARTTS_tweRecursive] = true;
  ARTSet101[ARTTS_tweSegments] = true;
  ARTSet101[ARTTS_tweShortCircuit] = true;
  ARTSet101[ARTTS_tweTokenWrite] = true;
  ARTSet101[ARTTS_verbosity] = true;
  ARTSet101[ARTTS_whitespace] = true;
}

public void ARTSet139initialise() {
  ARTSet139 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet139, 0, artSetExtent, false);
  ARTSet139[ARTTS_sppfShow] = true;
}

public void ARTSet137initialise() {
  ARTSet137 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet137, 0, artSetExtent, false);
  ARTSet137[ARTTS_tweFromSPPF] = true;
}

public void ARTSet136initialise() {
  ARTSet136 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet136, 0, artSetExtent, false);
  ARTSet136[ARTTS_sppfPriority] = true;
}

public void ARTSet35initialise() {
  ARTSet35 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet35, 0, artSetExtent, false);
  ARTSet35[ARTTS__BAR] = true;
}

public void ARTSet84initialise() {
  ARTSet84 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet84, 0, artSetExtent, false);
  ARTSet84[ARTTS_anyLiteralTerminal] = true;
}

public void ARTSet171initialise() {
  ARTSet171 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet171, 0, artSetExtent, false);
  ARTSet171[ARTTS_earleyTableIndexedAPI] = true;
}

public void ARTSet11initialise() {
  ARTSet11 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet11, 0, artSetExtent, false);
  ARTSet11[ARTX_EOS] = true;
  ARTSet11[ARTTB_ID] = true;
  ARTSet11[ARTTB_STRING_DOLLAR] = true;
  ARTSet11[ARTTS__SHREIK] = true;
  ARTSet11[ARTL_ART_ID] = true;
  ARTSet11[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet11[ARTL_ART_grammarRule] = true;
  ARTSet11[ARTL_ART_nonterminal] = true;
  ARTSet11[ARTL_ART_textElement] = true;
  ARTSet11[ARTL_ART_textElements] = true;
}

public void ARTSet178initialise() {
  ARTSet178 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet178, 0, artSetExtent, false);
  ARTSet178[ARTTS_cnpGeneratorPool] = true;
}

public void ARTSet66initialise() {
  ARTSet66 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet66, 0, artSetExtent, false);
  ARTSet66[ARTX_EOS] = true;
  ARTSet66[ARTTB_ID] = true;
  ARTSet66[ARTTB_STRING_DOLLAR] = true;
  ARTSet66[ARTTB_STRING_DQ] = true;
  ARTSet66[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet66[ARTTS__SHREIK] = true;
  ARTSet66[ARTTS__AMPERSAND] = true;
  ARTSet66[ARTTS__LPAR] = true;
  ARTSet66[ARTTS__RPAR] = true;
  ARTSet66[ARTTS__PERIOD] = true;
  ARTSet66[ARTTS__LT] = true;
  ARTSet66[ARTTS__LT_LT] = true;
  ARTSet66[ARTTS__GT] = true;
  ARTSet66[ARTTS__GT_GT] = true;
  ARTSet66[ARTTS__BACKSLASH] = true;
  ARTSet66[ARTTS_anyBuiltinTerminal] = true;
  ARTSet66[ARTTS_anyCaseInsensitiveTerminal] = true;
  ARTSet66[ARTTS_anyCaseSensitiveTerminal] = true;
  ARTSet66[ARTTS_anyCharacterTerminal] = true;
  ARTSet66[ARTTS_anyLiteralTerminal] = true;
  ARTSet66[ARTTS_anyNonterminal] = true;
  ARTSet66[ARTTS_anyParaterminal] = true;
  ARTSet66[ARTTS_anyTerminal] = true;
  ARTSet66[ARTTS_longest] = true;
  ARTSet66[ARTTS_shortest] = true;
  ARTSet66[ARTL_ART_ID] = true;
  ARTSet66[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet66[ARTL_ART_STRING_DQ] = true;
  ARTSet66[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet66[ARTL_ART_builtinTerminal] = true;
  ARTSet66[ARTL_ART_caseInsensitiveTerminal] = true;
  ARTSet66[ARTL_ART_caseSensitiveTerminal] = true;
  ARTSet66[ARTL_ART_chooseDiff] = true;
  ARTSet66[ARTL_ART_chooseElement] = true;
  ARTSet66[ARTL_ART_chooseUnionIntersection] = true;
  ARTSet66[ARTL_ART_chooser] = true;
  ARTSet66[ARTL_ART_choosers] = true;
  ARTSet66[ARTL_ART_grammarRule] = true;
  ARTSet66[ARTL_ART_nonterminal] = true;
  ARTSet66[ARTL_ART_textElement] = true;
  ARTSet66[ARTL_ART_textElements] = true;
}

public void ARTSet85initialise() {
  ARTSet85 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet85, 0, artSetExtent, false);
  ARTSet85[ARTTS_anyTerminal] = true;
}

public void ARTSet200initialise() {
  ARTSet200 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet200, 0, artSetExtent, false);
  ARTSet200[ARTTB_CHAR_BQ] = true;
  ARTSet200[ARTTB_ID] = true;
  ARTSet200[ARTTB_STRING_DOLLAR] = true;
  ARTSet200[ARTTB_STRING_DQ] = true;
  ARTSet200[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet200[ARTTS__HASH] = true;
  ARTSet200[ARTTS__AMPERSAND] = true;
  ARTSet200[ARTL_ART_CHAR_BQ] = true;
  ARTSet200[ARTL_ART_ID] = true;
  ARTSet200[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet200[ARTL_ART_STRING_DQ] = true;
  ARTSet200[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet200[ARTL_ART_builtinTerminal] = true;
  ARTSet200[ARTL_ART_caseInsensitiveTerminal] = true;
  ARTSet200[ARTL_ART_caseSensitiveTerminal] = true;
  ARTSet200[ARTL_ART_characterSetTerminal] = true;
  ARTSet200[ARTL_ART_characterTerminal] = true;
  ARTSet200[ARTL_ART_elementUpdater] = true;
  ARTSet200[ARTL_ART_epsilon] = true;
  ARTSet200[ARTL_ART_nonterminal] = true;
}

public void ARTSet144initialise() {
  ARTSet144 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet144, 0, artSetExtent, false);
  ARTSet144[ARTTS_termWrite] = true;
}

public void ARTSet183initialise() {
  ARTSet183 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet183, 0, artSetExtent, false);
  ARTSet183[ARTTS_lcnpGeneratorPool] = true;
}

public void ARTSet226initialise() {
  ARTSet226 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet226, 0, artSetExtent, false);
  ARTSet226[ARTTS__COLON] = true;
  ARTSet226[ARTTS_false] = true;
  ARTSet226[ARTTS_true] = true;
}

public void ARTSet212initialise() {
  ARTSet212 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet212, 0, artSetExtent, false);
  ARTSet212[ARTTB_ID] = true;
  ARTSet212[ARTTB_STRING_DOLLAR] = true;
  ARTSet212[ARTL_ART_ID] = true;
  ARTSet212[ARTL_ART_STRING_DOLLAR] = true;
}

public void ARTSet206initialise() {
  ARTSet206 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet206, 0, artSetExtent, false);
  ARTSet206[ARTTS__UPARROW_UPARROW_UPARROW] = true;
}

public void ARTSet96initialise() {
  ARTSet96 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet96, 0, artSetExtent, false);
  ARTSet96[ARTTB_ID] = true;
  ARTSet96[ARTTB_STRING_DOLLAR] = true;
  ARTSet96[ARTTB_STRING_DQ] = true;
  ARTSet96[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet96[ARTTS__AMPERSAND] = true;
  ARTSet96[ARTTS__LPAR] = true;
  ARTSet96[ARTTS__PERIOD] = true;
  ARTSet96[ARTTS_anyBuiltinTerminal] = true;
  ARTSet96[ARTTS_anyCaseInsensitiveTerminal] = true;
  ARTSet96[ARTTS_anyCaseSensitiveTerminal] = true;
  ARTSet96[ARTTS_anyCharacterTerminal] = true;
  ARTSet96[ARTTS_anyLiteralTerminal] = true;
  ARTSet96[ARTTS_anyNonterminal] = true;
  ARTSet96[ARTTS_anyParaterminal] = true;
  ARTSet96[ARTTS_anyTerminal] = true;
  ARTSet96[ARTTS_longest] = true;
  ARTSet96[ARTTS_shortest] = true;
  ARTSet96[ARTL_ART_ID] = true;
  ARTSet96[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet96[ARTL_ART_STRING_DQ] = true;
  ARTSet96[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet96[ARTL_ART_builtinTerminal] = true;
  ARTSet96[ARTL_ART_caseInsensitiveTerminal] = true;
  ARTSet96[ARTL_ART_caseSensitiveTerminal] = true;
  ARTSet96[ARTL_ART_chooseDiff] = true;
  ARTSet96[ARTL_ART_chooseElement] = true;
  ARTSet96[ARTL_ART_chooseUnionIntersection] = true;
  ARTSet96[ARTL_ART_chooser] = true;
  ARTSet96[ARTL_ART_choosers] = true;
  ARTSet96[ARTL_ART_nonterminal] = true;
}

public void ARTSet209initialise() {
  ARTSet209 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet209, 0, artSetExtent, false);
  ARTSet209[ARTTS__PERCENT_PERCENT] = true;
}

public void ARTSet166initialise() {
  ARTSet166 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet166, 0, artSetExtent, false);
  ARTSet166[ARTTS_earleyIndexedAPI] = true;
}

public void ARTSet130initialise() {
  ARTSet130 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet130, 0, artSetExtent, false);
  ARTSet130[ARTTS_twePrintFull] = true;
}

public void ARTSet188initialise() {
  ARTSet188 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet188, 0, artSetExtent, false);
  ARTSet188[ARTTS_mgll] = true;
}

public void ARTSet82initialise() {
  ARTSet82 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet82, 0, artSetExtent, false);
  ARTSet82[ARTTS_anyParaterminal] = true;
}

public void ARTSet44initialise() {
  ARTSet44 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet44, 0, artSetExtent, false);
  ARTSet44[ARTTS__COLON] = true;
  ARTSet44[ARTTS__LT] = true;
  ARTSet44[ARTTS__UPARROW] = true;
  ARTSet44[ARTTS__UPARROW_UPARROW] = true;
  ARTSet44[ARTTS__UPARROW_UPARROW_UPARROW] = true;
  ARTSet44[ARTTS__UPARROW_] = true;
  ARTSet44[ARTL_ART_annotation] = true;
  ARTSet44[ARTL_ART_annotations] = true;
  ARTSet44[ARTL_ART_delay] = true;
  ARTSet44[ARTL_ART_fold] = true;
  ARTSet44[ARTL_ART_name] = true;
}

public void ARTSet217initialise() {
  ARTSet217 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet217, 0, artSetExtent, false);
  ARTSet217[ARTTB_STRING_BRACE_NEST] = true;
  ARTSet217[ARTL_ART_STRING_BRACE_NEST] = true;
  ARTSet217[ARTL_ART_action] = true;
}

public void ARTSet104initialise() {
  ARTSet104 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet104, 0, artSetExtent, false);
  ARTSet104[ARTTB_CHAR_BQ] = true;
  ARTSet104[ARTTB_ID] = true;
  ARTSet104[ARTTB_STRING_DOLLAR] = true;
  ARTSet104[ARTTB_STRING_DQ] = true;
  ARTSet104[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet104[ARTTS__HASH] = true;
  ARTSet104[ARTTS__AMPERSAND] = true;
  ARTSet104[ARTL_ART_CHAR_BQ] = true;
  ARTSet104[ARTL_ART_ID] = true;
  ARTSet104[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet104[ARTL_ART_STRING_DQ] = true;
  ARTSet104[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet104[ARTL_ART_builtinTerminal] = true;
  ARTSet104[ARTL_ART_caseInsensitiveTerminal] = true;
  ARTSet104[ARTL_ART_caseSensitiveTerminal] = true;
  ARTSet104[ARTL_ART_characterSetTerminal] = true;
  ARTSet104[ARTL_ART_characterTerminal] = true;
  ARTSet104[ARTL_ART_elementUpdater] = true;
  ARTSet104[ARTL_ART_elementUpdaters] = true;
  ARTSet104[ARTL_ART_epsilon] = true;
  ARTSet104[ARTL_ART_nonterminal] = true;
}

public void ARTSet142initialise() {
  ARTSet142 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet142, 0, artSetExtent, false);
  ARTSet142[ARTTS_treePrint] = true;
}

public void ARTSet117initialise() {
  ARTSet117 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet117, 0, artSetExtent, false);
  ARTSet117[ARTTS_support] = true;
}

public void ARTSet168initialise() {
  ARTSet168 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet168, 0, artSetExtent, false);
  ARTSet168[ARTTS_earleyIndexedData] = true;
}

public void ARTSet224initialise() {
  ARTSet224 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet224, 0, artSetExtent, false);
  ARTSet224[ARTTB_ID] = true;
  ARTSet224[ARTTB_STRING_DOLLAR] = true;
  ARTSet224[ARTL_ART_ID] = true;
  ARTSet224[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet224[ARTL_ART_grammarRule] = true;
  ARTSet224[ARTL_ART_nonterminal] = true;
}

public void ARTSet164initialise() {
  ARTSet164 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet164, 0, artSetExtent, false);
  ARTSet164[ARTTS_earley2007LinkedAPI] = true;
}

public void ARTSet102initialise() {
  ARTSet102 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet102, 0, artSetExtent, false);
  ARTSet102[ARTTS_import] = true;
}

public void ARTSet149initialise() {
  ARTSet149 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet149, 0, artSetExtent, false);
  ARTSet149[ARTTS_parserName] = true;
}

public void ARTSet131initialise() {
  ARTSet131 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet131, 0, artSetExtent, false);
  ARTSet131[ARTTS_tweDead] = true;
}

public void ARTSet56initialise() {
  ARTSet56 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet56, 0, artSetExtent, false);
  ARTSet56[ARTTB_CHAR_BQ] = true;
  ARTSet56[ARTTB_ID] = true;
  ARTSet56[ARTTB_STRING_BRACE_NEST] = true;
  ARTSet56[ARTTB_STRING_DOLLAR] = true;
  ARTSet56[ARTTB_STRING_DQ] = true;
  ARTSet56[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet56[ARTTS__HASH] = true;
  ARTSet56[ARTTS__AMPERSAND] = true;
  ARTSet56[ARTTS__LPAR] = true;
  ARTSet56[ARTTS__BACKSLASH_BACKSLASH] = true;
  ARTSet56[ARTL_ART_CHAR_BQ] = true;
  ARTSet56[ARTL_ART_ID] = true;
  ARTSet56[ARTL_ART_STRING_BRACE_NEST] = true;
  ARTSet56[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet56[ARTL_ART_STRING_DQ] = true;
  ARTSet56[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet56[ARTL_ART_abbrev] = true;
  ARTSet56[ARTL_ART_action] = true;
  ARTSet56[ARTL_ART_builtinTerminal] = true;
  ARTSet56[ARTL_ART_caseInsensitiveTerminal] = true;
  ARTSet56[ARTL_ART_caseSensitiveTerminal] = true;
  ARTSet56[ARTL_ART_catTail] = true;
  ARTSet56[ARTL_ART_characterSetTerminal] = true;
  ARTSet56[ARTL_ART_characterTerminal] = true;
  ARTSet56[ARTL_ART_diff] = true;
  ARTSet56[ARTL_ART_element1] = true;
  ARTSet56[ARTL_ART_epsilon] = true;
  ARTSet56[ARTL_ART_iter] = true;
  ARTSet56[ARTL_ART_nonterminal] = true;
  ARTSet56[ARTL_ART_not] = true;
  ARTSet56[ARTL_ART_slot] = true;
  ARTSet56[ARTL_ART_union] = true;
}

public void ARTSet121initialise() {
  ARTSet121 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet121, 0, artSetExtent, false);
  ARTSet121[ARTTS__COLON] = true;
  ARTSet121[ARTTS_false] = true;
  ARTSet121[ARTTS_true] = true;
  ARTSet121[ARTL_ART_trueFalse] = true;
}

public void ARTSet213initialise() {
  ARTSet213 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet213, 0, artSetExtent, false);
  ARTSet213[ARTTB_STRING_DOLLAR] = true;
  ARTSet213[ARTL_ART_STRING_DOLLAR] = true;
}

public void ARTSet148initialise() {
  ARTSet148 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet148, 0, artSetExtent, false);
  ARTSet148[ARTTS_lexerName] = true;
}

public void ARTSet120initialise() {
  ARTSet120 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet120, 0, artSetExtent, false);
  ARTSet120[ARTTS_trace] = true;
}

public void ARTSet155initialise() {
  ARTSet155 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet155, 0, artSetExtent, false);
  ARTSet155[ARTTS_predictivePops] = true;
}

public void ARTSet8initialise() {
  ARTSet8 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet8, 0, artSetExtent, false);
  ARTSet8[ARTTB_ID] = true;
}

public void ARTSet134initialise() {
  ARTSet134 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet134, 0, artSetExtent, false);
  ARTSet134[ARTTS_tweShortCircuit] = true;
}

public void ARTSet14initialise() {
  ARTSet14 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet14, 0, artSetExtent, false);
  ARTSet14[ARTX_EOS] = true;
  ARTSet14[ARTTB_CHAR_BQ] = true;
  ARTSet14[ARTTB_ID] = true;
  ARTSet14[ARTTB_STRING_DOLLAR] = true;
  ARTSet14[ARTTB_STRING_DQ] = true;
  ARTSet14[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet14[ARTTS__SHREIK] = true;
  ARTSet14[ARTTS__HASH] = true;
  ARTSet14[ARTTS__AMPERSAND] = true;
  ARTSet14[ARTTS__LPAR] = true;
  ARTSet14[ARTTS__RPAR] = true;
  ARTSet14[ARTTS__BACKSLASH_BACKSLASH] = true;
  ARTSet14[ARTTS__BAR] = true;
  ARTSet14[ARTL_ART_CHAR_BQ] = true;
  ARTSet14[ARTL_ART_ID] = true;
  ARTSet14[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet14[ARTL_ART_STRING_DQ] = true;
  ARTSet14[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet14[ARTL_ART_abbrev] = true;
  ARTSet14[ARTL_ART_builtinTerminal] = true;
  ARTSet14[ARTL_ART_caseInsensitiveTerminal] = true;
  ARTSet14[ARTL_ART_caseSensitiveTerminal] = true;
  ARTSet14[ARTL_ART_catTail] = true;
  ARTSet14[ARTL_ART_characterSetTerminal] = true;
  ARTSet14[ARTL_ART_characterTerminal] = true;
  ARTSet14[ARTL_ART_diff] = true;
  ARTSet14[ARTL_ART_element1] = true;
  ARTSet14[ARTL_ART_epsilon] = true;
  ARTSet14[ARTL_ART_grammarRule] = true;
  ARTSet14[ARTL_ART_iter] = true;
  ARTSet14[ARTL_ART_nonterminal] = true;
  ARTSet14[ARTL_ART_not] = true;
  ARTSet14[ARTL_ART_textElement] = true;
  ARTSet14[ARTL_ART_textElements] = true;
  ARTSet14[ARTL_ART_union] = true;
}

public void ARTSet60initialise() {
  ARTSet60 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet60, 0, artSetExtent, false);
  ARTSet60[ARTTB_CHAR_BQ] = true;
  ARTSet60[ARTTB_ID] = true;
  ARTSet60[ARTTB_STRING_DOLLAR] = true;
  ARTSet60[ARTTB_STRING_DQ] = true;
  ARTSet60[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet60[ARTTS__HASH] = true;
  ARTSet60[ARTTS__AMPERSAND] = true;
  ARTSet60[ARTTS__LPAR] = true;
  ARTSet60[ARTTS__BACKSLASH_BACKSLASH] = true;
  ARTSet60[ARTL_ART_CHAR_BQ] = true;
  ARTSet60[ARTL_ART_ID] = true;
  ARTSet60[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet60[ARTL_ART_STRING_DQ] = true;
  ARTSet60[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet60[ARTL_ART_abbrev] = true;
  ARTSet60[ARTL_ART_builtinTerminal] = true;
  ARTSet60[ARTL_ART_caseInsensitiveTerminal] = true;
  ARTSet60[ARTL_ART_caseSensitiveTerminal] = true;
  ARTSet60[ARTL_ART_characterSetTerminal] = true;
  ARTSet60[ARTL_ART_characterTerminal] = true;
  ARTSet60[ARTL_ART_diff] = true;
  ARTSet60[ARTL_ART_element1] = true;
  ARTSet60[ARTL_ART_epsilon] = true;
  ARTSet60[ARTL_ART_iter] = true;
  ARTSet60[ARTL_ART_nonterminal] = true;
  ARTSet60[ARTL_ART_not] = true;
  ARTSet60[ARTL_ART_union] = true;
}

public void ARTSet111initialise() {
  ARTSet111 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet111, 0, artSetExtent, false);
  ARTSet111[ARTTB_CHAR_BQ] = true;
  ARTSet111[ARTTB_ID] = true;
  ARTSet111[ARTTB_STRING_BRACE_NEST] = true;
  ARTSet111[ARTTB_STRING_DOLLAR] = true;
  ARTSet111[ARTTB_STRING_DQ] = true;
  ARTSet111[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet111[ARTTS__HASH] = true;
  ARTSet111[ARTTS__AMPERSAND] = true;
  ARTSet111[ARTTS__LPAR] = true;
  ARTSet111[ARTTS__BACKSLASH_BACKSLASH] = true;
  ARTSet111[ARTL_ART_CHAR_BQ] = true;
  ARTSet111[ARTL_ART_ID] = true;
  ARTSet111[ARTL_ART_STRING_BRACE_NEST] = true;
  ARTSet111[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet111[ARTL_ART_STRING_DQ] = true;
  ARTSet111[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet111[ARTL_ART_abbrev] = true;
  ARTSet111[ARTL_ART_action] = true;
  ARTSet111[ARTL_ART_builtinTerminal] = true;
  ARTSet111[ARTL_ART_caseInsensitiveTerminal] = true;
  ARTSet111[ARTL_ART_caseSensitiveTerminal] = true;
  ARTSet111[ARTL_ART_cat] = true;
  ARTSet111[ARTL_ART_catTail] = true;
  ARTSet111[ARTL_ART_characterSetTerminal] = true;
  ARTSet111[ARTL_ART_characterTerminal] = true;
  ARTSet111[ARTL_ART_diff] = true;
  ARTSet111[ARTL_ART_element1] = true;
  ARTSet111[ARTL_ART_epsilon] = true;
  ARTSet111[ARTL_ART_iter] = true;
  ARTSet111[ARTL_ART_nonterminal] = true;
  ARTSet111[ARTL_ART_not] = true;
  ARTSet111[ARTL_ART_rhs] = true;
  ARTSet111[ARTL_ART_slot] = true;
  ARTSet111[ARTL_ART_union] = true;
}

public void ARTSet17initialise() {
  ARTSet17 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet17, 0, artSetExtent, false);
  ARTSet17[ARTTB_STRING_DQ] = true;
}

public void ARTSet182initialise() {
  ARTSet182 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet182, 0, artSetExtent, false);
  ARTSet182[ARTTS_lcnpIndexedPool] = true;
}

public void ARTSet51initialise() {
  ARTSet51 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet51, 0, artSetExtent, false);
  ARTSet51[ARTTS__LT] = true;
}

public void ARTSet147initialise() {
  ARTSet147 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet147, 0, artSetExtent, false);
  ARTSet147[ARTTS_namespace] = true;
}

public void ARTSet21initialise() {
  ARTSet21 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet21, 0, artSetExtent, false);
  ARTSet21[ARTTB_ID] = true;
  ARTSet21[ARTTS__GT] = true;
  ARTSet21[ARTL_ART_ID] = true;
  ARTSet21[ARTL_ART_attribute] = true;
  ARTSet21[ARTL_ART_attributes] = true;
}

public void ARTSet50initialise() {
  ARTSet50 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet50, 0, artSetExtent, false);
  ARTSet50[ARTTB_ID] = true;
  ARTSet50[ARTL_ART_ID] = true;
  ARTSet50[ARTL_ART_attribute] = true;
  ARTSet50[ARTL_ART_attributes] = true;
}

public void ARTSet52initialise() {
  ARTSet52 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet52, 0, artSetExtent, false);
  ARTSet52[ARTTS__COLON_COLON_EQUAL] = true;
}

public void ARTSet124initialise() {
  ARTSet124 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet124, 0, artSetExtent, false);
  ARTSet124[ARTTS_tweLexicalisations] = true;
}

public void ARTSet187initialise() {
  ARTSet187 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet187, 0, artSetExtent, false);
  ARTSet187[ARTTS_gllClusteredGeneratorPool] = true;
}

public void ARTSet132initialise() {
  ARTSet132 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet132, 0, artSetExtent, false);
  ARTSet132[ARTTS_tweLongest] = true;
}

public void ARTSet157initialise() {
  ARTSet157 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet157, 0, artSetExtent, false);
  ARTSet157[ARTTS_suppressPopGuard] = true;
}

public void ARTSet230initialise() {
  ARTSet230 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet230, 0, artSetExtent, false);
  ARTSet230[ARTTB_CHAR_BQ] = true;
  ARTSet230[ARTTB_ID] = true;
  ARTSet230[ARTTB_STRING_DOLLAR] = true;
  ARTSet230[ARTTS__AMPERSAND] = true;
  ARTSet230[ARTL_ART_CHAR_BQ] = true;
  ARTSet230[ARTL_ART_ID] = true;
  ARTSet230[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet230[ARTL_ART_builtinTerminal] = true;
  ARTSet230[ARTL_ART_characterTerminal] = true;
  ARTSet230[ARTL_ART_nonterminal] = true;
  ARTSet230[ARTL_ART_whitespacer] = true;
}

public void ARTSet199initialise() {
  ARTSet199 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet199, 0, artSetExtent, false);
  ARTSet199[ARTX_EOS] = true;
  ARTSet199[ARTTB_ID] = true;
  ARTSet199[ARTTB_STRING_DOLLAR] = true;
  ARTSet199[ARTTS__SHREIK] = true;
  ARTSet199[ARTTS__COMMA] = true;
  ARTSet199[ARTL_ART_ID] = true;
  ARTSet199[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet199[ARTL_ART_grammarRule] = true;
  ARTSet199[ARTL_ART_nonterminal] = true;
  ARTSet199[ARTL_ART_textElement] = true;
  ARTSet199[ARTL_ART_textElements] = true;
}

public void ARTSet94initialise() {
  ARTSet94 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet94, 0, artSetExtent, false);
  ARTSet94[ARTTS_shortest] = true;
}

public void ARTSet36initialise() {
  ARTSet36 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet36, 0, artSetExtent, false);
  ARTSet36[ARTTB_CHAR_BQ] = true;
  ARTSet36[ARTTB_ID] = true;
  ARTSet36[ARTTB_STRING_BRACE_NEST] = true;
  ARTSet36[ARTTB_STRING_DOLLAR] = true;
  ARTSet36[ARTTB_STRING_DQ] = true;
  ARTSet36[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet36[ARTTS__HASH] = true;
  ARTSet36[ARTTS__AMPERSAND] = true;
  ARTSet36[ARTTS__LPAR] = true;
  ARTSet36[ARTTS__BACKSLASH_BACKSLASH] = true;
  ARTSet36[ARTL_ART_CHAR_BQ] = true;
  ARTSet36[ARTL_ART_ID] = true;
  ARTSet36[ARTL_ART_STRING_BRACE_NEST] = true;
  ARTSet36[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet36[ARTL_ART_STRING_DQ] = true;
  ARTSet36[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet36[ARTL_ART_abbrev] = true;
  ARTSet36[ARTL_ART_action] = true;
  ARTSet36[ARTL_ART_alt1] = true;
  ARTSet36[ARTL_ART_builtinTerminal] = true;
  ARTSet36[ARTL_ART_caseInsensitiveTerminal] = true;
  ARTSet36[ARTL_ART_caseSensitiveTerminal] = true;
  ARTSet36[ARTL_ART_cat] = true;
  ARTSet36[ARTL_ART_catTail] = true;
  ARTSet36[ARTL_ART_characterSetTerminal] = true;
  ARTSet36[ARTL_ART_characterTerminal] = true;
  ARTSet36[ARTL_ART_diff] = true;
  ARTSet36[ARTL_ART_element1] = true;
  ARTSet36[ARTL_ART_epsilon] = true;
  ARTSet36[ARTL_ART_iter] = true;
  ARTSet36[ARTL_ART_nonterminal] = true;
  ARTSet36[ARTL_ART_not] = true;
  ARTSet36[ARTL_ART_slot] = true;
  ARTSet36[ARTL_ART_union] = true;
}

public void ARTSet103initialise() {
  ARTSet103 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet103, 0, artSetExtent, false);
  ARTSet103[ARTTS_element] = true;
}

public void ARTSet61initialise() {
  ARTSet61 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet61, 0, artSetExtent, false);
  ARTSet61[ARTX_EOS] = true;
  ARTSet61[ARTTB_ID] = true;
  ARTSet61[ARTTB_STRING_BRACE_NEST] = true;
  ARTSet61[ARTTB_STRING_DOLLAR] = true;
  ARTSet61[ARTTS__SHREIK] = true;
  ARTSet61[ARTTS__RPAR] = true;
  ARTSet61[ARTTS__BAR] = true;
  ARTSet61[ARTL_ART_ID] = true;
  ARTSet61[ARTL_ART_STRING_BRACE_NEST] = true;
  ARTSet61[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet61[ARTL_ART_action] = true;
  ARTSet61[ARTL_ART_grammarRule] = true;
  ARTSet61[ARTL_ART_nonterminal] = true;
  ARTSet61[ARTL_ART_slot] = true;
  ARTSet61[ARTL_ART_textElement] = true;
  ARTSet61[ARTL_ART_textElements] = true;
}

public void ARTSet74initialise() {
  ARTSet74 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet74, 0, artSetExtent, false);
  ARTSet74[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet74[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet74[ARTL_ART_caseSensitiveTerminal] = true;
}

public void ARTSet146initialise() {
  ARTSet146 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet146, 0, artSetExtent, false);
  ARTSet146[ARTTS_outputDirectory] = true;
}

public void ARTSet208initialise() {
  ARTSet208 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet208, 0, artSetExtent, false);
  ARTSet208[ARTTS__LT] = true;
  ARTSet208[ARTL_ART_attributesOpt] = true;
}

public void ARTSet176initialise() {
  ARTSet176 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet176, 0, artSetExtent, false);
  ARTSet176[ARTTS_cnpIndexedAPI] = true;
}

public void ARTSet87initialise() {
  ARTSet87 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet87, 0, artSetExtent, false);
  ARTSet87[ARTX_EOS] = true;
  ARTSet87[ARTTB_ID] = true;
  ARTSet87[ARTTB_STRING_DOLLAR] = true;
  ARTSet87[ARTTB_STRING_DQ] = true;
  ARTSet87[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet87[ARTTS__SHREIK] = true;
  ARTSet87[ARTTS__AMPERSAND] = true;
  ARTSet87[ARTTS__LPAR] = true;
  ARTSet87[ARTTS__RPAR] = true;
  ARTSet87[ARTTS__PERIOD] = true;
  ARTSet87[ARTTS__SLASH] = true;
  ARTSet87[ARTTS__LT] = true;
  ARTSet87[ARTTS__LT_LT] = true;
  ARTSet87[ARTTS__GT] = true;
  ARTSet87[ARTTS__GT_GT] = true;
  ARTSet87[ARTTS__BACKSLASH] = true;
  ARTSet87[ARTTS_anyBuiltinTerminal] = true;
  ARTSet87[ARTTS_anyCaseInsensitiveTerminal] = true;
  ARTSet87[ARTTS_anyCaseSensitiveTerminal] = true;
  ARTSet87[ARTTS_anyCharacterTerminal] = true;
  ARTSet87[ARTTS_anyLiteralTerminal] = true;
  ARTSet87[ARTTS_anyNonterminal] = true;
  ARTSet87[ARTTS_anyParaterminal] = true;
  ARTSet87[ARTTS_anyTerminal] = true;
  ARTSet87[ARTTS_longest] = true;
  ARTSet87[ARTTS_shortest] = true;
  ARTSet87[ARTTS__BAR] = true;
  ARTSet87[ARTL_ART_ID] = true;
  ARTSet87[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet87[ARTL_ART_STRING_DQ] = true;
  ARTSet87[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet87[ARTL_ART_builtinTerminal] = true;
  ARTSet87[ARTL_ART_caseInsensitiveTerminal] = true;
  ARTSet87[ARTL_ART_caseSensitiveTerminal] = true;
  ARTSet87[ARTL_ART_chooseDiff] = true;
  ARTSet87[ARTL_ART_chooseElement] = true;
  ARTSet87[ARTL_ART_chooseUnionIntersection] = true;
  ARTSet87[ARTL_ART_chooser] = true;
  ARTSet87[ARTL_ART_choosers] = true;
  ARTSet87[ARTL_ART_grammarRule] = true;
  ARTSet87[ARTL_ART_nonterminal] = true;
  ARTSet87[ARTL_ART_textElement] = true;
  ARTSet87[ARTL_ART_textElements] = true;
}

public void ARTSet110initialise() {
  ARTSet110 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet110, 0, artSetExtent, false);
  ARTSet110[ARTTS_injectInstance] = true;
}

public void ARTSet133initialise() {
  ARTSet133 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet133, 0, artSetExtent, false);
  ARTSet133[ARTTS_twePriority] = true;
}

public void ARTSet186initialise() {
  ARTSet186 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet186, 0, artSetExtent, false);
  ARTSet186[ARTTS_gllTWEGeneratorPool] = true;
}

public void ARTSet2initialise() {
  ARTSet2 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet2, 0, artSetExtent, false);
  ARTSet2[ARTTS_false] = true;
  ARTSet2[ARTTS_true] = true;
}

public void ARTSet145initialise() {
  ARTSet145 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet145, 0, artSetExtent, false);
  ARTSet145[ARTTS_parseCounts] = true;
}

public void ARTSet158initialise() {
  ARTSet158 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet158, 0, artSetExtent, false);
  ARTSet158[ARTTS_suppressProductionGuard] = true;
}

public void ARTSet63initialise() {
  ARTSet63 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet63, 0, artSetExtent, false);
  ARTSet63[ARTX_EOS] = true;
  ARTSet63[ARTTB_CHAR_BQ] = true;
  ARTSet63[ARTTB_ID] = true;
  ARTSet63[ARTTB_STRING_BRACE_NEST] = true;
  ARTSet63[ARTTB_STRING_DOLLAR] = true;
  ARTSet63[ARTTB_STRING_DQ] = true;
  ARTSet63[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet63[ARTTS__SHREIK] = true;
  ARTSet63[ARTTS__HASH] = true;
  ARTSet63[ARTTS__AMPERSAND] = true;
  ARTSet63[ARTTS__LPAR] = true;
  ARTSet63[ARTTS__RPAR] = true;
  ARTSet63[ARTTS__STAR] = true;
  ARTSet63[ARTTS__PLUS] = true;
  ARTSet63[ARTTS__COMMA] = true;
  ARTSet63[ARTTS__COLON] = true;
  ARTSet63[ARTTS__LT] = true;
  ARTSet63[ARTTS__QUERY] = true;
  ARTSet63[ARTTS__AT] = true;
  ARTSet63[ARTTS__BACKSLASH_BACKSLASH] = true;
  ARTSet63[ARTTS__UPARROW] = true;
  ARTSet63[ARTTS__UPARROW_UPARROW] = true;
  ARTSet63[ARTTS__UPARROW_UPARROW_UPARROW] = true;
  ARTSet63[ARTTS__UPARROW_] = true;
  ARTSet63[ARTTS__BAR] = true;
  ARTSet63[ARTTS__BAR_BAR] = true;
  ARTSet63[ARTL_ART_CHAR_BQ] = true;
  ARTSet63[ARTL_ART_ID] = true;
  ARTSet63[ARTL_ART_STRING_BRACE_NEST] = true;
  ARTSet63[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet63[ARTL_ART_STRING_DQ] = true;
  ARTSet63[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet63[ARTL_ART_abbrev] = true;
  ARTSet63[ARTL_ART_action] = true;
  ARTSet63[ARTL_ART_annotation] = true;
  ARTSet63[ARTL_ART_annotations] = true;
  ARTSet63[ARTL_ART_builtinTerminal] = true;
  ARTSet63[ARTL_ART_caseInsensitiveTerminal] = true;
  ARTSet63[ARTL_ART_caseSensitiveTerminal] = true;
  ARTSet63[ARTL_ART_catTail] = true;
  ARTSet63[ARTL_ART_characterSetTerminal] = true;
  ARTSet63[ARTL_ART_characterTerminal] = true;
  ARTSet63[ARTL_ART_delay] = true;
  ARTSet63[ARTL_ART_diff] = true;
  ARTSet63[ARTL_ART_element1] = true;
  ARTSet63[ARTL_ART_epsilon] = true;
  ARTSet63[ARTL_ART_fold] = true;
  ARTSet63[ARTL_ART_grammarRule] = true;
  ARTSet63[ARTL_ART_iter] = true;
  ARTSet63[ARTL_ART_name] = true;
  ARTSet63[ARTL_ART_nonterminal] = true;
  ARTSet63[ARTL_ART_not] = true;
  ARTSet63[ARTL_ART_slot] = true;
  ARTSet63[ARTL_ART_textElement] = true;
  ARTSet63[ARTL_ART_textElements] = true;
  ARTSet63[ARTL_ART_union] = true;
}

public void ARTSet9initialise() {
  ARTSet9 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet9, 0, artSetExtent, false);
  ARTSet9[ARTX_EOS] = true;
  ARTSet9[ARTTB_CHAR_BQ] = true;
  ARTSet9[ARTTB_ID] = true;
  ARTSet9[ARTTB_STRING_BRACE_NEST] = true;
  ARTSet9[ARTTB_STRING_DOLLAR] = true;
  ARTSet9[ARTTB_STRING_DQ] = true;
  ARTSet9[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet9[ARTTS__SHREIK] = true;
  ARTSet9[ARTTS__HASH] = true;
  ARTSet9[ARTTS__AMPERSAND] = true;
  ARTSet9[ARTTS__LPAR] = true;
  ARTSet9[ARTTS__RPAR] = true;
  ARTSet9[ARTTS__STAR] = true;
  ARTSet9[ARTTS__PLUS] = true;
  ARTSet9[ARTTS__COMMA] = true;
  ARTSet9[ARTTS__PERIOD] = true;
  ARTSet9[ARTTS__SLASH] = true;
  ARTSet9[ARTTS__COLON] = true;
  ARTSet9[ARTTS__COLON_COLON_EQUAL] = true;
  ARTSet9[ARTTS__LT] = true;
  ARTSet9[ARTTS__LT_LT] = true;
  ARTSet9[ARTTS__EQUAL] = true;
  ARTSet9[ARTTS__GT] = true;
  ARTSet9[ARTTS__GT_GT] = true;
  ARTSet9[ARTTS__QUERY] = true;
  ARTSet9[ARTTS__AT] = true;
  ARTSet9[ARTTS__BACKSLASH] = true;
  ARTSet9[ARTTS__BACKSLASH_BACKSLASH] = true;
  ARTSet9[ARTTS__UPARROW] = true;
  ARTSet9[ARTTS__UPARROW_UPARROW] = true;
  ARTSet9[ARTTS__UPARROW_UPARROW_UPARROW] = true;
  ARTSet9[ARTTS__UPARROW_] = true;
  ARTSet9[ARTTS_anyBuiltinTerminal] = true;
  ARTSet9[ARTTS_anyCaseInsensitiveTerminal] = true;
  ARTSet9[ARTTS_anyCaseSensitiveTerminal] = true;
  ARTSet9[ARTTS_anyCharacterTerminal] = true;
  ARTSet9[ARTTS_anyLiteralTerminal] = true;
  ARTSet9[ARTTS_anyNonterminal] = true;
  ARTSet9[ARTTS_anyParaterminal] = true;
  ARTSet9[ARTTS_anyTerminal] = true;
  ARTSet9[ARTTS_longest] = true;
  ARTSet9[ARTTS_shortest] = true;
  ARTSet9[ARTTS__BAR] = true;
  ARTSet9[ARTTS__BAR_BAR] = true;
  ARTSet9[ARTL_ART_CHAR_BQ] = true;
  ARTSet9[ARTL_ART_ID] = true;
  ARTSet9[ARTL_ART_STRING_BRACE_NEST] = true;
  ARTSet9[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet9[ARTL_ART_STRING_DQ] = true;
  ARTSet9[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet9[ARTL_ART_abbrev] = true;
  ARTSet9[ARTL_ART_action] = true;
  ARTSet9[ARTL_ART_annotation] = true;
  ARTSet9[ARTL_ART_annotations] = true;
  ARTSet9[ARTL_ART_attribute] = true;
  ARTSet9[ARTL_ART_attributes] = true;
  ARTSet9[ARTL_ART_attributesOpt] = true;
  ARTSet9[ARTL_ART_builtinTerminal] = true;
  ARTSet9[ARTL_ART_caseInsensitiveTerminal] = true;
  ARTSet9[ARTL_ART_caseSensitiveTerminal] = true;
  ARTSet9[ARTL_ART_catTail] = true;
  ARTSet9[ARTL_ART_characterSetTerminal] = true;
  ARTSet9[ARTL_ART_characterTerminal] = true;
  ARTSet9[ARTL_ART_choiceSlot] = true;
  ARTSet9[ARTL_ART_chooseDiff] = true;
  ARTSet9[ARTL_ART_chooseElement] = true;
  ARTSet9[ARTL_ART_chooseUnionIntersection] = true;
  ARTSet9[ARTL_ART_chooser] = true;
  ARTSet9[ARTL_ART_choosers] = true;
  ARTSet9[ARTL_ART_delay] = true;
  ARTSet9[ARTL_ART_diff] = true;
  ARTSet9[ARTL_ART_element1] = true;
  ARTSet9[ARTL_ART_epsilon] = true;
  ARTSet9[ARTL_ART_fold] = true;
  ARTSet9[ARTL_ART_grammarRule] = true;
  ARTSet9[ARTL_ART_iter] = true;
  ARTSet9[ARTL_ART_name] = true;
  ARTSet9[ARTL_ART_nonterminal] = true;
  ARTSet9[ARTL_ART_not] = true;
  ARTSet9[ARTL_ART_slot] = true;
  ARTSet9[ARTL_ART_textElement] = true;
  ARTSet9[ARTL_ART_textElements] = true;
  ARTSet9[ARTL_ART_union] = true;
}

public void ARTSet27initialise() {
  ARTSet27 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet27, 0, artSetExtent, false);
  ARTSet27[ARTTB_CHAR_BQ] = true;
  ARTSet27[ARTTB_ID] = true;
  ARTSet27[ARTTB_STRING_DOLLAR] = true;
  ARTSet27[ARTTB_STRING_DQ] = true;
  ARTSet27[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet27[ARTTS__HASH] = true;
  ARTSet27[ARTTS__AMPERSAND] = true;
  ARTSet27[ARTTS__LPAR] = true;
  ARTSet27[ARTTS__BACKSLASH_BACKSLASH] = true;
  ARTSet27[ARTL_ART_CHAR_BQ] = true;
  ARTSet27[ARTL_ART_ID] = true;
  ARTSet27[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet27[ARTL_ART_STRING_DQ] = true;
  ARTSet27[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet27[ARTL_ART_builtinTerminal] = true;
  ARTSet27[ARTL_ART_caseInsensitiveTerminal] = true;
  ARTSet27[ARTL_ART_caseSensitiveTerminal] = true;
  ARTSet27[ARTL_ART_characterSetTerminal] = true;
  ARTSet27[ARTL_ART_characterTerminal] = true;
  ARTSet27[ARTL_ART_diff] = true;
  ARTSet27[ARTL_ART_element1] = true;
  ARTSet27[ARTL_ART_epsilon] = true;
  ARTSet27[ARTL_ART_iter] = true;
  ARTSet27[ARTL_ART_nonterminal] = true;
  ARTSet27[ARTL_ART_not] = true;
  ARTSet27[ARTL_ART_union] = true;
}

public void ARTSet58initialise() {
  ARTSet58 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet58, 0, artSetExtent, false);
  ARTSet58[ARTTB_STRING_BRACE_NEST] = true;
  ARTSet58[ARTL_ART_STRING_BRACE_NEST] = true;
  ARTSet58[ARTL_ART_action] = true;
  ARTSet58[ARTL_ART_slot] = true;
}

public void ARTSet113initialise() {
  ARTSet113 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet113, 0, artSetExtent, false);
  ARTSet113[ARTTS_injectProductionOff] = true;
}

public void ARTSet154initialise() {
  ARTSet154 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet154, 0, artSetExtent, false);
  ARTSet154[ARTTS_generatePool] = true;
}

public void ARTSet167initialise() {
  ARTSet167 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet167, 0, artSetExtent, false);
  ARTSet167[ARTTS_earleyIndexedPool] = true;
}

public void ARTSet225initialise() {
  ARTSet225 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet225, 0, artSetExtent, false);
  ARTSet225[ARTTB_ID] = true;
  ARTSet225[ARTTB_STRING_DOLLAR] = true;
  ARTSet225[ARTTS__SHREIK] = true;
  ARTSet225[ARTL_ART_ID] = true;
  ARTSet225[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet225[ARTL_ART_grammarRule] = true;
  ARTSet225[ARTL_ART_nonterminal] = true;
  ARTSet225[ARTL_ART_textElement] = true;
}

public void ARTSet179initialise() {
  ARTSet179 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet179, 0, artSetExtent, false);
  ARTSet179[ARTTS_lcnp] = true;
}

public void ARTSet18initialise() {
  ARTSet18 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet18, 0, artSetExtent, false);
  ARTSet18[ARTX_EOS] = true;
  ARTSet18[ARTTB_CHAR_BQ] = true;
  ARTSet18[ARTTB_ID] = true;
  ARTSet18[ARTTB_STRING_BRACE_NEST] = true;
  ARTSet18[ARTTB_STRING_DOLLAR] = true;
  ARTSet18[ARTTB_STRING_DQ] = true;
  ARTSet18[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet18[ARTTS__SHREIK] = true;
  ARTSet18[ARTTS__HASH] = true;
  ARTSet18[ARTTS__AMPERSAND] = true;
  ARTSet18[ARTTS__LPAR] = true;
  ARTSet18[ARTTS__RPAR] = true;
  ARTSet18[ARTTS__STAR] = true;
  ARTSet18[ARTTS__PLUS] = true;
  ARTSet18[ARTTS__COMMA] = true;
  ARTSet18[ARTTS__PERIOD] = true;
  ARTSet18[ARTTS__SLASH] = true;
  ARTSet18[ARTTS__COLON] = true;
  ARTSet18[ARTTS__LT] = true;
  ARTSet18[ARTTS__LT_LT] = true;
  ARTSet18[ARTTS__GT] = true;
  ARTSet18[ARTTS__GT_GT] = true;
  ARTSet18[ARTTS__QUERY] = true;
  ARTSet18[ARTTS__AT] = true;
  ARTSet18[ARTTS__BACKSLASH] = true;
  ARTSet18[ARTTS__BACKSLASH_BACKSLASH] = true;
  ARTSet18[ARTTS__UPARROW] = true;
  ARTSet18[ARTTS__UPARROW_UPARROW] = true;
  ARTSet18[ARTTS__UPARROW_UPARROW_UPARROW] = true;
  ARTSet18[ARTTS__UPARROW_] = true;
  ARTSet18[ARTTS_anyBuiltinTerminal] = true;
  ARTSet18[ARTTS_anyCaseInsensitiveTerminal] = true;
  ARTSet18[ARTTS_anyCaseSensitiveTerminal] = true;
  ARTSet18[ARTTS_anyCharacterTerminal] = true;
  ARTSet18[ARTTS_anyLiteralTerminal] = true;
  ARTSet18[ARTTS_anyNonterminal] = true;
  ARTSet18[ARTTS_anyParaterminal] = true;
  ARTSet18[ARTTS_anyTerminal] = true;
  ARTSet18[ARTTS_longest] = true;
  ARTSet18[ARTTS_shortest] = true;
  ARTSet18[ARTTS__BAR] = true;
  ARTSet18[ARTTS__BAR_BAR] = true;
  ARTSet18[ARTL_ART_CHAR_BQ] = true;
  ARTSet18[ARTL_ART_ID] = true;
  ARTSet18[ARTL_ART_STRING_BRACE_NEST] = true;
  ARTSet18[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet18[ARTL_ART_STRING_DQ] = true;
  ARTSet18[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet18[ARTL_ART_abbrev] = true;
  ARTSet18[ARTL_ART_action] = true;
  ARTSet18[ARTL_ART_annotation] = true;
  ARTSet18[ARTL_ART_annotations] = true;
  ARTSet18[ARTL_ART_builtinTerminal] = true;
  ARTSet18[ARTL_ART_caseInsensitiveTerminal] = true;
  ARTSet18[ARTL_ART_caseSensitiveTerminal] = true;
  ARTSet18[ARTL_ART_catTail] = true;
  ARTSet18[ARTL_ART_characterSetTerminal] = true;
  ARTSet18[ARTL_ART_characterTerminal] = true;
  ARTSet18[ARTL_ART_choiceSlot] = true;
  ARTSet18[ARTL_ART_chooseDiff] = true;
  ARTSet18[ARTL_ART_chooseElement] = true;
  ARTSet18[ARTL_ART_chooseUnionIntersection] = true;
  ARTSet18[ARTL_ART_chooser] = true;
  ARTSet18[ARTL_ART_choosers] = true;
  ARTSet18[ARTL_ART_delay] = true;
  ARTSet18[ARTL_ART_diff] = true;
  ARTSet18[ARTL_ART_element1] = true;
  ARTSet18[ARTL_ART_epsilon] = true;
  ARTSet18[ARTL_ART_fold] = true;
  ARTSet18[ARTL_ART_grammarRule] = true;
  ARTSet18[ARTL_ART_iter] = true;
  ARTSet18[ARTL_ART_name] = true;
  ARTSet18[ARTL_ART_nonterminal] = true;
  ARTSet18[ARTL_ART_not] = true;
  ARTSet18[ARTL_ART_slot] = true;
  ARTSet18[ARTL_ART_textElement] = true;
  ARTSet18[ARTL_ART_textElements] = true;
  ARTSet18[ARTL_ART_union] = true;
}

public void ARTSet15initialise() {
  ARTSet15 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet15, 0, artSetExtent, false);
  ARTSet15[ARTTB_STRING_DOLLAR] = true;
}

public void ARTSet152initialise() {
  ARTSet152 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet152, 0, artSetExtent, false);
  ARTSet152[ARTTS_generateState] = true;
}

public void ARTSet194initialise() {
  ARTSet194 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet194, 0, artSetExtent, false);
  ARTSet194[ARTTS__HASH] = true;
  ARTSet194[ARTL_ART_epsilon] = true;
}

public void ARTSet37initialise() {
  ARTSet37 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet37, 0, artSetExtent, false);
  ARTSet37[ARTTS__COLON] = true;
  ARTSet37[ARTTS__LT] = true;
  ARTSet37[ARTTS__UPARROW] = true;
  ARTSet37[ARTTS__UPARROW_UPARROW] = true;
  ARTSet37[ARTTS__UPARROW_UPARROW_UPARROW] = true;
  ARTSet37[ARTTS__UPARROW_] = true;
  ARTSet37[ARTL_ART_delay] = true;
  ARTSet37[ARTL_ART_fold] = true;
  ARTSet37[ARTL_ART_name] = true;
}

public void ARTSet174initialise() {
  ARTSet174 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet174, 0, artSetExtent, false);
  ARTSet174[ARTTS_cnp] = true;
}

public void ARTSet143initialise() {
  ARTSet143 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet143, 0, artSetExtent, false);
  ARTSet143[ARTTS_termPrint] = true;
}

public void ARTSet159initialise() {
  ARTSet159 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet159, 0, artSetExtent, false);
  ARTSet159[ARTTS_suppressTestRepeat] = true;
}

public void ARTSet49initialise() {
  ARTSet49 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet49, 0, artSetExtent, false);
  ARTSet49[ARTTB_ID] = true;
  ARTSet49[ARTL_ART_ID] = true;
  ARTSet49[ARTL_ART_attribute] = true;
}

public void ARTSet7initialise() {
  ARTSet7 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet7, 0, artSetExtent, false);
  ARTSet7[ARTX_EOS] = true;
  ARTSet7[ARTTB_CHAR_BQ] = true;
  ARTSet7[ARTTB_ID] = true;
  ARTSet7[ARTTB_STRING_BRACE_NEST] = true;
  ARTSet7[ARTTB_STRING_DOLLAR] = true;
  ARTSet7[ARTTB_STRING_DQ] = true;
  ARTSet7[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet7[ARTTS__SHREIK] = true;
  ARTSet7[ARTTS__HASH] = true;
  ARTSet7[ARTTS__AMPERSAND] = true;
  ARTSet7[ARTTS__LPAR] = true;
  ARTSet7[ARTTS__RPAR] = true;
  ARTSet7[ARTTS__STAR] = true;
  ARTSet7[ARTTS__PLUS] = true;
  ARTSet7[ARTTS__COMMA] = true;
  ARTSet7[ARTTS__PERIOD_PERIOD] = true;
  ARTSet7[ARTTS__COLON] = true;
  ARTSet7[ARTTS__LT] = true;
  ARTSet7[ARTTS__QUERY] = true;
  ARTSet7[ARTTS__AT] = true;
  ARTSet7[ARTTS__BACKSLASH_BACKSLASH] = true;
  ARTSet7[ARTTS__UPARROW] = true;
  ARTSet7[ARTTS__UPARROW_UPARROW] = true;
  ARTSet7[ARTTS__UPARROW_UPARROW_UPARROW] = true;
  ARTSet7[ARTTS__UPARROW_] = true;
  ARTSet7[ARTTS__BAR] = true;
  ARTSet7[ARTTS__BAR_BAR] = true;
  ARTSet7[ARTL_ART_CHAR_BQ] = true;
  ARTSet7[ARTL_ART_ID] = true;
  ARTSet7[ARTL_ART_STRING_BRACE_NEST] = true;
  ARTSet7[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet7[ARTL_ART_STRING_DQ] = true;
  ARTSet7[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet7[ARTL_ART_abbrev] = true;
  ARTSet7[ARTL_ART_action] = true;
  ARTSet7[ARTL_ART_annotation] = true;
  ARTSet7[ARTL_ART_annotations] = true;
  ARTSet7[ARTL_ART_builtinTerminal] = true;
  ARTSet7[ARTL_ART_caseInsensitiveTerminal] = true;
  ARTSet7[ARTL_ART_caseSensitiveTerminal] = true;
  ARTSet7[ARTL_ART_catTail] = true;
  ARTSet7[ARTL_ART_characterSetTerminal] = true;
  ARTSet7[ARTL_ART_characterTerminal] = true;
  ARTSet7[ARTL_ART_delay] = true;
  ARTSet7[ARTL_ART_diff] = true;
  ARTSet7[ARTL_ART_element1] = true;
  ARTSet7[ARTL_ART_epsilon] = true;
  ARTSet7[ARTL_ART_fold] = true;
  ARTSet7[ARTL_ART_grammarRule] = true;
  ARTSet7[ARTL_ART_iter] = true;
  ARTSet7[ARTL_ART_name] = true;
  ARTSet7[ARTL_ART_nonterminal] = true;
  ARTSet7[ARTL_ART_not] = true;
  ARTSet7[ARTL_ART_slot] = true;
  ARTSet7[ARTL_ART_textElement] = true;
  ARTSet7[ARTL_ART_textElements] = true;
  ARTSet7[ARTL_ART_union] = true;
}

public void ARTSet83initialise() {
  ARTSet83 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet83, 0, artSetExtent, false);
  ARTSet83[ARTTS_anyNonterminal] = true;
}

public void ARTSet122initialise() {
  ARTSet122 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet122, 0, artSetExtent, false);
  ARTSet122[ARTX_EOS] = true;
  ARTSet122[ARTTB_ID] = true;
  ARTSet122[ARTTB_STRING_DOLLAR] = true;
  ARTSet122[ARTTS__SHREIK] = true;
  ARTSet122[ARTTS__COLON] = true;
  ARTSet122[ARTTS_false] = true;
  ARTSet122[ARTTS_true] = true;
  ARTSet122[ARTL_ART_ID] = true;
  ARTSet122[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet122[ARTL_ART_grammarRule] = true;
  ARTSet122[ARTL_ART_nonterminal] = true;
  ARTSet122[ARTL_ART_textElement] = true;
  ARTSet122[ARTL_ART_textElements] = true;
  ARTSet122[ARTL_ART_trueFalse] = true;
}

public void ARTSet162initialise() {
  ARTSet162 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet162, 0, artSetExtent, false);
  ARTSet162[ARTTS_lexDFA] = true;
}

public void ARTSet126initialise() {
  ARTSet126 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet126, 0, artSetExtent, false);
  ARTSet126[ARTTS_tweSegments] = true;
}

public void ARTSet109initialise() {
  ARTSet109 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet109, 0, artSetExtent, false);
  ARTSet109[ARTTB_ID] = true;
  ARTSet109[ARTTB_STRING_DOLLAR] = true;
  ARTSet109[ARTL_ART_ID] = true;
  ARTSet109[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet109[ARTL_ART_nonterminal] = true;
  ARTSet109[ARTL_ART_paraterminalisers] = true;
}

public void ARTSet12initialise() {
  ARTSet12 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet12, 0, artSetExtent, false);
  ARTSet12[ARTTB_REAL] = true;
}

public void ARTSet135initialise() {
  ARTSet135 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet135, 0, artSetExtent, false);
  ARTSet135[ARTTS_sppfLongest] = true;
}

public void ARTSet92initialise() {
  ARTSet92 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet92, 0, artSetExtent, false);
  ARTSet92[ARTTS__LT_LT] = true;
}

public void ARTSet100initialise() {
  ARTSet100 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet100, 0, artSetExtent, false);
  ARTSet100[ARTTS__BACKSLASH_BACKSLASH] = true;
}

public void ARTSet228initialise() {
  ARTSet228 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet228, 0, artSetExtent, false);
  ARTSet228[ARTTS__BAR_BAR] = true;
}

public void artSetInitialise() {
  ARTSet1initialise();
  ARTSet20initialise();
  ARTSet197initialise();
  ARTSet129initialise();
  ARTSet55initialise();
  ARTSet39initialise();
  ARTSet180initialise();
  ARTSet150initialise();
  ARTSet67initialise();
  ARTSet71initialise();
  ARTSet33initialise();
  ARTSet165initialise();
  ARTSet195initialise();
  ARTSet192initialise();
  ARTSet43initialise();
  ARTSet98initialise();
  ARTSet81initialise();
  ARTSet47initialise();
  ARTSet170initialise();
  ARTSet42initialise();
  ARTSet97initialise();
  ARTSet65initialise();
  ARTSet125initialise();
  ARTSet161initialise();
  ARTSet173initialise();
  ARTSet127initialise();
  ARTSet3initialise();
  ARTSet64initialise();
  ARTSet91initialise();
  ARTSet205initialise();
  ARTSet203initialise();
  ARTSet108initialise();
  ARTSet220initialise();
  ARTSet45initialise();
  ARTSet99initialise();
  ARTSet54initialise();
  ARTSet78initialise();
  ARTSet115initialise();
  ARTSet5initialise();
  ARTSet105initialise();
  ARTSet189initialise();
  ARTSet185initialise();
  ARTSet40initialise();
  ARTSet75initialise();
  ARTSet207initialise();
  ARTSet138initialise();
  ARTSet32initialise();
  ARTSet163initialise();
  ARTSet191initialise();
  ARTSet218initialise();
  ARTSet95initialise();
  ARTSet76initialise();
  ARTSet90initialise();
  ARTSet202initialise();
  ARTSet116initialise();
  ARTSet89initialise();
  ARTSet118initialise();
  ARTSet156initialise();
  ARTSet19initialise();
  ARTSet106initialise();
  ARTSet181initialise();
  ARTSet193initialise();
  ARTSet140initialise();
  ARTSet190initialise();
  ARTSet107initialise();
  ARTSet68initialise();
  ARTSet119initialise();
  ARTSet114initialise();
  ARTSet73initialise();
  ARTSet177initialise();
  ARTSet215initialise();
  ARTSet151initialise();
  ARTSet227initialise();
  ARTSet214initialise();
  ARTSet196initialise();
  ARTSet57initialise();
  ARTSet222initialise();
  ARTSet201initialise();
  ARTSet53initialise();
  ARTSet184initialise();
  ARTSet69initialise();
  ARTSet86initialise();
  ARTSet34initialise();
  ARTSet29initialise();
  ARTSet153initialise();
  ARTSet30initialise();
  ARTSet229initialise();
  ARTSet23initialise();
  ARTSet141initialise();
  ARTSet77initialise();
  ARTSet59initialise();
  ARTSet88initialise();
  ARTSet123initialise();
  ARTSet172initialise();
  ARTSet72initialise();
  ARTSet223initialise();
  ARTSet16initialise();
  ARTSet160initialise();
  ARTSet46initialise();
  ARTSet128initialise();
  ARTSet26initialise();
  ARTSet219initialise();
  ARTSet216initialise();
  ARTSet4initialise();
  ARTSet22initialise();
  ARTSet31initialise();
  ARTSet211initialise();
  ARTSet48initialise();
  ARTSet80initialise();
  ARTSet79initialise();
  ARTSet62initialise();
  ARTSet169initialise();
  ARTSet24initialise();
  ARTSet38initialise();
  ARTSet6initialise();
  ARTSet93initialise();
  ARTSet25initialise();
  ARTSet210initialise();
  ARTSet70initialise();
  ARTSet221initialise();
  ARTSet28initialise();
  ARTSet204initialise();
  ARTSet13initialise();
  ARTSet198initialise();
  ARTSet10initialise();
  ARTSet175initialise();
  ARTSet41initialise();
  ARTSet112initialise();
  ARTSet101initialise();
  ARTSet139initialise();
  ARTSet137initialise();
  ARTSet136initialise();
  ARTSet35initialise();
  ARTSet84initialise();
  ARTSet171initialise();
  ARTSet11initialise();
  ARTSet178initialise();
  ARTSet66initialise();
  ARTSet85initialise();
  ARTSet200initialise();
  ARTSet144initialise();
  ARTSet183initialise();
  ARTSet226initialise();
  ARTSet212initialise();
  ARTSet206initialise();
  ARTSet96initialise();
  ARTSet209initialise();
  ARTSet166initialise();
  ARTSet130initialise();
  ARTSet188initialise();
  ARTSet82initialise();
  ARTSet44initialise();
  ARTSet217initialise();
  ARTSet104initialise();
  ARTSet142initialise();
  ARTSet117initialise();
  ARTSet168initialise();
  ARTSet224initialise();
  ARTSet164initialise();
  ARTSet102initialise();
  ARTSet149initialise();
  ARTSet131initialise();
  ARTSet56initialise();
  ARTSet121initialise();
  ARTSet213initialise();
  ARTSet148initialise();
  ARTSet120initialise();
  ARTSet155initialise();
  ARTSet8initialise();
  ARTSet134initialise();
  ARTSet14initialise();
  ARTSet60initialise();
  ARTSet111initialise();
  ARTSet17initialise();
  ARTSet182initialise();
  ARTSet51initialise();
  ARTSet147initialise();
  ARTSet21initialise();
  ARTSet50initialise();
  ARTSet52initialise();
  ARTSet124initialise();
  ARTSet187initialise();
  ARTSet132initialise();
  ARTSet157initialise();
  ARTSet230initialise();
  ARTSet199initialise();
  ARTSet94initialise();
  ARTSet36initialise();
  ARTSet103initialise();
  ARTSet61initialise();
  ARTSet74initialise();
  ARTSet146initialise();
  ARTSet208initialise();
  ARTSet176initialise();
  ARTSet87initialise();
  ARTSet110initialise();
  ARTSet133initialise();
  ARTSet186initialise();
  ARTSet2initialise();
  ARTSet145initialise();
  ARTSet158initialise();
  ARTSet63initialise();
  ARTSet9initialise();
  ARTSet27initialise();
  ARTSet58initialise();
  ARTSet113initialise();
  ARTSet154initialise();
  ARTSet167initialise();
  ARTSet225initialise();
  ARTSet179initialise();
  ARTSet18initialise();
  ARTSet15initialise();
  ARTSet152initialise();
  ARTSet194initialise();
  ARTSet37initialise();
  ARTSet174initialise();
  ARTSet143initialise();
  ARTSet159initialise();
  ARTSet49initialise();
  ARTSet7initialise();
  ARTSet83initialise();
  ARTSet122initialise();
  ARTSet162initialise();
  ARTSet126initialise();
  ARTSet109initialise();
  ARTSet12initialise();
  ARTSet135initialise();
  ARTSet92initialise();
  ARTSet100initialise();
  ARTSet228initialise();
}

public void artTableInitialiser_ART_BOOLEAN() {
  artLabelInternalStrings[ARTL_ART_BOOLEAN] = "BOOLEAN";
  artLabelStrings[ARTL_ART_BOOLEAN] = "BOOLEAN";
  artKindOfs[ARTL_ART_BOOLEAN] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_BOOLEAN_1478] = "BOOLEAN ::= . 'true'  ";
  artLabelStrings[ARTL_ART_BOOLEAN_1478] = "";
  artlhsL[ARTL_ART_BOOLEAN_1478] = ARTL_ART_BOOLEAN;
  artKindOfs[ARTL_ART_BOOLEAN_1478] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_BOOLEAN_1478] = true;
  artLabelInternalStrings[ARTL_ART_BOOLEAN_1479] = "BOOLEAN ::= 'true'  ";
  artLabelStrings[ARTL_ART_BOOLEAN_1479] = "";
  artlhsL[ARTL_ART_BOOLEAN_1479] = ARTL_ART_BOOLEAN;
  artPopD[ARTL_ART_BOOLEAN_1479] = true;
  artLabelInternalStrings[ARTL_ART_BOOLEAN_1480] = "BOOLEAN ::= 'true'  .";
  artLabelStrings[ARTL_ART_BOOLEAN_1480] = "";
  artlhsL[ARTL_ART_BOOLEAN_1480] = ARTL_ART_BOOLEAN;
  artKindOfs[ARTL_ART_BOOLEAN_1480] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_BOOLEAN_1480] = true;
  arteoR_pL[ARTL_ART_BOOLEAN_1480] = true;
  artPopD[ARTL_ART_BOOLEAN_1480] = true;
  artLabelInternalStrings[ARTL_ART_BOOLEAN_1484] = "BOOLEAN ::= . 'false'  ";
  artLabelStrings[ARTL_ART_BOOLEAN_1484] = "";
  artlhsL[ARTL_ART_BOOLEAN_1484] = ARTL_ART_BOOLEAN;
  artKindOfs[ARTL_ART_BOOLEAN_1484] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_BOOLEAN_1484] = true;
  artLabelInternalStrings[ARTL_ART_BOOLEAN_1485] = "BOOLEAN ::= 'false'  ";
  artLabelStrings[ARTL_ART_BOOLEAN_1485] = "";
  artlhsL[ARTL_ART_BOOLEAN_1485] = ARTL_ART_BOOLEAN;
  artPopD[ARTL_ART_BOOLEAN_1485] = true;
  artLabelInternalStrings[ARTL_ART_BOOLEAN_1486] = "BOOLEAN ::= 'false'  .";
  artLabelStrings[ARTL_ART_BOOLEAN_1486] = "";
  artlhsL[ARTL_ART_BOOLEAN_1486] = ARTL_ART_BOOLEAN;
  artKindOfs[ARTL_ART_BOOLEAN_1486] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_BOOLEAN_1486] = true;
  arteoR_pL[ARTL_ART_BOOLEAN_1486] = true;
  artPopD[ARTL_ART_BOOLEAN_1486] = true;
}

public void artTableInitialiser_ART_CHAR_BQ() {
  artLabelInternalStrings[ARTL_ART_CHAR_BQ] = "CHAR_BQ";
  artLabelStrings[ARTL_ART_CHAR_BQ] = "CHAR_BQ";
  artKindOfs[ARTL_ART_CHAR_BQ] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_CHAR_BQ_1438] = "CHAR_BQ ::= . &CHAR_BQ  ";
  artLabelStrings[ARTL_ART_CHAR_BQ_1438] = "";
  artlhsL[ARTL_ART_CHAR_BQ_1438] = ARTL_ART_CHAR_BQ;
  artKindOfs[ARTL_ART_CHAR_BQ_1438] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_CHAR_BQ_1438] = true;
  artFolds[ARTL_ART_CHAR_BQ_1440] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_CHAR_BQ_1439] = "CHAR_BQ ::= &CHAR_BQ  ";
  artLabelStrings[ARTL_ART_CHAR_BQ_1439] = "";
  artlhsL[ARTL_ART_CHAR_BQ_1439] = ARTL_ART_CHAR_BQ;
  artPopD[ARTL_ART_CHAR_BQ_1439] = true;
  artLabelInternalStrings[ARTL_ART_CHAR_BQ_1440] = "CHAR_BQ ::= &CHAR_BQ  .";
  artLabelStrings[ARTL_ART_CHAR_BQ_1440] = "";
  artlhsL[ARTL_ART_CHAR_BQ_1440] = ARTL_ART_CHAR_BQ;
  artKindOfs[ARTL_ART_CHAR_BQ_1440] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_CHAR_BQ_1440] = true;
  arteoR_pL[ARTL_ART_CHAR_BQ_1440] = true;
  artPopD[ARTL_ART_CHAR_BQ_1440] = true;
}

public void artTableInitialiser_ART_ID() {
  artLabelInternalStrings[ARTL_ART_ID] = "ID";
  artLabelStrings[ARTL_ART_ID] = "ID";
  artKindOfs[ARTL_ART_ID] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_ID_640] = "ID ::= . &ID  ";
  artLabelStrings[ARTL_ART_ID_640] = "";
  artlhsL[ARTL_ART_ID_640] = ARTL_ART_ID;
  artKindOfs[ARTL_ART_ID_640] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_ID_640] = true;
  artFolds[ARTL_ART_ID_642] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_ID_641] = "ID ::= &ID  ";
  artLabelStrings[ARTL_ART_ID_641] = "";
  artlhsL[ARTL_ART_ID_641] = ARTL_ART_ID;
  artPopD[ARTL_ART_ID_641] = true;
  artLabelInternalStrings[ARTL_ART_ID_642] = "ID ::= &ID  .";
  artLabelStrings[ARTL_ART_ID_642] = "";
  artlhsL[ARTL_ART_ID_642] = ARTL_ART_ID;
  artKindOfs[ARTL_ART_ID_642] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_ID_642] = true;
  arteoR_pL[ARTL_ART_ID_642] = true;
  artPopD[ARTL_ART_ID_642] = true;
}

public void artTableInitialiser_ART_INTEGER() {
  artLabelInternalStrings[ARTL_ART_INTEGER] = "INTEGER";
  artLabelStrings[ARTL_ART_INTEGER] = "INTEGER";
  artKindOfs[ARTL_ART_INTEGER] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_INTEGER_764] = "INTEGER ::= . &INTEGER  ";
  artLabelStrings[ARTL_ART_INTEGER_764] = "";
  artlhsL[ARTL_ART_INTEGER_764] = ARTL_ART_INTEGER;
  artKindOfs[ARTL_ART_INTEGER_764] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_INTEGER_764] = true;
  artFolds[ARTL_ART_INTEGER_766] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_INTEGER_765] = "INTEGER ::= &INTEGER  ";
  artLabelStrings[ARTL_ART_INTEGER_765] = "";
  artlhsL[ARTL_ART_INTEGER_765] = ARTL_ART_INTEGER;
  artPopD[ARTL_ART_INTEGER_765] = true;
  artLabelInternalStrings[ARTL_ART_INTEGER_766] = "INTEGER ::= &INTEGER  .";
  artLabelStrings[ARTL_ART_INTEGER_766] = "";
  artlhsL[ARTL_ART_INTEGER_766] = ARTL_ART_INTEGER;
  artKindOfs[ARTL_ART_INTEGER_766] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_INTEGER_766] = true;
  arteoR_pL[ARTL_ART_INTEGER_766] = true;
  artPopD[ARTL_ART_INTEGER_766] = true;
}

public void artTableInitialiser_ART_REAL() {
  artLabelInternalStrings[ARTL_ART_REAL] = "REAL";
  artLabelStrings[ARTL_ART_REAL] = "REAL";
  artKindOfs[ARTL_ART_REAL] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_REAL_1490] = "REAL ::= . &REAL  ";
  artLabelStrings[ARTL_ART_REAL_1490] = "";
  artlhsL[ARTL_ART_REAL_1490] = ARTL_ART_REAL;
  artKindOfs[ARTL_ART_REAL_1490] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_REAL_1490] = true;
  artFolds[ARTL_ART_REAL_1492] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_REAL_1491] = "REAL ::= &REAL  ";
  artLabelStrings[ARTL_ART_REAL_1491] = "";
  artlhsL[ARTL_ART_REAL_1491] = ARTL_ART_REAL;
  artPopD[ARTL_ART_REAL_1491] = true;
  artLabelInternalStrings[ARTL_ART_REAL_1492] = "REAL ::= &REAL  .";
  artLabelStrings[ARTL_ART_REAL_1492] = "";
  artlhsL[ARTL_ART_REAL_1492] = ARTL_ART_REAL;
  artKindOfs[ARTL_ART_REAL_1492] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_REAL_1492] = true;
  arteoR_pL[ARTL_ART_REAL_1492] = true;
  artPopD[ARTL_ART_REAL_1492] = true;
}

public void artTableInitialiser_ART_STRING_BRACE_NEST() {
  artLabelInternalStrings[ARTL_ART_STRING_BRACE_NEST] = "STRING_BRACE_NEST";
  artLabelStrings[ARTL_ART_STRING_BRACE_NEST] = "STRING_BRACE_NEST";
  artKindOfs[ARTL_ART_STRING_BRACE_NEST] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_STRING_BRACE_NEST_758] = "STRING_BRACE_NEST ::= . &STRING_BRACE_NEST  ";
  artLabelStrings[ARTL_ART_STRING_BRACE_NEST_758] = "";
  artlhsL[ARTL_ART_STRING_BRACE_NEST_758] = ARTL_ART_STRING_BRACE_NEST;
  artKindOfs[ARTL_ART_STRING_BRACE_NEST_758] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_STRING_BRACE_NEST_758] = true;
  artFolds[ARTL_ART_STRING_BRACE_NEST_760] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_STRING_BRACE_NEST_759] = "STRING_BRACE_NEST ::= &STRING_BRACE_NEST  ";
  artLabelStrings[ARTL_ART_STRING_BRACE_NEST_759] = "";
  artlhsL[ARTL_ART_STRING_BRACE_NEST_759] = ARTL_ART_STRING_BRACE_NEST;
  artPopD[ARTL_ART_STRING_BRACE_NEST_759] = true;
  artLabelInternalStrings[ARTL_ART_STRING_BRACE_NEST_760] = "STRING_BRACE_NEST ::= &STRING_BRACE_NEST  .";
  artLabelStrings[ARTL_ART_STRING_BRACE_NEST_760] = "";
  artlhsL[ARTL_ART_STRING_BRACE_NEST_760] = ARTL_ART_STRING_BRACE_NEST;
  artKindOfs[ARTL_ART_STRING_BRACE_NEST_760] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_STRING_BRACE_NEST_760] = true;
  arteoR_pL[ARTL_ART_STRING_BRACE_NEST_760] = true;
  artPopD[ARTL_ART_STRING_BRACE_NEST_760] = true;
}

public void artTableInitialiser_ART_STRING_DOLLAR() {
  artLabelInternalStrings[ARTL_ART_STRING_DOLLAR] = "STRING_DOLLAR";
  artLabelStrings[ARTL_ART_STRING_DOLLAR] = "STRING_DOLLAR";
  artKindOfs[ARTL_ART_STRING_DOLLAR] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_STRING_DOLLAR_1432] = "STRING_DOLLAR ::= . &STRING_DOLLAR  ";
  artLabelStrings[ARTL_ART_STRING_DOLLAR_1432] = "";
  artlhsL[ARTL_ART_STRING_DOLLAR_1432] = ARTL_ART_STRING_DOLLAR;
  artKindOfs[ARTL_ART_STRING_DOLLAR_1432] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_STRING_DOLLAR_1432] = true;
  artFolds[ARTL_ART_STRING_DOLLAR_1434] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_STRING_DOLLAR_1433] = "STRING_DOLLAR ::= &STRING_DOLLAR  ";
  artLabelStrings[ARTL_ART_STRING_DOLLAR_1433] = "";
  artlhsL[ARTL_ART_STRING_DOLLAR_1433] = ARTL_ART_STRING_DOLLAR;
  artPopD[ARTL_ART_STRING_DOLLAR_1433] = true;
  artLabelInternalStrings[ARTL_ART_STRING_DOLLAR_1434] = "STRING_DOLLAR ::= &STRING_DOLLAR  .";
  artLabelStrings[ARTL_ART_STRING_DOLLAR_1434] = "";
  artlhsL[ARTL_ART_STRING_DOLLAR_1434] = ARTL_ART_STRING_DOLLAR;
  artKindOfs[ARTL_ART_STRING_DOLLAR_1434] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_STRING_DOLLAR_1434] = true;
  arteoR_pL[ARTL_ART_STRING_DOLLAR_1434] = true;
  artPopD[ARTL_ART_STRING_DOLLAR_1434] = true;
}

public void artTableInitialiser_ART_STRING_DQ() {
  artLabelInternalStrings[ARTL_ART_STRING_DQ] = "STRING_DQ";
  artLabelStrings[ARTL_ART_STRING_DQ] = "STRING_DQ";
  artKindOfs[ARTL_ART_STRING_DQ] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_STRING_DQ_894] = "STRING_DQ ::= . &STRING_DQ  ";
  artLabelStrings[ARTL_ART_STRING_DQ_894] = "";
  artlhsL[ARTL_ART_STRING_DQ_894] = ARTL_ART_STRING_DQ;
  artKindOfs[ARTL_ART_STRING_DQ_894] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_STRING_DQ_894] = true;
  artFolds[ARTL_ART_STRING_DQ_896] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_STRING_DQ_895] = "STRING_DQ ::= &STRING_DQ  ";
  artLabelStrings[ARTL_ART_STRING_DQ_895] = "";
  artlhsL[ARTL_ART_STRING_DQ_895] = ARTL_ART_STRING_DQ;
  artPopD[ARTL_ART_STRING_DQ_895] = true;
  artLabelInternalStrings[ARTL_ART_STRING_DQ_896] = "STRING_DQ ::= &STRING_DQ  .";
  artLabelStrings[ARTL_ART_STRING_DQ_896] = "";
  artlhsL[ARTL_ART_STRING_DQ_896] = ARTL_ART_STRING_DQ;
  artKindOfs[ARTL_ART_STRING_DQ_896] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_STRING_DQ_896] = true;
  arteoR_pL[ARTL_ART_STRING_DQ_896] = true;
  artPopD[ARTL_ART_STRING_DQ_896] = true;
}

public void artTableInitialiser_ART_STRING_PLAIN_SQ() {
  artLabelInternalStrings[ARTL_ART_STRING_PLAIN_SQ] = "STRING_PLAIN_SQ";
  artLabelStrings[ARTL_ART_STRING_PLAIN_SQ] = "STRING_PLAIN_SQ";
  artKindOfs[ARTL_ART_STRING_PLAIN_SQ] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_STRING_PLAIN_SQ_804] = "STRING_PLAIN_SQ ::= . &STRING_PLAIN_SQ  ";
  artLabelStrings[ARTL_ART_STRING_PLAIN_SQ_804] = "";
  artlhsL[ARTL_ART_STRING_PLAIN_SQ_804] = ARTL_ART_STRING_PLAIN_SQ;
  artKindOfs[ARTL_ART_STRING_PLAIN_SQ_804] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_STRING_PLAIN_SQ_804] = true;
  artFolds[ARTL_ART_STRING_PLAIN_SQ_806] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_STRING_PLAIN_SQ_805] = "STRING_PLAIN_SQ ::= &STRING_PLAIN_SQ  ";
  artLabelStrings[ARTL_ART_STRING_PLAIN_SQ_805] = "";
  artlhsL[ARTL_ART_STRING_PLAIN_SQ_805] = ARTL_ART_STRING_PLAIN_SQ;
  artPopD[ARTL_ART_STRING_PLAIN_SQ_805] = true;
  artLabelInternalStrings[ARTL_ART_STRING_PLAIN_SQ_806] = "STRING_PLAIN_SQ ::= &STRING_PLAIN_SQ  .";
  artLabelStrings[ARTL_ART_STRING_PLAIN_SQ_806] = "";
  artlhsL[ARTL_ART_STRING_PLAIN_SQ_806] = ARTL_ART_STRING_PLAIN_SQ;
  artKindOfs[ARTL_ART_STRING_PLAIN_SQ_806] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_STRING_PLAIN_SQ_806] = true;
  arteoR_pL[ARTL_ART_STRING_PLAIN_SQ_806] = true;
  artPopD[ARTL_ART_STRING_PLAIN_SQ_806] = true;
}

public void artTableInitialiser_ART_TYPE() {
  artLabelInternalStrings[ARTL_ART_TYPE] = "TYPE";
  artLabelStrings[ARTL_ART_TYPE] = "TYPE";
  artKindOfs[ARTL_ART_TYPE] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_TYPE_1170] = "TYPE ::= . TypeNest ";
  artLabelStrings[ARTL_ART_TYPE_1170] = "";
  artlhsL[ARTL_ART_TYPE_1170] = ARTL_ART_TYPE;
  artKindOfs[ARTL_ART_TYPE_1170] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_TYPE_1172] = "TYPE ::= TypeNest .";
  artLabelStrings[ARTL_ART_TYPE_1172] = "";
  artlhsL[ARTL_ART_TYPE_1172] = ARTL_ART_TYPE;
  artSlotInstanceOfs[ARTL_ART_TYPE_1172] = ARTL_ART_TypeNest;
  artKindOfs[ARTL_ART_TYPE_1172] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_TYPE_1172] = true;
  arteoR_pL[ARTL_ART_TYPE_1172] = true;
  artPopD[ARTL_ART_TYPE_1172] = true;
}

public void artTableInitialiser_ART_TypeList() {
  artLabelInternalStrings[ARTL_ART_TypeList] = "TypeList";
  artLabelStrings[ARTL_ART_TypeList] = "TypeList";
  artKindOfs[ARTL_ART_TypeList] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_TypeList_1466] = "TypeList ::= . TypeNest ";
  artLabelStrings[ARTL_ART_TypeList_1466] = "";
  artlhsL[ARTL_ART_TypeList_1466] = ARTL_ART_TypeList;
  artKindOfs[ARTL_ART_TypeList_1466] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_TypeList_1468] = "TypeList ::= TypeNest .";
  artLabelStrings[ARTL_ART_TypeList_1468] = "";
  artlhsL[ARTL_ART_TypeList_1468] = ARTL_ART_TypeList;
  artSlotInstanceOfs[ARTL_ART_TypeList_1468] = ARTL_ART_TypeNest;
  artKindOfs[ARTL_ART_TypeList_1468] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_TypeList_1468] = true;
  arteoR_pL[ARTL_ART_TypeList_1468] = true;
  artPopD[ARTL_ART_TypeList_1468] = true;
  artLabelInternalStrings[ARTL_ART_TypeList_1470] = "TypeList ::= . TypeNest ','  TypeList ";
  artLabelStrings[ARTL_ART_TypeList_1470] = "";
  artlhsL[ARTL_ART_TypeList_1470] = ARTL_ART_TypeList;
  artKindOfs[ARTL_ART_TypeList_1470] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_TypeList_1472] = "TypeList ::= TypeNest . ','  TypeList ";
  artLabelStrings[ARTL_ART_TypeList_1472] = "";
  artlhsL[ARTL_ART_TypeList_1472] = ARTL_ART_TypeList;
  artSlotInstanceOfs[ARTL_ART_TypeList_1472] = ARTL_ART_TypeNest;
  artKindOfs[ARTL_ART_TypeList_1472] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_TypeList_1472] = true;
  artLabelInternalStrings[ARTL_ART_TypeList_1473] = "TypeList ::= TypeNest ','  TypeList ";
  artLabelStrings[ARTL_ART_TypeList_1473] = "";
  artlhsL[ARTL_ART_TypeList_1473] = ARTL_ART_TypeList;
  artLabelInternalStrings[ARTL_ART_TypeList_1474] = "TypeList ::= TypeNest ','  . TypeList ";
  artLabelStrings[ARTL_ART_TypeList_1474] = "";
  artlhsL[ARTL_ART_TypeList_1474] = ARTL_ART_TypeList;
  artKindOfs[ARTL_ART_TypeList_1474] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_TypeList_1476] = "TypeList ::= TypeNest ','  TypeList .";
  artLabelStrings[ARTL_ART_TypeList_1476] = "";
  artlhsL[ARTL_ART_TypeList_1476] = ARTL_ART_TypeList;
  artSlotInstanceOfs[ARTL_ART_TypeList_1476] = ARTL_ART_TypeList;
  artKindOfs[ARTL_ART_TypeList_1476] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_TypeList_1476] = true;
  arteoR_pL[ARTL_ART_TypeList_1476] = true;
  artPopD[ARTL_ART_TypeList_1476] = true;
}

public void artTableInitialiser_ART_TypeNest() {
  artLabelInternalStrings[ARTL_ART_TypeNest] = "TypeNest";
  artLabelStrings[ARTL_ART_TypeNest] = "TypeNest";
  artKindOfs[ARTL_ART_TypeNest] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_TypeNest_1452] = "TypeNest ::= . &ID  ";
  artLabelStrings[ARTL_ART_TypeNest_1452] = "";
  artlhsL[ARTL_ART_TypeNest_1452] = ARTL_ART_TypeNest;
  artKindOfs[ARTL_ART_TypeNest_1452] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_TypeNest_1452] = true;
  artLabelInternalStrings[ARTL_ART_TypeNest_1453] = "TypeNest ::= &ID  ";
  artLabelStrings[ARTL_ART_TypeNest_1453] = "";
  artlhsL[ARTL_ART_TypeNest_1453] = ARTL_ART_TypeNest;
  artPopD[ARTL_ART_TypeNest_1453] = true;
  artLabelInternalStrings[ARTL_ART_TypeNest_1454] = "TypeNest ::= &ID  .";
  artLabelStrings[ARTL_ART_TypeNest_1454] = "";
  artlhsL[ARTL_ART_TypeNest_1454] = ARTL_ART_TypeNest;
  artKindOfs[ARTL_ART_TypeNest_1454] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_TypeNest_1454] = true;
  arteoR_pL[ARTL_ART_TypeNest_1454] = true;
  artPopD[ARTL_ART_TypeNest_1454] = true;
  artLabelInternalStrings[ARTL_ART_TypeNest_1456] = "TypeNest ::= . &ID  '<'  TypeList '>'  ";
  artLabelStrings[ARTL_ART_TypeNest_1456] = "";
  artlhsL[ARTL_ART_TypeNest_1456] = ARTL_ART_TypeNest;
  artKindOfs[ARTL_ART_TypeNest_1456] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_TypeNest_1457] = "TypeNest ::= &ID  '<'  TypeList '>'  ";
  artLabelStrings[ARTL_ART_TypeNest_1457] = "";
  artlhsL[ARTL_ART_TypeNest_1457] = ARTL_ART_TypeNest;
  artLabelInternalStrings[ARTL_ART_TypeNest_1458] = "TypeNest ::= &ID  . '<'  TypeList '>'  ";
  artLabelStrings[ARTL_ART_TypeNest_1458] = "";
  artlhsL[ARTL_ART_TypeNest_1458] = ARTL_ART_TypeNest;
  artKindOfs[ARTL_ART_TypeNest_1458] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_TypeNest_1458] = true;
  artLabelInternalStrings[ARTL_ART_TypeNest_1459] = "TypeNest ::= &ID  '<'  TypeList '>'  ";
  artLabelStrings[ARTL_ART_TypeNest_1459] = "";
  artlhsL[ARTL_ART_TypeNest_1459] = ARTL_ART_TypeNest;
  artLabelInternalStrings[ARTL_ART_TypeNest_1460] = "TypeNest ::= &ID  '<'  . TypeList '>'  ";
  artLabelStrings[ARTL_ART_TypeNest_1460] = "";
  artlhsL[ARTL_ART_TypeNest_1460] = ARTL_ART_TypeNest;
  artKindOfs[ARTL_ART_TypeNest_1460] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_TypeNest_1462] = "TypeNest ::= &ID  '<'  TypeList . '>'  ";
  artLabelStrings[ARTL_ART_TypeNest_1462] = "";
  artlhsL[ARTL_ART_TypeNest_1462] = ARTL_ART_TypeNest;
  artSlotInstanceOfs[ARTL_ART_TypeNest_1462] = ARTL_ART_TypeList;
  artKindOfs[ARTL_ART_TypeNest_1462] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_TypeNest_1462] = true;
  artLabelInternalStrings[ARTL_ART_TypeNest_1463] = "TypeNest ::= &ID  '<'  TypeList '>'  ";
  artLabelStrings[ARTL_ART_TypeNest_1463] = "";
  artlhsL[ARTL_ART_TypeNest_1463] = ARTL_ART_TypeNest;
  artPopD[ARTL_ART_TypeNest_1463] = true;
  artLabelInternalStrings[ARTL_ART_TypeNest_1464] = "TypeNest ::= &ID  '<'  TypeList '>'  .";
  artLabelStrings[ARTL_ART_TypeNest_1464] = "";
  artlhsL[ARTL_ART_TypeNest_1464] = ARTL_ART_TypeNest;
  artKindOfs[ARTL_ART_TypeNest_1464] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_TypeNest_1464] = true;
  arteoR_pL[ARTL_ART_TypeNest_1464] = true;
  artPopD[ARTL_ART_TypeNest_1464] = true;
}

public void artTableInitialiser_ART_abbrev() {
  artLabelInternalStrings[ARTL_ART_abbrev] = "abbrev";
  artLabelStrings[ARTL_ART_abbrev] = "abbrev";
  artKindOfs[ARTL_ART_abbrev] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_abbrev_1228] = "abbrev ::= . iter ";
  artLabelStrings[ARTL_ART_abbrev_1228] = "";
  artlhsL[ARTL_ART_abbrev_1228] = ARTL_ART_abbrev;
  artKindOfs[ARTL_ART_abbrev_1228] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_abbrev_1230] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_abbrev_1230] = "abbrev ::= iter .";
  artLabelStrings[ARTL_ART_abbrev_1230] = "";
  artlhsL[ARTL_ART_abbrev_1230] = ARTL_ART_abbrev;
  artSlotInstanceOfs[ARTL_ART_abbrev_1230] = ARTL_ART_iter;
  artKindOfs[ARTL_ART_abbrev_1230] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_abbrev_1230] = true;
  arteoR_pL[ARTL_ART_abbrev_1230] = true;
  artPopD[ARTL_ART_abbrev_1230] = true;
  artLabelInternalStrings[ARTL_ART_abbrev_1232] = "abbrev ::= . iter '*'  ";
  artLabelStrings[ARTL_ART_abbrev_1232] = "";
  artlhsL[ARTL_ART_abbrev_1232] = ARTL_ART_abbrev;
  artKindOfs[ARTL_ART_abbrev_1232] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_abbrev_1234] = "abbrev ::= iter . '*'  ";
  artLabelStrings[ARTL_ART_abbrev_1234] = "";
  artlhsL[ARTL_ART_abbrev_1234] = ARTL_ART_abbrev;
  artSlotInstanceOfs[ARTL_ART_abbrev_1234] = ARTL_ART_iter;
  artKindOfs[ARTL_ART_abbrev_1234] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_abbrev_1234] = true;
  artPopD[ARTL_ART_abbrev_1234] = true;
  artFolds[ARTL_ART_abbrev_1236] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_abbrev_1235] = "abbrev ::= iter '*'  ";
  artLabelStrings[ARTL_ART_abbrev_1235] = "";
  artlhsL[ARTL_ART_abbrev_1235] = ARTL_ART_abbrev;
  artPopD[ARTL_ART_abbrev_1235] = true;
  artLabelInternalStrings[ARTL_ART_abbrev_1236] = "abbrev ::= iter '*'  .";
  artLabelStrings[ARTL_ART_abbrev_1236] = "";
  artlhsL[ARTL_ART_abbrev_1236] = ARTL_ART_abbrev;
  artKindOfs[ARTL_ART_abbrev_1236] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_abbrev_1236] = true;
  arteoR_pL[ARTL_ART_abbrev_1236] = true;
  artPopD[ARTL_ART_abbrev_1236] = true;
  artLabelInternalStrings[ARTL_ART_abbrev_1238] = "abbrev ::= . iter '+'  ";
  artLabelStrings[ARTL_ART_abbrev_1238] = "";
  artlhsL[ARTL_ART_abbrev_1238] = ARTL_ART_abbrev;
  artKindOfs[ARTL_ART_abbrev_1238] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_abbrev_1240] = "abbrev ::= iter . '+'  ";
  artLabelStrings[ARTL_ART_abbrev_1240] = "";
  artlhsL[ARTL_ART_abbrev_1240] = ARTL_ART_abbrev;
  artSlotInstanceOfs[ARTL_ART_abbrev_1240] = ARTL_ART_iter;
  artKindOfs[ARTL_ART_abbrev_1240] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_abbrev_1240] = true;
  artPopD[ARTL_ART_abbrev_1240] = true;
  artFolds[ARTL_ART_abbrev_1242] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_abbrev_1241] = "abbrev ::= iter '+'  ";
  artLabelStrings[ARTL_ART_abbrev_1241] = "";
  artlhsL[ARTL_ART_abbrev_1241] = ARTL_ART_abbrev;
  artPopD[ARTL_ART_abbrev_1241] = true;
  artLabelInternalStrings[ARTL_ART_abbrev_1242] = "abbrev ::= iter '+'  .";
  artLabelStrings[ARTL_ART_abbrev_1242] = "";
  artlhsL[ARTL_ART_abbrev_1242] = ARTL_ART_abbrev;
  artKindOfs[ARTL_ART_abbrev_1242] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_abbrev_1242] = true;
  arteoR_pL[ARTL_ART_abbrev_1242] = true;
  artPopD[ARTL_ART_abbrev_1242] = true;
  artLabelInternalStrings[ARTL_ART_abbrev_1244] = "abbrev ::= . iter '?'  ";
  artLabelStrings[ARTL_ART_abbrev_1244] = "";
  artlhsL[ARTL_ART_abbrev_1244] = ARTL_ART_abbrev;
  artKindOfs[ARTL_ART_abbrev_1244] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_abbrev_1246] = "abbrev ::= iter . '?'  ";
  artLabelStrings[ARTL_ART_abbrev_1246] = "";
  artlhsL[ARTL_ART_abbrev_1246] = ARTL_ART_abbrev;
  artSlotInstanceOfs[ARTL_ART_abbrev_1246] = ARTL_ART_iter;
  artKindOfs[ARTL_ART_abbrev_1246] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_abbrev_1246] = true;
  artPopD[ARTL_ART_abbrev_1246] = true;
  artFolds[ARTL_ART_abbrev_1248] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_abbrev_1247] = "abbrev ::= iter '?'  ";
  artLabelStrings[ARTL_ART_abbrev_1247] = "";
  artlhsL[ARTL_ART_abbrev_1247] = ARTL_ART_abbrev;
  artPopD[ARTL_ART_abbrev_1247] = true;
  artLabelInternalStrings[ARTL_ART_abbrev_1248] = "abbrev ::= iter '?'  .";
  artLabelStrings[ARTL_ART_abbrev_1248] = "";
  artlhsL[ARTL_ART_abbrev_1248] = ARTL_ART_abbrev;
  artKindOfs[ARTL_ART_abbrev_1248] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_abbrev_1248] = true;
  arteoR_pL[ARTL_ART_abbrev_1248] = true;
  artPopD[ARTL_ART_abbrev_1248] = true;
}

public void artTableInitialiser_ART_action() {
  artLabelInternalStrings[ARTL_ART_action] = "action";
  artLabelStrings[ARTL_ART_action] = "action";
  artKindOfs[ARTL_ART_action] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_action_1250] = "action ::= . STRING_BRACE_NEST ";
  artLabelStrings[ARTL_ART_action_1250] = "";
  artlhsL[ARTL_ART_action_1250] = ARTL_ART_action;
  artKindOfs[ARTL_ART_action_1250] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_action_1252] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_action_1252] = "action ::= STRING_BRACE_NEST .";
  artLabelStrings[ARTL_ART_action_1252] = "";
  artlhsL[ARTL_ART_action_1252] = ARTL_ART_action;
  artSlotInstanceOfs[ARTL_ART_action_1252] = ARTL_ART_STRING_BRACE_NEST;
  artKindOfs[ARTL_ART_action_1252] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_action_1252] = true;
  arteoR_pL[ARTL_ART_action_1252] = true;
  artPopD[ARTL_ART_action_1252] = true;
}

public void artTableInitialiser_ART_alt() {
  artLabelInternalStrings[ARTL_ART_alt] = "alt";
  artLabelStrings[ARTL_ART_alt] = "alt";
  artKindOfs[ARTL_ART_alt] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_alt_1182] = "alt ::= . cat ";
  artLabelStrings[ARTL_ART_alt_1182] = "";
  artlhsL[ARTL_ART_alt_1182] = ARTL_ART_alt;
  artKindOfs[ARTL_ART_alt_1182] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_alt_1184] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_alt_1184] = "alt ::= cat .";
  artLabelStrings[ARTL_ART_alt_1184] = "";
  artlhsL[ARTL_ART_alt_1184] = ARTL_ART_alt;
  artSlotInstanceOfs[ARTL_ART_alt_1184] = ARTL_ART_cat;
  artKindOfs[ARTL_ART_alt_1184] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_alt_1184] = true;
  arteoR_pL[ARTL_ART_alt_1184] = true;
  artPopD[ARTL_ART_alt_1184] = true;
  artLabelInternalStrings[ARTL_ART_alt_1186] = "alt ::= . cat '|'  alt1 ";
  artLabelStrings[ARTL_ART_alt_1186] = "";
  artlhsL[ARTL_ART_alt_1186] = ARTL_ART_alt;
  artKindOfs[ARTL_ART_alt_1186] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_alt_1188] = "alt ::= cat . '|'  alt1 ";
  artLabelStrings[ARTL_ART_alt_1188] = "";
  artlhsL[ARTL_ART_alt_1188] = ARTL_ART_alt;
  artSlotInstanceOfs[ARTL_ART_alt_1188] = ARTL_ART_cat;
  artKindOfs[ARTL_ART_alt_1188] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_alt_1188] = true;
  artFolds[ARTL_ART_alt_1190] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_alt_1189] = "alt ::= cat '|'  alt1 ";
  artLabelStrings[ARTL_ART_alt_1189] = "";
  artlhsL[ARTL_ART_alt_1189] = ARTL_ART_alt;
  artLabelInternalStrings[ARTL_ART_alt_1190] = "alt ::= cat '|'  . alt1 ";
  artLabelStrings[ARTL_ART_alt_1190] = "";
  artlhsL[ARTL_ART_alt_1190] = ARTL_ART_alt;
  artKindOfs[ARTL_ART_alt_1190] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_alt_1192] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_alt_1192] = "alt ::= cat '|'  alt1 .";
  artLabelStrings[ARTL_ART_alt_1192] = "";
  artlhsL[ARTL_ART_alt_1192] = ARTL_ART_alt;
  artSlotInstanceOfs[ARTL_ART_alt_1192] = ARTL_ART_alt1;
  artKindOfs[ARTL_ART_alt_1192] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_alt_1192] = true;
  arteoR_pL[ARTL_ART_alt_1192] = true;
  artPopD[ARTL_ART_alt_1192] = true;
}

public void artTableInitialiser_ART_alt1() {
  artLabelInternalStrings[ARTL_ART_alt1] = "alt1";
  artLabelStrings[ARTL_ART_alt1] = "alt1";
  artKindOfs[ARTL_ART_alt1] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_alt1_1194] = "alt1 ::= . cat ";
  artLabelStrings[ARTL_ART_alt1_1194] = "";
  artlhsL[ARTL_ART_alt1_1194] = ARTL_ART_alt1;
  artKindOfs[ARTL_ART_alt1_1194] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_alt1_1196] = "alt1 ::= cat .";
  artLabelStrings[ARTL_ART_alt1_1196] = "";
  artlhsL[ARTL_ART_alt1_1196] = ARTL_ART_alt1;
  artSlotInstanceOfs[ARTL_ART_alt1_1196] = ARTL_ART_cat;
  artKindOfs[ARTL_ART_alt1_1196] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_alt1_1196] = true;
  arteoR_pL[ARTL_ART_alt1_1196] = true;
  artPopD[ARTL_ART_alt1_1196] = true;
  artLabelInternalStrings[ARTL_ART_alt1_1198] = "alt1 ::= . cat '|'  alt1 ";
  artLabelStrings[ARTL_ART_alt1_1198] = "";
  artlhsL[ARTL_ART_alt1_1198] = ARTL_ART_alt1;
  artKindOfs[ARTL_ART_alt1_1198] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_alt1_1200] = "alt1 ::= cat . '|'  alt1 ";
  artLabelStrings[ARTL_ART_alt1_1200] = "";
  artlhsL[ARTL_ART_alt1_1200] = ARTL_ART_alt1;
  artSlotInstanceOfs[ARTL_ART_alt1_1200] = ARTL_ART_cat;
  artKindOfs[ARTL_ART_alt1_1200] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_alt1_1200] = true;
  artFolds[ARTL_ART_alt1_1202] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_alt1_1201] = "alt1 ::= cat '|'  alt1 ";
  artLabelStrings[ARTL_ART_alt1_1201] = "";
  artlhsL[ARTL_ART_alt1_1201] = ARTL_ART_alt1;
  artLabelInternalStrings[ARTL_ART_alt1_1202] = "alt1 ::= cat '|'  . alt1 ";
  artLabelStrings[ARTL_ART_alt1_1202] = "";
  artlhsL[ARTL_ART_alt1_1202] = ARTL_ART_alt1;
  artKindOfs[ARTL_ART_alt1_1202] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_alt1_1204] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_alt1_1204] = "alt1 ::= cat '|'  alt1 .";
  artLabelStrings[ARTL_ART_alt1_1204] = "";
  artlhsL[ARTL_ART_alt1_1204] = ARTL_ART_alt1;
  artSlotInstanceOfs[ARTL_ART_alt1_1204] = ARTL_ART_alt1;
  artKindOfs[ARTL_ART_alt1_1204] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_alt1_1204] = true;
  arteoR_pL[ARTL_ART_alt1_1204] = true;
  artPopD[ARTL_ART_alt1_1204] = true;
}

public void artTableInitialiser_ART_annotation() {
  artLabelInternalStrings[ARTL_ART_annotation] = "annotation";
  artLabelStrings[ARTL_ART_annotation] = "annotation";
  artKindOfs[ARTL_ART_annotation] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_annotation_1394] = "annotation ::= . name ";
  artLabelStrings[ARTL_ART_annotation_1394] = "";
  artlhsL[ARTL_ART_annotation_1394] = ARTL_ART_annotation;
  artKindOfs[ARTL_ART_annotation_1394] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_annotation_1396] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_annotation_1396] = "annotation ::= name .";
  artLabelStrings[ARTL_ART_annotation_1396] = "";
  artlhsL[ARTL_ART_annotation_1396] = ARTL_ART_annotation;
  artSlotInstanceOfs[ARTL_ART_annotation_1396] = ARTL_ART_name;
  artKindOfs[ARTL_ART_annotation_1396] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_annotation_1396] = true;
  arteoR_pL[ARTL_ART_annotation_1396] = true;
  artPopD[ARTL_ART_annotation_1396] = true;
  artLabelInternalStrings[ARTL_ART_annotation_1398] = "annotation ::= . delay ";
  artLabelStrings[ARTL_ART_annotation_1398] = "";
  artlhsL[ARTL_ART_annotation_1398] = ARTL_ART_annotation;
  artKindOfs[ARTL_ART_annotation_1398] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_annotation_1400] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_annotation_1400] = "annotation ::= delay .";
  artLabelStrings[ARTL_ART_annotation_1400] = "";
  artlhsL[ARTL_ART_annotation_1400] = ARTL_ART_annotation;
  artSlotInstanceOfs[ARTL_ART_annotation_1400] = ARTL_ART_delay;
  artKindOfs[ARTL_ART_annotation_1400] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_annotation_1400] = true;
  arteoR_pL[ARTL_ART_annotation_1400] = true;
  artPopD[ARTL_ART_annotation_1400] = true;
  artLabelInternalStrings[ARTL_ART_annotation_1402] = "annotation ::= . fold ";
  artLabelStrings[ARTL_ART_annotation_1402] = "";
  artlhsL[ARTL_ART_annotation_1402] = ARTL_ART_annotation;
  artKindOfs[ARTL_ART_annotation_1402] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_annotation_1404] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_annotation_1404] = "annotation ::= fold .";
  artLabelStrings[ARTL_ART_annotation_1404] = "";
  artlhsL[ARTL_ART_annotation_1404] = ARTL_ART_annotation;
  artSlotInstanceOfs[ARTL_ART_annotation_1404] = ARTL_ART_fold;
  artKindOfs[ARTL_ART_annotation_1404] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_annotation_1404] = true;
  arteoR_pL[ARTL_ART_annotation_1404] = true;
  artPopD[ARTL_ART_annotation_1404] = true;
}

public void artTableInitialiser_ART_annotations() {
  artLabelInternalStrings[ARTL_ART_annotations] = "annotations";
  artLabelStrings[ARTL_ART_annotations] = "annotations";
  artKindOfs[ARTL_ART_annotations] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_annotations_1384] = "annotations ::= . annotation ";
  artLabelStrings[ARTL_ART_annotations_1384] = "";
  artlhsL[ARTL_ART_annotations_1384] = ARTL_ART_annotations;
  artKindOfs[ARTL_ART_annotations_1384] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_annotations_1386] = "annotations ::= annotation .";
  artLabelStrings[ARTL_ART_annotations_1386] = "";
  artlhsL[ARTL_ART_annotations_1386] = ARTL_ART_annotations;
  artSlotInstanceOfs[ARTL_ART_annotations_1386] = ARTL_ART_annotation;
  artKindOfs[ARTL_ART_annotations_1386] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_annotations_1386] = true;
  arteoR_pL[ARTL_ART_annotations_1386] = true;
  artPopD[ARTL_ART_annotations_1386] = true;
  artLabelInternalStrings[ARTL_ART_annotations_1388] = "annotations ::= . annotation annotations ";
  artLabelStrings[ARTL_ART_annotations_1388] = "";
  artlhsL[ARTL_ART_annotations_1388] = ARTL_ART_annotations;
  artKindOfs[ARTL_ART_annotations_1388] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_annotations_1390] = "annotations ::= annotation . annotations ";
  artLabelStrings[ARTL_ART_annotations_1390] = "";
  artlhsL[ARTL_ART_annotations_1390] = ARTL_ART_annotations;
  artSlotInstanceOfs[ARTL_ART_annotations_1390] = ARTL_ART_annotation;
  artKindOfs[ARTL_ART_annotations_1390] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_annotations_1390] = true;
  artFolds[ARTL_ART_annotations_1392] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_annotations_1392] = "annotations ::= annotation annotations .";
  artLabelStrings[ARTL_ART_annotations_1392] = "";
  artlhsL[ARTL_ART_annotations_1392] = ARTL_ART_annotations;
  artSlotInstanceOfs[ARTL_ART_annotations_1392] = ARTL_ART_annotations;
  artKindOfs[ARTL_ART_annotations_1392] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_annotations_1392] = true;
  arteoR_pL[ARTL_ART_annotations_1392] = true;
  artPopD[ARTL_ART_annotations_1392] = true;
}

public void artTableInitialiser_ART_attribute() {
  artLabelInternalStrings[ARTL_ART_attribute] = "attribute";
  artLabelStrings[ARTL_ART_attribute] = "attribute";
  artKindOfs[ARTL_ART_attribute] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_attribute_1154] = "attribute ::= . ID ':'  TYPE ";
  artLabelStrings[ARTL_ART_attribute_1154] = "";
  artlhsL[ARTL_ART_attribute_1154] = ARTL_ART_attribute;
  artKindOfs[ARTL_ART_attribute_1154] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_attribute_1156] = "attribute ::= ID . ':'  TYPE ";
  artLabelStrings[ARTL_ART_attribute_1156] = "";
  artlhsL[ARTL_ART_attribute_1156] = ARTL_ART_attribute;
  artSlotInstanceOfs[ARTL_ART_attribute_1156] = ARTL_ART_ID;
  artKindOfs[ARTL_ART_attribute_1156] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_attribute_1156] = true;
  artFolds[ARTL_ART_attribute_1158] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_attribute_1157] = "attribute ::= ID ':'  TYPE ";
  artLabelStrings[ARTL_ART_attribute_1157] = "";
  artlhsL[ARTL_ART_attribute_1157] = ARTL_ART_attribute;
  artLabelInternalStrings[ARTL_ART_attribute_1158] = "attribute ::= ID ':'  . TYPE ";
  artLabelStrings[ARTL_ART_attribute_1158] = "";
  artlhsL[ARTL_ART_attribute_1158] = ARTL_ART_attribute;
  artKindOfs[ARTL_ART_attribute_1158] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_attribute_1160] = "attribute ::= ID ':'  TYPE .";
  artLabelStrings[ARTL_ART_attribute_1160] = "";
  artlhsL[ARTL_ART_attribute_1160] = ARTL_ART_attribute;
  artSlotInstanceOfs[ARTL_ART_attribute_1160] = ARTL_ART_TYPE;
  artKindOfs[ARTL_ART_attribute_1160] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_attribute_1160] = true;
  arteoR_pL[ARTL_ART_attribute_1160] = true;
  artPopD[ARTL_ART_attribute_1160] = true;
  artLabelInternalStrings[ARTL_ART_attribute_1164] = "attribute ::= . ID ";
  artLabelStrings[ARTL_ART_attribute_1164] = "";
  artlhsL[ARTL_ART_attribute_1164] = ARTL_ART_attribute;
  artKindOfs[ARTL_ART_attribute_1164] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_attribute_1166] = "attribute ::= ID .";
  artLabelStrings[ARTL_ART_attribute_1166] = "";
  artlhsL[ARTL_ART_attribute_1166] = ARTL_ART_attribute;
  artSlotInstanceOfs[ARTL_ART_attribute_1166] = ARTL_ART_ID;
  artKindOfs[ARTL_ART_attribute_1166] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_attribute_1166] = true;
  arteoR_pL[ARTL_ART_attribute_1166] = true;
  artPopD[ARTL_ART_attribute_1166] = true;
}

public void artTableInitialiser_ART_attributes() {
  artLabelInternalStrings[ARTL_ART_attributes] = "attributes";
  artLabelStrings[ARTL_ART_attributes] = "attributes";
  artKindOfs[ARTL_ART_attributes] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_attributes_1142] = "attributes ::= . attribute attributes ";
  artLabelStrings[ARTL_ART_attributes_1142] = "";
  artlhsL[ARTL_ART_attributes_1142] = ARTL_ART_attributes;
  artKindOfs[ARTL_ART_attributes_1142] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_attributes_1146] = "attributes ::= attribute . attributes ";
  artLabelStrings[ARTL_ART_attributes_1146] = "";
  artlhsL[ARTL_ART_attributes_1146] = ARTL_ART_attributes;
  artSlotInstanceOfs[ARTL_ART_attributes_1146] = ARTL_ART_attribute;
  artKindOfs[ARTL_ART_attributes_1146] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_attributes_1146] = true;
  artFolds[ARTL_ART_attributes_1148] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_attributes_1148] = "attributes ::= attribute attributes .";
  artLabelStrings[ARTL_ART_attributes_1148] = "";
  artlhsL[ARTL_ART_attributes_1148] = ARTL_ART_attributes;
  artSlotInstanceOfs[ARTL_ART_attributes_1148] = ARTL_ART_attributes;
  artKindOfs[ARTL_ART_attributes_1148] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_attributes_1148] = true;
  arteoR_pL[ARTL_ART_attributes_1148] = true;
  artPopD[ARTL_ART_attributes_1148] = true;
  artLabelInternalStrings[ARTL_ART_attributes_1150] = "attributes ::= . # ";
  artLabelStrings[ARTL_ART_attributes_1150] = "";
  artlhsL[ARTL_ART_attributes_1150] = ARTL_ART_attributes;
  artKindOfs[ARTL_ART_attributes_1150] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_attributes_1150] = true;
  artFolds[ARTL_ART_attributes_1152] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_attributes_1152] = "attributes ::= # .";
  artLabelStrings[ARTL_ART_attributes_1152] = "";
  artlhsL[ARTL_ART_attributes_1152] = ARTL_ART_attributes;
  artKindOfs[ARTL_ART_attributes_1152] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_attributes_1152] = true;
  arteoR_pL[ARTL_ART_attributes_1152] = true;
  artPopD[ARTL_ART_attributes_1152] = true;
}

public void artTableInitialiser_ART_attributesOpt() {
  artLabelInternalStrings[ARTL_ART_attributesOpt] = "attributesOpt";
  artLabelStrings[ARTL_ART_attributesOpt] = "attributesOpt";
  artKindOfs[ARTL_ART_attributesOpt] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_attributesOpt_1128] = "attributesOpt ::= . '<'  attributes '>'  ";
  artLabelStrings[ARTL_ART_attributesOpt_1128] = "";
  artlhsL[ARTL_ART_attributesOpt_1128] = ARTL_ART_attributesOpt;
  artKindOfs[ARTL_ART_attributesOpt_1128] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_attributesOpt_1132] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_attributesOpt_1131] = "attributesOpt ::= '<'  attributes '>'  ";
  artLabelStrings[ARTL_ART_attributesOpt_1131] = "";
  artlhsL[ARTL_ART_attributesOpt_1131] = ARTL_ART_attributesOpt;
  artLabelInternalStrings[ARTL_ART_attributesOpt_1132] = "attributesOpt ::= '<'  . attributes '>'  ";
  artLabelStrings[ARTL_ART_attributesOpt_1132] = "";
  artlhsL[ARTL_ART_attributesOpt_1132] = ARTL_ART_attributesOpt;
  artKindOfs[ARTL_ART_attributesOpt_1132] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_attributesOpt_1132] = true;
  artFolds[ARTL_ART_attributesOpt_1134] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_attributesOpt_1134] = "attributesOpt ::= '<'  attributes . '>'  ";
  artLabelStrings[ARTL_ART_attributesOpt_1134] = "";
  artlhsL[ARTL_ART_attributesOpt_1134] = ARTL_ART_attributesOpt;
  artSlotInstanceOfs[ARTL_ART_attributesOpt_1134] = ARTL_ART_attributes;
  artKindOfs[ARTL_ART_attributesOpt_1134] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_attributesOpt_1134] = true;
  artFolds[ARTL_ART_attributesOpt_1136] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_attributesOpt_1135] = "attributesOpt ::= '<'  attributes '>'  ";
  artLabelStrings[ARTL_ART_attributesOpt_1135] = "";
  artlhsL[ARTL_ART_attributesOpt_1135] = ARTL_ART_attributesOpt;
  artPopD[ARTL_ART_attributesOpt_1135] = true;
  artLabelInternalStrings[ARTL_ART_attributesOpt_1136] = "attributesOpt ::= '<'  attributes '>'  .";
  artLabelStrings[ARTL_ART_attributesOpt_1136] = "";
  artlhsL[ARTL_ART_attributesOpt_1136] = ARTL_ART_attributesOpt;
  artKindOfs[ARTL_ART_attributesOpt_1136] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_attributesOpt_1136] = true;
  arteoR_pL[ARTL_ART_attributesOpt_1136] = true;
  artPopD[ARTL_ART_attributesOpt_1136] = true;
  artLabelInternalStrings[ARTL_ART_attributesOpt_1138] = "attributesOpt ::= . # ";
  artLabelStrings[ARTL_ART_attributesOpt_1138] = "";
  artlhsL[ARTL_ART_attributesOpt_1138] = ARTL_ART_attributesOpt;
  artKindOfs[ARTL_ART_attributesOpt_1138] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_attributesOpt_1138] = true;
  artFolds[ARTL_ART_attributesOpt_1140] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_attributesOpt_1140] = "attributesOpt ::= # .";
  artLabelStrings[ARTL_ART_attributesOpt_1140] = "";
  artlhsL[ARTL_ART_attributesOpt_1140] = ARTL_ART_attributesOpt;
  artKindOfs[ARTL_ART_attributesOpt_1140] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_attributesOpt_1140] = true;
  arteoR_pL[ARTL_ART_attributesOpt_1140] = true;
  artPopD[ARTL_ART_attributesOpt_1140] = true;
}

public void artTableInitialiser_ART_builtinTerminal() {
  artLabelInternalStrings[ARTL_ART_builtinTerminal] = "builtinTerminal";
  artLabelStrings[ARTL_ART_builtinTerminal] = "builtinTerminal";
  artKindOfs[ARTL_ART_builtinTerminal] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_builtinTerminal_886] = "builtinTerminal ::= . '&'  ID ";
  artLabelStrings[ARTL_ART_builtinTerminal_886] = "";
  artlhsL[ARTL_ART_builtinTerminal_886] = ARTL_ART_builtinTerminal;
  artKindOfs[ARTL_ART_builtinTerminal_886] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_builtinTerminal_888] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_builtinTerminal_887] = "builtinTerminal ::= '&'  ID ";
  artLabelStrings[ARTL_ART_builtinTerminal_887] = "";
  artlhsL[ARTL_ART_builtinTerminal_887] = ARTL_ART_builtinTerminal;
  artLabelInternalStrings[ARTL_ART_builtinTerminal_888] = "builtinTerminal ::= '&'  . ID ";
  artLabelStrings[ARTL_ART_builtinTerminal_888] = "";
  artlhsL[ARTL_ART_builtinTerminal_888] = ARTL_ART_builtinTerminal;
  artKindOfs[ARTL_ART_builtinTerminal_888] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_builtinTerminal_888] = true;
  artFolds[ARTL_ART_builtinTerminal_890] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_builtinTerminal_890] = "builtinTerminal ::= '&'  ID .";
  artLabelStrings[ARTL_ART_builtinTerminal_890] = "";
  artlhsL[ARTL_ART_builtinTerminal_890] = ARTL_ART_builtinTerminal;
  artSlotInstanceOfs[ARTL_ART_builtinTerminal_890] = ARTL_ART_ID;
  artKindOfs[ARTL_ART_builtinTerminal_890] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_builtinTerminal_890] = true;
  arteoR_pL[ARTL_ART_builtinTerminal_890] = true;
  artPopD[ARTL_ART_builtinTerminal_890] = true;
}

public void artTableInitialiser_ART_caseInsensitiveTerminal() {
  artLabelInternalStrings[ARTL_ART_caseInsensitiveTerminal] = "caseInsensitiveTerminal";
  artLabelStrings[ARTL_ART_caseInsensitiveTerminal] = "caseInsensitiveTerminal";
  artKindOfs[ARTL_ART_caseInsensitiveTerminal] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_caseInsensitiveTerminal_862] = "caseInsensitiveTerminal ::= . STRING_DQ ";
  artLabelStrings[ARTL_ART_caseInsensitiveTerminal_862] = "";
  artlhsL[ARTL_ART_caseInsensitiveTerminal_862] = ARTL_ART_caseInsensitiveTerminal;
  artKindOfs[ARTL_ART_caseInsensitiveTerminal_862] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_caseInsensitiveTerminal_864] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_caseInsensitiveTerminal_864] = "caseInsensitiveTerminal ::= STRING_DQ .";
  artLabelStrings[ARTL_ART_caseInsensitiveTerminal_864] = "";
  artlhsL[ARTL_ART_caseInsensitiveTerminal_864] = ARTL_ART_caseInsensitiveTerminal;
  artSlotInstanceOfs[ARTL_ART_caseInsensitiveTerminal_864] = ARTL_ART_STRING_DQ;
  artKindOfs[ARTL_ART_caseInsensitiveTerminal_864] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_caseInsensitiveTerminal_864] = true;
  arteoR_pL[ARTL_ART_caseInsensitiveTerminal_864] = true;
  artPopD[ARTL_ART_caseInsensitiveTerminal_864] = true;
}

public void artTableInitialiser_ART_caseSensitiveTerminal() {
  artLabelInternalStrings[ARTL_ART_caseSensitiveTerminal] = "caseSensitiveTerminal";
  artLabelStrings[ARTL_ART_caseSensitiveTerminal] = "caseSensitiveTerminal";
  artKindOfs[ARTL_ART_caseSensitiveTerminal] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_caseSensitiveTerminal_856] = "caseSensitiveTerminal ::= . STRING_PLAIN_SQ ";
  artLabelStrings[ARTL_ART_caseSensitiveTerminal_856] = "";
  artlhsL[ARTL_ART_caseSensitiveTerminal_856] = ARTL_ART_caseSensitiveTerminal;
  artKindOfs[ARTL_ART_caseSensitiveTerminal_856] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_caseSensitiveTerminal_858] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_caseSensitiveTerminal_858] = "caseSensitiveTerminal ::= STRING_PLAIN_SQ .";
  artLabelStrings[ARTL_ART_caseSensitiveTerminal_858] = "";
  artlhsL[ARTL_ART_caseSensitiveTerminal_858] = ARTL_ART_caseSensitiveTerminal;
  artSlotInstanceOfs[ARTL_ART_caseSensitiveTerminal_858] = ARTL_ART_STRING_PLAIN_SQ;
  artKindOfs[ARTL_ART_caseSensitiveTerminal_858] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_caseSensitiveTerminal_858] = true;
  arteoR_pL[ARTL_ART_caseSensitiveTerminal_858] = true;
  artPopD[ARTL_ART_caseSensitiveTerminal_858] = true;
}

public void artTableInitialiser_ART_cat() {
  artLabelInternalStrings[ARTL_ART_cat] = "cat";
  artLabelStrings[ARTL_ART_cat] = "cat";
  artKindOfs[ARTL_ART_cat] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_cat_1176] = "cat ::= . slot catTail ";
  artLabelStrings[ARTL_ART_cat_1176] = "";
  artlhsL[ARTL_ART_cat_1176] = ARTL_ART_cat;
  artKindOfs[ARTL_ART_cat_1176] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_cat_1178] = "cat ::= slot . catTail ";
  artLabelStrings[ARTL_ART_cat_1178] = "";
  artlhsL[ARTL_ART_cat_1178] = ARTL_ART_cat;
  artSlotInstanceOfs[ARTL_ART_cat_1178] = ARTL_ART_slot;
  artKindOfs[ARTL_ART_cat_1178] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_cat_1178] = true;
  artFolds[ARTL_ART_cat_1180] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_cat_1180] = "cat ::= slot catTail .";
  artLabelStrings[ARTL_ART_cat_1180] = "";
  artlhsL[ARTL_ART_cat_1180] = ARTL_ART_cat;
  artSlotInstanceOfs[ARTL_ART_cat_1180] = ARTL_ART_catTail;
  artKindOfs[ARTL_ART_cat_1180] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cat_1180] = true;
  arteoR_pL[ARTL_ART_cat_1180] = true;
  artPopD[ARTL_ART_cat_1180] = true;
}

public void artTableInitialiser_ART_catTail() {
  artLabelInternalStrings[ARTL_ART_catTail] = "catTail";
  artLabelStrings[ARTL_ART_catTail] = "catTail";
  artKindOfs[ARTL_ART_catTail] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_catTail_1214] = "catTail ::= . abbrev slot ";
  artLabelStrings[ARTL_ART_catTail_1214] = "";
  artlhsL[ARTL_ART_catTail_1214] = ARTL_ART_catTail;
  artKindOfs[ARTL_ART_catTail_1214] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_catTail_1216] = "catTail ::= abbrev . slot ";
  artLabelStrings[ARTL_ART_catTail_1216] = "";
  artlhsL[ARTL_ART_catTail_1216] = ARTL_ART_catTail;
  artSlotInstanceOfs[ARTL_ART_catTail_1216] = ARTL_ART_abbrev;
  artKindOfs[ARTL_ART_catTail_1216] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_catTail_1216] = true;
  artLabelInternalStrings[ARTL_ART_catTail_1218] = "catTail ::= abbrev slot .";
  artLabelStrings[ARTL_ART_catTail_1218] = "";
  artlhsL[ARTL_ART_catTail_1218] = ARTL_ART_catTail;
  artSlotInstanceOfs[ARTL_ART_catTail_1218] = ARTL_ART_slot;
  artKindOfs[ARTL_ART_catTail_1218] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_catTail_1218] = true;
  arteoR_pL[ARTL_ART_catTail_1218] = true;
  artPopD[ARTL_ART_catTail_1218] = true;
  artLabelInternalStrings[ARTL_ART_catTail_1220] = "catTail ::= . abbrev slot catTail ";
  artLabelStrings[ARTL_ART_catTail_1220] = "";
  artlhsL[ARTL_ART_catTail_1220] = ARTL_ART_catTail;
  artKindOfs[ARTL_ART_catTail_1220] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_catTail_1222] = "catTail ::= abbrev . slot catTail ";
  artLabelStrings[ARTL_ART_catTail_1222] = "";
  artlhsL[ARTL_ART_catTail_1222] = ARTL_ART_catTail;
  artSlotInstanceOfs[ARTL_ART_catTail_1222] = ARTL_ART_abbrev;
  artKindOfs[ARTL_ART_catTail_1222] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_catTail_1222] = true;
  artLabelInternalStrings[ARTL_ART_catTail_1224] = "catTail ::= abbrev slot . catTail ";
  artLabelStrings[ARTL_ART_catTail_1224] = "";
  artlhsL[ARTL_ART_catTail_1224] = ARTL_ART_catTail;
  artSlotInstanceOfs[ARTL_ART_catTail_1224] = ARTL_ART_slot;
  artKindOfs[ARTL_ART_catTail_1224] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_catTail_1226] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_catTail_1226] = "catTail ::= abbrev slot catTail .";
  artLabelStrings[ARTL_ART_catTail_1226] = "";
  artlhsL[ARTL_ART_catTail_1226] = ARTL_ART_catTail;
  artSlotInstanceOfs[ARTL_ART_catTail_1226] = ARTL_ART_catTail;
  artKindOfs[ARTL_ART_catTail_1226] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_catTail_1226] = true;
  arteoR_pL[ARTL_ART_catTail_1226] = true;
  artPopD[ARTL_ART_catTail_1226] = true;
}

public void artTableInitialiser_ART_characterSetTerminal() {
  artLabelInternalStrings[ARTL_ART_characterSetTerminal] = "characterSetTerminal";
  artLabelStrings[ARTL_ART_characterSetTerminal] = "characterSetTerminal";
  artKindOfs[ARTL_ART_characterSetTerminal] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_characterSetTerminal_874] = "characterSetTerminal ::= . CHAR_BQ '..'  CHAR_BQ ";
  artLabelStrings[ARTL_ART_characterSetTerminal_874] = "";
  artlhsL[ARTL_ART_characterSetTerminal_874] = ARTL_ART_characterSetTerminal;
  artKindOfs[ARTL_ART_characterSetTerminal_874] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_characterSetTerminal_876] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_characterSetTerminal_876] = "characterSetTerminal ::= CHAR_BQ . '..'  CHAR_BQ ";
  artLabelStrings[ARTL_ART_characterSetTerminal_876] = "";
  artlhsL[ARTL_ART_characterSetTerminal_876] = ARTL_ART_characterSetTerminal;
  artSlotInstanceOfs[ARTL_ART_characterSetTerminal_876] = ARTL_ART_CHAR_BQ;
  artKindOfs[ARTL_ART_characterSetTerminal_876] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_characterSetTerminal_876] = true;
  artFolds[ARTL_ART_characterSetTerminal_880] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_characterSetTerminal_879] = "characterSetTerminal ::= CHAR_BQ '..'  CHAR_BQ ";
  artLabelStrings[ARTL_ART_characterSetTerminal_879] = "";
  artlhsL[ARTL_ART_characterSetTerminal_879] = ARTL_ART_characterSetTerminal;
  artLabelInternalStrings[ARTL_ART_characterSetTerminal_880] = "characterSetTerminal ::= CHAR_BQ '..'  . CHAR_BQ ";
  artLabelStrings[ARTL_ART_characterSetTerminal_880] = "";
  artlhsL[ARTL_ART_characterSetTerminal_880] = ARTL_ART_characterSetTerminal;
  artKindOfs[ARTL_ART_characterSetTerminal_880] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_characterSetTerminal_882] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_characterSetTerminal_882] = "characterSetTerminal ::= CHAR_BQ '..'  CHAR_BQ .";
  artLabelStrings[ARTL_ART_characterSetTerminal_882] = "";
  artlhsL[ARTL_ART_characterSetTerminal_882] = ARTL_ART_characterSetTerminal;
  artSlotInstanceOfs[ARTL_ART_characterSetTerminal_882] = ARTL_ART_CHAR_BQ;
  artKindOfs[ARTL_ART_characterSetTerminal_882] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_characterSetTerminal_882] = true;
  arteoR_pL[ARTL_ART_characterSetTerminal_882] = true;
  artPopD[ARTL_ART_characterSetTerminal_882] = true;
}

public void artTableInitialiser_ART_characterTerminal() {
  artLabelInternalStrings[ARTL_ART_characterTerminal] = "characterTerminal";
  artLabelStrings[ARTL_ART_characterTerminal] = "characterTerminal";
  artKindOfs[ARTL_ART_characterTerminal] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_characterTerminal_868] = "characterTerminal ::= . CHAR_BQ ";
  artLabelStrings[ARTL_ART_characterTerminal_868] = "";
  artlhsL[ARTL_ART_characterTerminal_868] = ARTL_ART_characterTerminal;
  artKindOfs[ARTL_ART_characterTerminal_868] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_characterTerminal_870] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_characterTerminal_870] = "characterTerminal ::= CHAR_BQ .";
  artLabelStrings[ARTL_ART_characterTerminal_870] = "";
  artlhsL[ARTL_ART_characterTerminal_870] = ARTL_ART_characterTerminal;
  artSlotInstanceOfs[ARTL_ART_characterTerminal_870] = ARTL_ART_CHAR_BQ;
  artKindOfs[ARTL_ART_characterTerminal_870] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_characterTerminal_870] = true;
  arteoR_pL[ARTL_ART_characterTerminal_870] = true;
  artPopD[ARTL_ART_characterTerminal_870] = true;
}

public void artTableInitialiser_ART_choiceSlot() {
  artLabelInternalStrings[ARTL_ART_choiceSlot] = "choiceSlot";
  artLabelStrings[ARTL_ART_choiceSlot] = "choiceSlot";
  artKindOfs[ARTL_ART_choiceSlot] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_choiceSlot_1026] = "choiceSlot ::= . chooseElement ";
  artLabelStrings[ARTL_ART_choiceSlot_1026] = "";
  artlhsL[ARTL_ART_choiceSlot_1026] = ARTL_ART_choiceSlot;
  artKindOfs[ARTL_ART_choiceSlot_1026] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_choiceSlot_1028] = "choiceSlot ::= chooseElement .";
  artLabelStrings[ARTL_ART_choiceSlot_1028] = "";
  artlhsL[ARTL_ART_choiceSlot_1028] = ARTL_ART_choiceSlot;
  artSlotInstanceOfs[ARTL_ART_choiceSlot_1028] = ARTL_ART_chooseElement;
  artKindOfs[ARTL_ART_choiceSlot_1028] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_choiceSlot_1028] = true;
  arteoR_pL[ARTL_ART_choiceSlot_1028] = true;
  artPopD[ARTL_ART_choiceSlot_1028] = true;
  artLabelInternalStrings[ARTL_ART_choiceSlot_1032] = "choiceSlot ::= . chooseElement choiceSlot ";
  artLabelStrings[ARTL_ART_choiceSlot_1032] = "";
  artlhsL[ARTL_ART_choiceSlot_1032] = ARTL_ART_choiceSlot;
  artKindOfs[ARTL_ART_choiceSlot_1032] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_choiceSlot_1034] = "choiceSlot ::= chooseElement . choiceSlot ";
  artLabelStrings[ARTL_ART_choiceSlot_1034] = "";
  artlhsL[ARTL_ART_choiceSlot_1034] = ARTL_ART_choiceSlot;
  artSlotInstanceOfs[ARTL_ART_choiceSlot_1034] = ARTL_ART_chooseElement;
  artKindOfs[ARTL_ART_choiceSlot_1034] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_choiceSlot_1034] = true;
  artLabelInternalStrings[ARTL_ART_choiceSlot_1036] = "choiceSlot ::= chooseElement choiceSlot .";
  artLabelStrings[ARTL_ART_choiceSlot_1036] = "";
  artlhsL[ARTL_ART_choiceSlot_1036] = ARTL_ART_choiceSlot;
  artSlotInstanceOfs[ARTL_ART_choiceSlot_1036] = ARTL_ART_choiceSlot;
  artKindOfs[ARTL_ART_choiceSlot_1036] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_choiceSlot_1036] = true;
  arteoR_pL[ARTL_ART_choiceSlot_1036] = true;
  artPopD[ARTL_ART_choiceSlot_1036] = true;
}

public void artTableInitialiser_ART_chooseDiff() {
  artLabelInternalStrings[ARTL_ART_chooseDiff] = "chooseDiff";
  artLabelStrings[ARTL_ART_chooseDiff] = "chooseDiff";
  artKindOfs[ARTL_ART_chooseDiff] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_chooseDiff_974] = "chooseDiff ::= . chooseUnionIntersection ";
  artLabelStrings[ARTL_ART_chooseDiff_974] = "";
  artlhsL[ARTL_ART_chooseDiff_974] = ARTL_ART_chooseDiff;
  artKindOfs[ARTL_ART_chooseDiff_974] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_chooseDiff_976] = "chooseDiff ::= chooseUnionIntersection .";
  artLabelStrings[ARTL_ART_chooseDiff_976] = "";
  artlhsL[ARTL_ART_chooseDiff_976] = ARTL_ART_chooseDiff;
  artSlotInstanceOfs[ARTL_ART_chooseDiff_976] = ARTL_ART_chooseUnionIntersection;
  artKindOfs[ARTL_ART_chooseDiff_976] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_chooseDiff_976] = true;
  arteoR_pL[ARTL_ART_chooseDiff_976] = true;
  artPopD[ARTL_ART_chooseDiff_976] = true;
  artLabelInternalStrings[ARTL_ART_chooseDiff_980] = "chooseDiff ::= . chooseDiff '\\'  chooseUnionIntersection ";
  artLabelStrings[ARTL_ART_chooseDiff_980] = "";
  artlhsL[ARTL_ART_chooseDiff_980] = ARTL_ART_chooseDiff;
  artKindOfs[ARTL_ART_chooseDiff_980] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_chooseDiff_982] = "chooseDiff ::= chooseDiff . '\\'  chooseUnionIntersection ";
  artLabelStrings[ARTL_ART_chooseDiff_982] = "";
  artlhsL[ARTL_ART_chooseDiff_982] = ARTL_ART_chooseDiff;
  artSlotInstanceOfs[ARTL_ART_chooseDiff_982] = ARTL_ART_chooseDiff;
  artKindOfs[ARTL_ART_chooseDiff_982] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_chooseDiff_982] = true;
  artLabelInternalStrings[ARTL_ART_chooseDiff_983] = "chooseDiff ::= chooseDiff '\\'  chooseUnionIntersection ";
  artLabelStrings[ARTL_ART_chooseDiff_983] = "";
  artlhsL[ARTL_ART_chooseDiff_983] = ARTL_ART_chooseDiff;
  artLabelInternalStrings[ARTL_ART_chooseDiff_984] = "chooseDiff ::= chooseDiff '\\'  . chooseUnionIntersection ";
  artLabelStrings[ARTL_ART_chooseDiff_984] = "";
  artlhsL[ARTL_ART_chooseDiff_984] = ARTL_ART_chooseDiff;
  artKindOfs[ARTL_ART_chooseDiff_984] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_chooseDiff_986] = "chooseDiff ::= chooseDiff '\\'  chooseUnionIntersection .";
  artLabelStrings[ARTL_ART_chooseDiff_986] = "";
  artlhsL[ARTL_ART_chooseDiff_986] = ARTL_ART_chooseDiff;
  artSlotInstanceOfs[ARTL_ART_chooseDiff_986] = ARTL_ART_chooseUnionIntersection;
  artKindOfs[ARTL_ART_chooseDiff_986] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_chooseDiff_986] = true;
  arteoR_pL[ARTL_ART_chooseDiff_986] = true;
  artPopD[ARTL_ART_chooseDiff_986] = true;
  artLabelInternalStrings[ARTL_ART_chooseDiff_990] = "chooseDiff ::= . nonterminal '::='  choiceSlot ";
  artLabelStrings[ARTL_ART_chooseDiff_990] = "";
  artlhsL[ARTL_ART_chooseDiff_990] = ARTL_ART_chooseDiff;
  artKindOfs[ARTL_ART_chooseDiff_990] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_chooseDiff_992] = "chooseDiff ::= nonterminal . '::='  choiceSlot ";
  artLabelStrings[ARTL_ART_chooseDiff_992] = "";
  artlhsL[ARTL_ART_chooseDiff_992] = ARTL_ART_chooseDiff;
  artSlotInstanceOfs[ARTL_ART_chooseDiff_992] = ARTL_ART_nonterminal;
  artKindOfs[ARTL_ART_chooseDiff_992] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_chooseDiff_992] = true;
  artLabelInternalStrings[ARTL_ART_chooseDiff_993] = "chooseDiff ::= nonterminal '::='  choiceSlot ";
  artLabelStrings[ARTL_ART_chooseDiff_993] = "";
  artlhsL[ARTL_ART_chooseDiff_993] = ARTL_ART_chooseDiff;
  artLabelInternalStrings[ARTL_ART_chooseDiff_994] = "chooseDiff ::= nonterminal '::='  . choiceSlot ";
  artLabelStrings[ARTL_ART_chooseDiff_994] = "";
  artlhsL[ARTL_ART_chooseDiff_994] = ARTL_ART_chooseDiff;
  artKindOfs[ARTL_ART_chooseDiff_994] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_chooseDiff_996] = "chooseDiff ::= nonterminal '::='  choiceSlot .";
  artLabelStrings[ARTL_ART_chooseDiff_996] = "";
  artlhsL[ARTL_ART_chooseDiff_996] = ARTL_ART_chooseDiff;
  artSlotInstanceOfs[ARTL_ART_chooseDiff_996] = ARTL_ART_choiceSlot;
  artKindOfs[ARTL_ART_chooseDiff_996] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_chooseDiff_996] = true;
  arteoR_pL[ARTL_ART_chooseDiff_996] = true;
  artPopD[ARTL_ART_chooseDiff_996] = true;
}

public void artTableInitialiser_ART_chooseElement() {
  artLabelInternalStrings[ARTL_ART_chooseElement] = "chooseElement";
  artLabelStrings[ARTL_ART_chooseElement] = "chooseElement";
  artKindOfs[ARTL_ART_chooseElement] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_chooseElement_1040] = "chooseElement ::= . nonterminal ";
  artLabelStrings[ARTL_ART_chooseElement_1040] = "";
  artlhsL[ARTL_ART_chooseElement_1040] = ARTL_ART_chooseElement;
  artKindOfs[ARTL_ART_chooseElement_1040] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_chooseElement_1042] = "chooseElement ::= nonterminal .";
  artLabelStrings[ARTL_ART_chooseElement_1042] = "";
  artlhsL[ARTL_ART_chooseElement_1042] = ARTL_ART_chooseElement;
  artSlotInstanceOfs[ARTL_ART_chooseElement_1042] = ARTL_ART_nonterminal;
  artKindOfs[ARTL_ART_chooseElement_1042] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_chooseElement_1042] = true;
  arteoR_pL[ARTL_ART_chooseElement_1042] = true;
  artPopD[ARTL_ART_chooseElement_1042] = true;
  artLabelInternalStrings[ARTL_ART_chooseElement_1046] = "chooseElement ::= . caseSensitiveTerminal ";
  artLabelStrings[ARTL_ART_chooseElement_1046] = "";
  artlhsL[ARTL_ART_chooseElement_1046] = ARTL_ART_chooseElement;
  artKindOfs[ARTL_ART_chooseElement_1046] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_chooseElement_1048] = "chooseElement ::= caseSensitiveTerminal .";
  artLabelStrings[ARTL_ART_chooseElement_1048] = "";
  artlhsL[ARTL_ART_chooseElement_1048] = ARTL_ART_chooseElement;
  artSlotInstanceOfs[ARTL_ART_chooseElement_1048] = ARTL_ART_caseSensitiveTerminal;
  artKindOfs[ARTL_ART_chooseElement_1048] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_chooseElement_1048] = true;
  arteoR_pL[ARTL_ART_chooseElement_1048] = true;
  artPopD[ARTL_ART_chooseElement_1048] = true;
  artLabelInternalStrings[ARTL_ART_chooseElement_1052] = "chooseElement ::= . caseInsensitiveTerminal ";
  artLabelStrings[ARTL_ART_chooseElement_1052] = "";
  artlhsL[ARTL_ART_chooseElement_1052] = ARTL_ART_chooseElement;
  artKindOfs[ARTL_ART_chooseElement_1052] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_chooseElement_1054] = "chooseElement ::= caseInsensitiveTerminal .";
  artLabelStrings[ARTL_ART_chooseElement_1054] = "";
  artlhsL[ARTL_ART_chooseElement_1054] = ARTL_ART_chooseElement;
  artSlotInstanceOfs[ARTL_ART_chooseElement_1054] = ARTL_ART_caseInsensitiveTerminal;
  artKindOfs[ARTL_ART_chooseElement_1054] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_chooseElement_1054] = true;
  arteoR_pL[ARTL_ART_chooseElement_1054] = true;
  artPopD[ARTL_ART_chooseElement_1054] = true;
  artLabelInternalStrings[ARTL_ART_chooseElement_1058] = "chooseElement ::= . builtinTerminal ";
  artLabelStrings[ARTL_ART_chooseElement_1058] = "";
  artlhsL[ARTL_ART_chooseElement_1058] = ARTL_ART_chooseElement;
  artKindOfs[ARTL_ART_chooseElement_1058] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_chooseElement_1060] = "chooseElement ::= builtinTerminal .";
  artLabelStrings[ARTL_ART_chooseElement_1060] = "";
  artlhsL[ARTL_ART_chooseElement_1060] = ARTL_ART_chooseElement;
  artSlotInstanceOfs[ARTL_ART_chooseElement_1060] = ARTL_ART_builtinTerminal;
  artKindOfs[ARTL_ART_chooseElement_1060] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_chooseElement_1060] = true;
  arteoR_pL[ARTL_ART_chooseElement_1060] = true;
  artPopD[ARTL_ART_chooseElement_1060] = true;
  artLabelInternalStrings[ARTL_ART_chooseElement_1064] = "chooseElement ::= . '.'  ";
  artLabelStrings[ARTL_ART_chooseElement_1064] = "";
  artlhsL[ARTL_ART_chooseElement_1064] = ARTL_ART_chooseElement;
  artKindOfs[ARTL_ART_chooseElement_1064] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_chooseElement_1064] = true;
  artLabelInternalStrings[ARTL_ART_chooseElement_1065] = "chooseElement ::= '.'  ";
  artLabelStrings[ARTL_ART_chooseElement_1065] = "";
  artlhsL[ARTL_ART_chooseElement_1065] = ARTL_ART_chooseElement;
  artPopD[ARTL_ART_chooseElement_1065] = true;
  artLabelInternalStrings[ARTL_ART_chooseElement_1066] = "chooseElement ::= '.'  .";
  artLabelStrings[ARTL_ART_chooseElement_1066] = "";
  artlhsL[ARTL_ART_chooseElement_1066] = ARTL_ART_chooseElement;
  artKindOfs[ARTL_ART_chooseElement_1066] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_chooseElement_1066] = true;
  arteoR_pL[ARTL_ART_chooseElement_1066] = true;
  artPopD[ARTL_ART_chooseElement_1066] = true;
  artLabelInternalStrings[ARTL_ART_chooseElement_1070] = "chooseElement ::= . 'anyCharacterTerminal'  ";
  artLabelStrings[ARTL_ART_chooseElement_1070] = "";
  artlhsL[ARTL_ART_chooseElement_1070] = ARTL_ART_chooseElement;
  artKindOfs[ARTL_ART_chooseElement_1070] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_chooseElement_1070] = true;
  artLabelInternalStrings[ARTL_ART_chooseElement_1071] = "chooseElement ::= 'anyCharacterTerminal'  ";
  artLabelStrings[ARTL_ART_chooseElement_1071] = "";
  artlhsL[ARTL_ART_chooseElement_1071] = ARTL_ART_chooseElement;
  artPopD[ARTL_ART_chooseElement_1071] = true;
  artLabelInternalStrings[ARTL_ART_chooseElement_1072] = "chooseElement ::= 'anyCharacterTerminal'  .";
  artLabelStrings[ARTL_ART_chooseElement_1072] = "";
  artlhsL[ARTL_ART_chooseElement_1072] = ARTL_ART_chooseElement;
  artKindOfs[ARTL_ART_chooseElement_1072] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_chooseElement_1072] = true;
  arteoR_pL[ARTL_ART_chooseElement_1072] = true;
  artPopD[ARTL_ART_chooseElement_1072] = true;
  artLabelInternalStrings[ARTL_ART_chooseElement_1076] = "chooseElement ::= . 'anyBuiltinTerminal'  ";
  artLabelStrings[ARTL_ART_chooseElement_1076] = "";
  artlhsL[ARTL_ART_chooseElement_1076] = ARTL_ART_chooseElement;
  artKindOfs[ARTL_ART_chooseElement_1076] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_chooseElement_1076] = true;
  artLabelInternalStrings[ARTL_ART_chooseElement_1077] = "chooseElement ::= 'anyBuiltinTerminal'  ";
  artLabelStrings[ARTL_ART_chooseElement_1077] = "";
  artlhsL[ARTL_ART_chooseElement_1077] = ARTL_ART_chooseElement;
  artPopD[ARTL_ART_chooseElement_1077] = true;
  artLabelInternalStrings[ARTL_ART_chooseElement_1078] = "chooseElement ::= 'anyBuiltinTerminal'  .";
  artLabelStrings[ARTL_ART_chooseElement_1078] = "";
  artlhsL[ARTL_ART_chooseElement_1078] = ARTL_ART_chooseElement;
  artKindOfs[ARTL_ART_chooseElement_1078] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_chooseElement_1078] = true;
  arteoR_pL[ARTL_ART_chooseElement_1078] = true;
  artPopD[ARTL_ART_chooseElement_1078] = true;
  artLabelInternalStrings[ARTL_ART_chooseElement_1082] = "chooseElement ::= . 'anyCaseSensitiveTerminal'  ";
  artLabelStrings[ARTL_ART_chooseElement_1082] = "";
  artlhsL[ARTL_ART_chooseElement_1082] = ARTL_ART_chooseElement;
  artKindOfs[ARTL_ART_chooseElement_1082] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_chooseElement_1082] = true;
  artLabelInternalStrings[ARTL_ART_chooseElement_1083] = "chooseElement ::= 'anyCaseSensitiveTerminal'  ";
  artLabelStrings[ARTL_ART_chooseElement_1083] = "";
  artlhsL[ARTL_ART_chooseElement_1083] = ARTL_ART_chooseElement;
  artPopD[ARTL_ART_chooseElement_1083] = true;
  artLabelInternalStrings[ARTL_ART_chooseElement_1084] = "chooseElement ::= 'anyCaseSensitiveTerminal'  .";
  artLabelStrings[ARTL_ART_chooseElement_1084] = "";
  artlhsL[ARTL_ART_chooseElement_1084] = ARTL_ART_chooseElement;
  artKindOfs[ARTL_ART_chooseElement_1084] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_chooseElement_1084] = true;
  arteoR_pL[ARTL_ART_chooseElement_1084] = true;
  artPopD[ARTL_ART_chooseElement_1084] = true;
  artLabelInternalStrings[ARTL_ART_chooseElement_1088] = "chooseElement ::= . 'anyCaseInsensitiveTerminal'  ";
  artLabelStrings[ARTL_ART_chooseElement_1088] = "";
  artlhsL[ARTL_ART_chooseElement_1088] = ARTL_ART_chooseElement;
  artKindOfs[ARTL_ART_chooseElement_1088] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_chooseElement_1088] = true;
  artLabelInternalStrings[ARTL_ART_chooseElement_1089] = "chooseElement ::= 'anyCaseInsensitiveTerminal'  ";
  artLabelStrings[ARTL_ART_chooseElement_1089] = "";
  artlhsL[ARTL_ART_chooseElement_1089] = ARTL_ART_chooseElement;
  artPopD[ARTL_ART_chooseElement_1089] = true;
  artLabelInternalStrings[ARTL_ART_chooseElement_1090] = "chooseElement ::= 'anyCaseInsensitiveTerminal'  .";
  artLabelStrings[ARTL_ART_chooseElement_1090] = "";
  artlhsL[ARTL_ART_chooseElement_1090] = ARTL_ART_chooseElement;
  artKindOfs[ARTL_ART_chooseElement_1090] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_chooseElement_1090] = true;
  arteoR_pL[ARTL_ART_chooseElement_1090] = true;
  artPopD[ARTL_ART_chooseElement_1090] = true;
  artLabelInternalStrings[ARTL_ART_chooseElement_1094] = "chooseElement ::= . 'anyParaterminal'  ";
  artLabelStrings[ARTL_ART_chooseElement_1094] = "";
  artlhsL[ARTL_ART_chooseElement_1094] = ARTL_ART_chooseElement;
  artKindOfs[ARTL_ART_chooseElement_1094] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_chooseElement_1094] = true;
  artLabelInternalStrings[ARTL_ART_chooseElement_1095] = "chooseElement ::= 'anyParaterminal'  ";
  artLabelStrings[ARTL_ART_chooseElement_1095] = "";
  artlhsL[ARTL_ART_chooseElement_1095] = ARTL_ART_chooseElement;
  artPopD[ARTL_ART_chooseElement_1095] = true;
  artLabelInternalStrings[ARTL_ART_chooseElement_1096] = "chooseElement ::= 'anyParaterminal'  .";
  artLabelStrings[ARTL_ART_chooseElement_1096] = "";
  artlhsL[ARTL_ART_chooseElement_1096] = ARTL_ART_chooseElement;
  artKindOfs[ARTL_ART_chooseElement_1096] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_chooseElement_1096] = true;
  arteoR_pL[ARTL_ART_chooseElement_1096] = true;
  artPopD[ARTL_ART_chooseElement_1096] = true;
  artLabelInternalStrings[ARTL_ART_chooseElement_1100] = "chooseElement ::= . 'anyNonterminal'  ";
  artLabelStrings[ARTL_ART_chooseElement_1100] = "";
  artlhsL[ARTL_ART_chooseElement_1100] = ARTL_ART_chooseElement;
  artKindOfs[ARTL_ART_chooseElement_1100] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_chooseElement_1100] = true;
  artLabelInternalStrings[ARTL_ART_chooseElement_1101] = "chooseElement ::= 'anyNonterminal'  ";
  artLabelStrings[ARTL_ART_chooseElement_1101] = "";
  artlhsL[ARTL_ART_chooseElement_1101] = ARTL_ART_chooseElement;
  artPopD[ARTL_ART_chooseElement_1101] = true;
  artLabelInternalStrings[ARTL_ART_chooseElement_1102] = "chooseElement ::= 'anyNonterminal'  .";
  artLabelStrings[ARTL_ART_chooseElement_1102] = "";
  artlhsL[ARTL_ART_chooseElement_1102] = ARTL_ART_chooseElement;
  artKindOfs[ARTL_ART_chooseElement_1102] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_chooseElement_1102] = true;
  arteoR_pL[ARTL_ART_chooseElement_1102] = true;
  artPopD[ARTL_ART_chooseElement_1102] = true;
  artLabelInternalStrings[ARTL_ART_chooseElement_1106] = "chooseElement ::= . 'anyLiteralTerminal'  ";
  artLabelStrings[ARTL_ART_chooseElement_1106] = "";
  artlhsL[ARTL_ART_chooseElement_1106] = ARTL_ART_chooseElement;
  artKindOfs[ARTL_ART_chooseElement_1106] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_chooseElement_1106] = true;
  artLabelInternalStrings[ARTL_ART_chooseElement_1107] = "chooseElement ::= 'anyLiteralTerminal'  ";
  artLabelStrings[ARTL_ART_chooseElement_1107] = "";
  artlhsL[ARTL_ART_chooseElement_1107] = ARTL_ART_chooseElement;
  artPopD[ARTL_ART_chooseElement_1107] = true;
  artLabelInternalStrings[ARTL_ART_chooseElement_1108] = "chooseElement ::= 'anyLiteralTerminal'  .";
  artLabelStrings[ARTL_ART_chooseElement_1108] = "";
  artlhsL[ARTL_ART_chooseElement_1108] = ARTL_ART_chooseElement;
  artKindOfs[ARTL_ART_chooseElement_1108] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_chooseElement_1108] = true;
  arteoR_pL[ARTL_ART_chooseElement_1108] = true;
  artPopD[ARTL_ART_chooseElement_1108] = true;
  artLabelInternalStrings[ARTL_ART_chooseElement_1112] = "chooseElement ::= . 'anyTerminal'  ";
  artLabelStrings[ARTL_ART_chooseElement_1112] = "";
  artlhsL[ARTL_ART_chooseElement_1112] = ARTL_ART_chooseElement;
  artKindOfs[ARTL_ART_chooseElement_1112] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_chooseElement_1112] = true;
  artLabelInternalStrings[ARTL_ART_chooseElement_1113] = "chooseElement ::= 'anyTerminal'  ";
  artLabelStrings[ARTL_ART_chooseElement_1113] = "";
  artlhsL[ARTL_ART_chooseElement_1113] = ARTL_ART_chooseElement;
  artPopD[ARTL_ART_chooseElement_1113] = true;
  artLabelInternalStrings[ARTL_ART_chooseElement_1114] = "chooseElement ::= 'anyTerminal'  .";
  artLabelStrings[ARTL_ART_chooseElement_1114] = "";
  artlhsL[ARTL_ART_chooseElement_1114] = ARTL_ART_chooseElement;
  artKindOfs[ARTL_ART_chooseElement_1114] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_chooseElement_1114] = true;
  arteoR_pL[ARTL_ART_chooseElement_1114] = true;
  artPopD[ARTL_ART_chooseElement_1114] = true;
  artLabelInternalStrings[ARTL_ART_chooseElement_1118] = "chooseElement ::= . '('  chooseDiff ')'  ";
  artLabelStrings[ARTL_ART_chooseElement_1118] = "";
  artlhsL[ARTL_ART_chooseElement_1118] = ARTL_ART_chooseElement;
  artKindOfs[ARTL_ART_chooseElement_1118] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_chooseElement_1119] = "chooseElement ::= '('  chooseDiff ')'  ";
  artLabelStrings[ARTL_ART_chooseElement_1119] = "";
  artlhsL[ARTL_ART_chooseElement_1119] = ARTL_ART_chooseElement;
  artLabelInternalStrings[ARTL_ART_chooseElement_1120] = "chooseElement ::= '('  . chooseDiff ')'  ";
  artLabelStrings[ARTL_ART_chooseElement_1120] = "";
  artlhsL[ARTL_ART_chooseElement_1120] = ARTL_ART_chooseElement;
  artKindOfs[ARTL_ART_chooseElement_1120] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_chooseElement_1120] = true;
  artLabelInternalStrings[ARTL_ART_chooseElement_1122] = "chooseElement ::= '('  chooseDiff . ')'  ";
  artLabelStrings[ARTL_ART_chooseElement_1122] = "";
  artlhsL[ARTL_ART_chooseElement_1122] = ARTL_ART_chooseElement;
  artSlotInstanceOfs[ARTL_ART_chooseElement_1122] = ARTL_ART_chooseDiff;
  artKindOfs[ARTL_ART_chooseElement_1122] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_chooseElement_1122] = true;
  artLabelInternalStrings[ARTL_ART_chooseElement_1123] = "chooseElement ::= '('  chooseDiff ')'  ";
  artLabelStrings[ARTL_ART_chooseElement_1123] = "";
  artlhsL[ARTL_ART_chooseElement_1123] = ARTL_ART_chooseElement;
  artPopD[ARTL_ART_chooseElement_1123] = true;
  artLabelInternalStrings[ARTL_ART_chooseElement_1124] = "chooseElement ::= '('  chooseDiff ')'  .";
  artLabelStrings[ARTL_ART_chooseElement_1124] = "";
  artlhsL[ARTL_ART_chooseElement_1124] = ARTL_ART_chooseElement;
  artKindOfs[ARTL_ART_chooseElement_1124] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_chooseElement_1124] = true;
  arteoR_pL[ARTL_ART_chooseElement_1124] = true;
  artPopD[ARTL_ART_chooseElement_1124] = true;
}

public void artTableInitialiser_ART_chooseUnionIntersection() {
  artLabelInternalStrings[ARTL_ART_chooseUnionIntersection] = "chooseUnionIntersection";
  artLabelStrings[ARTL_ART_chooseUnionIntersection] = "chooseUnionIntersection";
  artKindOfs[ARTL_ART_chooseUnionIntersection] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_chooseUnionIntersection_1000] = "chooseUnionIntersection ::= . chooseElement ";
  artLabelStrings[ARTL_ART_chooseUnionIntersection_1000] = "";
  artlhsL[ARTL_ART_chooseUnionIntersection_1000] = ARTL_ART_chooseUnionIntersection;
  artKindOfs[ARTL_ART_chooseUnionIntersection_1000] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_chooseUnionIntersection_1002] = "chooseUnionIntersection ::= chooseElement .";
  artLabelStrings[ARTL_ART_chooseUnionIntersection_1002] = "";
  artlhsL[ARTL_ART_chooseUnionIntersection_1002] = ARTL_ART_chooseUnionIntersection;
  artSlotInstanceOfs[ARTL_ART_chooseUnionIntersection_1002] = ARTL_ART_chooseElement;
  artKindOfs[ARTL_ART_chooseUnionIntersection_1002] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_chooseUnionIntersection_1002] = true;
  arteoR_pL[ARTL_ART_chooseUnionIntersection_1002] = true;
  artPopD[ARTL_ART_chooseUnionIntersection_1002] = true;
  artLabelInternalStrings[ARTL_ART_chooseUnionIntersection_1006] = "chooseUnionIntersection ::= . chooseUnionIntersection '|'  chooseElement ";
  artLabelStrings[ARTL_ART_chooseUnionIntersection_1006] = "";
  artlhsL[ARTL_ART_chooseUnionIntersection_1006] = ARTL_ART_chooseUnionIntersection;
  artKindOfs[ARTL_ART_chooseUnionIntersection_1006] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_chooseUnionIntersection_1008] = "chooseUnionIntersection ::= chooseUnionIntersection . '|'  chooseElement ";
  artLabelStrings[ARTL_ART_chooseUnionIntersection_1008] = "";
  artlhsL[ARTL_ART_chooseUnionIntersection_1008] = ARTL_ART_chooseUnionIntersection;
  artSlotInstanceOfs[ARTL_ART_chooseUnionIntersection_1008] = ARTL_ART_chooseUnionIntersection;
  artKindOfs[ARTL_ART_chooseUnionIntersection_1008] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_chooseUnionIntersection_1008] = true;
  artLabelInternalStrings[ARTL_ART_chooseUnionIntersection_1009] = "chooseUnionIntersection ::= chooseUnionIntersection '|'  chooseElement ";
  artLabelStrings[ARTL_ART_chooseUnionIntersection_1009] = "";
  artlhsL[ARTL_ART_chooseUnionIntersection_1009] = ARTL_ART_chooseUnionIntersection;
  artLabelInternalStrings[ARTL_ART_chooseUnionIntersection_1010] = "chooseUnionIntersection ::= chooseUnionIntersection '|'  . chooseElement ";
  artLabelStrings[ARTL_ART_chooseUnionIntersection_1010] = "";
  artlhsL[ARTL_ART_chooseUnionIntersection_1010] = ARTL_ART_chooseUnionIntersection;
  artKindOfs[ARTL_ART_chooseUnionIntersection_1010] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_chooseUnionIntersection_1012] = "chooseUnionIntersection ::= chooseUnionIntersection '|'  chooseElement .";
  artLabelStrings[ARTL_ART_chooseUnionIntersection_1012] = "";
  artlhsL[ARTL_ART_chooseUnionIntersection_1012] = ARTL_ART_chooseUnionIntersection;
  artSlotInstanceOfs[ARTL_ART_chooseUnionIntersection_1012] = ARTL_ART_chooseElement;
  artKindOfs[ARTL_ART_chooseUnionIntersection_1012] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_chooseUnionIntersection_1012] = true;
  arteoR_pL[ARTL_ART_chooseUnionIntersection_1012] = true;
  artPopD[ARTL_ART_chooseUnionIntersection_1012] = true;
  artLabelInternalStrings[ARTL_ART_chooseUnionIntersection_1016] = "chooseUnionIntersection ::= . chooseUnionIntersection '/'  chooseElement ";
  artLabelStrings[ARTL_ART_chooseUnionIntersection_1016] = "";
  artlhsL[ARTL_ART_chooseUnionIntersection_1016] = ARTL_ART_chooseUnionIntersection;
  artKindOfs[ARTL_ART_chooseUnionIntersection_1016] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_chooseUnionIntersection_1018] = "chooseUnionIntersection ::= chooseUnionIntersection . '/'  chooseElement ";
  artLabelStrings[ARTL_ART_chooseUnionIntersection_1018] = "";
  artlhsL[ARTL_ART_chooseUnionIntersection_1018] = ARTL_ART_chooseUnionIntersection;
  artSlotInstanceOfs[ARTL_ART_chooseUnionIntersection_1018] = ARTL_ART_chooseUnionIntersection;
  artKindOfs[ARTL_ART_chooseUnionIntersection_1018] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_chooseUnionIntersection_1018] = true;
  artLabelInternalStrings[ARTL_ART_chooseUnionIntersection_1019] = "chooseUnionIntersection ::= chooseUnionIntersection '/'  chooseElement ";
  artLabelStrings[ARTL_ART_chooseUnionIntersection_1019] = "";
  artlhsL[ARTL_ART_chooseUnionIntersection_1019] = ARTL_ART_chooseUnionIntersection;
  artLabelInternalStrings[ARTL_ART_chooseUnionIntersection_1020] = "chooseUnionIntersection ::= chooseUnionIntersection '/'  . chooseElement ";
  artLabelStrings[ARTL_ART_chooseUnionIntersection_1020] = "";
  artlhsL[ARTL_ART_chooseUnionIntersection_1020] = ARTL_ART_chooseUnionIntersection;
  artKindOfs[ARTL_ART_chooseUnionIntersection_1020] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_chooseUnionIntersection_1022] = "chooseUnionIntersection ::= chooseUnionIntersection '/'  chooseElement .";
  artLabelStrings[ARTL_ART_chooseUnionIntersection_1022] = "";
  artlhsL[ARTL_ART_chooseUnionIntersection_1022] = ARTL_ART_chooseUnionIntersection;
  artSlotInstanceOfs[ARTL_ART_chooseUnionIntersection_1022] = ARTL_ART_chooseElement;
  artKindOfs[ARTL_ART_chooseUnionIntersection_1022] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_chooseUnionIntersection_1022] = true;
  arteoR_pL[ARTL_ART_chooseUnionIntersection_1022] = true;
  artPopD[ARTL_ART_chooseUnionIntersection_1022] = true;
}

public void artTableInitialiser_ART_chooser() {
  artLabelInternalStrings[ARTL_ART_chooser] = "chooser";
  artLabelStrings[ARTL_ART_chooser] = "chooser";
  artKindOfs[ARTL_ART_chooser] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_chooser_918] = "chooser ::= . chooseDiff '>'  chooseDiff ";
  artLabelStrings[ARTL_ART_chooser_918] = "";
  artlhsL[ARTL_ART_chooser_918] = ARTL_ART_chooser;
  artKindOfs[ARTL_ART_chooser_918] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_chooser_920] = "chooser ::= chooseDiff . '>'  chooseDiff ";
  artLabelStrings[ARTL_ART_chooser_920] = "";
  artlhsL[ARTL_ART_chooser_920] = ARTL_ART_chooser;
  artSlotInstanceOfs[ARTL_ART_chooser_920] = ARTL_ART_chooseDiff;
  artKindOfs[ARTL_ART_chooser_920] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_chooser_920] = true;
  artLabelInternalStrings[ARTL_ART_chooser_921] = "chooser ::= chooseDiff '>'  chooseDiff ";
  artLabelStrings[ARTL_ART_chooser_921] = "";
  artlhsL[ARTL_ART_chooser_921] = ARTL_ART_chooser;
  artLabelInternalStrings[ARTL_ART_chooser_922] = "chooser ::= chooseDiff '>'  . chooseDiff ";
  artLabelStrings[ARTL_ART_chooser_922] = "";
  artlhsL[ARTL_ART_chooser_922] = ARTL_ART_chooser;
  artKindOfs[ARTL_ART_chooser_922] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_chooser_924] = "chooser ::= chooseDiff '>'  chooseDiff .";
  artLabelStrings[ARTL_ART_chooser_924] = "";
  artlhsL[ARTL_ART_chooser_924] = ARTL_ART_chooser;
  artSlotInstanceOfs[ARTL_ART_chooser_924] = ARTL_ART_chooseDiff;
  artKindOfs[ARTL_ART_chooser_924] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_chooser_924] = true;
  arteoR_pL[ARTL_ART_chooser_924] = true;
  artPopD[ARTL_ART_chooser_924] = true;
  artLabelInternalStrings[ARTL_ART_chooser_928] = "chooser ::= . chooseDiff '<'  chooseDiff ";
  artLabelStrings[ARTL_ART_chooser_928] = "";
  artlhsL[ARTL_ART_chooser_928] = ARTL_ART_chooser;
  artKindOfs[ARTL_ART_chooser_928] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_chooser_930] = "chooser ::= chooseDiff . '<'  chooseDiff ";
  artLabelStrings[ARTL_ART_chooser_930] = "";
  artlhsL[ARTL_ART_chooser_930] = ARTL_ART_chooser;
  artSlotInstanceOfs[ARTL_ART_chooser_930] = ARTL_ART_chooseDiff;
  artKindOfs[ARTL_ART_chooser_930] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_chooser_930] = true;
  artLabelInternalStrings[ARTL_ART_chooser_931] = "chooser ::= chooseDiff '<'  chooseDiff ";
  artLabelStrings[ARTL_ART_chooser_931] = "";
  artlhsL[ARTL_ART_chooser_931] = ARTL_ART_chooser;
  artLabelInternalStrings[ARTL_ART_chooser_932] = "chooser ::= chooseDiff '<'  . chooseDiff ";
  artLabelStrings[ARTL_ART_chooser_932] = "";
  artlhsL[ARTL_ART_chooser_932] = ARTL_ART_chooser;
  artKindOfs[ARTL_ART_chooser_932] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_chooser_934] = "chooser ::= chooseDiff '<'  chooseDiff .";
  artLabelStrings[ARTL_ART_chooser_934] = "";
  artlhsL[ARTL_ART_chooser_934] = ARTL_ART_chooser;
  artSlotInstanceOfs[ARTL_ART_chooser_934] = ARTL_ART_chooseDiff;
  artKindOfs[ARTL_ART_chooser_934] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_chooser_934] = true;
  arteoR_pL[ARTL_ART_chooser_934] = true;
  artPopD[ARTL_ART_chooser_934] = true;
  artLabelInternalStrings[ARTL_ART_chooser_938] = "chooser ::= . chooseDiff '>>'  chooseDiff ";
  artLabelStrings[ARTL_ART_chooser_938] = "";
  artlhsL[ARTL_ART_chooser_938] = ARTL_ART_chooser;
  artKindOfs[ARTL_ART_chooser_938] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_chooser_940] = "chooser ::= chooseDiff . '>>'  chooseDiff ";
  artLabelStrings[ARTL_ART_chooser_940] = "";
  artlhsL[ARTL_ART_chooser_940] = ARTL_ART_chooser;
  artSlotInstanceOfs[ARTL_ART_chooser_940] = ARTL_ART_chooseDiff;
  artKindOfs[ARTL_ART_chooser_940] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_chooser_940] = true;
  artLabelInternalStrings[ARTL_ART_chooser_941] = "chooser ::= chooseDiff '>>'  chooseDiff ";
  artLabelStrings[ARTL_ART_chooser_941] = "";
  artlhsL[ARTL_ART_chooser_941] = ARTL_ART_chooser;
  artLabelInternalStrings[ARTL_ART_chooser_942] = "chooser ::= chooseDiff '>>'  . chooseDiff ";
  artLabelStrings[ARTL_ART_chooser_942] = "";
  artlhsL[ARTL_ART_chooser_942] = ARTL_ART_chooser;
  artKindOfs[ARTL_ART_chooser_942] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_chooser_944] = "chooser ::= chooseDiff '>>'  chooseDiff .";
  artLabelStrings[ARTL_ART_chooser_944] = "";
  artlhsL[ARTL_ART_chooser_944] = ARTL_ART_chooser;
  artSlotInstanceOfs[ARTL_ART_chooser_944] = ARTL_ART_chooseDiff;
  artKindOfs[ARTL_ART_chooser_944] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_chooser_944] = true;
  arteoR_pL[ARTL_ART_chooser_944] = true;
  artPopD[ARTL_ART_chooser_944] = true;
  artLabelInternalStrings[ARTL_ART_chooser_948] = "chooser ::= . chooseDiff '<<'  chooseDiff ";
  artLabelStrings[ARTL_ART_chooser_948] = "";
  artlhsL[ARTL_ART_chooser_948] = ARTL_ART_chooser;
  artKindOfs[ARTL_ART_chooser_948] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_chooser_950] = "chooser ::= chooseDiff . '<<'  chooseDiff ";
  artLabelStrings[ARTL_ART_chooser_950] = "";
  artlhsL[ARTL_ART_chooser_950] = ARTL_ART_chooser;
  artSlotInstanceOfs[ARTL_ART_chooser_950] = ARTL_ART_chooseDiff;
  artKindOfs[ARTL_ART_chooser_950] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_chooser_950] = true;
  artLabelInternalStrings[ARTL_ART_chooser_951] = "chooser ::= chooseDiff '<<'  chooseDiff ";
  artLabelStrings[ARTL_ART_chooser_951] = "";
  artlhsL[ARTL_ART_chooser_951] = ARTL_ART_chooser;
  artLabelInternalStrings[ARTL_ART_chooser_952] = "chooser ::= chooseDiff '<<'  . chooseDiff ";
  artLabelStrings[ARTL_ART_chooser_952] = "";
  artlhsL[ARTL_ART_chooser_952] = ARTL_ART_chooser;
  artKindOfs[ARTL_ART_chooser_952] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_chooser_954] = "chooser ::= chooseDiff '<<'  chooseDiff .";
  artLabelStrings[ARTL_ART_chooser_954] = "";
  artlhsL[ARTL_ART_chooser_954] = ARTL_ART_chooser;
  artSlotInstanceOfs[ARTL_ART_chooser_954] = ARTL_ART_chooseDiff;
  artKindOfs[ARTL_ART_chooser_954] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_chooser_954] = true;
  arteoR_pL[ARTL_ART_chooser_954] = true;
  artPopD[ARTL_ART_chooser_954] = true;
  artLabelInternalStrings[ARTL_ART_chooser_958] = "chooser ::= . 'longest'  chooseDiff ";
  artLabelStrings[ARTL_ART_chooser_958] = "";
  artlhsL[ARTL_ART_chooser_958] = ARTL_ART_chooser;
  artKindOfs[ARTL_ART_chooser_958] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_chooser_959] = "chooser ::= 'longest'  chooseDiff ";
  artLabelStrings[ARTL_ART_chooser_959] = "";
  artlhsL[ARTL_ART_chooser_959] = ARTL_ART_chooser;
  artLabelInternalStrings[ARTL_ART_chooser_960] = "chooser ::= 'longest'  . chooseDiff ";
  artLabelStrings[ARTL_ART_chooser_960] = "";
  artlhsL[ARTL_ART_chooser_960] = ARTL_ART_chooser;
  artKindOfs[ARTL_ART_chooser_960] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_chooser_960] = true;
  artLabelInternalStrings[ARTL_ART_chooser_962] = "chooser ::= 'longest'  chooseDiff .";
  artLabelStrings[ARTL_ART_chooser_962] = "";
  artlhsL[ARTL_ART_chooser_962] = ARTL_ART_chooser;
  artSlotInstanceOfs[ARTL_ART_chooser_962] = ARTL_ART_chooseDiff;
  artKindOfs[ARTL_ART_chooser_962] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_chooser_962] = true;
  arteoR_pL[ARTL_ART_chooser_962] = true;
  artPopD[ARTL_ART_chooser_962] = true;
  artLabelInternalStrings[ARTL_ART_chooser_966] = "chooser ::= . 'shortest'  chooseDiff ";
  artLabelStrings[ARTL_ART_chooser_966] = "";
  artlhsL[ARTL_ART_chooser_966] = ARTL_ART_chooser;
  artKindOfs[ARTL_ART_chooser_966] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_chooser_967] = "chooser ::= 'shortest'  chooseDiff ";
  artLabelStrings[ARTL_ART_chooser_967] = "";
  artlhsL[ARTL_ART_chooser_967] = ARTL_ART_chooser;
  artLabelInternalStrings[ARTL_ART_chooser_968] = "chooser ::= 'shortest'  . chooseDiff ";
  artLabelStrings[ARTL_ART_chooser_968] = "";
  artlhsL[ARTL_ART_chooser_968] = ARTL_ART_chooser;
  artKindOfs[ARTL_ART_chooser_968] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_chooser_968] = true;
  artLabelInternalStrings[ARTL_ART_chooser_970] = "chooser ::= 'shortest'  chooseDiff .";
  artLabelStrings[ARTL_ART_chooser_970] = "";
  artlhsL[ARTL_ART_chooser_970] = ARTL_ART_chooser;
  artSlotInstanceOfs[ARTL_ART_chooser_970] = ARTL_ART_chooseDiff;
  artKindOfs[ARTL_ART_chooser_970] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_chooser_970] = true;
  arteoR_pL[ARTL_ART_chooser_970] = true;
  artPopD[ARTL_ART_chooser_970] = true;
}

public void artTableInitialiser_ART_choosers() {
  artLabelInternalStrings[ARTL_ART_choosers] = "choosers";
  artLabelStrings[ARTL_ART_choosers] = "choosers";
  artKindOfs[ARTL_ART_choosers] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_choosers_744] = "choosers ::= . chooser ";
  artLabelStrings[ARTL_ART_choosers_744] = "";
  artlhsL[ARTL_ART_choosers_744] = ARTL_ART_choosers;
  artKindOfs[ARTL_ART_choosers_744] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_choosers_746] = "choosers ::= chooser .";
  artLabelStrings[ARTL_ART_choosers_746] = "";
  artlhsL[ARTL_ART_choosers_746] = ARTL_ART_choosers;
  artSlotInstanceOfs[ARTL_ART_choosers_746] = ARTL_ART_chooser;
  artKindOfs[ARTL_ART_choosers_746] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_choosers_746] = true;
  arteoR_pL[ARTL_ART_choosers_746] = true;
  artPopD[ARTL_ART_choosers_746] = true;
  artLabelInternalStrings[ARTL_ART_choosers_750] = "choosers ::= . chooser choosers ";
  artLabelStrings[ARTL_ART_choosers_750] = "";
  artlhsL[ARTL_ART_choosers_750] = ARTL_ART_choosers;
  artKindOfs[ARTL_ART_choosers_750] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_choosers_752] = "choosers ::= chooser . choosers ";
  artLabelStrings[ARTL_ART_choosers_752] = "";
  artlhsL[ARTL_ART_choosers_752] = ARTL_ART_choosers;
  artSlotInstanceOfs[ARTL_ART_choosers_752] = ARTL_ART_chooser;
  artKindOfs[ARTL_ART_choosers_752] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_choosers_752] = true;
  artLabelInternalStrings[ARTL_ART_choosers_756] = "choosers ::= chooser choosers .";
  artLabelStrings[ARTL_ART_choosers_756] = "";
  artlhsL[ARTL_ART_choosers_756] = ARTL_ART_choosers;
  artSlotInstanceOfs[ARTL_ART_choosers_756] = ARTL_ART_choosers;
  artKindOfs[ARTL_ART_choosers_756] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_choosers_756] = true;
  arteoR_pL[ARTL_ART_choosers_756] = true;
  artPopD[ARTL_ART_choosers_756] = true;
}

public void artTableInitialiser_ART_delay() {
  artLabelInternalStrings[ARTL_ART_delay] = "delay";
  artLabelStrings[ARTL_ART_delay] = "delay";
  artKindOfs[ARTL_ART_delay] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_delay_1412] = "delay ::= . '<'  ";
  artLabelStrings[ARTL_ART_delay_1412] = "";
  artlhsL[ARTL_ART_delay_1412] = ARTL_ART_delay;
  artKindOfs[ARTL_ART_delay_1412] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_delay_1412] = true;
  artFolds[ARTL_ART_delay_1414] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_delay_1413] = "delay ::= '<'  ";
  artLabelStrings[ARTL_ART_delay_1413] = "";
  artlhsL[ARTL_ART_delay_1413] = ARTL_ART_delay;
  artPopD[ARTL_ART_delay_1413] = true;
  artLabelInternalStrings[ARTL_ART_delay_1414] = "delay ::= '<'  .";
  artLabelStrings[ARTL_ART_delay_1414] = "";
  artlhsL[ARTL_ART_delay_1414] = ARTL_ART_delay;
  artKindOfs[ARTL_ART_delay_1414] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_delay_1414] = true;
  arteoR_pL[ARTL_ART_delay_1414] = true;
  artPopD[ARTL_ART_delay_1414] = true;
}

public void artTableInitialiser_ART_diff() {
  artLabelInternalStrings[ARTL_ART_diff] = "diff";
  artLabelStrings[ARTL_ART_diff] = "diff";
  artKindOfs[ARTL_ART_diff] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_diff_1268] = "diff ::= . union ";
  artLabelStrings[ARTL_ART_diff_1268] = "";
  artlhsL[ARTL_ART_diff_1268] = ARTL_ART_diff;
  artKindOfs[ARTL_ART_diff_1268] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_diff_1270] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_diff_1270] = "diff ::= union .";
  artLabelStrings[ARTL_ART_diff_1270] = "";
  artlhsL[ARTL_ART_diff_1270] = ARTL_ART_diff;
  artSlotInstanceOfs[ARTL_ART_diff_1270] = ARTL_ART_union;
  artKindOfs[ARTL_ART_diff_1270] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_diff_1270] = true;
  arteoR_pL[ARTL_ART_diff_1270] = true;
  artPopD[ARTL_ART_diff_1270] = true;
  artLabelInternalStrings[ARTL_ART_diff_1272] = "diff ::= . diff '\\\\'  union ";
  artLabelStrings[ARTL_ART_diff_1272] = "";
  artlhsL[ARTL_ART_diff_1272] = ARTL_ART_diff;
  artKindOfs[ARTL_ART_diff_1272] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_diff_1274] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_diff_1274] = "diff ::= diff . '\\\\'  union ";
  artLabelStrings[ARTL_ART_diff_1274] = "";
  artlhsL[ARTL_ART_diff_1274] = ARTL_ART_diff;
  artSlotInstanceOfs[ARTL_ART_diff_1274] = ARTL_ART_diff;
  artKindOfs[ARTL_ART_diff_1274] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_diff_1274] = true;
  artFolds[ARTL_ART_diff_1276] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_diff_1275] = "diff ::= diff '\\\\'  union ";
  artLabelStrings[ARTL_ART_diff_1275] = "";
  artlhsL[ARTL_ART_diff_1275] = ARTL_ART_diff;
  artLabelInternalStrings[ARTL_ART_diff_1276] = "diff ::= diff '\\\\'  . union ";
  artLabelStrings[ARTL_ART_diff_1276] = "";
  artlhsL[ARTL_ART_diff_1276] = ARTL_ART_diff;
  artKindOfs[ARTL_ART_diff_1276] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_diff_1278] = "diff ::= diff '\\\\'  union .";
  artLabelStrings[ARTL_ART_diff_1278] = "";
  artlhsL[ARTL_ART_diff_1278] = ARTL_ART_diff;
  artSlotInstanceOfs[ARTL_ART_diff_1278] = ARTL_ART_union;
  artKindOfs[ARTL_ART_diff_1278] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_diff_1278] = true;
  arteoR_pL[ARTL_ART_diff_1278] = true;
  artPopD[ARTL_ART_diff_1278] = true;
}

public void artTableInitialiser_ART_directive() {
  artLabelInternalStrings[ARTL_ART_directive] = "directive";
  artLabelStrings[ARTL_ART_directive] = "directive";
  artKindOfs[ARTL_ART_directive] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_directive_28] = "directive ::= . 'import'  ID ";
  artLabelStrings[ARTL_ART_directive_28] = "";
  artlhsL[ARTL_ART_directive_28] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_28] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_29] = "directive ::= 'import'  ID ";
  artLabelStrings[ARTL_ART_directive_29] = "";
  artlhsL[ARTL_ART_directive_29] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_30] = "directive ::= 'import'  . ID ";
  artLabelStrings[ARTL_ART_directive_30] = "";
  artlhsL[ARTL_ART_directive_30] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_30] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_30] = true;
  artLabelInternalStrings[ARTL_ART_directive_32] = "directive ::= 'import'  ID .";
  artLabelStrings[ARTL_ART_directive_32] = "";
  artlhsL[ARTL_ART_directive_32] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_32] = ARTL_ART_ID;
  artKindOfs[ARTL_ART_directive_32] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_32] = true;
  arteoR_pL[ARTL_ART_directive_32] = true;
  artPopD[ARTL_ART_directive_32] = true;
  artLabelInternalStrings[ARTL_ART_directive_34] = "directive ::= . 'element'  elementUpdaters ";
  artLabelStrings[ARTL_ART_directive_34] = "";
  artlhsL[ARTL_ART_directive_34] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_34] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_35] = "directive ::= 'element'  elementUpdaters ";
  artLabelStrings[ARTL_ART_directive_35] = "";
  artlhsL[ARTL_ART_directive_35] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_36] = "directive ::= 'element'  . elementUpdaters ";
  artLabelStrings[ARTL_ART_directive_36] = "";
  artlhsL[ARTL_ART_directive_36] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_36] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_36] = true;
  artLabelInternalStrings[ARTL_ART_directive_38] = "directive ::= 'element'  elementUpdaters .";
  artLabelStrings[ARTL_ART_directive_38] = "";
  artlhsL[ARTL_ART_directive_38] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_38] = ARTL_ART_elementUpdaters;
  artKindOfs[ARTL_ART_directive_38] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_38] = true;
  arteoR_pL[ARTL_ART_directive_38] = true;
  artPopD[ARTL_ART_directive_38] = true;
  artLabelInternalStrings[ARTL_ART_directive_40] = "directive ::= . 'start'  nonterminal ";
  artLabelStrings[ARTL_ART_directive_40] = "";
  artlhsL[ARTL_ART_directive_40] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_40] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_41] = "directive ::= 'start'  nonterminal ";
  artLabelStrings[ARTL_ART_directive_41] = "";
  artlhsL[ARTL_ART_directive_41] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_42] = "directive ::= 'start'  . nonterminal ";
  artLabelStrings[ARTL_ART_directive_42] = "";
  artlhsL[ARTL_ART_directive_42] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_42] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_42] = true;
  artLabelInternalStrings[ARTL_ART_directive_44] = "directive ::= 'start'  nonterminal .";
  artLabelStrings[ARTL_ART_directive_44] = "";
  artlhsL[ARTL_ART_directive_44] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_44] = ARTL_ART_nonterminal;
  artKindOfs[ARTL_ART_directive_44] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_44] = true;
  arteoR_pL[ARTL_ART_directive_44] = true;
  artPopD[ARTL_ART_directive_44] = true;
  artLabelInternalStrings[ARTL_ART_directive_48] = "directive ::= . 'whitespace'  whitespacers ";
  artLabelStrings[ARTL_ART_directive_48] = "";
  artlhsL[ARTL_ART_directive_48] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_48] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_49] = "directive ::= 'whitespace'  whitespacers ";
  artLabelStrings[ARTL_ART_directive_49] = "";
  artlhsL[ARTL_ART_directive_49] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_50] = "directive ::= 'whitespace'  . whitespacers ";
  artLabelStrings[ARTL_ART_directive_50] = "";
  artlhsL[ARTL_ART_directive_50] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_50] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_50] = true;
  artLabelInternalStrings[ARTL_ART_directive_52] = "directive ::= 'whitespace'  whitespacers .";
  artLabelStrings[ARTL_ART_directive_52] = "";
  artlhsL[ARTL_ART_directive_52] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_52] = ARTL_ART_whitespacers;
  artKindOfs[ARTL_ART_directive_52] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_52] = true;
  arteoR_pL[ARTL_ART_directive_52] = true;
  artPopD[ARTL_ART_directive_52] = true;
  artLabelInternalStrings[ARTL_ART_directive_54] = "directive ::= . 'paraterminal'  paraterminalisers ";
  artLabelStrings[ARTL_ART_directive_54] = "";
  artlhsL[ARTL_ART_directive_54] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_54] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_55] = "directive ::= 'paraterminal'  paraterminalisers ";
  artLabelStrings[ARTL_ART_directive_55] = "";
  artlhsL[ARTL_ART_directive_55] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_56] = "directive ::= 'paraterminal'  . paraterminalisers ";
  artLabelStrings[ARTL_ART_directive_56] = "";
  artlhsL[ARTL_ART_directive_56] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_56] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_56] = true;
  artLabelInternalStrings[ARTL_ART_directive_58] = "directive ::= 'paraterminal'  paraterminalisers .";
  artLabelStrings[ARTL_ART_directive_58] = "";
  artlhsL[ARTL_ART_directive_58] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_58] = ARTL_ART_paraterminalisers;
  artKindOfs[ARTL_ART_directive_58] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_58] = true;
  arteoR_pL[ARTL_ART_directive_58] = true;
  artPopD[ARTL_ART_directive_58] = true;
  artLabelInternalStrings[ARTL_ART_directive_60] = "directive ::= . 'injectInstance'  rhs ";
  artLabelStrings[ARTL_ART_directive_60] = "";
  artlhsL[ARTL_ART_directive_60] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_60] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_61] = "directive ::= 'injectInstance'  rhs ";
  artLabelStrings[ARTL_ART_directive_61] = "";
  artlhsL[ARTL_ART_directive_61] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_62] = "directive ::= 'injectInstance'  . rhs ";
  artLabelStrings[ARTL_ART_directive_62] = "";
  artlhsL[ARTL_ART_directive_62] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_62] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_62] = true;
  artLabelInternalStrings[ARTL_ART_directive_66] = "directive ::= 'injectInstance'  rhs .";
  artLabelStrings[ARTL_ART_directive_66] = "";
  artlhsL[ARTL_ART_directive_66] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_66] = ARTL_ART_rhs;
  artKindOfs[ARTL_ART_directive_66] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_66] = true;
  arteoR_pL[ARTL_ART_directive_66] = true;
  artPopD[ARTL_ART_directive_66] = true;
  artLabelInternalStrings[ARTL_ART_directive_68] = "directive ::= . 'injectProduction'  rhs ";
  artLabelStrings[ARTL_ART_directive_68] = "";
  artlhsL[ARTL_ART_directive_68] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_68] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_69] = "directive ::= 'injectProduction'  rhs ";
  artLabelStrings[ARTL_ART_directive_69] = "";
  artlhsL[ARTL_ART_directive_69] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_70] = "directive ::= 'injectProduction'  . rhs ";
  artLabelStrings[ARTL_ART_directive_70] = "";
  artlhsL[ARTL_ART_directive_70] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_70] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_70] = true;
  artLabelInternalStrings[ARTL_ART_directive_74] = "directive ::= 'injectProduction'  rhs .";
  artLabelStrings[ARTL_ART_directive_74] = "";
  artlhsL[ARTL_ART_directive_74] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_74] = ARTL_ART_rhs;
  artKindOfs[ARTL_ART_directive_74] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_74] = true;
  arteoR_pL[ARTL_ART_directive_74] = true;
  artPopD[ARTL_ART_directive_74] = true;
  artLabelInternalStrings[ARTL_ART_directive_76] = "directive ::= . 'injectProductionOff'  ";
  artLabelStrings[ARTL_ART_directive_76] = "";
  artlhsL[ARTL_ART_directive_76] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_76] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_76] = true;
  artLabelInternalStrings[ARTL_ART_directive_77] = "directive ::= 'injectProductionOff'  ";
  artLabelStrings[ARTL_ART_directive_77] = "";
  artlhsL[ARTL_ART_directive_77] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_77] = true;
  artLabelInternalStrings[ARTL_ART_directive_78] = "directive ::= 'injectProductionOff'  .";
  artLabelStrings[ARTL_ART_directive_78] = "";
  artlhsL[ARTL_ART_directive_78] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_78] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_78] = true;
  arteoR_pL[ARTL_ART_directive_78] = true;
  artPopD[ARTL_ART_directive_78] = true;
  artLabelInternalStrings[ARTL_ART_directive_82] = "directive ::= . 'absorb'  nonterminal ";
  artLabelStrings[ARTL_ART_directive_82] = "";
  artlhsL[ARTL_ART_directive_82] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_82] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_83] = "directive ::= 'absorb'  nonterminal ";
  artLabelStrings[ARTL_ART_directive_83] = "";
  artlhsL[ARTL_ART_directive_83] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_84] = "directive ::= 'absorb'  . nonterminal ";
  artLabelStrings[ARTL_ART_directive_84] = "";
  artlhsL[ARTL_ART_directive_84] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_84] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_84] = true;
  artLabelInternalStrings[ARTL_ART_directive_86] = "directive ::= 'absorb'  nonterminal .";
  artLabelStrings[ARTL_ART_directive_86] = "";
  artlhsL[ARTL_ART_directive_86] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_86] = ARTL_ART_nonterminal;
  artKindOfs[ARTL_ART_directive_86] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_86] = true;
  arteoR_pL[ARTL_ART_directive_86] = true;
  artPopD[ARTL_ART_directive_86] = true;
  artLabelInternalStrings[ARTL_ART_directive_90] = "directive ::= . 'choose'  choosers ";
  artLabelStrings[ARTL_ART_directive_90] = "";
  artlhsL[ARTL_ART_directive_90] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_90] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_91] = "directive ::= 'choose'  choosers ";
  artLabelStrings[ARTL_ART_directive_91] = "";
  artlhsL[ARTL_ART_directive_91] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_92] = "directive ::= 'choose'  . choosers ";
  artLabelStrings[ARTL_ART_directive_92] = "";
  artlhsL[ARTL_ART_directive_92] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_92] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_92] = true;
  artLabelInternalStrings[ARTL_ART_directive_96] = "directive ::= 'choose'  choosers .";
  artLabelStrings[ARTL_ART_directive_96] = "";
  artlhsL[ARTL_ART_directive_96] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_96] = ARTL_ART_choosers;
  artKindOfs[ARTL_ART_directive_96] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_96] = true;
  arteoR_pL[ARTL_ART_directive_96] = true;
  artPopD[ARTL_ART_directive_96] = true;
  artLabelInternalStrings[ARTL_ART_directive_98] = "directive ::= . 'choose'  ID choosers ";
  artLabelStrings[ARTL_ART_directive_98] = "";
  artlhsL[ARTL_ART_directive_98] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_98] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_99] = "directive ::= 'choose'  ID choosers ";
  artLabelStrings[ARTL_ART_directive_99] = "";
  artlhsL[ARTL_ART_directive_99] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_100] = "directive ::= 'choose'  . ID choosers ";
  artLabelStrings[ARTL_ART_directive_100] = "";
  artlhsL[ARTL_ART_directive_100] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_100] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_100] = true;
  artLabelInternalStrings[ARTL_ART_directive_102] = "directive ::= 'choose'  ID . choosers ";
  artLabelStrings[ARTL_ART_directive_102] = "";
  artlhsL[ARTL_ART_directive_102] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_102] = ARTL_ART_ID;
  artKindOfs[ARTL_ART_directive_102] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_106] = "directive ::= 'choose'  ID choosers .";
  artLabelStrings[ARTL_ART_directive_106] = "";
  artlhsL[ARTL_ART_directive_106] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_106] = ARTL_ART_choosers;
  artKindOfs[ARTL_ART_directive_106] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_106] = true;
  arteoR_pL[ARTL_ART_directive_106] = true;
  artPopD[ARTL_ART_directive_106] = true;
  artLabelInternalStrings[ARTL_ART_directive_108] = "directive ::= . 'prelude'  STRING_BRACE_NEST ";
  artLabelStrings[ARTL_ART_directive_108] = "";
  artlhsL[ARTL_ART_directive_108] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_108] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_109] = "directive ::= 'prelude'  STRING_BRACE_NEST ";
  artLabelStrings[ARTL_ART_directive_109] = "";
  artlhsL[ARTL_ART_directive_109] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_110] = "directive ::= 'prelude'  . STRING_BRACE_NEST ";
  artLabelStrings[ARTL_ART_directive_110] = "";
  artlhsL[ARTL_ART_directive_110] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_110] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_110] = true;
  artLabelInternalStrings[ARTL_ART_directive_112] = "directive ::= 'prelude'  STRING_BRACE_NEST .";
  artLabelStrings[ARTL_ART_directive_112] = "";
  artlhsL[ARTL_ART_directive_112] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_112] = ARTL_ART_STRING_BRACE_NEST;
  artKindOfs[ARTL_ART_directive_112] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_112] = true;
  arteoR_pL[ARTL_ART_directive_112] = true;
  artPopD[ARTL_ART_directive_112] = true;
  artLabelInternalStrings[ARTL_ART_directive_116] = "directive ::= . 'support'  STRING_BRACE_NEST ";
  artLabelStrings[ARTL_ART_directive_116] = "";
  artlhsL[ARTL_ART_directive_116] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_116] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_117] = "directive ::= 'support'  STRING_BRACE_NEST ";
  artLabelStrings[ARTL_ART_directive_117] = "";
  artlhsL[ARTL_ART_directive_117] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_118] = "directive ::= 'support'  . STRING_BRACE_NEST ";
  artLabelStrings[ARTL_ART_directive_118] = "";
  artlhsL[ARTL_ART_directive_118] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_118] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_118] = true;
  artLabelInternalStrings[ARTL_ART_directive_120] = "directive ::= 'support'  STRING_BRACE_NEST .";
  artLabelStrings[ARTL_ART_directive_120] = "";
  artlhsL[ARTL_ART_directive_120] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_120] = ARTL_ART_STRING_BRACE_NEST;
  artKindOfs[ARTL_ART_directive_120] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_120] = true;
  arteoR_pL[ARTL_ART_directive_120] = true;
  artPopD[ARTL_ART_directive_120] = true;
  artLabelInternalStrings[ARTL_ART_directive_124] = "directive ::= . 'verbosity'  INTEGER ";
  artLabelStrings[ARTL_ART_directive_124] = "";
  artlhsL[ARTL_ART_directive_124] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_124] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_125] = "directive ::= 'verbosity'  INTEGER ";
  artLabelStrings[ARTL_ART_directive_125] = "";
  artlhsL[ARTL_ART_directive_125] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_126] = "directive ::= 'verbosity'  . INTEGER ";
  artLabelStrings[ARTL_ART_directive_126] = "";
  artlhsL[ARTL_ART_directive_126] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_126] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_126] = true;
  artLabelInternalStrings[ARTL_ART_directive_128] = "directive ::= 'verbosity'  INTEGER .";
  artLabelStrings[ARTL_ART_directive_128] = "";
  artlhsL[ARTL_ART_directive_128] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_128] = ARTL_ART_INTEGER;
  artKindOfs[ARTL_ART_directive_128] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_128] = true;
  arteoR_pL[ARTL_ART_directive_128] = true;
  artPopD[ARTL_ART_directive_128] = true;
  artLabelInternalStrings[ARTL_ART_directive_132] = "directive ::= . 'trace'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_132] = "";
  artlhsL[ARTL_ART_directive_132] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_132] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_133] = "directive ::= 'trace'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_133] = "";
  artlhsL[ARTL_ART_directive_133] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_134] = "directive ::= 'trace'  . trueFalse ";
  artLabelStrings[ARTL_ART_directive_134] = "";
  artlhsL[ARTL_ART_directive_134] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_134] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_134] = true;
  artLabelInternalStrings[ARTL_ART_directive_136] = "directive ::= 'trace'  trueFalse .";
  artLabelStrings[ARTL_ART_directive_136] = "";
  artlhsL[ARTL_ART_directive_136] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_136] = ARTL_ART_trueFalse;
  artKindOfs[ARTL_ART_directive_136] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_136] = true;
  arteoR_pL[ARTL_ART_directive_136] = true;
  artPopD[ARTL_ART_directive_136] = true;
  artLabelInternalStrings[ARTL_ART_directive_140] = "directive ::= . 'inputPrint'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_140] = "";
  artlhsL[ARTL_ART_directive_140] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_140] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_141] = "directive ::= 'inputPrint'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_141] = "";
  artlhsL[ARTL_ART_directive_141] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_142] = "directive ::= 'inputPrint'  . trueFalse ";
  artLabelStrings[ARTL_ART_directive_142] = "";
  artlhsL[ARTL_ART_directive_142] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_142] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_142] = true;
  artLabelInternalStrings[ARTL_ART_directive_144] = "directive ::= 'inputPrint'  trueFalse .";
  artLabelStrings[ARTL_ART_directive_144] = "";
  artlhsL[ARTL_ART_directive_144] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_144] = ARTL_ART_trueFalse;
  artKindOfs[ARTL_ART_directive_144] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_144] = true;
  arteoR_pL[ARTL_ART_directive_144] = true;
  artPopD[ARTL_ART_directive_144] = true;
  artLabelInternalStrings[ARTL_ART_directive_148] = "directive ::= . 'tweLexicalisations'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_148] = "";
  artlhsL[ARTL_ART_directive_148] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_148] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_149] = "directive ::= 'tweLexicalisations'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_149] = "";
  artlhsL[ARTL_ART_directive_149] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_150] = "directive ::= 'tweLexicalisations'  . trueFalse ";
  artLabelStrings[ARTL_ART_directive_150] = "";
  artlhsL[ARTL_ART_directive_150] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_150] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_150] = true;
  artLabelInternalStrings[ARTL_ART_directive_152] = "directive ::= 'tweLexicalisations'  trueFalse .";
  artLabelStrings[ARTL_ART_directive_152] = "";
  artlhsL[ARTL_ART_directive_152] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_152] = ARTL_ART_trueFalse;
  artKindOfs[ARTL_ART_directive_152] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_152] = true;
  arteoR_pL[ARTL_ART_directive_152] = true;
  artPopD[ARTL_ART_directive_152] = true;
  artLabelInternalStrings[ARTL_ART_directive_156] = "directive ::= . 'tweExtents'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_156] = "";
  artlhsL[ARTL_ART_directive_156] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_156] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_157] = "directive ::= 'tweExtents'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_157] = "";
  artlhsL[ARTL_ART_directive_157] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_158] = "directive ::= 'tweExtents'  . trueFalse ";
  artLabelStrings[ARTL_ART_directive_158] = "";
  artlhsL[ARTL_ART_directive_158] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_158] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_158] = true;
  artLabelInternalStrings[ARTL_ART_directive_160] = "directive ::= 'tweExtents'  trueFalse .";
  artLabelStrings[ARTL_ART_directive_160] = "";
  artlhsL[ARTL_ART_directive_160] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_160] = ARTL_ART_trueFalse;
  artKindOfs[ARTL_ART_directive_160] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_160] = true;
  arteoR_pL[ARTL_ART_directive_160] = true;
  artPopD[ARTL_ART_directive_160] = true;
  artLabelInternalStrings[ARTL_ART_directive_164] = "directive ::= . 'tweSegments'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_164] = "";
  artlhsL[ARTL_ART_directive_164] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_164] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_165] = "directive ::= 'tweSegments'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_165] = "";
  artlhsL[ARTL_ART_directive_165] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_166] = "directive ::= 'tweSegments'  . trueFalse ";
  artLabelStrings[ARTL_ART_directive_166] = "";
  artlhsL[ARTL_ART_directive_166] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_166] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_166] = true;
  artLabelInternalStrings[ARTL_ART_directive_168] = "directive ::= 'tweSegments'  trueFalse .";
  artLabelStrings[ARTL_ART_directive_168] = "";
  artlhsL[ARTL_ART_directive_168] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_168] = ARTL_ART_trueFalse;
  artKindOfs[ARTL_ART_directive_168] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_168] = true;
  arteoR_pL[ARTL_ART_directive_168] = true;
  artPopD[ARTL_ART_directive_168] = true;
  artLabelInternalStrings[ARTL_ART_directive_172] = "directive ::= . 'tweRecursive'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_172] = "";
  artlhsL[ARTL_ART_directive_172] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_172] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_173] = "directive ::= 'tweRecursive'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_173] = "";
  artlhsL[ARTL_ART_directive_173] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_174] = "directive ::= 'tweRecursive'  . trueFalse ";
  artLabelStrings[ARTL_ART_directive_174] = "";
  artlhsL[ARTL_ART_directive_174] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_174] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_174] = true;
  artLabelInternalStrings[ARTL_ART_directive_176] = "directive ::= 'tweRecursive'  trueFalse .";
  artLabelStrings[ARTL_ART_directive_176] = "";
  artlhsL[ARTL_ART_directive_176] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_176] = ARTL_ART_trueFalse;
  artKindOfs[ARTL_ART_directive_176] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_176] = true;
  arteoR_pL[ARTL_ART_directive_176] = true;
  artPopD[ARTL_ART_directive_176] = true;
  artLabelInternalStrings[ARTL_ART_directive_180] = "directive ::= . 'twePrintSummary'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_180] = "";
  artlhsL[ARTL_ART_directive_180] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_180] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_181] = "directive ::= 'twePrintSummary'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_181] = "";
  artlhsL[ARTL_ART_directive_181] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_182] = "directive ::= 'twePrintSummary'  . trueFalse ";
  artLabelStrings[ARTL_ART_directive_182] = "";
  artlhsL[ARTL_ART_directive_182] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_182] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_182] = true;
  artLabelInternalStrings[ARTL_ART_directive_184] = "directive ::= 'twePrintSummary'  trueFalse .";
  artLabelStrings[ARTL_ART_directive_184] = "";
  artlhsL[ARTL_ART_directive_184] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_184] = ARTL_ART_trueFalse;
  artKindOfs[ARTL_ART_directive_184] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_184] = true;
  arteoR_pL[ARTL_ART_directive_184] = true;
  artPopD[ARTL_ART_directive_184] = true;
  artLabelInternalStrings[ARTL_ART_directive_188] = "directive ::= . 'twePrint'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_188] = "";
  artlhsL[ARTL_ART_directive_188] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_188] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_189] = "directive ::= 'twePrint'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_189] = "";
  artlhsL[ARTL_ART_directive_189] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_190] = "directive ::= 'twePrint'  . trueFalse ";
  artLabelStrings[ARTL_ART_directive_190] = "";
  artlhsL[ARTL_ART_directive_190] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_190] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_190] = true;
  artLabelInternalStrings[ARTL_ART_directive_192] = "directive ::= 'twePrint'  trueFalse .";
  artLabelStrings[ARTL_ART_directive_192] = "";
  artlhsL[ARTL_ART_directive_192] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_192] = ARTL_ART_trueFalse;
  artKindOfs[ARTL_ART_directive_192] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_192] = true;
  arteoR_pL[ARTL_ART_directive_192] = true;
  artPopD[ARTL_ART_directive_192] = true;
  artLabelInternalStrings[ARTL_ART_directive_196] = "directive ::= . 'twePrintFull'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_196] = "";
  artlhsL[ARTL_ART_directive_196] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_196] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_197] = "directive ::= 'twePrintFull'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_197] = "";
  artlhsL[ARTL_ART_directive_197] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_198] = "directive ::= 'twePrintFull'  . trueFalse ";
  artLabelStrings[ARTL_ART_directive_198] = "";
  artlhsL[ARTL_ART_directive_198] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_198] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_198] = true;
  artLabelInternalStrings[ARTL_ART_directive_200] = "directive ::= 'twePrintFull'  trueFalse .";
  artLabelStrings[ARTL_ART_directive_200] = "";
  artlhsL[ARTL_ART_directive_200] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_200] = ARTL_ART_trueFalse;
  artKindOfs[ARTL_ART_directive_200] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_200] = true;
  arteoR_pL[ARTL_ART_directive_200] = true;
  artPopD[ARTL_ART_directive_200] = true;
  artLabelInternalStrings[ARTL_ART_directive_204] = "directive ::= . 'tweDead'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_204] = "";
  artlhsL[ARTL_ART_directive_204] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_204] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_205] = "directive ::= 'tweDead'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_205] = "";
  artlhsL[ARTL_ART_directive_205] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_206] = "directive ::= 'tweDead'  . trueFalse ";
  artLabelStrings[ARTL_ART_directive_206] = "";
  artlhsL[ARTL_ART_directive_206] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_206] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_206] = true;
  artLabelInternalStrings[ARTL_ART_directive_208] = "directive ::= 'tweDead'  trueFalse .";
  artLabelStrings[ARTL_ART_directive_208] = "";
  artlhsL[ARTL_ART_directive_208] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_208] = ARTL_ART_trueFalse;
  artKindOfs[ARTL_ART_directive_208] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_208] = true;
  arteoR_pL[ARTL_ART_directive_208] = true;
  artPopD[ARTL_ART_directive_208] = true;
  artLabelInternalStrings[ARTL_ART_directive_212] = "directive ::= . 'tweLongest'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_212] = "";
  artlhsL[ARTL_ART_directive_212] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_212] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_213] = "directive ::= 'tweLongest'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_213] = "";
  artlhsL[ARTL_ART_directive_213] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_214] = "directive ::= 'tweLongest'  . trueFalse ";
  artLabelStrings[ARTL_ART_directive_214] = "";
  artlhsL[ARTL_ART_directive_214] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_214] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_214] = true;
  artLabelInternalStrings[ARTL_ART_directive_216] = "directive ::= 'tweLongest'  trueFalse .";
  artLabelStrings[ARTL_ART_directive_216] = "";
  artlhsL[ARTL_ART_directive_216] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_216] = ARTL_ART_trueFalse;
  artKindOfs[ARTL_ART_directive_216] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_216] = true;
  arteoR_pL[ARTL_ART_directive_216] = true;
  artPopD[ARTL_ART_directive_216] = true;
  artLabelInternalStrings[ARTL_ART_directive_220] = "directive ::= . 'twePriority'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_220] = "";
  artlhsL[ARTL_ART_directive_220] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_220] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_221] = "directive ::= 'twePriority'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_221] = "";
  artlhsL[ARTL_ART_directive_221] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_222] = "directive ::= 'twePriority'  . trueFalse ";
  artLabelStrings[ARTL_ART_directive_222] = "";
  artlhsL[ARTL_ART_directive_222] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_222] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_222] = true;
  artLabelInternalStrings[ARTL_ART_directive_224] = "directive ::= 'twePriority'  trueFalse .";
  artLabelStrings[ARTL_ART_directive_224] = "";
  artlhsL[ARTL_ART_directive_224] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_224] = ARTL_ART_trueFalse;
  artKindOfs[ARTL_ART_directive_224] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_224] = true;
  arteoR_pL[ARTL_ART_directive_224] = true;
  artPopD[ARTL_ART_directive_224] = true;
  artLabelInternalStrings[ARTL_ART_directive_228] = "directive ::= . 'tweShortCircuit'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_228] = "";
  artlhsL[ARTL_ART_directive_228] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_228] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_229] = "directive ::= 'tweShortCircuit'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_229] = "";
  artlhsL[ARTL_ART_directive_229] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_230] = "directive ::= 'tweShortCircuit'  . trueFalse ";
  artLabelStrings[ARTL_ART_directive_230] = "";
  artlhsL[ARTL_ART_directive_230] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_230] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_230] = true;
  artLabelInternalStrings[ARTL_ART_directive_232] = "directive ::= 'tweShortCircuit'  trueFalse .";
  artLabelStrings[ARTL_ART_directive_232] = "";
  artlhsL[ARTL_ART_directive_232] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_232] = ARTL_ART_trueFalse;
  artKindOfs[ARTL_ART_directive_232] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_232] = true;
  arteoR_pL[ARTL_ART_directive_232] = true;
  artPopD[ARTL_ART_directive_232] = true;
  artLabelInternalStrings[ARTL_ART_directive_236] = "directive ::= . 'sppfLongest'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_236] = "";
  artlhsL[ARTL_ART_directive_236] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_236] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_237] = "directive ::= 'sppfLongest'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_237] = "";
  artlhsL[ARTL_ART_directive_237] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_238] = "directive ::= 'sppfLongest'  . trueFalse ";
  artLabelStrings[ARTL_ART_directive_238] = "";
  artlhsL[ARTL_ART_directive_238] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_238] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_238] = true;
  artLabelInternalStrings[ARTL_ART_directive_240] = "directive ::= 'sppfLongest'  trueFalse .";
  artLabelStrings[ARTL_ART_directive_240] = "";
  artlhsL[ARTL_ART_directive_240] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_240] = ARTL_ART_trueFalse;
  artKindOfs[ARTL_ART_directive_240] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_240] = true;
  arteoR_pL[ARTL_ART_directive_240] = true;
  artPopD[ARTL_ART_directive_240] = true;
  artLabelInternalStrings[ARTL_ART_directive_244] = "directive ::= . 'sppfPriority'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_244] = "";
  artlhsL[ARTL_ART_directive_244] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_244] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_245] = "directive ::= 'sppfPriority'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_245] = "";
  artlhsL[ARTL_ART_directive_245] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_246] = "directive ::= 'sppfPriority'  . trueFalse ";
  artLabelStrings[ARTL_ART_directive_246] = "";
  artlhsL[ARTL_ART_directive_246] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_246] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_246] = true;
  artLabelInternalStrings[ARTL_ART_directive_248] = "directive ::= 'sppfPriority'  trueFalse .";
  artLabelStrings[ARTL_ART_directive_248] = "";
  artlhsL[ARTL_ART_directive_248] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_248] = ARTL_ART_trueFalse;
  artKindOfs[ARTL_ART_directive_248] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_248] = true;
  arteoR_pL[ARTL_ART_directive_248] = true;
  artPopD[ARTL_ART_directive_248] = true;
  artLabelInternalStrings[ARTL_ART_directive_252] = "directive ::= . 'tweFromSPPF'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_252] = "";
  artlhsL[ARTL_ART_directive_252] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_252] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_253] = "directive ::= 'tweFromSPPF'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_253] = "";
  artlhsL[ARTL_ART_directive_253] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_254] = "directive ::= 'tweFromSPPF'  . trueFalse ";
  artLabelStrings[ARTL_ART_directive_254] = "";
  artlhsL[ARTL_ART_directive_254] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_254] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_254] = true;
  artLabelInternalStrings[ARTL_ART_directive_256] = "directive ::= 'tweFromSPPF'  trueFalse .";
  artLabelStrings[ARTL_ART_directive_256] = "";
  artlhsL[ARTL_ART_directive_256] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_256] = ARTL_ART_trueFalse;
  artKindOfs[ARTL_ART_directive_256] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_256] = true;
  arteoR_pL[ARTL_ART_directive_256] = true;
  artPopD[ARTL_ART_directive_256] = true;
  artLabelInternalStrings[ARTL_ART_directive_260] = "directive ::= . 'tweTokenWrite'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_260] = "";
  artlhsL[ARTL_ART_directive_260] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_260] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_261] = "directive ::= 'tweTokenWrite'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_261] = "";
  artlhsL[ARTL_ART_directive_261] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_262] = "directive ::= 'tweTokenWrite'  . trueFalse ";
  artLabelStrings[ARTL_ART_directive_262] = "";
  artlhsL[ARTL_ART_directive_262] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_262] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_262] = true;
  artLabelInternalStrings[ARTL_ART_directive_264] = "directive ::= 'tweTokenWrite'  trueFalse .";
  artLabelStrings[ARTL_ART_directive_264] = "";
  artlhsL[ARTL_ART_directive_264] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_264] = ARTL_ART_trueFalse;
  artKindOfs[ARTL_ART_directive_264] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_264] = true;
  arteoR_pL[ARTL_ART_directive_264] = true;
  artPopD[ARTL_ART_directive_264] = true;
  artLabelInternalStrings[ARTL_ART_directive_268] = "directive ::= . 'sppfShow'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_268] = "";
  artlhsL[ARTL_ART_directive_268] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_268] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_269] = "directive ::= 'sppfShow'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_269] = "";
  artlhsL[ARTL_ART_directive_269] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_270] = "directive ::= 'sppfShow'  . trueFalse ";
  artLabelStrings[ARTL_ART_directive_270] = "";
  artlhsL[ARTL_ART_directive_270] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_270] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_270] = true;
  artLabelInternalStrings[ARTL_ART_directive_272] = "directive ::= 'sppfShow'  trueFalse .";
  artLabelStrings[ARTL_ART_directive_272] = "";
  artlhsL[ARTL_ART_directive_272] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_272] = ARTL_ART_trueFalse;
  artKindOfs[ARTL_ART_directive_272] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_272] = true;
  arteoR_pL[ARTL_ART_directive_272] = true;
  artPopD[ARTL_ART_directive_272] = true;
  artLabelInternalStrings[ARTL_ART_directive_276] = "directive ::= . 'gssShow'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_276] = "";
  artlhsL[ARTL_ART_directive_276] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_276] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_277] = "directive ::= 'gssShow'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_277] = "";
  artlhsL[ARTL_ART_directive_277] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_278] = "directive ::= 'gssShow'  . trueFalse ";
  artLabelStrings[ARTL_ART_directive_278] = "";
  artlhsL[ARTL_ART_directive_278] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_278] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_278] = true;
  artLabelInternalStrings[ARTL_ART_directive_280] = "directive ::= 'gssShow'  trueFalse .";
  artLabelStrings[ARTL_ART_directive_280] = "";
  artlhsL[ARTL_ART_directive_280] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_280] = ARTL_ART_trueFalse;
  artKindOfs[ARTL_ART_directive_280] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_280] = true;
  arteoR_pL[ARTL_ART_directive_280] = true;
  artPopD[ARTL_ART_directive_280] = true;
  artLabelInternalStrings[ARTL_ART_directive_284] = "directive ::= . 'treeShow'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_284] = "";
  artlhsL[ARTL_ART_directive_284] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_284] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_285] = "directive ::= 'treeShow'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_285] = "";
  artlhsL[ARTL_ART_directive_285] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_286] = "directive ::= 'treeShow'  . trueFalse ";
  artLabelStrings[ARTL_ART_directive_286] = "";
  artlhsL[ARTL_ART_directive_286] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_286] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_286] = true;
  artLabelInternalStrings[ARTL_ART_directive_288] = "directive ::= 'treeShow'  trueFalse .";
  artLabelStrings[ARTL_ART_directive_288] = "";
  artlhsL[ARTL_ART_directive_288] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_288] = ARTL_ART_trueFalse;
  artKindOfs[ARTL_ART_directive_288] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_288] = true;
  arteoR_pL[ARTL_ART_directive_288] = true;
  artPopD[ARTL_ART_directive_288] = true;
  artLabelInternalStrings[ARTL_ART_directive_292] = "directive ::= . 'treePrint'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_292] = "";
  artlhsL[ARTL_ART_directive_292] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_292] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_293] = "directive ::= 'treePrint'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_293] = "";
  artlhsL[ARTL_ART_directive_293] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_294] = "directive ::= 'treePrint'  . trueFalse ";
  artLabelStrings[ARTL_ART_directive_294] = "";
  artlhsL[ARTL_ART_directive_294] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_294] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_294] = true;
  artLabelInternalStrings[ARTL_ART_directive_296] = "directive ::= 'treePrint'  trueFalse .";
  artLabelStrings[ARTL_ART_directive_296] = "";
  artlhsL[ARTL_ART_directive_296] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_296] = ARTL_ART_trueFalse;
  artKindOfs[ARTL_ART_directive_296] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_296] = true;
  arteoR_pL[ARTL_ART_directive_296] = true;
  artPopD[ARTL_ART_directive_296] = true;
  artLabelInternalStrings[ARTL_ART_directive_300] = "directive ::= . 'termPrint'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_300] = "";
  artlhsL[ARTL_ART_directive_300] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_300] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_301] = "directive ::= 'termPrint'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_301] = "";
  artlhsL[ARTL_ART_directive_301] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_302] = "directive ::= 'termPrint'  . trueFalse ";
  artLabelStrings[ARTL_ART_directive_302] = "";
  artlhsL[ARTL_ART_directive_302] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_302] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_302] = true;
  artLabelInternalStrings[ARTL_ART_directive_304] = "directive ::= 'termPrint'  trueFalse .";
  artLabelStrings[ARTL_ART_directive_304] = "";
  artlhsL[ARTL_ART_directive_304] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_304] = ARTL_ART_trueFalse;
  artKindOfs[ARTL_ART_directive_304] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_304] = true;
  arteoR_pL[ARTL_ART_directive_304] = true;
  artPopD[ARTL_ART_directive_304] = true;
  artLabelInternalStrings[ARTL_ART_directive_308] = "directive ::= . 'termWrite'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_308] = "";
  artlhsL[ARTL_ART_directive_308] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_308] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_309] = "directive ::= 'termWrite'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_309] = "";
  artlhsL[ARTL_ART_directive_309] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_310] = "directive ::= 'termWrite'  . trueFalse ";
  artLabelStrings[ARTL_ART_directive_310] = "";
  artlhsL[ARTL_ART_directive_310] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_310] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_310] = true;
  artLabelInternalStrings[ARTL_ART_directive_312] = "directive ::= 'termWrite'  trueFalse .";
  artLabelStrings[ARTL_ART_directive_312] = "";
  artlhsL[ARTL_ART_directive_312] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_312] = ARTL_ART_trueFalse;
  artKindOfs[ARTL_ART_directive_312] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_312] = true;
  arteoR_pL[ARTL_ART_directive_312] = true;
  artPopD[ARTL_ART_directive_312] = true;
  artLabelInternalStrings[ARTL_ART_directive_316] = "directive ::= . 'parseCounts'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_316] = "";
  artlhsL[ARTL_ART_directive_316] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_316] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_317] = "directive ::= 'parseCounts'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_317] = "";
  artlhsL[ARTL_ART_directive_317] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_318] = "directive ::= 'parseCounts'  . trueFalse ";
  artLabelStrings[ARTL_ART_directive_318] = "";
  artlhsL[ARTL_ART_directive_318] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_318] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_318] = true;
  artLabelInternalStrings[ARTL_ART_directive_320] = "directive ::= 'parseCounts'  trueFalse .";
  artLabelStrings[ARTL_ART_directive_320] = "";
  artlhsL[ARTL_ART_directive_320] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_320] = ARTL_ART_trueFalse;
  artKindOfs[ARTL_ART_directive_320] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_320] = true;
  arteoR_pL[ARTL_ART_directive_320] = true;
  artPopD[ARTL_ART_directive_320] = true;
  artLabelInternalStrings[ARTL_ART_directive_324] = "directive ::= . 'outputDirectory'  STRING_PLAIN_SQ ";
  artLabelStrings[ARTL_ART_directive_324] = "";
  artlhsL[ARTL_ART_directive_324] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_324] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_325] = "directive ::= 'outputDirectory'  STRING_PLAIN_SQ ";
  artLabelStrings[ARTL_ART_directive_325] = "";
  artlhsL[ARTL_ART_directive_325] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_326] = "directive ::= 'outputDirectory'  . STRING_PLAIN_SQ ";
  artLabelStrings[ARTL_ART_directive_326] = "";
  artlhsL[ARTL_ART_directive_326] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_326] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_326] = true;
  artLabelInternalStrings[ARTL_ART_directive_328] = "directive ::= 'outputDirectory'  STRING_PLAIN_SQ .";
  artLabelStrings[ARTL_ART_directive_328] = "";
  artlhsL[ARTL_ART_directive_328] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_328] = ARTL_ART_STRING_PLAIN_SQ;
  artKindOfs[ARTL_ART_directive_328] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_328] = true;
  arteoR_pL[ARTL_ART_directive_328] = true;
  artPopD[ARTL_ART_directive_328] = true;
  artLabelInternalStrings[ARTL_ART_directive_332] = "directive ::= . 'namespace'  STRING_PLAIN_SQ ";
  artLabelStrings[ARTL_ART_directive_332] = "";
  artlhsL[ARTL_ART_directive_332] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_332] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_333] = "directive ::= 'namespace'  STRING_PLAIN_SQ ";
  artLabelStrings[ARTL_ART_directive_333] = "";
  artlhsL[ARTL_ART_directive_333] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_334] = "directive ::= 'namespace'  . STRING_PLAIN_SQ ";
  artLabelStrings[ARTL_ART_directive_334] = "";
  artlhsL[ARTL_ART_directive_334] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_334] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_334] = true;
  artLabelInternalStrings[ARTL_ART_directive_336] = "directive ::= 'namespace'  STRING_PLAIN_SQ .";
  artLabelStrings[ARTL_ART_directive_336] = "";
  artlhsL[ARTL_ART_directive_336] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_336] = ARTL_ART_STRING_PLAIN_SQ;
  artKindOfs[ARTL_ART_directive_336] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_336] = true;
  arteoR_pL[ARTL_ART_directive_336] = true;
  artPopD[ARTL_ART_directive_336] = true;
  artLabelInternalStrings[ARTL_ART_directive_340] = "directive ::= . 'lexerName'  STRING_PLAIN_SQ ";
  artLabelStrings[ARTL_ART_directive_340] = "";
  artlhsL[ARTL_ART_directive_340] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_340] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_341] = "directive ::= 'lexerName'  STRING_PLAIN_SQ ";
  artLabelStrings[ARTL_ART_directive_341] = "";
  artlhsL[ARTL_ART_directive_341] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_342] = "directive ::= 'lexerName'  . STRING_PLAIN_SQ ";
  artLabelStrings[ARTL_ART_directive_342] = "";
  artlhsL[ARTL_ART_directive_342] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_342] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_342] = true;
  artLabelInternalStrings[ARTL_ART_directive_344] = "directive ::= 'lexerName'  STRING_PLAIN_SQ .";
  artLabelStrings[ARTL_ART_directive_344] = "";
  artlhsL[ARTL_ART_directive_344] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_344] = ARTL_ART_STRING_PLAIN_SQ;
  artKindOfs[ARTL_ART_directive_344] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_344] = true;
  arteoR_pL[ARTL_ART_directive_344] = true;
  artPopD[ARTL_ART_directive_344] = true;
  artLabelInternalStrings[ARTL_ART_directive_348] = "directive ::= . 'parserName'  STRING_PLAIN_SQ ";
  artLabelStrings[ARTL_ART_directive_348] = "";
  artlhsL[ARTL_ART_directive_348] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_348] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_349] = "directive ::= 'parserName'  STRING_PLAIN_SQ ";
  artLabelStrings[ARTL_ART_directive_349] = "";
  artlhsL[ARTL_ART_directive_349] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_350] = "directive ::= 'parserName'  . STRING_PLAIN_SQ ";
  artLabelStrings[ARTL_ART_directive_350] = "";
  artlhsL[ARTL_ART_directive_350] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_350] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_350] = true;
  artLabelInternalStrings[ARTL_ART_directive_352] = "directive ::= 'parserName'  STRING_PLAIN_SQ .";
  artLabelStrings[ARTL_ART_directive_352] = "";
  artlhsL[ARTL_ART_directive_352] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_352] = ARTL_ART_STRING_PLAIN_SQ;
  artKindOfs[ARTL_ART_directive_352] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_352] = true;
  arteoR_pL[ARTL_ART_directive_352] = true;
  artPopD[ARTL_ART_directive_352] = true;
  artLabelInternalStrings[ARTL_ART_directive_356] = "directive ::= . 'generateDynamic'  ";
  artLabelStrings[ARTL_ART_directive_356] = "";
  artlhsL[ARTL_ART_directive_356] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_356] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_356] = true;
  artLabelInternalStrings[ARTL_ART_directive_357] = "directive ::= 'generateDynamic'  ";
  artLabelStrings[ARTL_ART_directive_357] = "";
  artlhsL[ARTL_ART_directive_357] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_357] = true;
  artLabelInternalStrings[ARTL_ART_directive_358] = "directive ::= 'generateDynamic'  .";
  artLabelStrings[ARTL_ART_directive_358] = "";
  artlhsL[ARTL_ART_directive_358] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_358] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_358] = true;
  arteoR_pL[ARTL_ART_directive_358] = true;
  artPopD[ARTL_ART_directive_358] = true;
  artLabelInternalStrings[ARTL_ART_directive_362] = "directive ::= . 'generateStatic'  ";
  artLabelStrings[ARTL_ART_directive_362] = "";
  artlhsL[ARTL_ART_directive_362] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_362] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_362] = true;
  artLabelInternalStrings[ARTL_ART_directive_363] = "directive ::= 'generateStatic'  ";
  artLabelStrings[ARTL_ART_directive_363] = "";
  artlhsL[ARTL_ART_directive_363] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_363] = true;
  artLabelInternalStrings[ARTL_ART_directive_364] = "directive ::= 'generateStatic'  .";
  artLabelStrings[ARTL_ART_directive_364] = "";
  artlhsL[ARTL_ART_directive_364] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_364] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_364] = true;
  arteoR_pL[ARTL_ART_directive_364] = true;
  artPopD[ARTL_ART_directive_364] = true;
  artLabelInternalStrings[ARTL_ART_directive_368] = "directive ::= . 'generateState'  ";
  artLabelStrings[ARTL_ART_directive_368] = "";
  artlhsL[ARTL_ART_directive_368] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_368] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_368] = true;
  artLabelInternalStrings[ARTL_ART_directive_369] = "directive ::= 'generateState'  ";
  artLabelStrings[ARTL_ART_directive_369] = "";
  artlhsL[ARTL_ART_directive_369] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_369] = true;
  artLabelInternalStrings[ARTL_ART_directive_370] = "directive ::= 'generateState'  .";
  artLabelStrings[ARTL_ART_directive_370] = "";
  artlhsL[ARTL_ART_directive_370] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_370] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_370] = true;
  arteoR_pL[ARTL_ART_directive_370] = true;
  artPopD[ARTL_ART_directive_370] = true;
  artLabelInternalStrings[ARTL_ART_directive_374] = "directive ::= . 'generateFragment'  ";
  artLabelStrings[ARTL_ART_directive_374] = "";
  artlhsL[ARTL_ART_directive_374] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_374] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_374] = true;
  artLabelInternalStrings[ARTL_ART_directive_375] = "directive ::= 'generateFragment'  ";
  artLabelStrings[ARTL_ART_directive_375] = "";
  artlhsL[ARTL_ART_directive_375] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_375] = true;
  artLabelInternalStrings[ARTL_ART_directive_376] = "directive ::= 'generateFragment'  .";
  artLabelStrings[ARTL_ART_directive_376] = "";
  artlhsL[ARTL_ART_directive_376] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_376] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_376] = true;
  arteoR_pL[ARTL_ART_directive_376] = true;
  artPopD[ARTL_ART_directive_376] = true;
  artLabelInternalStrings[ARTL_ART_directive_380] = "directive ::= . 'generatePool'  ";
  artLabelStrings[ARTL_ART_directive_380] = "";
  artlhsL[ARTL_ART_directive_380] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_380] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_380] = true;
  artLabelInternalStrings[ARTL_ART_directive_381] = "directive ::= 'generatePool'  ";
  artLabelStrings[ARTL_ART_directive_381] = "";
  artlhsL[ARTL_ART_directive_381] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_381] = true;
  artLabelInternalStrings[ARTL_ART_directive_382] = "directive ::= 'generatePool'  .";
  artLabelStrings[ARTL_ART_directive_382] = "";
  artlhsL[ARTL_ART_directive_382] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_382] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_382] = true;
  arteoR_pL[ARTL_ART_directive_382] = true;
  artPopD[ARTL_ART_directive_382] = true;
  artLabelInternalStrings[ARTL_ART_directive_386] = "directive ::= . 'predictivePops'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_386] = "";
  artlhsL[ARTL_ART_directive_386] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_386] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_387] = "directive ::= 'predictivePops'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_387] = "";
  artlhsL[ARTL_ART_directive_387] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_388] = "directive ::= 'predictivePops'  . trueFalse ";
  artLabelStrings[ARTL_ART_directive_388] = "";
  artlhsL[ARTL_ART_directive_388] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_388] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_388] = true;
  artLabelInternalStrings[ARTL_ART_directive_390] = "directive ::= 'predictivePops'  trueFalse .";
  artLabelStrings[ARTL_ART_directive_390] = "";
  artlhsL[ARTL_ART_directive_390] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_390] = ARTL_ART_trueFalse;
  artKindOfs[ARTL_ART_directive_390] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_390] = true;
  arteoR_pL[ARTL_ART_directive_390] = true;
  artPopD[ARTL_ART_directive_390] = true;
  artLabelInternalStrings[ARTL_ART_directive_394] = "directive ::= . 'FIFODescriptors'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_394] = "";
  artlhsL[ARTL_ART_directive_394] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_394] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_395] = "directive ::= 'FIFODescriptors'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_395] = "";
  artlhsL[ARTL_ART_directive_395] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_396] = "directive ::= 'FIFODescriptors'  . trueFalse ";
  artLabelStrings[ARTL_ART_directive_396] = "";
  artlhsL[ARTL_ART_directive_396] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_396] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_396] = true;
  artLabelInternalStrings[ARTL_ART_directive_398] = "directive ::= 'FIFODescriptors'  trueFalse .";
  artLabelStrings[ARTL_ART_directive_398] = "";
  artlhsL[ARTL_ART_directive_398] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_398] = ARTL_ART_trueFalse;
  artKindOfs[ARTL_ART_directive_398] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_398] = true;
  arteoR_pL[ARTL_ART_directive_398] = true;
  artPopD[ARTL_ART_directive_398] = true;
  artLabelInternalStrings[ARTL_ART_directive_402] = "directive ::= . 'suppressPopGuard'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_402] = "";
  artlhsL[ARTL_ART_directive_402] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_402] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_403] = "directive ::= 'suppressPopGuard'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_403] = "";
  artlhsL[ARTL_ART_directive_403] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_404] = "directive ::= 'suppressPopGuard'  . trueFalse ";
  artLabelStrings[ARTL_ART_directive_404] = "";
  artlhsL[ARTL_ART_directive_404] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_404] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_404] = true;
  artLabelInternalStrings[ARTL_ART_directive_406] = "directive ::= 'suppressPopGuard'  trueFalse .";
  artLabelStrings[ARTL_ART_directive_406] = "";
  artlhsL[ARTL_ART_directive_406] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_406] = ARTL_ART_trueFalse;
  artKindOfs[ARTL_ART_directive_406] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_406] = true;
  arteoR_pL[ARTL_ART_directive_406] = true;
  artPopD[ARTL_ART_directive_406] = true;
  artLabelInternalStrings[ARTL_ART_directive_410] = "directive ::= . 'suppressProductionGuard'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_410] = "";
  artlhsL[ARTL_ART_directive_410] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_410] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_411] = "directive ::= 'suppressProductionGuard'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_411] = "";
  artlhsL[ARTL_ART_directive_411] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_412] = "directive ::= 'suppressProductionGuard'  . trueFalse ";
  artLabelStrings[ARTL_ART_directive_412] = "";
  artlhsL[ARTL_ART_directive_412] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_412] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_412] = true;
  artLabelInternalStrings[ARTL_ART_directive_414] = "directive ::= 'suppressProductionGuard'  trueFalse .";
  artLabelStrings[ARTL_ART_directive_414] = "";
  artlhsL[ARTL_ART_directive_414] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_414] = ARTL_ART_trueFalse;
  artKindOfs[ARTL_ART_directive_414] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_414] = true;
  arteoR_pL[ARTL_ART_directive_414] = true;
  artPopD[ARTL_ART_directive_414] = true;
  artLabelInternalStrings[ARTL_ART_directive_418] = "directive ::= . 'suppressTestRepeat'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_418] = "";
  artlhsL[ARTL_ART_directive_418] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_418] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_419] = "directive ::= 'suppressTestRepeat'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_419] = "";
  artlhsL[ARTL_ART_directive_419] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_420] = "directive ::= 'suppressTestRepeat'  . trueFalse ";
  artLabelStrings[ARTL_ART_directive_420] = "";
  artlhsL[ARTL_ART_directive_420] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_420] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_420] = true;
  artLabelInternalStrings[ARTL_ART_directive_422] = "directive ::= 'suppressTestRepeat'  trueFalse .";
  artLabelStrings[ARTL_ART_directive_422] = "";
  artlhsL[ARTL_ART_directive_422] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_422] = ARTL_ART_trueFalse;
  artKindOfs[ARTL_ART_directive_422] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_422] = true;
  arteoR_pL[ARTL_ART_directive_422] = true;
  artPopD[ARTL_ART_directive_422] = true;
  artLabelInternalStrings[ARTL_ART_directive_426] = "directive ::= . 'suppressSemantics'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_426] = "";
  artlhsL[ARTL_ART_directive_426] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_426] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_427] = "directive ::= 'suppressSemantics'  trueFalse ";
  artLabelStrings[ARTL_ART_directive_427] = "";
  artlhsL[ARTL_ART_directive_427] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_428] = "directive ::= 'suppressSemantics'  . trueFalse ";
  artLabelStrings[ARTL_ART_directive_428] = "";
  artlhsL[ARTL_ART_directive_428] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_428] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_428] = true;
  artLabelInternalStrings[ARTL_ART_directive_430] = "directive ::= 'suppressSemantics'  trueFalse .";
  artLabelStrings[ARTL_ART_directive_430] = "";
  artlhsL[ARTL_ART_directive_430] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_430] = ARTL_ART_trueFalse;
  artKindOfs[ARTL_ART_directive_430] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_430] = true;
  arteoR_pL[ARTL_ART_directive_430] = true;
  artPopD[ARTL_ART_directive_430] = true;
  artLabelInternalStrings[ARTL_ART_directive_434] = "directive ::= . 'lexerData'  ";
  artLabelStrings[ARTL_ART_directive_434] = "";
  artlhsL[ARTL_ART_directive_434] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_434] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_434] = true;
  artLabelInternalStrings[ARTL_ART_directive_435] = "directive ::= 'lexerData'  ";
  artLabelStrings[ARTL_ART_directive_435] = "";
  artlhsL[ARTL_ART_directive_435] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_435] = true;
  artLabelInternalStrings[ARTL_ART_directive_436] = "directive ::= 'lexerData'  .";
  artLabelStrings[ARTL_ART_directive_436] = "";
  artlhsL[ARTL_ART_directive_436] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_436] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_436] = true;
  arteoR_pL[ARTL_ART_directive_436] = true;
  artPopD[ARTL_ART_directive_436] = true;
  artLabelInternalStrings[ARTL_ART_directive_440] = "directive ::= . 'lexDFA'  ";
  artLabelStrings[ARTL_ART_directive_440] = "";
  artlhsL[ARTL_ART_directive_440] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_440] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_440] = true;
  artLabelInternalStrings[ARTL_ART_directive_441] = "directive ::= 'lexDFA'  ";
  artLabelStrings[ARTL_ART_directive_441] = "";
  artlhsL[ARTL_ART_directive_441] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_441] = true;
  artLabelInternalStrings[ARTL_ART_directive_442] = "directive ::= 'lexDFA'  .";
  artLabelStrings[ARTL_ART_directive_442] = "";
  artlhsL[ARTL_ART_directive_442] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_442] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_442] = true;
  arteoR_pL[ARTL_ART_directive_442] = true;
  artPopD[ARTL_ART_directive_442] = true;
  artLabelInternalStrings[ARTL_ART_directive_446] = "directive ::= . 'earley'  ";
  artLabelStrings[ARTL_ART_directive_446] = "";
  artlhsL[ARTL_ART_directive_446] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_446] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_446] = true;
  artLabelInternalStrings[ARTL_ART_directive_447] = "directive ::= 'earley'  ";
  artLabelStrings[ARTL_ART_directive_447] = "";
  artlhsL[ARTL_ART_directive_447] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_447] = true;
  artLabelInternalStrings[ARTL_ART_directive_448] = "directive ::= 'earley'  .";
  artLabelStrings[ARTL_ART_directive_448] = "";
  artlhsL[ARTL_ART_directive_448] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_448] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_448] = true;
  arteoR_pL[ARTL_ART_directive_448] = true;
  artPopD[ARTL_ART_directive_448] = true;
  artLabelInternalStrings[ARTL_ART_directive_452] = "directive ::= . 'earley2007LinkedAPI'  ";
  artLabelStrings[ARTL_ART_directive_452] = "";
  artlhsL[ARTL_ART_directive_452] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_452] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_452] = true;
  artLabelInternalStrings[ARTL_ART_directive_453] = "directive ::= 'earley2007LinkedAPI'  ";
  artLabelStrings[ARTL_ART_directive_453] = "";
  artlhsL[ARTL_ART_directive_453] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_453] = true;
  artLabelInternalStrings[ARTL_ART_directive_454] = "directive ::= 'earley2007LinkedAPI'  .";
  artLabelStrings[ARTL_ART_directive_454] = "";
  artlhsL[ARTL_ART_directive_454] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_454] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_454] = true;
  arteoR_pL[ARTL_ART_directive_454] = true;
  artPopD[ARTL_ART_directive_454] = true;
  artLabelInternalStrings[ARTL_ART_directive_458] = "directive ::= . 'earleyLinkedAPI'  ";
  artLabelStrings[ARTL_ART_directive_458] = "";
  artlhsL[ARTL_ART_directive_458] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_458] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_458] = true;
  artLabelInternalStrings[ARTL_ART_directive_459] = "directive ::= 'earleyLinkedAPI'  ";
  artLabelStrings[ARTL_ART_directive_459] = "";
  artlhsL[ARTL_ART_directive_459] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_459] = true;
  artLabelInternalStrings[ARTL_ART_directive_460] = "directive ::= 'earleyLinkedAPI'  .";
  artLabelStrings[ARTL_ART_directive_460] = "";
  artlhsL[ARTL_ART_directive_460] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_460] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_460] = true;
  arteoR_pL[ARTL_ART_directive_460] = true;
  artPopD[ARTL_ART_directive_460] = true;
  artLabelInternalStrings[ARTL_ART_directive_464] = "directive ::= . 'earleyIndexedAPI'  ";
  artLabelStrings[ARTL_ART_directive_464] = "";
  artlhsL[ARTL_ART_directive_464] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_464] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_464] = true;
  artLabelInternalStrings[ARTL_ART_directive_465] = "directive ::= 'earleyIndexedAPI'  ";
  artLabelStrings[ARTL_ART_directive_465] = "";
  artlhsL[ARTL_ART_directive_465] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_465] = true;
  artLabelInternalStrings[ARTL_ART_directive_466] = "directive ::= 'earleyIndexedAPI'  .";
  artLabelStrings[ARTL_ART_directive_466] = "";
  artlhsL[ARTL_ART_directive_466] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_466] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_466] = true;
  arteoR_pL[ARTL_ART_directive_466] = true;
  artPopD[ARTL_ART_directive_466] = true;
  artLabelInternalStrings[ARTL_ART_directive_470] = "directive ::= . 'earleyIndexedPool'  ";
  artLabelStrings[ARTL_ART_directive_470] = "";
  artlhsL[ARTL_ART_directive_470] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_470] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_470] = true;
  artLabelInternalStrings[ARTL_ART_directive_471] = "directive ::= 'earleyIndexedPool'  ";
  artLabelStrings[ARTL_ART_directive_471] = "";
  artlhsL[ARTL_ART_directive_471] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_471] = true;
  artLabelInternalStrings[ARTL_ART_directive_472] = "directive ::= 'earleyIndexedPool'  .";
  artLabelStrings[ARTL_ART_directive_472] = "";
  artlhsL[ARTL_ART_directive_472] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_472] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_472] = true;
  arteoR_pL[ARTL_ART_directive_472] = true;
  artPopD[ARTL_ART_directive_472] = true;
  artLabelInternalStrings[ARTL_ART_directive_476] = "directive ::= . 'earleyIndexedData'  ";
  artLabelStrings[ARTL_ART_directive_476] = "";
  artlhsL[ARTL_ART_directive_476] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_476] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_476] = true;
  artLabelInternalStrings[ARTL_ART_directive_477] = "directive ::= 'earleyIndexedData'  ";
  artLabelStrings[ARTL_ART_directive_477] = "";
  artlhsL[ARTL_ART_directive_477] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_477] = true;
  artLabelInternalStrings[ARTL_ART_directive_478] = "directive ::= 'earleyIndexedData'  .";
  artLabelStrings[ARTL_ART_directive_478] = "";
  artlhsL[ARTL_ART_directive_478] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_478] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_478] = true;
  arteoR_pL[ARTL_ART_directive_478] = true;
  artPopD[ARTL_ART_directive_478] = true;
  artLabelInternalStrings[ARTL_ART_directive_482] = "directive ::= . 'earleyTable'  ";
  artLabelStrings[ARTL_ART_directive_482] = "";
  artlhsL[ARTL_ART_directive_482] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_482] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_482] = true;
  artLabelInternalStrings[ARTL_ART_directive_483] = "directive ::= 'earleyTable'  ";
  artLabelStrings[ARTL_ART_directive_483] = "";
  artlhsL[ARTL_ART_directive_483] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_483] = true;
  artLabelInternalStrings[ARTL_ART_directive_484] = "directive ::= 'earleyTable'  .";
  artLabelStrings[ARTL_ART_directive_484] = "";
  artlhsL[ARTL_ART_directive_484] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_484] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_484] = true;
  arteoR_pL[ARTL_ART_directive_484] = true;
  artPopD[ARTL_ART_directive_484] = true;
  artLabelInternalStrings[ARTL_ART_directive_488] = "directive ::= . 'earleyTableLinkedAPI'  ";
  artLabelStrings[ARTL_ART_directive_488] = "";
  artlhsL[ARTL_ART_directive_488] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_488] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_488] = true;
  artLabelInternalStrings[ARTL_ART_directive_489] = "directive ::= 'earleyTableLinkedAPI'  ";
  artLabelStrings[ARTL_ART_directive_489] = "";
  artlhsL[ARTL_ART_directive_489] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_489] = true;
  artLabelInternalStrings[ARTL_ART_directive_490] = "directive ::= 'earleyTableLinkedAPI'  .";
  artLabelStrings[ARTL_ART_directive_490] = "";
  artlhsL[ARTL_ART_directive_490] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_490] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_490] = true;
  arteoR_pL[ARTL_ART_directive_490] = true;
  artPopD[ARTL_ART_directive_490] = true;
  artLabelInternalStrings[ARTL_ART_directive_494] = "directive ::= . 'earleyTableIndexedAPI'  ";
  artLabelStrings[ARTL_ART_directive_494] = "";
  artlhsL[ARTL_ART_directive_494] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_494] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_494] = true;
  artLabelInternalStrings[ARTL_ART_directive_495] = "directive ::= 'earleyTableIndexedAPI'  ";
  artLabelStrings[ARTL_ART_directive_495] = "";
  artlhsL[ARTL_ART_directive_495] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_495] = true;
  artLabelInternalStrings[ARTL_ART_directive_496] = "directive ::= 'earleyTableIndexedAPI'  .";
  artLabelStrings[ARTL_ART_directive_496] = "";
  artlhsL[ARTL_ART_directive_496] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_496] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_496] = true;
  arteoR_pL[ARTL_ART_directive_496] = true;
  artPopD[ARTL_ART_directive_496] = true;
  artLabelInternalStrings[ARTL_ART_directive_500] = "directive ::= . 'earleyTableIndexedPool'  ";
  artLabelStrings[ARTL_ART_directive_500] = "";
  artlhsL[ARTL_ART_directive_500] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_500] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_500] = true;
  artLabelInternalStrings[ARTL_ART_directive_501] = "directive ::= 'earleyTableIndexedPool'  ";
  artLabelStrings[ARTL_ART_directive_501] = "";
  artlhsL[ARTL_ART_directive_501] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_501] = true;
  artLabelInternalStrings[ARTL_ART_directive_502] = "directive ::= 'earleyTableIndexedPool'  .";
  artLabelStrings[ARTL_ART_directive_502] = "";
  artlhsL[ARTL_ART_directive_502] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_502] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_502] = true;
  arteoR_pL[ARTL_ART_directive_502] = true;
  artPopD[ARTL_ART_directive_502] = true;
  artLabelInternalStrings[ARTL_ART_directive_506] = "directive ::= . 'earleyTableIndexedData'  ";
  artLabelStrings[ARTL_ART_directive_506] = "";
  artlhsL[ARTL_ART_directive_506] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_506] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_506] = true;
  artLabelInternalStrings[ARTL_ART_directive_507] = "directive ::= 'earleyTableIndexedData'  ";
  artLabelStrings[ARTL_ART_directive_507] = "";
  artlhsL[ARTL_ART_directive_507] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_507] = true;
  artLabelInternalStrings[ARTL_ART_directive_508] = "directive ::= 'earleyTableIndexedData'  .";
  artLabelStrings[ARTL_ART_directive_508] = "";
  artlhsL[ARTL_ART_directive_508] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_508] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_508] = true;
  arteoR_pL[ARTL_ART_directive_508] = true;
  artPopD[ARTL_ART_directive_508] = true;
  artLabelInternalStrings[ARTL_ART_directive_512] = "directive ::= . 'cnp'  ";
  artLabelStrings[ARTL_ART_directive_512] = "";
  artlhsL[ARTL_ART_directive_512] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_512] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_512] = true;
  artLabelInternalStrings[ARTL_ART_directive_513] = "directive ::= 'cnp'  ";
  artLabelStrings[ARTL_ART_directive_513] = "";
  artlhsL[ARTL_ART_directive_513] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_513] = true;
  artLabelInternalStrings[ARTL_ART_directive_514] = "directive ::= 'cnp'  .";
  artLabelStrings[ARTL_ART_directive_514] = "";
  artlhsL[ARTL_ART_directive_514] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_514] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_514] = true;
  arteoR_pL[ARTL_ART_directive_514] = true;
  artPopD[ARTL_ART_directive_514] = true;
  artLabelInternalStrings[ARTL_ART_directive_518] = "directive ::= . 'cnpLinkedAPI'  ";
  artLabelStrings[ARTL_ART_directive_518] = "";
  artlhsL[ARTL_ART_directive_518] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_518] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_518] = true;
  artLabelInternalStrings[ARTL_ART_directive_519] = "directive ::= 'cnpLinkedAPI'  ";
  artLabelStrings[ARTL_ART_directive_519] = "";
  artlhsL[ARTL_ART_directive_519] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_519] = true;
  artLabelInternalStrings[ARTL_ART_directive_520] = "directive ::= 'cnpLinkedAPI'  .";
  artLabelStrings[ARTL_ART_directive_520] = "";
  artlhsL[ARTL_ART_directive_520] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_520] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_520] = true;
  arteoR_pL[ARTL_ART_directive_520] = true;
  artPopD[ARTL_ART_directive_520] = true;
  artLabelInternalStrings[ARTL_ART_directive_524] = "directive ::= . 'cnpIndexedAPI'  ";
  artLabelStrings[ARTL_ART_directive_524] = "";
  artlhsL[ARTL_ART_directive_524] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_524] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_524] = true;
  artLabelInternalStrings[ARTL_ART_directive_525] = "directive ::= 'cnpIndexedAPI'  ";
  artLabelStrings[ARTL_ART_directive_525] = "";
  artlhsL[ARTL_ART_directive_525] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_525] = true;
  artLabelInternalStrings[ARTL_ART_directive_526] = "directive ::= 'cnpIndexedAPI'  .";
  artLabelStrings[ARTL_ART_directive_526] = "";
  artlhsL[ARTL_ART_directive_526] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_526] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_526] = true;
  arteoR_pL[ARTL_ART_directive_526] = true;
  artPopD[ARTL_ART_directive_526] = true;
  artLabelInternalStrings[ARTL_ART_directive_530] = "directive ::= . 'cnpIndexedPool'  ";
  artLabelStrings[ARTL_ART_directive_530] = "";
  artlhsL[ARTL_ART_directive_530] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_530] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_530] = true;
  artLabelInternalStrings[ARTL_ART_directive_531] = "directive ::= 'cnpIndexedPool'  ";
  artLabelStrings[ARTL_ART_directive_531] = "";
  artlhsL[ARTL_ART_directive_531] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_531] = true;
  artLabelInternalStrings[ARTL_ART_directive_532] = "directive ::= 'cnpIndexedPool'  .";
  artLabelStrings[ARTL_ART_directive_532] = "";
  artlhsL[ARTL_ART_directive_532] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_532] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_532] = true;
  arteoR_pL[ARTL_ART_directive_532] = true;
  artPopD[ARTL_ART_directive_532] = true;
  artLabelInternalStrings[ARTL_ART_directive_536] = "directive ::= . 'cnpGeneratorPool'  ";
  artLabelStrings[ARTL_ART_directive_536] = "";
  artlhsL[ARTL_ART_directive_536] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_536] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_536] = true;
  artLabelInternalStrings[ARTL_ART_directive_537] = "directive ::= 'cnpGeneratorPool'  ";
  artLabelStrings[ARTL_ART_directive_537] = "";
  artlhsL[ARTL_ART_directive_537] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_537] = true;
  artLabelInternalStrings[ARTL_ART_directive_538] = "directive ::= 'cnpGeneratorPool'  .";
  artLabelStrings[ARTL_ART_directive_538] = "";
  artlhsL[ARTL_ART_directive_538] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_538] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_538] = true;
  arteoR_pL[ARTL_ART_directive_538] = true;
  artPopD[ARTL_ART_directive_538] = true;
  artLabelInternalStrings[ARTL_ART_directive_542] = "directive ::= . 'lcnp'  ";
  artLabelStrings[ARTL_ART_directive_542] = "";
  artlhsL[ARTL_ART_directive_542] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_542] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_542] = true;
  artLabelInternalStrings[ARTL_ART_directive_543] = "directive ::= 'lcnp'  ";
  artLabelStrings[ARTL_ART_directive_543] = "";
  artlhsL[ARTL_ART_directive_543] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_543] = true;
  artLabelInternalStrings[ARTL_ART_directive_544] = "directive ::= 'lcnp'  .";
  artLabelStrings[ARTL_ART_directive_544] = "";
  artlhsL[ARTL_ART_directive_544] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_544] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_544] = true;
  arteoR_pL[ARTL_ART_directive_544] = true;
  artPopD[ARTL_ART_directive_544] = true;
  artLabelInternalStrings[ARTL_ART_directive_548] = "directive ::= . 'lcnpLinkedAPI'  ";
  artLabelStrings[ARTL_ART_directive_548] = "";
  artlhsL[ARTL_ART_directive_548] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_548] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_548] = true;
  artLabelInternalStrings[ARTL_ART_directive_549] = "directive ::= 'lcnpLinkedAPI'  ";
  artLabelStrings[ARTL_ART_directive_549] = "";
  artlhsL[ARTL_ART_directive_549] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_549] = true;
  artLabelInternalStrings[ARTL_ART_directive_550] = "directive ::= 'lcnpLinkedAPI'  .";
  artLabelStrings[ARTL_ART_directive_550] = "";
  artlhsL[ARTL_ART_directive_550] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_550] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_550] = true;
  arteoR_pL[ARTL_ART_directive_550] = true;
  artPopD[ARTL_ART_directive_550] = true;
  artLabelInternalStrings[ARTL_ART_directive_554] = "directive ::= . 'lcnpIndexedAPI'  ";
  artLabelStrings[ARTL_ART_directive_554] = "";
  artlhsL[ARTL_ART_directive_554] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_554] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_554] = true;
  artLabelInternalStrings[ARTL_ART_directive_555] = "directive ::= 'lcnpIndexedAPI'  ";
  artLabelStrings[ARTL_ART_directive_555] = "";
  artlhsL[ARTL_ART_directive_555] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_555] = true;
  artLabelInternalStrings[ARTL_ART_directive_556] = "directive ::= 'lcnpIndexedAPI'  .";
  artLabelStrings[ARTL_ART_directive_556] = "";
  artlhsL[ARTL_ART_directive_556] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_556] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_556] = true;
  arteoR_pL[ARTL_ART_directive_556] = true;
  artPopD[ARTL_ART_directive_556] = true;
  artLabelInternalStrings[ARTL_ART_directive_560] = "directive ::= . 'lcnpIndexedPool'  ";
  artLabelStrings[ARTL_ART_directive_560] = "";
  artlhsL[ARTL_ART_directive_560] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_560] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_560] = true;
  artLabelInternalStrings[ARTL_ART_directive_561] = "directive ::= 'lcnpIndexedPool'  ";
  artLabelStrings[ARTL_ART_directive_561] = "";
  artlhsL[ARTL_ART_directive_561] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_561] = true;
  artLabelInternalStrings[ARTL_ART_directive_562] = "directive ::= 'lcnpIndexedPool'  .";
  artLabelStrings[ARTL_ART_directive_562] = "";
  artlhsL[ARTL_ART_directive_562] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_562] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_562] = true;
  arteoR_pL[ARTL_ART_directive_562] = true;
  artPopD[ARTL_ART_directive_562] = true;
  artLabelInternalStrings[ARTL_ART_directive_566] = "directive ::= . 'lcnpGeneratorPool'  ";
  artLabelStrings[ARTL_ART_directive_566] = "";
  artlhsL[ARTL_ART_directive_566] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_566] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_566] = true;
  artLabelInternalStrings[ARTL_ART_directive_567] = "directive ::= 'lcnpGeneratorPool'  ";
  artLabelStrings[ARTL_ART_directive_567] = "";
  artlhsL[ARTL_ART_directive_567] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_567] = true;
  artLabelInternalStrings[ARTL_ART_directive_568] = "directive ::= 'lcnpGeneratorPool'  .";
  artLabelStrings[ARTL_ART_directive_568] = "";
  artlhsL[ARTL_ART_directive_568] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_568] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_568] = true;
  arteoR_pL[ARTL_ART_directive_568] = true;
  artPopD[ARTL_ART_directive_568] = true;
  artLabelInternalStrings[ARTL_ART_directive_572] = "directive ::= . 'gll'  ";
  artLabelStrings[ARTL_ART_directive_572] = "";
  artlhsL[ARTL_ART_directive_572] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_572] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_572] = true;
  artLabelInternalStrings[ARTL_ART_directive_573] = "directive ::= 'gll'  ";
  artLabelStrings[ARTL_ART_directive_573] = "";
  artlhsL[ARTL_ART_directive_573] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_573] = true;
  artLabelInternalStrings[ARTL_ART_directive_574] = "directive ::= 'gll'  .";
  artLabelStrings[ARTL_ART_directive_574] = "";
  artlhsL[ARTL_ART_directive_574] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_574] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_574] = true;
  arteoR_pL[ARTL_ART_directive_574] = true;
  artPopD[ARTL_ART_directive_574] = true;
  artLabelInternalStrings[ARTL_ART_directive_578] = "directive ::= . 'gllGeneratorPool'  ";
  artLabelStrings[ARTL_ART_directive_578] = "";
  artlhsL[ARTL_ART_directive_578] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_578] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_578] = true;
  artLabelInternalStrings[ARTL_ART_directive_579] = "directive ::= 'gllGeneratorPool'  ";
  artLabelStrings[ARTL_ART_directive_579] = "";
  artlhsL[ARTL_ART_directive_579] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_579] = true;
  artLabelInternalStrings[ARTL_ART_directive_580] = "directive ::= 'gllGeneratorPool'  .";
  artLabelStrings[ARTL_ART_directive_580] = "";
  artlhsL[ARTL_ART_directive_580] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_580] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_580] = true;
  arteoR_pL[ARTL_ART_directive_580] = true;
  artPopD[ARTL_ART_directive_580] = true;
  artLabelInternalStrings[ARTL_ART_directive_584] = "directive ::= . 'gllTWEGeneratorPool'  ";
  artLabelStrings[ARTL_ART_directive_584] = "";
  artlhsL[ARTL_ART_directive_584] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_584] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_584] = true;
  artLabelInternalStrings[ARTL_ART_directive_585] = "directive ::= 'gllTWEGeneratorPool'  ";
  artLabelStrings[ARTL_ART_directive_585] = "";
  artlhsL[ARTL_ART_directive_585] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_585] = true;
  artLabelInternalStrings[ARTL_ART_directive_586] = "directive ::= 'gllTWEGeneratorPool'  .";
  artLabelStrings[ARTL_ART_directive_586] = "";
  artlhsL[ARTL_ART_directive_586] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_586] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_586] = true;
  arteoR_pL[ARTL_ART_directive_586] = true;
  artPopD[ARTL_ART_directive_586] = true;
  artLabelInternalStrings[ARTL_ART_directive_590] = "directive ::= . 'gllClusteredGeneratorPool'  ";
  artLabelStrings[ARTL_ART_directive_590] = "";
  artlhsL[ARTL_ART_directive_590] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_590] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_590] = true;
  artLabelInternalStrings[ARTL_ART_directive_591] = "directive ::= 'gllClusteredGeneratorPool'  ";
  artLabelStrings[ARTL_ART_directive_591] = "";
  artlhsL[ARTL_ART_directive_591] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_591] = true;
  artLabelInternalStrings[ARTL_ART_directive_592] = "directive ::= 'gllClusteredGeneratorPool'  .";
  artLabelStrings[ARTL_ART_directive_592] = "";
  artlhsL[ARTL_ART_directive_592] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_592] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_592] = true;
  arteoR_pL[ARTL_ART_directive_592] = true;
  artPopD[ARTL_ART_directive_592] = true;
  artLabelInternalStrings[ARTL_ART_directive_596] = "directive ::= . 'mgll'  ";
  artLabelStrings[ARTL_ART_directive_596] = "";
  artlhsL[ARTL_ART_directive_596] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_596] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_596] = true;
  artLabelInternalStrings[ARTL_ART_directive_597] = "directive ::= 'mgll'  ";
  artLabelStrings[ARTL_ART_directive_597] = "";
  artlhsL[ARTL_ART_directive_597] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_597] = true;
  artLabelInternalStrings[ARTL_ART_directive_598] = "directive ::= 'mgll'  .";
  artLabelStrings[ARTL_ART_directive_598] = "";
  artlhsL[ARTL_ART_directive_598] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_598] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_598] = true;
  arteoR_pL[ARTL_ART_directive_598] = true;
  artPopD[ARTL_ART_directive_598] = true;
  artLabelInternalStrings[ARTL_ART_directive_602] = "directive ::= . 'mgllGeneratorPool'  ";
  artLabelStrings[ARTL_ART_directive_602] = "";
  artlhsL[ARTL_ART_directive_602] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_602] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_602] = true;
  artLabelInternalStrings[ARTL_ART_directive_603] = "directive ::= 'mgllGeneratorPool'  ";
  artLabelStrings[ARTL_ART_directive_603] = "";
  artlhsL[ARTL_ART_directive_603] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_603] = true;
  artLabelInternalStrings[ARTL_ART_directive_604] = "directive ::= 'mgllGeneratorPool'  .";
  artLabelStrings[ARTL_ART_directive_604] = "";
  artlhsL[ARTL_ART_directive_604] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_604] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_604] = true;
  arteoR_pL[ARTL_ART_directive_604] = true;
  artPopD[ARTL_ART_directive_604] = true;
  artLabelInternalStrings[ARTL_ART_directive_608] = "directive ::= . 'osbrd'  ";
  artLabelStrings[ARTL_ART_directive_608] = "";
  artlhsL[ARTL_ART_directive_608] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_608] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_608] = true;
  artLabelInternalStrings[ARTL_ART_directive_609] = "directive ::= 'osbrd'  ";
  artLabelStrings[ARTL_ART_directive_609] = "";
  artlhsL[ARTL_ART_directive_609] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_609] = true;
  artLabelInternalStrings[ARTL_ART_directive_610] = "directive ::= 'osbrd'  .";
  artLabelStrings[ARTL_ART_directive_610] = "";
  artlhsL[ARTL_ART_directive_610] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_610] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_610] = true;
  arteoR_pL[ARTL_ART_directive_610] = true;
  artPopD[ARTL_ART_directive_610] = true;
  artLabelInternalStrings[ARTL_ART_directive_614] = "directive ::= . 'osbrdGenerator'  ";
  artLabelStrings[ARTL_ART_directive_614] = "";
  artlhsL[ARTL_ART_directive_614] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_614] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_614] = true;
  artLabelInternalStrings[ARTL_ART_directive_615] = "directive ::= 'osbrdGenerator'  ";
  artLabelStrings[ARTL_ART_directive_615] = "";
  artlhsL[ARTL_ART_directive_615] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_615] = true;
  artLabelInternalStrings[ARTL_ART_directive_616] = "directive ::= 'osbrdGenerator'  .";
  artLabelStrings[ARTL_ART_directive_616] = "";
  artlhsL[ARTL_ART_directive_616] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_616] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_616] = true;
  arteoR_pL[ARTL_ART_directive_616] = true;
  artPopD[ARTL_ART_directive_616] = true;
  artLabelInternalStrings[ARTL_ART_directive_620] = "directive ::= . 'grammarWrite'  ";
  artLabelStrings[ARTL_ART_directive_620] = "";
  artlhsL[ARTL_ART_directive_620] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_620] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_620] = true;
  artLabelInternalStrings[ARTL_ART_directive_621] = "directive ::= 'grammarWrite'  ";
  artLabelStrings[ARTL_ART_directive_621] = "";
  artlhsL[ARTL_ART_directive_621] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_621] = true;
  artLabelInternalStrings[ARTL_ART_directive_622] = "directive ::= 'grammarWrite'  .";
  artLabelStrings[ARTL_ART_directive_622] = "";
  artlhsL[ARTL_ART_directive_622] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_622] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_622] = true;
  arteoR_pL[ARTL_ART_directive_622] = true;
  artPopD[ARTL_ART_directive_622] = true;
}

public void artTableInitialiser_ART_element1() {
  artLabelInternalStrings[ARTL_ART_element1] = "element1";
  artLabelStrings[ARTL_ART_element1] = "element1";
  artKindOfs[ARTL_ART_element1] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_element1_1302] = "element1 ::= . epsilon ";
  artLabelStrings[ARTL_ART_element1_1302] = "";
  artlhsL[ARTL_ART_element1_1302] = ARTL_ART_element1;
  artKindOfs[ARTL_ART_element1_1302] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_element1_1304] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_element1_1304] = "element1 ::= epsilon .";
  artLabelStrings[ARTL_ART_element1_1304] = "";
  artlhsL[ARTL_ART_element1_1304] = ARTL_ART_element1;
  artSlotInstanceOfs[ARTL_ART_element1_1304] = ARTL_ART_epsilon;
  artKindOfs[ARTL_ART_element1_1304] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_element1_1304] = true;
  arteoR_pL[ARTL_ART_element1_1304] = true;
  artPopD[ARTL_ART_element1_1304] = true;
  artLabelInternalStrings[ARTL_ART_element1_1306] = "element1 ::= . nonterminal ";
  artLabelStrings[ARTL_ART_element1_1306] = "";
  artlhsL[ARTL_ART_element1_1306] = ARTL_ART_element1;
  artKindOfs[ARTL_ART_element1_1306] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_element1_1308] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_element1_1308] = "element1 ::= nonterminal .";
  artLabelStrings[ARTL_ART_element1_1308] = "";
  artlhsL[ARTL_ART_element1_1308] = ARTL_ART_element1;
  artSlotInstanceOfs[ARTL_ART_element1_1308] = ARTL_ART_nonterminal;
  artKindOfs[ARTL_ART_element1_1308] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_element1_1308] = true;
  arteoR_pL[ARTL_ART_element1_1308] = true;
  artPopD[ARTL_ART_element1_1308] = true;
  artLabelInternalStrings[ARTL_ART_element1_1312] = "element1 ::= . caseSensitiveTerminal ";
  artLabelStrings[ARTL_ART_element1_1312] = "";
  artlhsL[ARTL_ART_element1_1312] = ARTL_ART_element1;
  artKindOfs[ARTL_ART_element1_1312] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_element1_1314] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_element1_1314] = "element1 ::= caseSensitiveTerminal .";
  artLabelStrings[ARTL_ART_element1_1314] = "";
  artlhsL[ARTL_ART_element1_1314] = ARTL_ART_element1;
  artSlotInstanceOfs[ARTL_ART_element1_1314] = ARTL_ART_caseSensitiveTerminal;
  artKindOfs[ARTL_ART_element1_1314] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_element1_1314] = true;
  arteoR_pL[ARTL_ART_element1_1314] = true;
  artPopD[ARTL_ART_element1_1314] = true;
  artLabelInternalStrings[ARTL_ART_element1_1316] = "element1 ::= . caseInsensitiveTerminal ";
  artLabelStrings[ARTL_ART_element1_1316] = "";
  artlhsL[ARTL_ART_element1_1316] = ARTL_ART_element1;
  artKindOfs[ARTL_ART_element1_1316] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_element1_1318] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_element1_1318] = "element1 ::= caseInsensitiveTerminal .";
  artLabelStrings[ARTL_ART_element1_1318] = "";
  artlhsL[ARTL_ART_element1_1318] = ARTL_ART_element1;
  artSlotInstanceOfs[ARTL_ART_element1_1318] = ARTL_ART_caseInsensitiveTerminal;
  artKindOfs[ARTL_ART_element1_1318] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_element1_1318] = true;
  arteoR_pL[ARTL_ART_element1_1318] = true;
  artPopD[ARTL_ART_element1_1318] = true;
  artLabelInternalStrings[ARTL_ART_element1_1320] = "element1 ::= . characterTerminal ";
  artLabelStrings[ARTL_ART_element1_1320] = "";
  artlhsL[ARTL_ART_element1_1320] = ARTL_ART_element1;
  artKindOfs[ARTL_ART_element1_1320] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_element1_1322] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_element1_1322] = "element1 ::= characterTerminal .";
  artLabelStrings[ARTL_ART_element1_1322] = "";
  artlhsL[ARTL_ART_element1_1322] = ARTL_ART_element1;
  artSlotInstanceOfs[ARTL_ART_element1_1322] = ARTL_ART_characterTerminal;
  artKindOfs[ARTL_ART_element1_1322] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_element1_1322] = true;
  arteoR_pL[ARTL_ART_element1_1322] = true;
  artPopD[ARTL_ART_element1_1322] = true;
  artLabelInternalStrings[ARTL_ART_element1_1324] = "element1 ::= . characterSetTerminal ";
  artLabelStrings[ARTL_ART_element1_1324] = "";
  artlhsL[ARTL_ART_element1_1324] = ARTL_ART_element1;
  artKindOfs[ARTL_ART_element1_1324] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_element1_1326] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_element1_1326] = "element1 ::= characterSetTerminal .";
  artLabelStrings[ARTL_ART_element1_1326] = "";
  artlhsL[ARTL_ART_element1_1326] = ARTL_ART_element1;
  artSlotInstanceOfs[ARTL_ART_element1_1326] = ARTL_ART_characterSetTerminal;
  artKindOfs[ARTL_ART_element1_1326] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_element1_1326] = true;
  arteoR_pL[ARTL_ART_element1_1326] = true;
  artPopD[ARTL_ART_element1_1326] = true;
  artLabelInternalStrings[ARTL_ART_element1_1328] = "element1 ::= . builtinTerminal ";
  artLabelStrings[ARTL_ART_element1_1328] = "";
  artlhsL[ARTL_ART_element1_1328] = ARTL_ART_element1;
  artKindOfs[ARTL_ART_element1_1328] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_element1_1330] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_element1_1330] = "element1 ::= builtinTerminal .";
  artLabelStrings[ARTL_ART_element1_1330] = "";
  artlhsL[ARTL_ART_element1_1330] = ARTL_ART_element1;
  artSlotInstanceOfs[ARTL_ART_element1_1330] = ARTL_ART_builtinTerminal;
  artKindOfs[ARTL_ART_element1_1330] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_element1_1330] = true;
  arteoR_pL[ARTL_ART_element1_1330] = true;
  artPopD[ARTL_ART_element1_1330] = true;
  artLabelInternalStrings[ARTL_ART_element1_1332] = "element1 ::= . epsilon annotations ";
  artLabelStrings[ARTL_ART_element1_1332] = "";
  artlhsL[ARTL_ART_element1_1332] = ARTL_ART_element1;
  artKindOfs[ARTL_ART_element1_1332] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_element1_1334] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_element1_1334] = "element1 ::= epsilon . annotations ";
  artLabelStrings[ARTL_ART_element1_1334] = "";
  artlhsL[ARTL_ART_element1_1334] = ARTL_ART_element1;
  artSlotInstanceOfs[ARTL_ART_element1_1334] = ARTL_ART_epsilon;
  artKindOfs[ARTL_ART_element1_1334] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_element1_1334] = true;
  artLabelInternalStrings[ARTL_ART_element1_1336] = "element1 ::= epsilon annotations .";
  artLabelStrings[ARTL_ART_element1_1336] = "";
  artlhsL[ARTL_ART_element1_1336] = ARTL_ART_element1;
  artSlotInstanceOfs[ARTL_ART_element1_1336] = ARTL_ART_annotations;
  artKindOfs[ARTL_ART_element1_1336] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_element1_1336] = true;
  arteoR_pL[ARTL_ART_element1_1336] = true;
  artPopD[ARTL_ART_element1_1336] = true;
  artLabelInternalStrings[ARTL_ART_element1_1338] = "element1 ::= . nonterminal annotations ";
  artLabelStrings[ARTL_ART_element1_1338] = "";
  artlhsL[ARTL_ART_element1_1338] = ARTL_ART_element1;
  artKindOfs[ARTL_ART_element1_1338] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_element1_1340] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_element1_1340] = "element1 ::= nonterminal . annotations ";
  artLabelStrings[ARTL_ART_element1_1340] = "";
  artlhsL[ARTL_ART_element1_1340] = ARTL_ART_element1;
  artSlotInstanceOfs[ARTL_ART_element1_1340] = ARTL_ART_nonterminal;
  artKindOfs[ARTL_ART_element1_1340] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_element1_1340] = true;
  artLabelInternalStrings[ARTL_ART_element1_1344] = "element1 ::= nonterminal annotations .";
  artLabelStrings[ARTL_ART_element1_1344] = "";
  artlhsL[ARTL_ART_element1_1344] = ARTL_ART_element1;
  artSlotInstanceOfs[ARTL_ART_element1_1344] = ARTL_ART_annotations;
  artKindOfs[ARTL_ART_element1_1344] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_element1_1344] = true;
  arteoR_pL[ARTL_ART_element1_1344] = true;
  artPopD[ARTL_ART_element1_1344] = true;
  artLabelInternalStrings[ARTL_ART_element1_1346] = "element1 ::= . caseSensitiveTerminal annotations ";
  artLabelStrings[ARTL_ART_element1_1346] = "";
  artlhsL[ARTL_ART_element1_1346] = ARTL_ART_element1;
  artKindOfs[ARTL_ART_element1_1346] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_element1_1348] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_element1_1348] = "element1 ::= caseSensitiveTerminal . annotations ";
  artLabelStrings[ARTL_ART_element1_1348] = "";
  artlhsL[ARTL_ART_element1_1348] = ARTL_ART_element1;
  artSlotInstanceOfs[ARTL_ART_element1_1348] = ARTL_ART_caseSensitiveTerminal;
  artKindOfs[ARTL_ART_element1_1348] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_element1_1348] = true;
  artLabelInternalStrings[ARTL_ART_element1_1350] = "element1 ::= caseSensitiveTerminal annotations .";
  artLabelStrings[ARTL_ART_element1_1350] = "";
  artlhsL[ARTL_ART_element1_1350] = ARTL_ART_element1;
  artSlotInstanceOfs[ARTL_ART_element1_1350] = ARTL_ART_annotations;
  artKindOfs[ARTL_ART_element1_1350] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_element1_1350] = true;
  arteoR_pL[ARTL_ART_element1_1350] = true;
  artPopD[ARTL_ART_element1_1350] = true;
  artLabelInternalStrings[ARTL_ART_element1_1352] = "element1 ::= . caseInsensitiveTerminal annotations ";
  artLabelStrings[ARTL_ART_element1_1352] = "";
  artlhsL[ARTL_ART_element1_1352] = ARTL_ART_element1;
  artKindOfs[ARTL_ART_element1_1352] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_element1_1354] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_element1_1354] = "element1 ::= caseInsensitiveTerminal . annotations ";
  artLabelStrings[ARTL_ART_element1_1354] = "";
  artlhsL[ARTL_ART_element1_1354] = ARTL_ART_element1;
  artSlotInstanceOfs[ARTL_ART_element1_1354] = ARTL_ART_caseInsensitiveTerminal;
  artKindOfs[ARTL_ART_element1_1354] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_element1_1354] = true;
  artLabelInternalStrings[ARTL_ART_element1_1356] = "element1 ::= caseInsensitiveTerminal annotations .";
  artLabelStrings[ARTL_ART_element1_1356] = "";
  artlhsL[ARTL_ART_element1_1356] = ARTL_ART_element1;
  artSlotInstanceOfs[ARTL_ART_element1_1356] = ARTL_ART_annotations;
  artKindOfs[ARTL_ART_element1_1356] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_element1_1356] = true;
  arteoR_pL[ARTL_ART_element1_1356] = true;
  artPopD[ARTL_ART_element1_1356] = true;
  artLabelInternalStrings[ARTL_ART_element1_1358] = "element1 ::= . characterTerminal annotations ";
  artLabelStrings[ARTL_ART_element1_1358] = "";
  artlhsL[ARTL_ART_element1_1358] = ARTL_ART_element1;
  artKindOfs[ARTL_ART_element1_1358] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_element1_1360] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_element1_1360] = "element1 ::= characterTerminal . annotations ";
  artLabelStrings[ARTL_ART_element1_1360] = "";
  artlhsL[ARTL_ART_element1_1360] = ARTL_ART_element1;
  artSlotInstanceOfs[ARTL_ART_element1_1360] = ARTL_ART_characterTerminal;
  artKindOfs[ARTL_ART_element1_1360] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_element1_1360] = true;
  artLabelInternalStrings[ARTL_ART_element1_1362] = "element1 ::= characterTerminal annotations .";
  artLabelStrings[ARTL_ART_element1_1362] = "";
  artlhsL[ARTL_ART_element1_1362] = ARTL_ART_element1;
  artSlotInstanceOfs[ARTL_ART_element1_1362] = ARTL_ART_annotations;
  artKindOfs[ARTL_ART_element1_1362] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_element1_1362] = true;
  arteoR_pL[ARTL_ART_element1_1362] = true;
  artPopD[ARTL_ART_element1_1362] = true;
  artLabelInternalStrings[ARTL_ART_element1_1364] = "element1 ::= . characterSetTerminal annotations ";
  artLabelStrings[ARTL_ART_element1_1364] = "";
  artlhsL[ARTL_ART_element1_1364] = ARTL_ART_element1;
  artKindOfs[ARTL_ART_element1_1364] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_element1_1366] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_element1_1366] = "element1 ::= characterSetTerminal . annotations ";
  artLabelStrings[ARTL_ART_element1_1366] = "";
  artlhsL[ARTL_ART_element1_1366] = ARTL_ART_element1;
  artSlotInstanceOfs[ARTL_ART_element1_1366] = ARTL_ART_characterSetTerminal;
  artKindOfs[ARTL_ART_element1_1366] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_element1_1366] = true;
  artLabelInternalStrings[ARTL_ART_element1_1368] = "element1 ::= characterSetTerminal annotations .";
  artLabelStrings[ARTL_ART_element1_1368] = "";
  artlhsL[ARTL_ART_element1_1368] = ARTL_ART_element1;
  artSlotInstanceOfs[ARTL_ART_element1_1368] = ARTL_ART_annotations;
  artKindOfs[ARTL_ART_element1_1368] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_element1_1368] = true;
  arteoR_pL[ARTL_ART_element1_1368] = true;
  artPopD[ARTL_ART_element1_1368] = true;
  artLabelInternalStrings[ARTL_ART_element1_1370] = "element1 ::= . builtinTerminal annotations ";
  artLabelStrings[ARTL_ART_element1_1370] = "";
  artlhsL[ARTL_ART_element1_1370] = ARTL_ART_element1;
  artKindOfs[ARTL_ART_element1_1370] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_element1_1372] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_element1_1372] = "element1 ::= builtinTerminal . annotations ";
  artLabelStrings[ARTL_ART_element1_1372] = "";
  artlhsL[ARTL_ART_element1_1372] = ARTL_ART_element1;
  artSlotInstanceOfs[ARTL_ART_element1_1372] = ARTL_ART_builtinTerminal;
  artKindOfs[ARTL_ART_element1_1372] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_element1_1372] = true;
  artLabelInternalStrings[ARTL_ART_element1_1374] = "element1 ::= builtinTerminal annotations .";
  artLabelStrings[ARTL_ART_element1_1374] = "";
  artlhsL[ARTL_ART_element1_1374] = ARTL_ART_element1;
  artSlotInstanceOfs[ARTL_ART_element1_1374] = ARTL_ART_annotations;
  artKindOfs[ARTL_ART_element1_1374] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_element1_1374] = true;
  arteoR_pL[ARTL_ART_element1_1374] = true;
  artPopD[ARTL_ART_element1_1374] = true;
  artLabelInternalStrings[ARTL_ART_element1_1376] = "element1 ::= . '('  alt ')'  ";
  artLabelStrings[ARTL_ART_element1_1376] = "";
  artlhsL[ARTL_ART_element1_1376] = ARTL_ART_element1;
  artKindOfs[ARTL_ART_element1_1376] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_element1_1378] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_element1_1377] = "element1 ::= '('  alt ')'  ";
  artLabelStrings[ARTL_ART_element1_1377] = "";
  artlhsL[ARTL_ART_element1_1377] = ARTL_ART_element1;
  artLabelInternalStrings[ARTL_ART_element1_1378] = "element1 ::= '('  . alt ')'  ";
  artLabelStrings[ARTL_ART_element1_1378] = "";
  artlhsL[ARTL_ART_element1_1378] = ARTL_ART_element1;
  artKindOfs[ARTL_ART_element1_1378] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_element1_1378] = true;
  artLabelInternalStrings[ARTL_ART_element1_1380] = "element1 ::= '('  alt . ')'  ";
  artLabelStrings[ARTL_ART_element1_1380] = "";
  artlhsL[ARTL_ART_element1_1380] = ARTL_ART_element1;
  artSlotInstanceOfs[ARTL_ART_element1_1380] = ARTL_ART_alt;
  artKindOfs[ARTL_ART_element1_1380] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_element1_1380] = true;
  artFolds[ARTL_ART_element1_1382] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_element1_1381] = "element1 ::= '('  alt ')'  ";
  artLabelStrings[ARTL_ART_element1_1381] = "";
  artlhsL[ARTL_ART_element1_1381] = ARTL_ART_element1;
  artPopD[ARTL_ART_element1_1381] = true;
  artLabelInternalStrings[ARTL_ART_element1_1382] = "element1 ::= '('  alt ')'  .";
  artLabelStrings[ARTL_ART_element1_1382] = "";
  artlhsL[ARTL_ART_element1_1382] = ARTL_ART_element1;
  artKindOfs[ARTL_ART_element1_1382] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_element1_1382] = true;
  arteoR_pL[ARTL_ART_element1_1382] = true;
  artPopD[ARTL_ART_element1_1382] = true;
}

public void artTableInitialiser_ART_elementUpdater() {
  artLabelInternalStrings[ARTL_ART_elementUpdater] = "elementUpdater";
  artLabelStrings[ARTL_ART_elementUpdater] = "elementUpdater";
  artKindOfs[ARTL_ART_elementUpdater] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_elementUpdater_810] = "elementUpdater ::= . epsilon ";
  artLabelStrings[ARTL_ART_elementUpdater_810] = "";
  artlhsL[ARTL_ART_elementUpdater_810] = ARTL_ART_elementUpdater;
  artKindOfs[ARTL_ART_elementUpdater_810] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_elementUpdater_812] = "elementUpdater ::= epsilon .";
  artLabelStrings[ARTL_ART_elementUpdater_812] = "";
  artlhsL[ARTL_ART_elementUpdater_812] = ARTL_ART_elementUpdater;
  artSlotInstanceOfs[ARTL_ART_elementUpdater_812] = ARTL_ART_epsilon;
  artKindOfs[ARTL_ART_elementUpdater_812] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_elementUpdater_812] = true;
  arteoR_pL[ARTL_ART_elementUpdater_812] = true;
  artPopD[ARTL_ART_elementUpdater_812] = true;
  artLabelInternalStrings[ARTL_ART_elementUpdater_816] = "elementUpdater ::= . nonterminal ";
  artLabelStrings[ARTL_ART_elementUpdater_816] = "";
  artlhsL[ARTL_ART_elementUpdater_816] = ARTL_ART_elementUpdater;
  artKindOfs[ARTL_ART_elementUpdater_816] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_elementUpdater_818] = "elementUpdater ::= nonterminal .";
  artLabelStrings[ARTL_ART_elementUpdater_818] = "";
  artlhsL[ARTL_ART_elementUpdater_818] = ARTL_ART_elementUpdater;
  artSlotInstanceOfs[ARTL_ART_elementUpdater_818] = ARTL_ART_nonterminal;
  artKindOfs[ARTL_ART_elementUpdater_818] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_elementUpdater_818] = true;
  arteoR_pL[ARTL_ART_elementUpdater_818] = true;
  artPopD[ARTL_ART_elementUpdater_818] = true;
  artLabelInternalStrings[ARTL_ART_elementUpdater_822] = "elementUpdater ::= . caseSensitiveTerminal ";
  artLabelStrings[ARTL_ART_elementUpdater_822] = "";
  artlhsL[ARTL_ART_elementUpdater_822] = ARTL_ART_elementUpdater;
  artKindOfs[ARTL_ART_elementUpdater_822] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_elementUpdater_824] = "elementUpdater ::= caseSensitiveTerminal .";
  artLabelStrings[ARTL_ART_elementUpdater_824] = "";
  artlhsL[ARTL_ART_elementUpdater_824] = ARTL_ART_elementUpdater;
  artSlotInstanceOfs[ARTL_ART_elementUpdater_824] = ARTL_ART_caseSensitiveTerminal;
  artKindOfs[ARTL_ART_elementUpdater_824] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_elementUpdater_824] = true;
  arteoR_pL[ARTL_ART_elementUpdater_824] = true;
  artPopD[ARTL_ART_elementUpdater_824] = true;
  artLabelInternalStrings[ARTL_ART_elementUpdater_828] = "elementUpdater ::= . caseInsensitiveTerminal ";
  artLabelStrings[ARTL_ART_elementUpdater_828] = "";
  artlhsL[ARTL_ART_elementUpdater_828] = ARTL_ART_elementUpdater;
  artKindOfs[ARTL_ART_elementUpdater_828] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_elementUpdater_830] = "elementUpdater ::= caseInsensitiveTerminal .";
  artLabelStrings[ARTL_ART_elementUpdater_830] = "";
  artlhsL[ARTL_ART_elementUpdater_830] = ARTL_ART_elementUpdater;
  artSlotInstanceOfs[ARTL_ART_elementUpdater_830] = ARTL_ART_caseInsensitiveTerminal;
  artKindOfs[ARTL_ART_elementUpdater_830] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_elementUpdater_830] = true;
  arteoR_pL[ARTL_ART_elementUpdater_830] = true;
  artPopD[ARTL_ART_elementUpdater_830] = true;
  artLabelInternalStrings[ARTL_ART_elementUpdater_834] = "elementUpdater ::= . characterTerminal ";
  artLabelStrings[ARTL_ART_elementUpdater_834] = "";
  artlhsL[ARTL_ART_elementUpdater_834] = ARTL_ART_elementUpdater;
  artKindOfs[ARTL_ART_elementUpdater_834] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_elementUpdater_836] = "elementUpdater ::= characterTerminal .";
  artLabelStrings[ARTL_ART_elementUpdater_836] = "";
  artlhsL[ARTL_ART_elementUpdater_836] = ARTL_ART_elementUpdater;
  artSlotInstanceOfs[ARTL_ART_elementUpdater_836] = ARTL_ART_characterTerminal;
  artKindOfs[ARTL_ART_elementUpdater_836] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_elementUpdater_836] = true;
  arteoR_pL[ARTL_ART_elementUpdater_836] = true;
  artPopD[ARTL_ART_elementUpdater_836] = true;
  artLabelInternalStrings[ARTL_ART_elementUpdater_840] = "elementUpdater ::= . characterSetTerminal ";
  artLabelStrings[ARTL_ART_elementUpdater_840] = "";
  artlhsL[ARTL_ART_elementUpdater_840] = ARTL_ART_elementUpdater;
  artKindOfs[ARTL_ART_elementUpdater_840] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_elementUpdater_842] = "elementUpdater ::= characterSetTerminal .";
  artLabelStrings[ARTL_ART_elementUpdater_842] = "";
  artlhsL[ARTL_ART_elementUpdater_842] = ARTL_ART_elementUpdater;
  artSlotInstanceOfs[ARTL_ART_elementUpdater_842] = ARTL_ART_characterSetTerminal;
  artKindOfs[ARTL_ART_elementUpdater_842] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_elementUpdater_842] = true;
  arteoR_pL[ARTL_ART_elementUpdater_842] = true;
  artPopD[ARTL_ART_elementUpdater_842] = true;
  artLabelInternalStrings[ARTL_ART_elementUpdater_846] = "elementUpdater ::= . builtinTerminal ";
  artLabelStrings[ARTL_ART_elementUpdater_846] = "";
  artlhsL[ARTL_ART_elementUpdater_846] = ARTL_ART_elementUpdater;
  artKindOfs[ARTL_ART_elementUpdater_846] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_elementUpdater_848] = "elementUpdater ::= builtinTerminal .";
  artLabelStrings[ARTL_ART_elementUpdater_848] = "";
  artlhsL[ARTL_ART_elementUpdater_848] = ARTL_ART_elementUpdater;
  artSlotInstanceOfs[ARTL_ART_elementUpdater_848] = ARTL_ART_builtinTerminal;
  artKindOfs[ARTL_ART_elementUpdater_848] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_elementUpdater_848] = true;
  arteoR_pL[ARTL_ART_elementUpdater_848] = true;
  artPopD[ARTL_ART_elementUpdater_848] = true;
}

public void artTableInitialiser_ART_elementUpdaters() {
  artLabelInternalStrings[ARTL_ART_elementUpdaters] = "elementUpdaters";
  artLabelStrings[ARTL_ART_elementUpdaters] = "elementUpdaters";
  artKindOfs[ARTL_ART_elementUpdaters] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_elementUpdaters_646] = "elementUpdaters ::= . elementUpdater ','  elementUpdaters ";
  artLabelStrings[ARTL_ART_elementUpdaters_646] = "";
  artlhsL[ARTL_ART_elementUpdaters_646] = ARTL_ART_elementUpdaters;
  artKindOfs[ARTL_ART_elementUpdaters_646] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_elementUpdaters_648] = "elementUpdaters ::= elementUpdater . ','  elementUpdaters ";
  artLabelStrings[ARTL_ART_elementUpdaters_648] = "";
  artlhsL[ARTL_ART_elementUpdaters_648] = ARTL_ART_elementUpdaters;
  artSlotInstanceOfs[ARTL_ART_elementUpdaters_648] = ARTL_ART_elementUpdater;
  artKindOfs[ARTL_ART_elementUpdaters_648] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_elementUpdaters_648] = true;
  artLabelInternalStrings[ARTL_ART_elementUpdaters_649] = "elementUpdaters ::= elementUpdater ','  elementUpdaters ";
  artLabelStrings[ARTL_ART_elementUpdaters_649] = "";
  artlhsL[ARTL_ART_elementUpdaters_649] = ARTL_ART_elementUpdaters;
  artLabelInternalStrings[ARTL_ART_elementUpdaters_650] = "elementUpdaters ::= elementUpdater ','  . elementUpdaters ";
  artLabelStrings[ARTL_ART_elementUpdaters_650] = "";
  artlhsL[ARTL_ART_elementUpdaters_650] = ARTL_ART_elementUpdaters;
  artKindOfs[ARTL_ART_elementUpdaters_650] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_elementUpdaters_652] = "elementUpdaters ::= elementUpdater ','  elementUpdaters .";
  artLabelStrings[ARTL_ART_elementUpdaters_652] = "";
  artlhsL[ARTL_ART_elementUpdaters_652] = ARTL_ART_elementUpdaters;
  artSlotInstanceOfs[ARTL_ART_elementUpdaters_652] = ARTL_ART_elementUpdaters;
  artKindOfs[ARTL_ART_elementUpdaters_652] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_elementUpdaters_652] = true;
  arteoR_pL[ARTL_ART_elementUpdaters_652] = true;
  artPopD[ARTL_ART_elementUpdaters_652] = true;
  artLabelInternalStrings[ARTL_ART_elementUpdaters_654] = "elementUpdaters ::= . elementUpdater ";
  artLabelStrings[ARTL_ART_elementUpdaters_654] = "";
  artlhsL[ARTL_ART_elementUpdaters_654] = ARTL_ART_elementUpdaters;
  artKindOfs[ARTL_ART_elementUpdaters_654] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_elementUpdaters_656] = "elementUpdaters ::= elementUpdater .";
  artLabelStrings[ARTL_ART_elementUpdaters_656] = "";
  artlhsL[ARTL_ART_elementUpdaters_656] = ARTL_ART_elementUpdaters;
  artSlotInstanceOfs[ARTL_ART_elementUpdaters_656] = ARTL_ART_elementUpdater;
  artKindOfs[ARTL_ART_elementUpdaters_656] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_elementUpdaters_656] = true;
  arteoR_pL[ARTL_ART_elementUpdaters_656] = true;
  artPopD[ARTL_ART_elementUpdaters_656] = true;
}

public void artTableInitialiser_ART_epsilon() {
  artLabelInternalStrings[ARTL_ART_epsilon] = "epsilon";
  artLabelStrings[ARTL_ART_epsilon] = "epsilon";
  artKindOfs[ARTL_ART_epsilon] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_epsilon_852] = "epsilon ::= . '#'  ";
  artLabelStrings[ARTL_ART_epsilon_852] = "";
  artlhsL[ARTL_ART_epsilon_852] = ARTL_ART_epsilon;
  artKindOfs[ARTL_ART_epsilon_852] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_epsilon_852] = true;
  artFolds[ARTL_ART_epsilon_854] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_epsilon_853] = "epsilon ::= '#'  ";
  artLabelStrings[ARTL_ART_epsilon_853] = "";
  artlhsL[ARTL_ART_epsilon_853] = ARTL_ART_epsilon;
  artPopD[ARTL_ART_epsilon_853] = true;
  artLabelInternalStrings[ARTL_ART_epsilon_854] = "epsilon ::= '#'  .";
  artLabelStrings[ARTL_ART_epsilon_854] = "";
  artlhsL[ARTL_ART_epsilon_854] = ARTL_ART_epsilon;
  artKindOfs[ARTL_ART_epsilon_854] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_epsilon_854] = true;
  arteoR_pL[ARTL_ART_epsilon_854] = true;
  artPopD[ARTL_ART_epsilon_854] = true;
}

public void artTableInitialiser_ART_fold() {
  artLabelInternalStrings[ARTL_ART_fold] = "fold";
  artLabelStrings[ARTL_ART_fold] = "fold";
  artKindOfs[ARTL_ART_fold] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_fold_1416] = "fold ::= . '^_'  ";
  artLabelStrings[ARTL_ART_fold_1416] = "";
  artlhsL[ARTL_ART_fold_1416] = ARTL_ART_fold;
  artKindOfs[ARTL_ART_fold_1416] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_fold_1416] = true;
  artLabelInternalStrings[ARTL_ART_fold_1417] = "fold ::= '^_'  ";
  artLabelStrings[ARTL_ART_fold_1417] = "";
  artlhsL[ARTL_ART_fold_1417] = ARTL_ART_fold;
  artPopD[ARTL_ART_fold_1417] = true;
  artLabelInternalStrings[ARTL_ART_fold_1418] = "fold ::= '^_'  .";
  artLabelStrings[ARTL_ART_fold_1418] = "";
  artlhsL[ARTL_ART_fold_1418] = ARTL_ART_fold;
  artKindOfs[ARTL_ART_fold_1418] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_fold_1418] = true;
  arteoR_pL[ARTL_ART_fold_1418] = true;
  artPopD[ARTL_ART_fold_1418] = true;
  artLabelInternalStrings[ARTL_ART_fold_1420] = "fold ::= . '^'  ";
  artLabelStrings[ARTL_ART_fold_1420] = "";
  artlhsL[ARTL_ART_fold_1420] = ARTL_ART_fold;
  artKindOfs[ARTL_ART_fold_1420] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_fold_1420] = true;
  artLabelInternalStrings[ARTL_ART_fold_1421] = "fold ::= '^'  ";
  artLabelStrings[ARTL_ART_fold_1421] = "";
  artlhsL[ARTL_ART_fold_1421] = ARTL_ART_fold;
  artPopD[ARTL_ART_fold_1421] = true;
  artLabelInternalStrings[ARTL_ART_fold_1422] = "fold ::= '^'  .";
  artLabelStrings[ARTL_ART_fold_1422] = "";
  artlhsL[ARTL_ART_fold_1422] = ARTL_ART_fold;
  artKindOfs[ARTL_ART_fold_1422] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_fold_1422] = true;
  arteoR_pL[ARTL_ART_fold_1422] = true;
  artPopD[ARTL_ART_fold_1422] = true;
  artLabelInternalStrings[ARTL_ART_fold_1424] = "fold ::= . '^^'  ";
  artLabelStrings[ARTL_ART_fold_1424] = "";
  artlhsL[ARTL_ART_fold_1424] = ARTL_ART_fold;
  artKindOfs[ARTL_ART_fold_1424] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_fold_1424] = true;
  artLabelInternalStrings[ARTL_ART_fold_1425] = "fold ::= '^^'  ";
  artLabelStrings[ARTL_ART_fold_1425] = "";
  artlhsL[ARTL_ART_fold_1425] = ARTL_ART_fold;
  artPopD[ARTL_ART_fold_1425] = true;
  artLabelInternalStrings[ARTL_ART_fold_1426] = "fold ::= '^^'  .";
  artLabelStrings[ARTL_ART_fold_1426] = "";
  artlhsL[ARTL_ART_fold_1426] = ARTL_ART_fold;
  artKindOfs[ARTL_ART_fold_1426] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_fold_1426] = true;
  arteoR_pL[ARTL_ART_fold_1426] = true;
  artPopD[ARTL_ART_fold_1426] = true;
  artLabelInternalStrings[ARTL_ART_fold_1428] = "fold ::= . '^^^'  ";
  artLabelStrings[ARTL_ART_fold_1428] = "";
  artlhsL[ARTL_ART_fold_1428] = ARTL_ART_fold;
  artKindOfs[ARTL_ART_fold_1428] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_fold_1428] = true;
  artLabelInternalStrings[ARTL_ART_fold_1429] = "fold ::= '^^^'  ";
  artLabelStrings[ARTL_ART_fold_1429] = "";
  artlhsL[ARTL_ART_fold_1429] = ARTL_ART_fold;
  artPopD[ARTL_ART_fold_1429] = true;
  artLabelInternalStrings[ARTL_ART_fold_1430] = "fold ::= '^^^'  .";
  artLabelStrings[ARTL_ART_fold_1430] = "";
  artlhsL[ARTL_ART_fold_1430] = ARTL_ART_fold;
  artKindOfs[ARTL_ART_fold_1430] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_fold_1430] = true;
  arteoR_pL[ARTL_ART_fold_1430] = true;
  artPopD[ARTL_ART_fold_1430] = true;
}

public void artTableInitialiser_ART_grammarRule() {
  artLabelInternalStrings[ARTL_ART_grammarRule] = "grammarRule";
  artLabelStrings[ARTL_ART_grammarRule] = "grammarRule";
  artKindOfs[ARTL_ART_grammarRule] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_grammarRule_626] = "grammarRule ::= . nonterminal attributesOpt '::='  rhs ";
  artLabelStrings[ARTL_ART_grammarRule_626] = "";
  artlhsL[ARTL_ART_grammarRule_626] = ARTL_ART_grammarRule;
  artKindOfs[ARTL_ART_grammarRule_626] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_grammarRule_628] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_grammarRule_628] = "grammarRule ::= nonterminal . attributesOpt '::='  rhs ";
  artLabelStrings[ARTL_ART_grammarRule_628] = "";
  artlhsL[ARTL_ART_grammarRule_628] = ARTL_ART_grammarRule;
  artSlotInstanceOfs[ARTL_ART_grammarRule_628] = ARTL_ART_nonterminal;
  artKindOfs[ARTL_ART_grammarRule_628] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_grammarRule_628] = true;
  artFolds[ARTL_ART_grammarRule_632] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_grammarRule_632] = "grammarRule ::= nonterminal attributesOpt . '::='  rhs ";
  artLabelStrings[ARTL_ART_grammarRule_632] = "";
  artlhsL[ARTL_ART_grammarRule_632] = ARTL_ART_grammarRule;
  artSlotInstanceOfs[ARTL_ART_grammarRule_632] = ARTL_ART_attributesOpt;
  artKindOfs[ARTL_ART_grammarRule_632] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_grammarRule_634] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_grammarRule_633] = "grammarRule ::= nonterminal attributesOpt '::='  rhs ";
  artLabelStrings[ARTL_ART_grammarRule_633] = "";
  artlhsL[ARTL_ART_grammarRule_633] = ARTL_ART_grammarRule;
  artLabelInternalStrings[ARTL_ART_grammarRule_634] = "grammarRule ::= nonterminal attributesOpt '::='  . rhs ";
  artLabelStrings[ARTL_ART_grammarRule_634] = "";
  artlhsL[ARTL_ART_grammarRule_634] = ARTL_ART_grammarRule;
  artKindOfs[ARTL_ART_grammarRule_634] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_grammarRule_638] = "grammarRule ::= nonterminal attributesOpt '::='  rhs .";
  artLabelStrings[ARTL_ART_grammarRule_638] = "";
  artlhsL[ARTL_ART_grammarRule_638] = ARTL_ART_grammarRule;
  artSlotInstanceOfs[ARTL_ART_grammarRule_638] = ARTL_ART_rhs;
  artKindOfs[ARTL_ART_grammarRule_638] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_grammarRule_638] = true;
  arteoR_pL[ARTL_ART_grammarRule_638] = true;
  artPopD[ARTL_ART_grammarRule_638] = true;
}

public void artTableInitialiser_ART_insertionName() {
  artLabelInternalStrings[ARTL_ART_insertionName] = "insertionName";
  artLabelStrings[ARTL_ART_insertionName] = "insertionName";
  artKindOfs[ARTL_ART_insertionName] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_insertionName_1444] = "insertionName ::= . '%%'  ID ";
  artLabelStrings[ARTL_ART_insertionName_1444] = "";
  artlhsL[ARTL_ART_insertionName_1444] = ARTL_ART_insertionName;
  artKindOfs[ARTL_ART_insertionName_1444] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_insertionName_1446] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_insertionName_1445] = "insertionName ::= '%%'  ID ";
  artLabelStrings[ARTL_ART_insertionName_1445] = "";
  artlhsL[ARTL_ART_insertionName_1445] = ARTL_ART_insertionName;
  artLabelInternalStrings[ARTL_ART_insertionName_1446] = "insertionName ::= '%%'  . ID ";
  artLabelStrings[ARTL_ART_insertionName_1446] = "";
  artlhsL[ARTL_ART_insertionName_1446] = ARTL_ART_insertionName;
  artKindOfs[ARTL_ART_insertionName_1446] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_insertionName_1446] = true;
  artFolds[ARTL_ART_insertionName_1448] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_insertionName_1448] = "insertionName ::= '%%'  ID .";
  artLabelStrings[ARTL_ART_insertionName_1448] = "";
  artlhsL[ARTL_ART_insertionName_1448] = ARTL_ART_insertionName;
  artSlotInstanceOfs[ARTL_ART_insertionName_1448] = ARTL_ART_ID;
  artKindOfs[ARTL_ART_insertionName_1448] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_insertionName_1448] = true;
  arteoR_pL[ARTL_ART_insertionName_1448] = true;
  artPopD[ARTL_ART_insertionName_1448] = true;
}

public void artTableInitialiser_ART_iter() {
  artLabelInternalStrings[ARTL_ART_iter] = "iter";
  artLabelStrings[ARTL_ART_iter] = "iter";
  artKindOfs[ARTL_ART_iter] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_iter_1256] = "iter ::= . diff ";
  artLabelStrings[ARTL_ART_iter_1256] = "";
  artlhsL[ARTL_ART_iter_1256] = ARTL_ART_iter;
  artKindOfs[ARTL_ART_iter_1256] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_iter_1258] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_iter_1258] = "iter ::= diff .";
  artLabelStrings[ARTL_ART_iter_1258] = "";
  artlhsL[ARTL_ART_iter_1258] = ARTL_ART_iter;
  artSlotInstanceOfs[ARTL_ART_iter_1258] = ARTL_ART_diff;
  artKindOfs[ARTL_ART_iter_1258] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_iter_1258] = true;
  arteoR_pL[ARTL_ART_iter_1258] = true;
  artPopD[ARTL_ART_iter_1258] = true;
  artLabelInternalStrings[ARTL_ART_iter_1260] = "iter ::= . diff '@'  iter ";
  artLabelStrings[ARTL_ART_iter_1260] = "";
  artlhsL[ARTL_ART_iter_1260] = ARTL_ART_iter;
  artKindOfs[ARTL_ART_iter_1260] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_iter_1262] = "iter ::= diff . '@'  iter ";
  artLabelStrings[ARTL_ART_iter_1262] = "";
  artlhsL[ARTL_ART_iter_1262] = ARTL_ART_iter;
  artSlotInstanceOfs[ARTL_ART_iter_1262] = ARTL_ART_diff;
  artKindOfs[ARTL_ART_iter_1262] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_iter_1262] = true;
  artFolds[ARTL_ART_iter_1264] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_iter_1263] = "iter ::= diff '@'  iter ";
  artLabelStrings[ARTL_ART_iter_1263] = "";
  artlhsL[ARTL_ART_iter_1263] = ARTL_ART_iter;
  artLabelInternalStrings[ARTL_ART_iter_1264] = "iter ::= diff '@'  . iter ";
  artLabelStrings[ARTL_ART_iter_1264] = "";
  artlhsL[ARTL_ART_iter_1264] = ARTL_ART_iter;
  artKindOfs[ARTL_ART_iter_1264] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_iter_1266] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_iter_1266] = "iter ::= diff '@'  iter .";
  artLabelStrings[ARTL_ART_iter_1266] = "";
  artlhsL[ARTL_ART_iter_1266] = ARTL_ART_iter;
  artSlotInstanceOfs[ARTL_ART_iter_1266] = ARTL_ART_iter;
  artKindOfs[ARTL_ART_iter_1266] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_iter_1266] = true;
  arteoR_pL[ARTL_ART_iter_1266] = true;
  artPopD[ARTL_ART_iter_1266] = true;
}

public void artTableInitialiser_ART_name() {
  artLabelInternalStrings[ARTL_ART_name] = "name";
  artLabelStrings[ARTL_ART_name] = "name";
  artKindOfs[ARTL_ART_name] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_name_1406] = "name ::= . ':'  ID ";
  artLabelStrings[ARTL_ART_name_1406] = "";
  artlhsL[ARTL_ART_name_1406] = ARTL_ART_name;
  artKindOfs[ARTL_ART_name_1406] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_name_1408] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_name_1407] = "name ::= ':'  ID ";
  artLabelStrings[ARTL_ART_name_1407] = "";
  artlhsL[ARTL_ART_name_1407] = ARTL_ART_name;
  artLabelInternalStrings[ARTL_ART_name_1408] = "name ::= ':'  . ID ";
  artLabelStrings[ARTL_ART_name_1408] = "";
  artlhsL[ARTL_ART_name_1408] = ARTL_ART_name;
  artKindOfs[ARTL_ART_name_1408] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_name_1408] = true;
  artLabelInternalStrings[ARTL_ART_name_1410] = "name ::= ':'  ID .";
  artLabelStrings[ARTL_ART_name_1410] = "";
  artlhsL[ARTL_ART_name_1410] = ARTL_ART_name;
  artSlotInstanceOfs[ARTL_ART_name_1410] = ARTL_ART_ID;
  artKindOfs[ARTL_ART_name_1410] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_name_1410] = true;
  arteoR_pL[ARTL_ART_name_1410] = true;
  artPopD[ARTL_ART_name_1410] = true;
}

public void artTableInitialiser_ART_nonterminal() {
  artLabelInternalStrings[ARTL_ART_nonterminal] = "nonterminal";
  artLabelStrings[ARTL_ART_nonterminal] = "nonterminal";
  artKindOfs[ARTL_ART_nonterminal] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_nonterminal_658] = "nonterminal ::= . ID ";
  artLabelStrings[ARTL_ART_nonterminal_658] = "";
  artlhsL[ARTL_ART_nonterminal_658] = ARTL_ART_nonterminal;
  artKindOfs[ARTL_ART_nonterminal_658] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_nonterminal_660] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_nonterminal_660] = "nonterminal ::= ID .";
  artLabelStrings[ARTL_ART_nonterminal_660] = "";
  artlhsL[ARTL_ART_nonterminal_660] = ARTL_ART_nonterminal;
  artSlotInstanceOfs[ARTL_ART_nonterminal_660] = ARTL_ART_ID;
  artKindOfs[ARTL_ART_nonterminal_660] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_nonterminal_660] = true;
  arteoR_pL[ARTL_ART_nonterminal_660] = true;
  artPopD[ARTL_ART_nonterminal_660] = true;
  artLabelInternalStrings[ARTL_ART_nonterminal_664] = "nonterminal ::= . STRING_DOLLAR ";
  artLabelStrings[ARTL_ART_nonterminal_664] = "";
  artlhsL[ARTL_ART_nonterminal_664] = ARTL_ART_nonterminal;
  artKindOfs[ARTL_ART_nonterminal_664] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_nonterminal_666] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_nonterminal_666] = "nonterminal ::= STRING_DOLLAR .";
  artLabelStrings[ARTL_ART_nonterminal_666] = "";
  artlhsL[ARTL_ART_nonterminal_666] = ARTL_ART_nonterminal;
  artSlotInstanceOfs[ARTL_ART_nonterminal_666] = ARTL_ART_STRING_DOLLAR;
  artKindOfs[ARTL_ART_nonterminal_666] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_nonterminal_666] = true;
  arteoR_pL[ARTL_ART_nonterminal_666] = true;
  artPopD[ARTL_ART_nonterminal_666] = true;
}

public void artTableInitialiser_ART_not() {
  artLabelInternalStrings[ARTL_ART_not] = "not";
  artLabelStrings[ARTL_ART_not] = "not";
  artKindOfs[ARTL_ART_not] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_not_1292] = "not ::= . element1 ";
  artLabelStrings[ARTL_ART_not_1292] = "";
  artlhsL[ARTL_ART_not_1292] = ARTL_ART_not;
  artKindOfs[ARTL_ART_not_1292] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_not_1294] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_not_1294] = "not ::= element1 .";
  artLabelStrings[ARTL_ART_not_1294] = "";
  artlhsL[ARTL_ART_not_1294] = ARTL_ART_not;
  artSlotInstanceOfs[ARTL_ART_not_1294] = ARTL_ART_element1;
  artKindOfs[ARTL_ART_not_1294] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_not_1294] = true;
  arteoR_pL[ARTL_ART_not_1294] = true;
  artPopD[ARTL_ART_not_1294] = true;
  artLabelInternalStrings[ARTL_ART_not_1296] = "not ::= . '\\\\'  element1 ";
  artLabelStrings[ARTL_ART_not_1296] = "";
  artlhsL[ARTL_ART_not_1296] = ARTL_ART_not;
  artKindOfs[ARTL_ART_not_1296] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_not_1298] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_not_1297] = "not ::= '\\\\'  element1 ";
  artLabelStrings[ARTL_ART_not_1297] = "";
  artlhsL[ARTL_ART_not_1297] = ARTL_ART_not;
  artLabelInternalStrings[ARTL_ART_not_1298] = "not ::= '\\\\'  . element1 ";
  artLabelStrings[ARTL_ART_not_1298] = "";
  artlhsL[ARTL_ART_not_1298] = ARTL_ART_not;
  artKindOfs[ARTL_ART_not_1298] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_not_1298] = true;
  artLabelInternalStrings[ARTL_ART_not_1300] = "not ::= '\\\\'  element1 .";
  artLabelStrings[ARTL_ART_not_1300] = "";
  artlhsL[ARTL_ART_not_1300] = ARTL_ART_not;
  artSlotInstanceOfs[ARTL_ART_not_1300] = ARTL_ART_element1;
  artKindOfs[ARTL_ART_not_1300] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_not_1300] = true;
  arteoR_pL[ARTL_ART_not_1300] = true;
  artPopD[ARTL_ART_not_1300] = true;
}

public void artTableInitialiser_ART_paraterminalisers() {
  artLabelInternalStrings[ARTL_ART_paraterminalisers] = "paraterminalisers";
  artLabelStrings[ARTL_ART_paraterminalisers] = "paraterminalisers";
  artKindOfs[ARTL_ART_paraterminalisers] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_paraterminalisers_682] = "paraterminalisers ::= . nonterminal ";
  artLabelStrings[ARTL_ART_paraterminalisers_682] = "";
  artlhsL[ARTL_ART_paraterminalisers_682] = ARTL_ART_paraterminalisers;
  artKindOfs[ARTL_ART_paraterminalisers_682] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_paraterminalisers_684] = "paraterminalisers ::= nonterminal .";
  artLabelStrings[ARTL_ART_paraterminalisers_684] = "";
  artlhsL[ARTL_ART_paraterminalisers_684] = ARTL_ART_paraterminalisers;
  artSlotInstanceOfs[ARTL_ART_paraterminalisers_684] = ARTL_ART_nonterminal;
  artKindOfs[ARTL_ART_paraterminalisers_684] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_paraterminalisers_684] = true;
  arteoR_pL[ARTL_ART_paraterminalisers_684] = true;
  artPopD[ARTL_ART_paraterminalisers_684] = true;
  artLabelInternalStrings[ARTL_ART_paraterminalisers_688] = "paraterminalisers ::= . nonterminal ','  paraterminalisers ";
  artLabelStrings[ARTL_ART_paraterminalisers_688] = "";
  artlhsL[ARTL_ART_paraterminalisers_688] = ARTL_ART_paraterminalisers;
  artKindOfs[ARTL_ART_paraterminalisers_688] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_paraterminalisers_690] = "paraterminalisers ::= nonterminal . ','  paraterminalisers ";
  artLabelStrings[ARTL_ART_paraterminalisers_690] = "";
  artlhsL[ARTL_ART_paraterminalisers_690] = ARTL_ART_paraterminalisers;
  artSlotInstanceOfs[ARTL_ART_paraterminalisers_690] = ARTL_ART_nonterminal;
  artKindOfs[ARTL_ART_paraterminalisers_690] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_paraterminalisers_690] = true;
  artLabelInternalStrings[ARTL_ART_paraterminalisers_693] = "paraterminalisers ::= nonterminal ','  paraterminalisers ";
  artLabelStrings[ARTL_ART_paraterminalisers_693] = "";
  artlhsL[ARTL_ART_paraterminalisers_693] = ARTL_ART_paraterminalisers;
  artLabelInternalStrings[ARTL_ART_paraterminalisers_694] = "paraterminalisers ::= nonterminal ','  . paraterminalisers ";
  artLabelStrings[ARTL_ART_paraterminalisers_694] = "";
  artlhsL[ARTL_ART_paraterminalisers_694] = ARTL_ART_paraterminalisers;
  artKindOfs[ARTL_ART_paraterminalisers_694] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_paraterminalisers_696] = "paraterminalisers ::= nonterminal ','  paraterminalisers .";
  artLabelStrings[ARTL_ART_paraterminalisers_696] = "";
  artlhsL[ARTL_ART_paraterminalisers_696] = ARTL_ART_paraterminalisers;
  artSlotInstanceOfs[ARTL_ART_paraterminalisers_696] = ARTL_ART_paraterminalisers;
  artKindOfs[ARTL_ART_paraterminalisers_696] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_paraterminalisers_696] = true;
  arteoR_pL[ARTL_ART_paraterminalisers_696] = true;
  artPopD[ARTL_ART_paraterminalisers_696] = true;
  artLabelInternalStrings[ARTL_ART_paraterminalisers_698] = "paraterminalisers ::= . nonterminal '='  STRING_DQ ";
  artLabelStrings[ARTL_ART_paraterminalisers_698] = "";
  artlhsL[ARTL_ART_paraterminalisers_698] = ARTL_ART_paraterminalisers;
  artKindOfs[ARTL_ART_paraterminalisers_698] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_paraterminalisers_700] = "paraterminalisers ::= nonterminal . '='  STRING_DQ ";
  artLabelStrings[ARTL_ART_paraterminalisers_700] = "";
  artlhsL[ARTL_ART_paraterminalisers_700] = ARTL_ART_paraterminalisers;
  artSlotInstanceOfs[ARTL_ART_paraterminalisers_700] = ARTL_ART_nonterminal;
  artKindOfs[ARTL_ART_paraterminalisers_700] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_paraterminalisers_700] = true;
  artLabelInternalStrings[ARTL_ART_paraterminalisers_703] = "paraterminalisers ::= nonterminal '='  STRING_DQ ";
  artLabelStrings[ARTL_ART_paraterminalisers_703] = "";
  artlhsL[ARTL_ART_paraterminalisers_703] = ARTL_ART_paraterminalisers;
  artLabelInternalStrings[ARTL_ART_paraterminalisers_704] = "paraterminalisers ::= nonterminal '='  . STRING_DQ ";
  artLabelStrings[ARTL_ART_paraterminalisers_704] = "";
  artlhsL[ARTL_ART_paraterminalisers_704] = ARTL_ART_paraterminalisers;
  artKindOfs[ARTL_ART_paraterminalisers_704] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_paraterminalisers_706] = "paraterminalisers ::= nonterminal '='  STRING_DQ .";
  artLabelStrings[ARTL_ART_paraterminalisers_706] = "";
  artlhsL[ARTL_ART_paraterminalisers_706] = ARTL_ART_paraterminalisers;
  artSlotInstanceOfs[ARTL_ART_paraterminalisers_706] = ARTL_ART_STRING_DQ;
  artKindOfs[ARTL_ART_paraterminalisers_706] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_paraterminalisers_706] = true;
  arteoR_pL[ARTL_ART_paraterminalisers_706] = true;
  artPopD[ARTL_ART_paraterminalisers_706] = true;
  artLabelInternalStrings[ARTL_ART_paraterminalisers_710] = "paraterminalisers ::= . nonterminal '='  STRING_DQ ','  paraterminalisers ";
  artLabelStrings[ARTL_ART_paraterminalisers_710] = "";
  artlhsL[ARTL_ART_paraterminalisers_710] = ARTL_ART_paraterminalisers;
  artKindOfs[ARTL_ART_paraterminalisers_710] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_paraterminalisers_712] = "paraterminalisers ::= nonterminal . '='  STRING_DQ ','  paraterminalisers ";
  artLabelStrings[ARTL_ART_paraterminalisers_712] = "";
  artlhsL[ARTL_ART_paraterminalisers_712] = ARTL_ART_paraterminalisers;
  artSlotInstanceOfs[ARTL_ART_paraterminalisers_712] = ARTL_ART_nonterminal;
  artKindOfs[ARTL_ART_paraterminalisers_712] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_paraterminalisers_712] = true;
  artLabelInternalStrings[ARTL_ART_paraterminalisers_715] = "paraterminalisers ::= nonterminal '='  STRING_DQ ','  paraterminalisers ";
  artLabelStrings[ARTL_ART_paraterminalisers_715] = "";
  artlhsL[ARTL_ART_paraterminalisers_715] = ARTL_ART_paraterminalisers;
  artLabelInternalStrings[ARTL_ART_paraterminalisers_716] = "paraterminalisers ::= nonterminal '='  . STRING_DQ ','  paraterminalisers ";
  artLabelStrings[ARTL_ART_paraterminalisers_716] = "";
  artlhsL[ARTL_ART_paraterminalisers_716] = ARTL_ART_paraterminalisers;
  artKindOfs[ARTL_ART_paraterminalisers_716] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_paraterminalisers_718] = "paraterminalisers ::= nonterminal '='  STRING_DQ . ','  paraterminalisers ";
  artLabelStrings[ARTL_ART_paraterminalisers_718] = "";
  artlhsL[ARTL_ART_paraterminalisers_718] = ARTL_ART_paraterminalisers;
  artSlotInstanceOfs[ARTL_ART_paraterminalisers_718] = ARTL_ART_STRING_DQ;
  artKindOfs[ARTL_ART_paraterminalisers_718] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_paraterminalisers_721] = "paraterminalisers ::= nonterminal '='  STRING_DQ ','  paraterminalisers ";
  artLabelStrings[ARTL_ART_paraterminalisers_721] = "";
  artlhsL[ARTL_ART_paraterminalisers_721] = ARTL_ART_paraterminalisers;
  artLabelInternalStrings[ARTL_ART_paraterminalisers_722] = "paraterminalisers ::= nonterminal '='  STRING_DQ ','  . paraterminalisers ";
  artLabelStrings[ARTL_ART_paraterminalisers_722] = "";
  artlhsL[ARTL_ART_paraterminalisers_722] = ARTL_ART_paraterminalisers;
  artKindOfs[ARTL_ART_paraterminalisers_722] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_paraterminalisers_724] = "paraterminalisers ::= nonterminal '='  STRING_DQ ','  paraterminalisers .";
  artLabelStrings[ARTL_ART_paraterminalisers_724] = "";
  artlhsL[ARTL_ART_paraterminalisers_724] = ARTL_ART_paraterminalisers;
  artSlotInstanceOfs[ARTL_ART_paraterminalisers_724] = ARTL_ART_paraterminalisers;
  artKindOfs[ARTL_ART_paraterminalisers_724] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_paraterminalisers_724] = true;
  arteoR_pL[ARTL_ART_paraterminalisers_724] = true;
  artPopD[ARTL_ART_paraterminalisers_724] = true;
}

public void artTableInitialiser_ART_rhs() {
  artLabelInternalStrings[ARTL_ART_rhs] = "rhs";
  artLabelStrings[ARTL_ART_rhs] = "rhs";
  artKindOfs[ARTL_ART_rhs] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_rhs_726] = "rhs ::= . cat ";
  artLabelStrings[ARTL_ART_rhs_726] = "";
  artlhsL[ARTL_ART_rhs_726] = ARTL_ART_rhs;
  artKindOfs[ARTL_ART_rhs_726] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_rhs_728] = "rhs ::= cat .";
  artLabelStrings[ARTL_ART_rhs_728] = "";
  artlhsL[ARTL_ART_rhs_728] = ARTL_ART_rhs;
  artSlotInstanceOfs[ARTL_ART_rhs_728] = ARTL_ART_cat;
  artKindOfs[ARTL_ART_rhs_728] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_rhs_728] = true;
  arteoR_pL[ARTL_ART_rhs_728] = true;
  artPopD[ARTL_ART_rhs_728] = true;
  artLabelInternalStrings[ARTL_ART_rhs_732] = "rhs ::= . cat '|'  rhs ";
  artLabelStrings[ARTL_ART_rhs_732] = "";
  artlhsL[ARTL_ART_rhs_732] = ARTL_ART_rhs;
  artKindOfs[ARTL_ART_rhs_732] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_rhs_734] = "rhs ::= cat . '|'  rhs ";
  artLabelStrings[ARTL_ART_rhs_734] = "";
  artlhsL[ARTL_ART_rhs_734] = ARTL_ART_rhs;
  artSlotInstanceOfs[ARTL_ART_rhs_734] = ARTL_ART_cat;
  artKindOfs[ARTL_ART_rhs_734] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_rhs_734] = true;
  artFolds[ARTL_ART_rhs_738] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_rhs_737] = "rhs ::= cat '|'  rhs ";
  artLabelStrings[ARTL_ART_rhs_737] = "";
  artlhsL[ARTL_ART_rhs_737] = ARTL_ART_rhs;
  artLabelInternalStrings[ARTL_ART_rhs_738] = "rhs ::= cat '|'  . rhs ";
  artLabelStrings[ARTL_ART_rhs_738] = "";
  artlhsL[ARTL_ART_rhs_738] = ARTL_ART_rhs;
  artKindOfs[ARTL_ART_rhs_738] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_rhs_742] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_rhs_742] = "rhs ::= cat '|'  rhs .";
  artLabelStrings[ARTL_ART_rhs_742] = "";
  artlhsL[ARTL_ART_rhs_742] = ARTL_ART_rhs;
  artSlotInstanceOfs[ARTL_ART_rhs_742] = ARTL_ART_rhs;
  artKindOfs[ARTL_ART_rhs_742] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_rhs_742] = true;
  arteoR_pL[ARTL_ART_rhs_742] = true;
  artPopD[ARTL_ART_rhs_742] = true;
}

public void artTableInitialiser_ART_slot() {
  artLabelInternalStrings[ARTL_ART_slot] = "slot";
  artLabelStrings[ARTL_ART_slot] = "slot";
  artKindOfs[ARTL_ART_slot] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_slot_1206] = "slot ::= . # ";
  artLabelStrings[ARTL_ART_slot_1206] = "";
  artlhsL[ARTL_ART_slot_1206] = ARTL_ART_slot;
  artKindOfs[ARTL_ART_slot_1206] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_slot_1206] = true;
  artFolds[ARTL_ART_slot_1208] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_slot_1208] = "slot ::= # .";
  artLabelStrings[ARTL_ART_slot_1208] = "";
  artlhsL[ARTL_ART_slot_1208] = ARTL_ART_slot;
  artKindOfs[ARTL_ART_slot_1208] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_slot_1208] = true;
  arteoR_pL[ARTL_ART_slot_1208] = true;
  artPopD[ARTL_ART_slot_1208] = true;
  artLabelInternalStrings[ARTL_ART_slot_1210] = "slot ::= . action ";
  artLabelStrings[ARTL_ART_slot_1210] = "";
  artlhsL[ARTL_ART_slot_1210] = ARTL_ART_slot;
  artKindOfs[ARTL_ART_slot_1210] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_slot_1212] = "slot ::= action .";
  artLabelStrings[ARTL_ART_slot_1212] = "";
  artlhsL[ARTL_ART_slot_1212] = ARTL_ART_slot;
  artSlotInstanceOfs[ARTL_ART_slot_1212] = ARTL_ART_action;
  artKindOfs[ARTL_ART_slot_1212] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_slot_1212] = true;
  arteoR_pL[ARTL_ART_slot_1212] = true;
  artPopD[ARTL_ART_slot_1212] = true;
}

public void artTableInitialiser_ART_text() {
  artLabelInternalStrings[ARTL_ART_text] = "text";
  artLabelStrings[ARTL_ART_text] = "text";
  artKindOfs[ARTL_ART_text] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_text_2] = "text ::= . textElements ";
  artLabelStrings[ARTL_ART_text_2] = "";
  artlhsL[ARTL_ART_text_2] = ARTL_ART_text;
  artKindOfs[ARTL_ART_text_2] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_text_6] = "text ::= textElements .";
  artLabelStrings[ARTL_ART_text_6] = "";
  artlhsL[ARTL_ART_text_6] = ARTL_ART_text;
  artSlotInstanceOfs[ARTL_ART_text_6] = ARTL_ART_textElements;
  artKindOfs[ARTL_ART_text_6] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_text_6] = true;
  arteoR_pL[ARTL_ART_text_6] = true;
  artPopD[ARTL_ART_text_6] = true;
}

public void artTableInitialiser_ART_textElement() {
  artLabelInternalStrings[ARTL_ART_textElement] = "textElement";
  artLabelStrings[ARTL_ART_textElement] = "textElement";
  artKindOfs[ARTL_ART_textElement] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_textElement_18] = "textElement ::= . '!'  directive ";
  artLabelStrings[ARTL_ART_textElement_18] = "";
  artlhsL[ARTL_ART_textElement_18] = ARTL_ART_textElement;
  artKindOfs[ARTL_ART_textElement_18] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_textElement_19] = "textElement ::= '!'  directive ";
  artLabelStrings[ARTL_ART_textElement_19] = "";
  artlhsL[ARTL_ART_textElement_19] = ARTL_ART_textElement;
  artLabelInternalStrings[ARTL_ART_textElement_20] = "textElement ::= '!'  . directive ";
  artLabelStrings[ARTL_ART_textElement_20] = "";
  artlhsL[ARTL_ART_textElement_20] = ARTL_ART_textElement;
  artKindOfs[ARTL_ART_textElement_20] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_textElement_20] = true;
  artLabelInternalStrings[ARTL_ART_textElement_22] = "textElement ::= '!'  directive .";
  artLabelStrings[ARTL_ART_textElement_22] = "";
  artlhsL[ARTL_ART_textElement_22] = ARTL_ART_textElement;
  artSlotInstanceOfs[ARTL_ART_textElement_22] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_textElement_22] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_textElement_22] = true;
  arteoR_pL[ARTL_ART_textElement_22] = true;
  artPopD[ARTL_ART_textElement_22] = true;
  artLabelInternalStrings[ARTL_ART_textElement_24] = "textElement ::= . grammarRule ";
  artLabelStrings[ARTL_ART_textElement_24] = "";
  artlhsL[ARTL_ART_textElement_24] = ARTL_ART_textElement;
  artKindOfs[ARTL_ART_textElement_24] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_textElement_26] = "textElement ::= grammarRule .";
  artLabelStrings[ARTL_ART_textElement_26] = "";
  artlhsL[ARTL_ART_textElement_26] = ARTL_ART_textElement;
  artSlotInstanceOfs[ARTL_ART_textElement_26] = ARTL_ART_grammarRule;
  artKindOfs[ARTL_ART_textElement_26] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_textElement_26] = true;
  arteoR_pL[ARTL_ART_textElement_26] = true;
  artPopD[ARTL_ART_textElement_26] = true;
}

public void artTableInitialiser_ART_textElements() {
  artLabelInternalStrings[ARTL_ART_textElements] = "textElements";
  artLabelStrings[ARTL_ART_textElements] = "textElements";
  artKindOfs[ARTL_ART_textElements] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_textElements_8] = "textElements ::= . textElement textElements ";
  artLabelStrings[ARTL_ART_textElements_8] = "";
  artlhsL[ARTL_ART_textElements_8] = ARTL_ART_textElements;
  artKindOfs[ARTL_ART_textElements_8] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_textElements_10] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_textElements_10] = "textElements ::= textElement . textElements ";
  artLabelStrings[ARTL_ART_textElements_10] = "";
  artlhsL[ARTL_ART_textElements_10] = ARTL_ART_textElements;
  artSlotInstanceOfs[ARTL_ART_textElements_10] = ARTL_ART_textElement;
  artKindOfs[ARTL_ART_textElements_10] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_textElements_10] = true;
  artFolds[ARTL_ART_textElements_12] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_textElements_12] = "textElements ::= textElement textElements .";
  artLabelStrings[ARTL_ART_textElements_12] = "";
  artlhsL[ARTL_ART_textElements_12] = ARTL_ART_textElements;
  artSlotInstanceOfs[ARTL_ART_textElements_12] = ARTL_ART_textElements;
  artKindOfs[ARTL_ART_textElements_12] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_textElements_12] = true;
  arteoR_pL[ARTL_ART_textElements_12] = true;
  artPopD[ARTL_ART_textElements_12] = true;
  artLabelInternalStrings[ARTL_ART_textElements_14] = "textElements ::= . textElement ";
  artLabelStrings[ARTL_ART_textElements_14] = "";
  artlhsL[ARTL_ART_textElements_14] = ARTL_ART_textElements;
  artKindOfs[ARTL_ART_textElements_14] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_textElements_16] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_textElements_16] = "textElements ::= textElement .";
  artLabelStrings[ARTL_ART_textElements_16] = "";
  artlhsL[ARTL_ART_textElements_16] = ARTL_ART_textElements;
  artSlotInstanceOfs[ARTL_ART_textElements_16] = ARTL_ART_textElement;
  artKindOfs[ARTL_ART_textElements_16] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_textElements_16] = true;
  arteoR_pL[ARTL_ART_textElements_16] = true;
  artPopD[ARTL_ART_textElements_16] = true;
}

public void artTableInitialiser_ART_trueFalse() {
  artLabelInternalStrings[ARTL_ART_trueFalse] = "trueFalse";
  artLabelStrings[ARTL_ART_trueFalse] = "trueFalse";
  artKindOfs[ARTL_ART_trueFalse] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_trueFalse_770] = "trueFalse ::= . # ";
  artLabelStrings[ARTL_ART_trueFalse_770] = "";
  artlhsL[ARTL_ART_trueFalse_770] = ARTL_ART_trueFalse;
  artKindOfs[ARTL_ART_trueFalse_770] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_trueFalse_770] = true;
  artLabelInternalStrings[ARTL_ART_trueFalse_772] = "trueFalse ::= # .";
  artLabelStrings[ARTL_ART_trueFalse_772] = "";
  artlhsL[ARTL_ART_trueFalse_772] = ARTL_ART_trueFalse;
  artKindOfs[ARTL_ART_trueFalse_772] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_trueFalse_772] = true;
  arteoR_pL[ARTL_ART_trueFalse_772] = true;
  artPopD[ARTL_ART_trueFalse_772] = true;
  artLabelInternalStrings[ARTL_ART_trueFalse_776] = "trueFalse ::= . 'true'  ";
  artLabelStrings[ARTL_ART_trueFalse_776] = "";
  artlhsL[ARTL_ART_trueFalse_776] = ARTL_ART_trueFalse;
  artKindOfs[ARTL_ART_trueFalse_776] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_trueFalse_776] = true;
  artLabelInternalStrings[ARTL_ART_trueFalse_777] = "trueFalse ::= 'true'  ";
  artLabelStrings[ARTL_ART_trueFalse_777] = "";
  artlhsL[ARTL_ART_trueFalse_777] = ARTL_ART_trueFalse;
  artPopD[ARTL_ART_trueFalse_777] = true;
  artLabelInternalStrings[ARTL_ART_trueFalse_778] = "trueFalse ::= 'true'  .";
  artLabelStrings[ARTL_ART_trueFalse_778] = "";
  artlhsL[ARTL_ART_trueFalse_778] = ARTL_ART_trueFalse;
  artKindOfs[ARTL_ART_trueFalse_778] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_trueFalse_778] = true;
  arteoR_pL[ARTL_ART_trueFalse_778] = true;
  artPopD[ARTL_ART_trueFalse_778] = true;
  artLabelInternalStrings[ARTL_ART_trueFalse_782] = "trueFalse ::= . 'false'  ";
  artLabelStrings[ARTL_ART_trueFalse_782] = "";
  artlhsL[ARTL_ART_trueFalse_782] = ARTL_ART_trueFalse;
  artKindOfs[ARTL_ART_trueFalse_782] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_trueFalse_782] = true;
  artLabelInternalStrings[ARTL_ART_trueFalse_783] = "trueFalse ::= 'false'  ";
  artLabelStrings[ARTL_ART_trueFalse_783] = "";
  artlhsL[ARTL_ART_trueFalse_783] = ARTL_ART_trueFalse;
  artPopD[ARTL_ART_trueFalse_783] = true;
  artLabelInternalStrings[ARTL_ART_trueFalse_784] = "trueFalse ::= 'false'  .";
  artLabelStrings[ARTL_ART_trueFalse_784] = "";
  artlhsL[ARTL_ART_trueFalse_784] = ARTL_ART_trueFalse;
  artKindOfs[ARTL_ART_trueFalse_784] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_trueFalse_784] = true;
  arteoR_pL[ARTL_ART_trueFalse_784] = true;
  artPopD[ARTL_ART_trueFalse_784] = true;
  artLabelInternalStrings[ARTL_ART_trueFalse_788] = "trueFalse ::= . ':'  'true'  ";
  artLabelStrings[ARTL_ART_trueFalse_788] = "";
  artlhsL[ARTL_ART_trueFalse_788] = ARTL_ART_trueFalse;
  artKindOfs[ARTL_ART_trueFalse_788] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_trueFalse_788] = true;
  artFolds[ARTL_ART_trueFalse_790] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_trueFalse_789] = "trueFalse ::= ':'  'true'  ";
  artLabelStrings[ARTL_ART_trueFalse_789] = "";
  artlhsL[ARTL_ART_trueFalse_789] = ARTL_ART_trueFalse;
  artPopD[ARTL_ART_trueFalse_789] = true;
  artLabelInternalStrings[ARTL_ART_trueFalse_790] = "trueFalse ::= ':'  . 'true'  ";
  artLabelStrings[ARTL_ART_trueFalse_790] = "";
  artlhsL[ARTL_ART_trueFalse_790] = ARTL_ART_trueFalse;
  artKindOfs[ARTL_ART_trueFalse_790] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_trueFalse_790] = true;
  artPopD[ARTL_ART_trueFalse_790] = true;
  artLabelInternalStrings[ARTL_ART_trueFalse_791] = "trueFalse ::= ':'  'true'  ";
  artLabelStrings[ARTL_ART_trueFalse_791] = "";
  artlhsL[ARTL_ART_trueFalse_791] = ARTL_ART_trueFalse;
  artPopD[ARTL_ART_trueFalse_791] = true;
  artLabelInternalStrings[ARTL_ART_trueFalse_792] = "trueFalse ::= ':'  'true'  .";
  artLabelStrings[ARTL_ART_trueFalse_792] = "";
  artlhsL[ARTL_ART_trueFalse_792] = ARTL_ART_trueFalse;
  artKindOfs[ARTL_ART_trueFalse_792] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_trueFalse_792] = true;
  arteoR_pL[ARTL_ART_trueFalse_792] = true;
  artPopD[ARTL_ART_trueFalse_792] = true;
  artLabelInternalStrings[ARTL_ART_trueFalse_796] = "trueFalse ::= . ':'  'false'  ";
  artLabelStrings[ARTL_ART_trueFalse_796] = "";
  artlhsL[ARTL_ART_trueFalse_796] = ARTL_ART_trueFalse;
  artKindOfs[ARTL_ART_trueFalse_796] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_trueFalse_796] = true;
  artFolds[ARTL_ART_trueFalse_798] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_trueFalse_797] = "trueFalse ::= ':'  'false'  ";
  artLabelStrings[ARTL_ART_trueFalse_797] = "";
  artlhsL[ARTL_ART_trueFalse_797] = ARTL_ART_trueFalse;
  artPopD[ARTL_ART_trueFalse_797] = true;
  artLabelInternalStrings[ARTL_ART_trueFalse_798] = "trueFalse ::= ':'  . 'false'  ";
  artLabelStrings[ARTL_ART_trueFalse_798] = "";
  artlhsL[ARTL_ART_trueFalse_798] = ARTL_ART_trueFalse;
  artKindOfs[ARTL_ART_trueFalse_798] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_trueFalse_798] = true;
  artPopD[ARTL_ART_trueFalse_798] = true;
  artLabelInternalStrings[ARTL_ART_trueFalse_799] = "trueFalse ::= ':'  'false'  ";
  artLabelStrings[ARTL_ART_trueFalse_799] = "";
  artlhsL[ARTL_ART_trueFalse_799] = ARTL_ART_trueFalse;
  artPopD[ARTL_ART_trueFalse_799] = true;
  artLabelInternalStrings[ARTL_ART_trueFalse_800] = "trueFalse ::= ':'  'false'  .";
  artLabelStrings[ARTL_ART_trueFalse_800] = "";
  artlhsL[ARTL_ART_trueFalse_800] = ARTL_ART_trueFalse;
  artKindOfs[ARTL_ART_trueFalse_800] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_trueFalse_800] = true;
  arteoR_pL[ARTL_ART_trueFalse_800] = true;
  artPopD[ARTL_ART_trueFalse_800] = true;
}

public void artTableInitialiser_ART_union() {
  artLabelInternalStrings[ARTL_ART_union] = "union";
  artLabelStrings[ARTL_ART_union] = "union";
  artKindOfs[ARTL_ART_union] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_union_1280] = "union ::= . not ";
  artLabelStrings[ARTL_ART_union_1280] = "";
  artlhsL[ARTL_ART_union_1280] = ARTL_ART_union;
  artKindOfs[ARTL_ART_union_1280] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_union_1282] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_union_1282] = "union ::= not .";
  artLabelStrings[ARTL_ART_union_1282] = "";
  artlhsL[ARTL_ART_union_1282] = ARTL_ART_union;
  artSlotInstanceOfs[ARTL_ART_union_1282] = ARTL_ART_not;
  artKindOfs[ARTL_ART_union_1282] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_union_1282] = true;
  arteoR_pL[ARTL_ART_union_1282] = true;
  artPopD[ARTL_ART_union_1282] = true;
  artLabelInternalStrings[ARTL_ART_union_1284] = "union ::= . union '||'  not ";
  artLabelStrings[ARTL_ART_union_1284] = "";
  artlhsL[ARTL_ART_union_1284] = ARTL_ART_union;
  artKindOfs[ARTL_ART_union_1284] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_union_1286] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_union_1286] = "union ::= union . '||'  not ";
  artLabelStrings[ARTL_ART_union_1286] = "";
  artlhsL[ARTL_ART_union_1286] = ARTL_ART_union;
  artSlotInstanceOfs[ARTL_ART_union_1286] = ARTL_ART_union;
  artKindOfs[ARTL_ART_union_1286] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_union_1286] = true;
  artFolds[ARTL_ART_union_1288] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_union_1287] = "union ::= union '||'  not ";
  artLabelStrings[ARTL_ART_union_1287] = "";
  artlhsL[ARTL_ART_union_1287] = ARTL_ART_union;
  artLabelInternalStrings[ARTL_ART_union_1288] = "union ::= union '||'  . not ";
  artLabelStrings[ARTL_ART_union_1288] = "";
  artlhsL[ARTL_ART_union_1288] = ARTL_ART_union;
  artKindOfs[ARTL_ART_union_1288] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_union_1290] = "union ::= union '||'  not .";
  artLabelStrings[ARTL_ART_union_1290] = "";
  artlhsL[ARTL_ART_union_1290] = ARTL_ART_union;
  artSlotInstanceOfs[ARTL_ART_union_1290] = ARTL_ART_not;
  artKindOfs[ARTL_ART_union_1290] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_union_1290] = true;
  arteoR_pL[ARTL_ART_union_1290] = true;
  artPopD[ARTL_ART_union_1290] = true;
}

public void artTableInitialiser_ART_whitespacer() {
  artLabelInternalStrings[ARTL_ART_whitespacer] = "whitespacer";
  artLabelStrings[ARTL_ART_whitespacer] = "whitespacer";
  artKindOfs[ARTL_ART_whitespacer] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_whitespacer_900] = "whitespacer ::= . nonterminal ";
  artLabelStrings[ARTL_ART_whitespacer_900] = "";
  artlhsL[ARTL_ART_whitespacer_900] = ARTL_ART_whitespacer;
  artKindOfs[ARTL_ART_whitespacer_900] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_whitespacer_902] = "whitespacer ::= nonterminal .";
  artLabelStrings[ARTL_ART_whitespacer_902] = "";
  artlhsL[ARTL_ART_whitespacer_902] = ARTL_ART_whitespacer;
  artSlotInstanceOfs[ARTL_ART_whitespacer_902] = ARTL_ART_nonterminal;
  artKindOfs[ARTL_ART_whitespacer_902] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_whitespacer_902] = true;
  arteoR_pL[ARTL_ART_whitespacer_902] = true;
  artPopD[ARTL_ART_whitespacer_902] = true;
  artLabelInternalStrings[ARTL_ART_whitespacer_906] = "whitespacer ::= . builtinTerminal ";
  artLabelStrings[ARTL_ART_whitespacer_906] = "";
  artlhsL[ARTL_ART_whitespacer_906] = ARTL_ART_whitespacer;
  artKindOfs[ARTL_ART_whitespacer_906] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_whitespacer_908] = "whitespacer ::= builtinTerminal .";
  artLabelStrings[ARTL_ART_whitespacer_908] = "";
  artlhsL[ARTL_ART_whitespacer_908] = ARTL_ART_whitespacer;
  artSlotInstanceOfs[ARTL_ART_whitespacer_908] = ARTL_ART_builtinTerminal;
  artKindOfs[ARTL_ART_whitespacer_908] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_whitespacer_908] = true;
  arteoR_pL[ARTL_ART_whitespacer_908] = true;
  artPopD[ARTL_ART_whitespacer_908] = true;
  artLabelInternalStrings[ARTL_ART_whitespacer_912] = "whitespacer ::= . characterTerminal ";
  artLabelStrings[ARTL_ART_whitespacer_912] = "";
  artlhsL[ARTL_ART_whitespacer_912] = ARTL_ART_whitespacer;
  artKindOfs[ARTL_ART_whitespacer_912] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_whitespacer_914] = "whitespacer ::= characterTerminal .";
  artLabelStrings[ARTL_ART_whitespacer_914] = "";
  artlhsL[ARTL_ART_whitespacer_914] = ARTL_ART_whitespacer;
  artSlotInstanceOfs[ARTL_ART_whitespacer_914] = ARTL_ART_characterTerminal;
  artKindOfs[ARTL_ART_whitespacer_914] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_whitespacer_914] = true;
  arteoR_pL[ARTL_ART_whitespacer_914] = true;
  artPopD[ARTL_ART_whitespacer_914] = true;
}

public void artTableInitialiser_ART_whitespacers() {
  artLabelInternalStrings[ARTL_ART_whitespacers] = "whitespacers";
  artLabelStrings[ARTL_ART_whitespacers] = "whitespacers";
  artKindOfs[ARTL_ART_whitespacers] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_whitespacers_670] = "whitespacers ::= . whitespacer ";
  artLabelStrings[ARTL_ART_whitespacers_670] = "";
  artlhsL[ARTL_ART_whitespacers_670] = ARTL_ART_whitespacers;
  artKindOfs[ARTL_ART_whitespacers_670] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_whitespacers_672] = "whitespacers ::= whitespacer .";
  artLabelStrings[ARTL_ART_whitespacers_672] = "";
  artlhsL[ARTL_ART_whitespacers_672] = ARTL_ART_whitespacers;
  artSlotInstanceOfs[ARTL_ART_whitespacers_672] = ARTL_ART_whitespacer;
  artKindOfs[ARTL_ART_whitespacers_672] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_whitespacers_672] = true;
  arteoR_pL[ARTL_ART_whitespacers_672] = true;
  artPopD[ARTL_ART_whitespacers_672] = true;
  artLabelInternalStrings[ARTL_ART_whitespacers_674] = "whitespacers ::= . whitespacer ','  whitespacers ";
  artLabelStrings[ARTL_ART_whitespacers_674] = "";
  artlhsL[ARTL_ART_whitespacers_674] = ARTL_ART_whitespacers;
  artKindOfs[ARTL_ART_whitespacers_674] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_whitespacers_676] = "whitespacers ::= whitespacer . ','  whitespacers ";
  artLabelStrings[ARTL_ART_whitespacers_676] = "";
  artlhsL[ARTL_ART_whitespacers_676] = ARTL_ART_whitespacers;
  artSlotInstanceOfs[ARTL_ART_whitespacers_676] = ARTL_ART_whitespacer;
  artKindOfs[ARTL_ART_whitespacers_676] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_whitespacers_676] = true;
  artLabelInternalStrings[ARTL_ART_whitespacers_677] = "whitespacers ::= whitespacer ','  whitespacers ";
  artLabelStrings[ARTL_ART_whitespacers_677] = "";
  artlhsL[ARTL_ART_whitespacers_677] = ARTL_ART_whitespacers;
  artLabelInternalStrings[ARTL_ART_whitespacers_678] = "whitespacers ::= whitespacer ','  . whitespacers ";
  artLabelStrings[ARTL_ART_whitespacers_678] = "";
  artlhsL[ARTL_ART_whitespacers_678] = ARTL_ART_whitespacers;
  artKindOfs[ARTL_ART_whitespacers_678] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_whitespacers_680] = "whitespacers ::= whitespacer ','  whitespacers .";
  artLabelStrings[ARTL_ART_whitespacers_680] = "";
  artlhsL[ARTL_ART_whitespacers_680] = ARTL_ART_whitespacers;
  artSlotInstanceOfs[ARTL_ART_whitespacers_680] = ARTL_ART_whitespacers;
  artKindOfs[ARTL_ART_whitespacers_680] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_whitespacers_680] = true;
  arteoR_pL[ARTL_ART_whitespacers_680] = true;
  artPopD[ARTL_ART_whitespacers_680] = true;
}

public void artTableInitialise() {
  artLabelInternalStrings = new String[ARTX_LABEL_EXTENT + 1];
  artLabelStrings = new String[ARTX_LABEL_EXTENT + 1];
  artLabelInternalStrings[ARTL_EOS] = "ART$";
  artLabelStrings[ARTL_EOS] = " EOS $";
  artLabelInternalStrings[ARTX_DESPATCH] = "ARTX_DESPATCH";
  artLabelStrings[ARTX_DESPATCH] = " DESPATCH";
  artLabelInternalStrings[ARTL_DUMMY] = "ARTL_DUMMY";
  artLabelStrings[ARTL_DUMMY] = " DUMMY";
  artLabelInternalStrings[ARTX_LABEL_EXTENT] = "!!ILLEGAL!!";
  artLabelStrings[ARTX_LABEL_EXTENT] = " ILLEGAL";
  artLabelStrings[ARTL_EPSILON] = "#";
  artLabelInternalStrings[ARTL_EPSILON] = "#";

  artTerminalRequiresWhiteSpace = new boolean[ARTL_EPSILON];
  artInitialiseBooleanArray(artTerminalRequiresWhiteSpace, 0, ARTL_EPSILON, false);

  artTerminalCaseInsensitive = new boolean[ARTL_EPSILON];
  artInitialiseBooleanArray(artTerminalCaseInsensitive, 0, ARTL_EPSILON, false);

  artlhsL = new int[ARTX_LABEL_EXTENT];
  artInitialiseIntegerArray(artlhsL, 0, ARTX_LABEL_EXTENT);
  artlhsL[ARTX_DESPATCH] = ARTX_DESPATCH;

  artKindOfs = new int[ARTX_LABEL_EXTENT + 1];
  artKindOfs[ARTL_EOS] = ARTK_EOS;
  artKindOfs[ARTL_EPSILON] = ARTK_EPSILON;

  artHigher = new ARTBitSet[ARTX_LABEL_EXTENT + 1];

  artLonger = new ARTBitSet[ARTX_LABEL_EXTENT + 1];

  artShorter = new ARTBitSet[ARTX_LABEL_EXTENT + 1];

  artPreSlots = new int[ARTX_LABEL_EXTENT];
  artInitialiseIntegerArray(artPreSlots, 0, ARTX_LABEL_EXTENT);

  artPostSlots = new int[ARTX_LABEL_EXTENT];
  artInitialiseIntegerArray(artPostSlots, 0, ARTX_LABEL_EXTENT);

  artInstanceOfs = new int[ARTX_LABEL_EXTENT];
  artInitialiseIntegerArray(artInstanceOfs, 0, ARTX_LABEL_EXTENT);

  artSlotInstanceOfs = new int[ARTX_LABEL_EXTENT];
  artInitialiseIntegerArray(artSlotInstanceOfs, 0, ARTX_LABEL_EXTENT);

  artUserNameOfs = new int[ARTX_LABEL_EXTENT + 1];

  artGathers = new int[ARTX_LABEL_EXTENT];
  artInitialiseIntegerArray(artGathers, 0, ARTX_LABEL_EXTENT);

  artFolds = new int[ARTX_LABEL_EXTENT];
  artInitialiseIntegerArray(artFolds, 0, ARTX_LABEL_EXTENT, 0);

  artpL = new int[ARTX_LABEL_EXTENT];
  artInitialiseIntegerArray(artpL, 0, ARTX_LABEL_EXTENT);

  artaL = new int[ARTX_LABEL_EXTENT];
  artInitialiseIntegerArray(artaL, 0, ARTX_LABEL_EXTENT);

  artcolonL = new int[ARTX_LABEL_EXTENT];
  artInitialiseIntegerArray(artcolonL, 0, ARTX_LABEL_EXTENT);

  arteoOPL = new boolean[ARTX_LABEL_EXTENT];
  artInitialiseBooleanArray(arteoOPL, 0, ARTX_LABEL_EXTENT, false);

  artfiRL = new boolean[ARTX_LABEL_EXTENT];
  artInitialiseBooleanArray(artfiRL, 0, ARTX_LABEL_EXTENT, false);

  artfiPCL = new boolean[ARTX_LABEL_EXTENT];
  artInitialiseBooleanArray(artfiPCL, 0, ARTX_LABEL_EXTENT, false);

  arteoRL = new boolean[ARTX_LABEL_EXTENT];
  artInitialiseBooleanArray(arteoRL, 0, ARTX_LABEL_EXTENT, false);

  arteoR_pL = new boolean[ARTX_LABEL_EXTENT];
  artInitialiseBooleanArray(arteoR_pL, 0, ARTX_LABEL_EXTENT, false);

  artPopD = new boolean[ARTX_LABEL_EXTENT];
  artInitialiseBooleanArray(artPopD, 0, ARTX_LABEL_EXTENT, false);

  artLabelStrings[ARTTB_CHAR_BQ] = "CHAR_BQ";
  artLabelInternalStrings[ARTTB_CHAR_BQ] = "&CHAR_BQ";
  artKindOfs[ARTTB_CHAR_BQ] = ARTK_BUILTIN_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTB_CHAR_BQ] = true;
  artLabelStrings[ARTTB_ID] = "ID";
  artLabelInternalStrings[ARTTB_ID] = "&ID";
  artKindOfs[ARTTB_ID] = ARTK_BUILTIN_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTB_ID] = true;
  artLabelStrings[ARTTB_INTEGER] = "INTEGER";
  artLabelInternalStrings[ARTTB_INTEGER] = "&INTEGER";
  artKindOfs[ARTTB_INTEGER] = ARTK_BUILTIN_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTB_INTEGER] = true;
  artLabelStrings[ARTTB_REAL] = "REAL";
  artLabelInternalStrings[ARTTB_REAL] = "&REAL";
  artKindOfs[ARTTB_REAL] = ARTK_BUILTIN_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTB_REAL] = true;
  artLabelStrings[ARTTB_STRING_BRACE_NEST] = "STRING_BRACE_NEST";
  artLabelInternalStrings[ARTTB_STRING_BRACE_NEST] = "&STRING_BRACE_NEST";
  artKindOfs[ARTTB_STRING_BRACE_NEST] = ARTK_BUILTIN_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTB_STRING_BRACE_NEST] = true;
  artLabelStrings[ARTTB_STRING_DOLLAR] = "STRING_DOLLAR";
  artLabelInternalStrings[ARTTB_STRING_DOLLAR] = "&STRING_DOLLAR";
  artKindOfs[ARTTB_STRING_DOLLAR] = ARTK_BUILTIN_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTB_STRING_DOLLAR] = true;
  artLabelStrings[ARTTB_STRING_DQ] = "STRING_DQ";
  artLabelInternalStrings[ARTTB_STRING_DQ] = "&STRING_DQ";
  artKindOfs[ARTTB_STRING_DQ] = ARTK_BUILTIN_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTB_STRING_DQ] = true;
  artLabelStrings[ARTTB_STRING_PLAIN_SQ] = "STRING_PLAIN_SQ";
  artLabelInternalStrings[ARTTB_STRING_PLAIN_SQ] = "&STRING_PLAIN_SQ";
  artKindOfs[ARTTB_STRING_PLAIN_SQ] = ARTK_BUILTIN_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTB_STRING_PLAIN_SQ] = true;
  artLabelStrings[ARTTS__SHREIK] = "!";
  artLabelInternalStrings[ARTTS__SHREIK] = "'!'";
  artKindOfs[ARTTS__SHREIK] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIK] = true;
  artLabelStrings[ARTTS__HASH] = "#";
  artLabelInternalStrings[ARTTS__HASH] = "'#'";
  artKindOfs[ARTTS__HASH] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__HASH] = true;
  artLabelStrings[ARTTS__PERCENT_PERCENT] = "%%";
  artLabelInternalStrings[ARTTS__PERCENT_PERCENT] = "'%%'";
  artKindOfs[ARTTS__PERCENT_PERCENT] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__PERCENT_PERCENT] = true;
  artLabelStrings[ARTTS__AMPERSAND] = "&";
  artLabelInternalStrings[ARTTS__AMPERSAND] = "'&'";
  artKindOfs[ARTTS__AMPERSAND] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__AMPERSAND] = true;
  artLabelStrings[ARTTS__LPAR] = "(";
  artLabelInternalStrings[ARTTS__LPAR] = "'('";
  artKindOfs[ARTTS__LPAR] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__LPAR] = true;
  artLabelStrings[ARTTS__RPAR] = ")";
  artLabelInternalStrings[ARTTS__RPAR] = "')'";
  artKindOfs[ARTTS__RPAR] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__RPAR] = true;
  artLabelStrings[ARTTS__STAR] = "*";
  artLabelInternalStrings[ARTTS__STAR] = "'*'";
  artKindOfs[ARTTS__STAR] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__STAR] = true;
  artLabelStrings[ARTTS__PLUS] = "+";
  artLabelInternalStrings[ARTTS__PLUS] = "'+'";
  artKindOfs[ARTTS__PLUS] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__PLUS] = true;
  artLabelStrings[ARTTS__COMMA] = ",";
  artLabelInternalStrings[ARTTS__COMMA] = "','";
  artKindOfs[ARTTS__COMMA] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__COMMA] = true;
  artLabelStrings[ARTTS__PERIOD] = ".";
  artLabelInternalStrings[ARTTS__PERIOD] = "'.'";
  artKindOfs[ARTTS__PERIOD] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__PERIOD] = true;
  artLabelStrings[ARTTS__PERIOD_PERIOD] = "..";
  artLabelInternalStrings[ARTTS__PERIOD_PERIOD] = "'..'";
  artKindOfs[ARTTS__PERIOD_PERIOD] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__PERIOD_PERIOD] = true;
  artLabelStrings[ARTTS__SLASH] = "/";
  artLabelInternalStrings[ARTTS__SLASH] = "'/'";
  artKindOfs[ARTTS__SLASH] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SLASH] = true;
  artLabelStrings[ARTTS__COLON] = ":";
  artLabelInternalStrings[ARTTS__COLON] = "':'";
  artKindOfs[ARTTS__COLON] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__COLON] = true;
  artLabelStrings[ARTTS__COLON_COLON_EQUAL] = "::=";
  artLabelInternalStrings[ARTTS__COLON_COLON_EQUAL] = "'::='";
  artKindOfs[ARTTS__COLON_COLON_EQUAL] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__COLON_COLON_EQUAL] = true;
  artLabelStrings[ARTTS__LT] = "<";
  artLabelInternalStrings[ARTTS__LT] = "'<'";
  artKindOfs[ARTTS__LT] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__LT] = true;
  artLabelStrings[ARTTS__LT_LT] = "<<";
  artLabelInternalStrings[ARTTS__LT_LT] = "'<<'";
  artKindOfs[ARTTS__LT_LT] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__LT_LT] = true;
  artLabelStrings[ARTTS__EQUAL] = "=";
  artLabelInternalStrings[ARTTS__EQUAL] = "'='";
  artKindOfs[ARTTS__EQUAL] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__EQUAL] = true;
  artLabelStrings[ARTTS__GT] = ">";
  artLabelInternalStrings[ARTTS__GT] = "'>'";
  artKindOfs[ARTTS__GT] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__GT] = true;
  artLabelStrings[ARTTS__GT_GT] = ">>";
  artLabelInternalStrings[ARTTS__GT_GT] = "'>>'";
  artKindOfs[ARTTS__GT_GT] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__GT_GT] = true;
  artLabelStrings[ARTTS__QUERY] = "?";
  artLabelInternalStrings[ARTTS__QUERY] = "'?'";
  artKindOfs[ARTTS__QUERY] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__QUERY] = true;
  artLabelStrings[ARTTS__AT] = "@";
  artLabelInternalStrings[ARTTS__AT] = "'@'";
  artKindOfs[ARTTS__AT] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__AT] = true;
  artLabelStrings[ARTTS_FIFODescriptors] = "FIFODescriptors";
  artLabelInternalStrings[ARTTS_FIFODescriptors] = "'FIFODescriptors'";
  artKindOfs[ARTTS_FIFODescriptors] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_FIFODescriptors] = true;
  artLabelStrings[ARTTS__BACKSLASH] = "\\";
  artLabelInternalStrings[ARTTS__BACKSLASH] = "'\\'";
  artKindOfs[ARTTS__BACKSLASH] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__BACKSLASH] = true;
  artLabelStrings[ARTTS__BACKSLASH_BACKSLASH] = "\\\\";
  artLabelInternalStrings[ARTTS__BACKSLASH_BACKSLASH] = "'\\\\'";
  artKindOfs[ARTTS__BACKSLASH_BACKSLASH] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__BACKSLASH_BACKSLASH] = true;
  artLabelStrings[ARTTS__UPARROW] = "^";
  artLabelInternalStrings[ARTTS__UPARROW] = "'^'";
  artKindOfs[ARTTS__UPARROW] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__UPARROW] = true;
  artLabelStrings[ARTTS__UPARROW_UPARROW] = "^^";
  artLabelInternalStrings[ARTTS__UPARROW_UPARROW] = "'^^'";
  artKindOfs[ARTTS__UPARROW_UPARROW] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__UPARROW_UPARROW] = true;
  artLabelStrings[ARTTS__UPARROW_UPARROW_UPARROW] = "^^^";
  artLabelInternalStrings[ARTTS__UPARROW_UPARROW_UPARROW] = "'^^^'";
  artKindOfs[ARTTS__UPARROW_UPARROW_UPARROW] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__UPARROW_UPARROW_UPARROW] = true;
  artLabelStrings[ARTTS__UPARROW_] = "^_";
  artLabelInternalStrings[ARTTS__UPARROW_] = "'^_'";
  artKindOfs[ARTTS__UPARROW_] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__UPARROW_] = true;
  artLabelStrings[ARTTS_absorb] = "absorb";
  artLabelInternalStrings[ARTTS_absorb] = "'absorb'";
  artKindOfs[ARTTS_absorb] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_absorb] = true;
  artLabelStrings[ARTTS_anyBuiltinTerminal] = "anyBuiltinTerminal";
  artLabelInternalStrings[ARTTS_anyBuiltinTerminal] = "'anyBuiltinTerminal'";
  artKindOfs[ARTTS_anyBuiltinTerminal] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_anyBuiltinTerminal] = true;
  artLabelStrings[ARTTS_anyCaseInsensitiveTerminal] = "anyCaseInsensitiveTerminal";
  artLabelInternalStrings[ARTTS_anyCaseInsensitiveTerminal] = "'anyCaseInsensitiveTerminal'";
  artKindOfs[ARTTS_anyCaseInsensitiveTerminal] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_anyCaseInsensitiveTerminal] = true;
  artLabelStrings[ARTTS_anyCaseSensitiveTerminal] = "anyCaseSensitiveTerminal";
  artLabelInternalStrings[ARTTS_anyCaseSensitiveTerminal] = "'anyCaseSensitiveTerminal'";
  artKindOfs[ARTTS_anyCaseSensitiveTerminal] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_anyCaseSensitiveTerminal] = true;
  artLabelStrings[ARTTS_anyCharacterTerminal] = "anyCharacterTerminal";
  artLabelInternalStrings[ARTTS_anyCharacterTerminal] = "'anyCharacterTerminal'";
  artKindOfs[ARTTS_anyCharacterTerminal] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_anyCharacterTerminal] = true;
  artLabelStrings[ARTTS_anyLiteralTerminal] = "anyLiteralTerminal";
  artLabelInternalStrings[ARTTS_anyLiteralTerminal] = "'anyLiteralTerminal'";
  artKindOfs[ARTTS_anyLiteralTerminal] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_anyLiteralTerminal] = true;
  artLabelStrings[ARTTS_anyNonterminal] = "anyNonterminal";
  artLabelInternalStrings[ARTTS_anyNonterminal] = "'anyNonterminal'";
  artKindOfs[ARTTS_anyNonterminal] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_anyNonterminal] = true;
  artLabelStrings[ARTTS_anyParaterminal] = "anyParaterminal";
  artLabelInternalStrings[ARTTS_anyParaterminal] = "'anyParaterminal'";
  artKindOfs[ARTTS_anyParaterminal] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_anyParaterminal] = true;
  artLabelStrings[ARTTS_anyTerminal] = "anyTerminal";
  artLabelInternalStrings[ARTTS_anyTerminal] = "'anyTerminal'";
  artKindOfs[ARTTS_anyTerminal] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_anyTerminal] = true;
  artLabelStrings[ARTTS_choose] = "choose";
  artLabelInternalStrings[ARTTS_choose] = "'choose'";
  artKindOfs[ARTTS_choose] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_choose] = true;
  artLabelStrings[ARTTS_cnp] = "cnp";
  artLabelInternalStrings[ARTTS_cnp] = "'cnp'";
  artKindOfs[ARTTS_cnp] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_cnp] = true;
  artLabelStrings[ARTTS_cnpGeneratorPool] = "cnpGeneratorPool";
  artLabelInternalStrings[ARTTS_cnpGeneratorPool] = "'cnpGeneratorPool'";
  artKindOfs[ARTTS_cnpGeneratorPool] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_cnpGeneratorPool] = true;
  artLabelStrings[ARTTS_cnpIndexedAPI] = "cnpIndexedAPI";
  artLabelInternalStrings[ARTTS_cnpIndexedAPI] = "'cnpIndexedAPI'";
  artKindOfs[ARTTS_cnpIndexedAPI] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_cnpIndexedAPI] = true;
  artLabelStrings[ARTTS_cnpIndexedPool] = "cnpIndexedPool";
  artLabelInternalStrings[ARTTS_cnpIndexedPool] = "'cnpIndexedPool'";
  artKindOfs[ARTTS_cnpIndexedPool] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_cnpIndexedPool] = true;
  artLabelStrings[ARTTS_cnpLinkedAPI] = "cnpLinkedAPI";
  artLabelInternalStrings[ARTTS_cnpLinkedAPI] = "'cnpLinkedAPI'";
  artKindOfs[ARTTS_cnpLinkedAPI] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_cnpLinkedAPI] = true;
  artLabelStrings[ARTTS_earley] = "earley";
  artLabelInternalStrings[ARTTS_earley] = "'earley'";
  artKindOfs[ARTTS_earley] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_earley] = true;
  artLabelStrings[ARTTS_earley2007LinkedAPI] = "earley2007LinkedAPI";
  artLabelInternalStrings[ARTTS_earley2007LinkedAPI] = "'earley2007LinkedAPI'";
  artKindOfs[ARTTS_earley2007LinkedAPI] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_earley2007LinkedAPI] = true;
  artLabelStrings[ARTTS_earleyIndexedAPI] = "earleyIndexedAPI";
  artLabelInternalStrings[ARTTS_earleyIndexedAPI] = "'earleyIndexedAPI'";
  artKindOfs[ARTTS_earleyIndexedAPI] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_earleyIndexedAPI] = true;
  artLabelStrings[ARTTS_earleyIndexedData] = "earleyIndexedData";
  artLabelInternalStrings[ARTTS_earleyIndexedData] = "'earleyIndexedData'";
  artKindOfs[ARTTS_earleyIndexedData] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_earleyIndexedData] = true;
  artLabelStrings[ARTTS_earleyIndexedPool] = "earleyIndexedPool";
  artLabelInternalStrings[ARTTS_earleyIndexedPool] = "'earleyIndexedPool'";
  artKindOfs[ARTTS_earleyIndexedPool] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_earleyIndexedPool] = true;
  artLabelStrings[ARTTS_earleyLinkedAPI] = "earleyLinkedAPI";
  artLabelInternalStrings[ARTTS_earleyLinkedAPI] = "'earleyLinkedAPI'";
  artKindOfs[ARTTS_earleyLinkedAPI] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_earleyLinkedAPI] = true;
  artLabelStrings[ARTTS_earleyTable] = "earleyTable";
  artLabelInternalStrings[ARTTS_earleyTable] = "'earleyTable'";
  artKindOfs[ARTTS_earleyTable] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_earleyTable] = true;
  artLabelStrings[ARTTS_earleyTableIndexedAPI] = "earleyTableIndexedAPI";
  artLabelInternalStrings[ARTTS_earleyTableIndexedAPI] = "'earleyTableIndexedAPI'";
  artKindOfs[ARTTS_earleyTableIndexedAPI] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_earleyTableIndexedAPI] = true;
  artLabelStrings[ARTTS_earleyTableIndexedData] = "earleyTableIndexedData";
  artLabelInternalStrings[ARTTS_earleyTableIndexedData] = "'earleyTableIndexedData'";
  artKindOfs[ARTTS_earleyTableIndexedData] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_earleyTableIndexedData] = true;
  artLabelStrings[ARTTS_earleyTableIndexedPool] = "earleyTableIndexedPool";
  artLabelInternalStrings[ARTTS_earleyTableIndexedPool] = "'earleyTableIndexedPool'";
  artKindOfs[ARTTS_earleyTableIndexedPool] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_earleyTableIndexedPool] = true;
  artLabelStrings[ARTTS_earleyTableLinkedAPI] = "earleyTableLinkedAPI";
  artLabelInternalStrings[ARTTS_earleyTableLinkedAPI] = "'earleyTableLinkedAPI'";
  artKindOfs[ARTTS_earleyTableLinkedAPI] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_earleyTableLinkedAPI] = true;
  artLabelStrings[ARTTS_element] = "element";
  artLabelInternalStrings[ARTTS_element] = "'element'";
  artKindOfs[ARTTS_element] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_element] = true;
  artLabelStrings[ARTTS_false] = "false";
  artLabelInternalStrings[ARTTS_false] = "'false'";
  artKindOfs[ARTTS_false] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_false] = true;
  artLabelStrings[ARTTS_generateDynamic] = "generateDynamic";
  artLabelInternalStrings[ARTTS_generateDynamic] = "'generateDynamic'";
  artKindOfs[ARTTS_generateDynamic] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_generateDynamic] = true;
  artLabelStrings[ARTTS_generateFragment] = "generateFragment";
  artLabelInternalStrings[ARTTS_generateFragment] = "'generateFragment'";
  artKindOfs[ARTTS_generateFragment] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_generateFragment] = true;
  artLabelStrings[ARTTS_generatePool] = "generatePool";
  artLabelInternalStrings[ARTTS_generatePool] = "'generatePool'";
  artKindOfs[ARTTS_generatePool] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_generatePool] = true;
  artLabelStrings[ARTTS_generateState] = "generateState";
  artLabelInternalStrings[ARTTS_generateState] = "'generateState'";
  artKindOfs[ARTTS_generateState] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_generateState] = true;
  artLabelStrings[ARTTS_generateStatic] = "generateStatic";
  artLabelInternalStrings[ARTTS_generateStatic] = "'generateStatic'";
  artKindOfs[ARTTS_generateStatic] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_generateStatic] = true;
  artLabelStrings[ARTTS_gll] = "gll";
  artLabelInternalStrings[ARTTS_gll] = "'gll'";
  artKindOfs[ARTTS_gll] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_gll] = true;
  artLabelStrings[ARTTS_gllClusteredGeneratorPool] = "gllClusteredGeneratorPool";
  artLabelInternalStrings[ARTTS_gllClusteredGeneratorPool] = "'gllClusteredGeneratorPool'";
  artKindOfs[ARTTS_gllClusteredGeneratorPool] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_gllClusteredGeneratorPool] = true;
  artLabelStrings[ARTTS_gllGeneratorPool] = "gllGeneratorPool";
  artLabelInternalStrings[ARTTS_gllGeneratorPool] = "'gllGeneratorPool'";
  artKindOfs[ARTTS_gllGeneratorPool] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_gllGeneratorPool] = true;
  artLabelStrings[ARTTS_gllTWEGeneratorPool] = "gllTWEGeneratorPool";
  artLabelInternalStrings[ARTTS_gllTWEGeneratorPool] = "'gllTWEGeneratorPool'";
  artKindOfs[ARTTS_gllTWEGeneratorPool] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_gllTWEGeneratorPool] = true;
  artLabelStrings[ARTTS_grammarWrite] = "grammarWrite";
  artLabelInternalStrings[ARTTS_grammarWrite] = "'grammarWrite'";
  artKindOfs[ARTTS_grammarWrite] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_grammarWrite] = true;
  artLabelStrings[ARTTS_gssShow] = "gssShow";
  artLabelInternalStrings[ARTTS_gssShow] = "'gssShow'";
  artKindOfs[ARTTS_gssShow] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_gssShow] = true;
  artLabelStrings[ARTTS_import] = "import";
  artLabelInternalStrings[ARTTS_import] = "'import'";
  artKindOfs[ARTTS_import] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_import] = true;
  artLabelStrings[ARTTS_injectInstance] = "injectInstance";
  artLabelInternalStrings[ARTTS_injectInstance] = "'injectInstance'";
  artKindOfs[ARTTS_injectInstance] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_injectInstance] = true;
  artLabelStrings[ARTTS_injectProduction] = "injectProduction";
  artLabelInternalStrings[ARTTS_injectProduction] = "'injectProduction'";
  artKindOfs[ARTTS_injectProduction] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_injectProduction] = true;
  artLabelStrings[ARTTS_injectProductionOff] = "injectProductionOff";
  artLabelInternalStrings[ARTTS_injectProductionOff] = "'injectProductionOff'";
  artKindOfs[ARTTS_injectProductionOff] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_injectProductionOff] = true;
  artLabelStrings[ARTTS_inputPrint] = "inputPrint";
  artLabelInternalStrings[ARTTS_inputPrint] = "'inputPrint'";
  artKindOfs[ARTTS_inputPrint] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_inputPrint] = true;
  artLabelStrings[ARTTS_lcnp] = "lcnp";
  artLabelInternalStrings[ARTTS_lcnp] = "'lcnp'";
  artKindOfs[ARTTS_lcnp] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_lcnp] = true;
  artLabelStrings[ARTTS_lcnpGeneratorPool] = "lcnpGeneratorPool";
  artLabelInternalStrings[ARTTS_lcnpGeneratorPool] = "'lcnpGeneratorPool'";
  artKindOfs[ARTTS_lcnpGeneratorPool] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_lcnpGeneratorPool] = true;
  artLabelStrings[ARTTS_lcnpIndexedAPI] = "lcnpIndexedAPI";
  artLabelInternalStrings[ARTTS_lcnpIndexedAPI] = "'lcnpIndexedAPI'";
  artKindOfs[ARTTS_lcnpIndexedAPI] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_lcnpIndexedAPI] = true;
  artLabelStrings[ARTTS_lcnpIndexedPool] = "lcnpIndexedPool";
  artLabelInternalStrings[ARTTS_lcnpIndexedPool] = "'lcnpIndexedPool'";
  artKindOfs[ARTTS_lcnpIndexedPool] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_lcnpIndexedPool] = true;
  artLabelStrings[ARTTS_lcnpLinkedAPI] = "lcnpLinkedAPI";
  artLabelInternalStrings[ARTTS_lcnpLinkedAPI] = "'lcnpLinkedAPI'";
  artKindOfs[ARTTS_lcnpLinkedAPI] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_lcnpLinkedAPI] = true;
  artLabelStrings[ARTTS_lexDFA] = "lexDFA";
  artLabelInternalStrings[ARTTS_lexDFA] = "'lexDFA'";
  artKindOfs[ARTTS_lexDFA] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_lexDFA] = true;
  artLabelStrings[ARTTS_lexerData] = "lexerData";
  artLabelInternalStrings[ARTTS_lexerData] = "'lexerData'";
  artKindOfs[ARTTS_lexerData] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_lexerData] = true;
  artLabelStrings[ARTTS_lexerName] = "lexerName";
  artLabelInternalStrings[ARTTS_lexerName] = "'lexerName'";
  artKindOfs[ARTTS_lexerName] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_lexerName] = true;
  artLabelStrings[ARTTS_longest] = "longest";
  artLabelInternalStrings[ARTTS_longest] = "'longest'";
  artKindOfs[ARTTS_longest] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_longest] = true;
  artLabelStrings[ARTTS_mgll] = "mgll";
  artLabelInternalStrings[ARTTS_mgll] = "'mgll'";
  artKindOfs[ARTTS_mgll] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_mgll] = true;
  artLabelStrings[ARTTS_mgllGeneratorPool] = "mgllGeneratorPool";
  artLabelInternalStrings[ARTTS_mgllGeneratorPool] = "'mgllGeneratorPool'";
  artKindOfs[ARTTS_mgllGeneratorPool] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_mgllGeneratorPool] = true;
  artLabelStrings[ARTTS_namespace] = "namespace";
  artLabelInternalStrings[ARTTS_namespace] = "'namespace'";
  artKindOfs[ARTTS_namespace] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_namespace] = true;
  artLabelStrings[ARTTS_osbrd] = "osbrd";
  artLabelInternalStrings[ARTTS_osbrd] = "'osbrd'";
  artKindOfs[ARTTS_osbrd] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_osbrd] = true;
  artLabelStrings[ARTTS_osbrdGenerator] = "osbrdGenerator";
  artLabelInternalStrings[ARTTS_osbrdGenerator] = "'osbrdGenerator'";
  artKindOfs[ARTTS_osbrdGenerator] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_osbrdGenerator] = true;
  artLabelStrings[ARTTS_outputDirectory] = "outputDirectory";
  artLabelInternalStrings[ARTTS_outputDirectory] = "'outputDirectory'";
  artKindOfs[ARTTS_outputDirectory] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_outputDirectory] = true;
  artLabelStrings[ARTTS_paraterminal] = "paraterminal";
  artLabelInternalStrings[ARTTS_paraterminal] = "'paraterminal'";
  artKindOfs[ARTTS_paraterminal] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_paraterminal] = true;
  artLabelStrings[ARTTS_parseCounts] = "parseCounts";
  artLabelInternalStrings[ARTTS_parseCounts] = "'parseCounts'";
  artKindOfs[ARTTS_parseCounts] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_parseCounts] = true;
  artLabelStrings[ARTTS_parserName] = "parserName";
  artLabelInternalStrings[ARTTS_parserName] = "'parserName'";
  artKindOfs[ARTTS_parserName] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_parserName] = true;
  artLabelStrings[ARTTS_predictivePops] = "predictivePops";
  artLabelInternalStrings[ARTTS_predictivePops] = "'predictivePops'";
  artKindOfs[ARTTS_predictivePops] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_predictivePops] = true;
  artLabelStrings[ARTTS_prelude] = "prelude";
  artLabelInternalStrings[ARTTS_prelude] = "'prelude'";
  artKindOfs[ARTTS_prelude] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_prelude] = true;
  artLabelStrings[ARTTS_shortest] = "shortest";
  artLabelInternalStrings[ARTTS_shortest] = "'shortest'";
  artKindOfs[ARTTS_shortest] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_shortest] = true;
  artLabelStrings[ARTTS_sppfLongest] = "sppfLongest";
  artLabelInternalStrings[ARTTS_sppfLongest] = "'sppfLongest'";
  artKindOfs[ARTTS_sppfLongest] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_sppfLongest] = true;
  artLabelStrings[ARTTS_sppfPriority] = "sppfPriority";
  artLabelInternalStrings[ARTTS_sppfPriority] = "'sppfPriority'";
  artKindOfs[ARTTS_sppfPriority] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_sppfPriority] = true;
  artLabelStrings[ARTTS_sppfShow] = "sppfShow";
  artLabelInternalStrings[ARTTS_sppfShow] = "'sppfShow'";
  artKindOfs[ARTTS_sppfShow] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_sppfShow] = true;
  artLabelStrings[ARTTS_start] = "start";
  artLabelInternalStrings[ARTTS_start] = "'start'";
  artKindOfs[ARTTS_start] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_start] = true;
  artLabelStrings[ARTTS_support] = "support";
  artLabelInternalStrings[ARTTS_support] = "'support'";
  artKindOfs[ARTTS_support] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_support] = true;
  artLabelStrings[ARTTS_suppressPopGuard] = "suppressPopGuard";
  artLabelInternalStrings[ARTTS_suppressPopGuard] = "'suppressPopGuard'";
  artKindOfs[ARTTS_suppressPopGuard] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_suppressPopGuard] = true;
  artLabelStrings[ARTTS_suppressProductionGuard] = "suppressProductionGuard";
  artLabelInternalStrings[ARTTS_suppressProductionGuard] = "'suppressProductionGuard'";
  artKindOfs[ARTTS_suppressProductionGuard] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_suppressProductionGuard] = true;
  artLabelStrings[ARTTS_suppressSemantics] = "suppressSemantics";
  artLabelInternalStrings[ARTTS_suppressSemantics] = "'suppressSemantics'";
  artKindOfs[ARTTS_suppressSemantics] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_suppressSemantics] = true;
  artLabelStrings[ARTTS_suppressTestRepeat] = "suppressTestRepeat";
  artLabelInternalStrings[ARTTS_suppressTestRepeat] = "'suppressTestRepeat'";
  artKindOfs[ARTTS_suppressTestRepeat] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_suppressTestRepeat] = true;
  artLabelStrings[ARTTS_termPrint] = "termPrint";
  artLabelInternalStrings[ARTTS_termPrint] = "'termPrint'";
  artKindOfs[ARTTS_termPrint] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_termPrint] = true;
  artLabelStrings[ARTTS_termWrite] = "termWrite";
  artLabelInternalStrings[ARTTS_termWrite] = "'termWrite'";
  artKindOfs[ARTTS_termWrite] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_termWrite] = true;
  artLabelStrings[ARTTS_trace] = "trace";
  artLabelInternalStrings[ARTTS_trace] = "'trace'";
  artKindOfs[ARTTS_trace] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_trace] = true;
  artLabelStrings[ARTTS_treePrint] = "treePrint";
  artLabelInternalStrings[ARTTS_treePrint] = "'treePrint'";
  artKindOfs[ARTTS_treePrint] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_treePrint] = true;
  artLabelStrings[ARTTS_treeShow] = "treeShow";
  artLabelInternalStrings[ARTTS_treeShow] = "'treeShow'";
  artKindOfs[ARTTS_treeShow] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_treeShow] = true;
  artLabelStrings[ARTTS_true] = "true";
  artLabelInternalStrings[ARTTS_true] = "'true'";
  artKindOfs[ARTTS_true] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_true] = true;
  artLabelStrings[ARTTS_tweDead] = "tweDead";
  artLabelInternalStrings[ARTTS_tweDead] = "'tweDead'";
  artKindOfs[ARTTS_tweDead] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_tweDead] = true;
  artLabelStrings[ARTTS_tweExtents] = "tweExtents";
  artLabelInternalStrings[ARTTS_tweExtents] = "'tweExtents'";
  artKindOfs[ARTTS_tweExtents] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_tweExtents] = true;
  artLabelStrings[ARTTS_tweFromSPPF] = "tweFromSPPF";
  artLabelInternalStrings[ARTTS_tweFromSPPF] = "'tweFromSPPF'";
  artKindOfs[ARTTS_tweFromSPPF] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_tweFromSPPF] = true;
  artLabelStrings[ARTTS_tweLexicalisations] = "tweLexicalisations";
  artLabelInternalStrings[ARTTS_tweLexicalisations] = "'tweLexicalisations'";
  artKindOfs[ARTTS_tweLexicalisations] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_tweLexicalisations] = true;
  artLabelStrings[ARTTS_tweLongest] = "tweLongest";
  artLabelInternalStrings[ARTTS_tweLongest] = "'tweLongest'";
  artKindOfs[ARTTS_tweLongest] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_tweLongest] = true;
  artLabelStrings[ARTTS_twePrint] = "twePrint";
  artLabelInternalStrings[ARTTS_twePrint] = "'twePrint'";
  artKindOfs[ARTTS_twePrint] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_twePrint] = true;
  artLabelStrings[ARTTS_twePrintFull] = "twePrintFull";
  artLabelInternalStrings[ARTTS_twePrintFull] = "'twePrintFull'";
  artKindOfs[ARTTS_twePrintFull] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_twePrintFull] = true;
  artLabelStrings[ARTTS_twePrintSummary] = "twePrintSummary";
  artLabelInternalStrings[ARTTS_twePrintSummary] = "'twePrintSummary'";
  artKindOfs[ARTTS_twePrintSummary] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_twePrintSummary] = true;
  artLabelStrings[ARTTS_twePriority] = "twePriority";
  artLabelInternalStrings[ARTTS_twePriority] = "'twePriority'";
  artKindOfs[ARTTS_twePriority] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_twePriority] = true;
  artLabelStrings[ARTTS_tweRecursive] = "tweRecursive";
  artLabelInternalStrings[ARTTS_tweRecursive] = "'tweRecursive'";
  artKindOfs[ARTTS_tweRecursive] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_tweRecursive] = true;
  artLabelStrings[ARTTS_tweSegments] = "tweSegments";
  artLabelInternalStrings[ARTTS_tweSegments] = "'tweSegments'";
  artKindOfs[ARTTS_tweSegments] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_tweSegments] = true;
  artLabelStrings[ARTTS_tweShortCircuit] = "tweShortCircuit";
  artLabelInternalStrings[ARTTS_tweShortCircuit] = "'tweShortCircuit'";
  artKindOfs[ARTTS_tweShortCircuit] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_tweShortCircuit] = true;
  artLabelStrings[ARTTS_tweTokenWrite] = "tweTokenWrite";
  artLabelInternalStrings[ARTTS_tweTokenWrite] = "'tweTokenWrite'";
  artKindOfs[ARTTS_tweTokenWrite] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_tweTokenWrite] = true;
  artLabelStrings[ARTTS_verbosity] = "verbosity";
  artLabelInternalStrings[ARTTS_verbosity] = "'verbosity'";
  artKindOfs[ARTTS_verbosity] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_verbosity] = true;
  artLabelStrings[ARTTS_whitespace] = "whitespace";
  artLabelInternalStrings[ARTTS_whitespace] = "'whitespace'";
  artKindOfs[ARTTS_whitespace] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_whitespace] = true;
  artLabelStrings[ARTTS__BAR] = "|";
  artLabelInternalStrings[ARTTS__BAR] = "'|'";
  artKindOfs[ARTTS__BAR] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__BAR] = true;
  artLabelStrings[ARTTS__BAR_BAR] = "||";
  artLabelInternalStrings[ARTTS__BAR_BAR] = "'||'";
  artKindOfs[ARTTS__BAR_BAR] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__BAR_BAR] = true;
  artTableInitialiser_ART_BOOLEAN();
  artTableInitialiser_ART_CHAR_BQ();
  artTableInitialiser_ART_ID();
  artTableInitialiser_ART_INTEGER();
  artTableInitialiser_ART_REAL();
  artTableInitialiser_ART_STRING_BRACE_NEST();
  artTableInitialiser_ART_STRING_DOLLAR();
  artTableInitialiser_ART_STRING_DQ();
  artTableInitialiser_ART_STRING_PLAIN_SQ();
  artTableInitialiser_ART_TYPE();
  artTableInitialiser_ART_TypeList();
  artTableInitialiser_ART_TypeNest();
  artTableInitialiser_ART_abbrev();
  artTableInitialiser_ART_action();
  artTableInitialiser_ART_alt();
  artTableInitialiser_ART_alt1();
  artTableInitialiser_ART_annotation();
  artTableInitialiser_ART_annotations();
  artTableInitialiser_ART_attribute();
  artTableInitialiser_ART_attributes();
  artTableInitialiser_ART_attributesOpt();
  artTableInitialiser_ART_builtinTerminal();
  artTableInitialiser_ART_caseInsensitiveTerminal();
  artTableInitialiser_ART_caseSensitiveTerminal();
  artTableInitialiser_ART_cat();
  artTableInitialiser_ART_catTail();
  artTableInitialiser_ART_characterSetTerminal();
  artTableInitialiser_ART_characterTerminal();
  artTableInitialiser_ART_choiceSlot();
  artTableInitialiser_ART_chooseDiff();
  artTableInitialiser_ART_chooseElement();
  artTableInitialiser_ART_chooseUnionIntersection();
  artTableInitialiser_ART_chooser();
  artTableInitialiser_ART_choosers();
  artTableInitialiser_ART_delay();
  artTableInitialiser_ART_diff();
  artTableInitialiser_ART_directive();
  artTableInitialiser_ART_element1();
  artTableInitialiser_ART_elementUpdater();
  artTableInitialiser_ART_elementUpdaters();
  artTableInitialiser_ART_epsilon();
  artTableInitialiser_ART_fold();
  artTableInitialiser_ART_grammarRule();
  artTableInitialiser_ART_insertionName();
  artTableInitialiser_ART_iter();
  artTableInitialiser_ART_name();
  artTableInitialiser_ART_nonterminal();
  artTableInitialiser_ART_not();
  artTableInitialiser_ART_paraterminalisers();
  artTableInitialiser_ART_rhs();
  artTableInitialiser_ART_slot();
  artTableInitialiser_ART_text();
  artTableInitialiser_ART_textElement();
  artTableInitialiser_ART_textElements();
  artTableInitialiser_ART_trueFalse();
  artTableInitialiser_ART_union();
  artTableInitialiser_ART_whitespacer();
  artTableInitialiser_ART_whitespacers();
}

public ARTV3Parser(ARTLexerV3 artLexer) {
  this(null, artLexer);
}

public ARTV3Parser(ARTGrammar artGrammar, ARTLexerV3 artLexer) {
  super(artGrammar, artLexer);
  artParserKind = "GLL Gen";
  artFirstTerminalLabel = ARTTS__SHREIK;
  artFirstUnusedLabel = ARTX_LABEL_EXTENT + 1;
  artSetExtent = 193;
  ARTL_EOS = ARTX_EOS;
  ARTL_EPSILON = ARTX_EPSILON;
  ARTL_DUMMY = ARTX_DUMMY;
  artGrammarKind = ARTModeGrammarKind.BNF;
  artDefaultStartSymbolLabel = ARTL_ART_text;
  artBuildDirectives = "ARTDirectives [inputs=[], inputFilenames=[], directives={suppressPopGuard=false, tweLexicalisations=false, algorithmMode=gllGeneratorPool, tweLongest=false, tweSegments=false, termWrite=false, parserName=ARTV3Parser, clusteredGSS=false, twePrint=false, inputPrint=false, lexerName=ARTV3Lexer, trace=false, tweTokenWrite=false, tweDead=false, outputDirectory=., tweWrite=false, termPrint=false, suppressTestRepeat=false, twePriority=false, treeShow=false, tweRecursive=false, parseCounts=false, predictivePops=false, suppressProductionGuard=false, twePrintFull=false, tweFromSPPF=false, sppfPriority=false, tweExtents=false, sppfShow=false, tweSuffix=false, namespace=uk.ac.rhul.cs.csle.art.v3.manager.parser, suppressSemantics=false, despatchMode=fragment, treePrintLevel=3, FIFODescriptors=false, twePrintSummary=false, treePrint=false, verbosity=0, gssShow=false, sppfLongest=false}]";
  artFIFODescriptors = false;
  artSetInitialise();
  artTableInitialise();
}

 
  ARTManager artManager; 
  ARTV3Module currentModule;

public static class ARTAT_ART_BOOLEAN extends ARTGLLAttributeBlock {
  public boolean v;
  public String lexeme;
  public String toString() {
    String ret = "";
  ret += " v=" + v;
  ret += " lexeme=" + lexeme;
    return ret + " ";
}
}

public static class ARTAT_ART_CHAR_BQ extends ARTGLLAttributeBlock {
  public int rightExtent;
  public int leftExtent;
  public String lexeme;
  public String v;
  public String toString() {
    String ret = "";
  ret += " rightExtent=" + rightExtent;
  ret += " leftExtent=" + leftExtent;
  ret += " lexeme=" + lexeme;
  ret += " v=" + v;
    return ret + " ";
}
}

public static class ARTAT_ART_ID extends ARTGLLAttributeBlock {
  public boolean b;
  public int rightExtent;
  public int leftExtent;
  public String lexeme;
  public String v;
  public String toString() {
    String ret = "";
  ret += " b=" + b;
  ret += " rightExtent=" + rightExtent;
  ret += " leftExtent=" + leftExtent;
  ret += " lexeme=" + lexeme;
  ret += " v=" + v;
    return ret + " ";
}
}

public static class ARTAT_ART_INTEGER extends ARTGLLAttributeBlock {
  public int v;
  public int rightExtent;
  public int leftExtent;
  public String lexeme;
  public String toString() {
    String ret = "";
  ret += " v=" + v;
  ret += " rightExtent=" + rightExtent;
  ret += " leftExtent=" + leftExtent;
  ret += " lexeme=" + lexeme;
    return ret + " ";
}
}

public static class ARTAT_ART_REAL extends ARTGLLAttributeBlock {
  public int rightExtent;
  public int leftExtent;
  public String lexeme;
  public double v;
  public String toString() {
    String ret = "";
  ret += " rightExtent=" + rightExtent;
  ret += " leftExtent=" + leftExtent;
  ret += " lexeme=" + lexeme;
  ret += " v=" + v;
    return ret + " ";
}
}

public static class ARTAT_ART_STRING_BRACE_NEST extends ARTGLLAttributeBlock {
  public int rightExtent;
  public int leftExtent;
  public String lexeme;
  public String v;
  public String toString() {
    String ret = "";
  ret += " rightExtent=" + rightExtent;
  ret += " leftExtent=" + leftExtent;
  ret += " lexeme=" + lexeme;
  ret += " v=" + v;
    return ret + " ";
}
}

public static class ARTAT_ART_STRING_DOLLAR extends ARTGLLAttributeBlock {
  public int rightExtent;
  public int leftExtent;
  public String lexeme;
  public String v;
  public String toString() {
    String ret = "";
  ret += " rightExtent=" + rightExtent;
  ret += " leftExtent=" + leftExtent;
  ret += " lexeme=" + lexeme;
  ret += " v=" + v;
    return ret + " ";
}
}

public static class ARTAT_ART_STRING_DQ extends ARTGLLAttributeBlock {
  public int rightExtent;
  public int leftExtent;
  public String lexeme;
  public String v;
  public String toString() {
    String ret = "";
  ret += " rightExtent=" + rightExtent;
  ret += " leftExtent=" + leftExtent;
  ret += " lexeme=" + lexeme;
  ret += " v=" + v;
    return ret + " ";
}
}

public static class ARTAT_ART_STRING_PLAIN_SQ extends ARTGLLAttributeBlock {
  public int rightExtent;
  public int leftExtent;
  public String lexeme;
  public String v;
  public String toString() {
    String ret = "";
  ret += " rightExtent=" + rightExtent;
  ret += " leftExtent=" + leftExtent;
  ret += " lexeme=" + lexeme;
  ret += " v=" + v;
    return ret + " ";
}
}

public static class ARTAT_ART_TYPE extends ARTGLLAttributeBlock {
  public int rightExtent;
  public int leftExtent;
  public String lexeme;
  public String v;
  public String toString() {
    String ret = "";
  ret += " rightExtent=" + rightExtent;
  ret += " leftExtent=" + leftExtent;
  ret += " lexeme=" + lexeme;
  ret += " v=" + v;
    return ret + " ";
}
}

public static class ARTAT_ART_action extends ARTGLLAttributeBlock {
  public String v;
  ARTGLLRDTHandle STRING_BRACE_NEST1;
  public String toString() {
    String ret = "";
  ret += " v=" + v;
    return ret + " ";
}
}

public static class ARTAT_ART_attribute extends ARTGLLAttributeBlock {
  public String lhs;
  ARTGLLRDTHandle ID1;
  ARTGLLRDTHandle TYPE1;
  public String toString() {
    String ret = "";
  ret += " lhs=" + lhs;
    return ret + " ";
}
}

public static class ARTAT_ART_attributes extends ARTGLLAttributeBlock {
  public String lhs;
  ARTGLLRDTHandle attribute1;
  ARTGLLRDTHandle attributes1;
  public String toString() {
    String ret = "";
  ret += " lhs=" + lhs;
    return ret + " ";
}
}

public static class ARTAT_ART_attributesOpt extends ARTGLLAttributeBlock {
  public String lhs;
  ARTGLLRDTHandle attributes1;
  public String toString() {
    String ret = "";
  ret += " lhs=" + lhs;
    return ret + " ";
}
}

public static class ARTAT_ART_builtinTerminal extends ARTGLLAttributeBlock {
  public String v;
  ARTGLLRDTHandle ID1;
  public String toString() {
    String ret = "";
  ret += " v=" + v;
    return ret + " ";
}
}

public static class ARTAT_ART_caseInsensitiveTerminal extends ARTGLLAttributeBlock {
  public String v;
  ARTGLLRDTHandle STRING_DQ1;
  public String toString() {
    String ret = "";
  ret += " v=" + v;
    return ret + " ";
}
}

public static class ARTAT_ART_caseSensitiveTerminal extends ARTGLLAttributeBlock {
  public String v;
  ARTGLLRDTHandle STRING_PLAIN_SQ1;
  public String toString() {
    String ret = "";
  ret += " v=" + v;
    return ret + " ";
}
}

public static class ARTAT_ART_characterSetTerminal extends ARTGLLAttributeBlock {
  public String lo;
  public String hi;
  ARTGLLRDTHandle CHAR_BQ1;
  ARTGLLRDTHandle CHAR_BQ2;
  public String toString() {
    String ret = "";
  ret += " lo=" + lo;
  ret += " hi=" + hi;
    return ret + " ";
}
}

public static class ARTAT_ART_characterTerminal extends ARTGLLAttributeBlock {
  public String v;
  ARTGLLRDTHandle CHAR_BQ1;
  public String toString() {
    String ret = "";
  ret += " v=" + v;
    return ret + " ";
}
}

public static class ARTAT_ART_choiceSlot extends ARTGLLAttributeBlock {
  public String v;
  ARTGLLRDTHandle choiceSlot1;
  ARTGLLRDTHandle chooseElement1;
  public String toString() {
    String ret = "";
  ret += " v=" + v;
    return ret + " ";
}
}

public static class ARTAT_ART_chooseDiff extends ARTGLLAttributeBlock {
  public String v;
  ARTGLLRDTHandle choiceSlot1;
  ARTGLLRDTHandle chooseDiff1;
  ARTGLLRDTHandle chooseUnionIntersection1;
  ARTGLLRDTHandle nonterminal1;
  public String toString() {
    String ret = "";
  ret += " v=" + v;
    return ret + " ";
}
}

public static class ARTAT_ART_chooseElement extends ARTGLLAttributeBlock {
  public String v;
  ARTGLLRDTHandle builtinTerminal1;
  ARTGLLRDTHandle caseInsensitiveTerminal1;
  ARTGLLRDTHandle caseSensitiveTerminal1;
  ARTGLLRDTHandle chooseDiff1;
  ARTGLLRDTHandle nonterminal1;
  public String toString() {
    String ret = "";
  ret += " v=" + v;
    return ret + " ";
}
}

public static class ARTAT_ART_chooseUnionIntersection extends ARTGLLAttributeBlock {
  public String v;
  ARTGLLRDTHandle chooseElement1;
  ARTGLLRDTHandle chooseUnionIntersection1;
  public String toString() {
    String ret = "";
  ret += " v=" + v;
    return ret + " ";
}
}

public static class ARTAT_ART_chooser extends ARTGLLAttributeBlock {
  public String v;
  ARTGLLRDTHandle chooseDiff1;
  ARTGLLRDTHandle chooseDiff2;
  public String toString() {
    String ret = "";
  ret += " v=" + v;
    return ret + " ";
}
}

public static class ARTAT_ART_element1 extends ARTGLLAttributeBlock {
  public boolean doFirst;
  ARTGLLRDTHandle builtinTerminal1;
  ARTGLLRDTHandle caseInsensitiveTerminal1;
  ARTGLLRDTHandle caseSensitiveTerminal1;
  ARTGLLRDTHandle characterSetTerminal1;
  ARTGLLRDTHandle characterTerminal1;
  ARTGLLRDTHandle nonterminal1;
  public String toString() {
    String ret = "";
  ret += " doFirst=" + doFirst;
    return ret + " ";
}
}

public static class ARTAT_ART_insertionName extends ARTGLLAttributeBlock {
  public String v;
  ARTGLLRDTHandle ID1;
  public String toString() {
    String ret = "";
  ret += " v=" + v;
    return ret + " ";
}
}

public static class ARTAT_ART_nonterminal extends ARTGLLAttributeBlock {
  public String v;
  ARTGLLRDTHandle ID1;
  ARTGLLRDTHandle STRING_DOLLAR1;
  public String toString() {
    String ret = "";
  ret += " v=" + v;
    return ret + " ";
}
}

public static class ARTAT_ART_rhs extends ARTGLLAttributeBlock {
  public String lhs;
  public boolean isDeleter;
  ARTGLLRDTHandle rhs1;
  public String toString() {
    String ret = "";
  ret += " lhs=" + lhs;
  ret += " isDeleter=" + isDeleter;
    return ret + " ";
}
}

public static class ARTAT_ART_text extends ARTGLLAttributeBlock {
  public ARTManager artManager;
  public String toString() {
    String ret = "";
  ret += " artManager=" + artManager;
    return ret + " ";
}
}

public static class ARTAT_ART_trueFalse extends ARTGLLAttributeBlock {
  public boolean v;
  public String toString() {
    String ret = "";
  ret += " v=" + v;
    return ret + " ";
}
}

public void ARTRD_BOOLEAN(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ART_BOOLEAN BOOLEAN)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*BOOLEAN ::= 'true'  .*/
    case ARTL_ART_BOOLEAN_1480: 
            ARTRD_BOOLEAN(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, BOOLEAN);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       BOOLEAN.lexeme = "true"; BOOLEAN.v = true; 
      break;
    /*BOOLEAN ::= 'false'  .*/
    case ARTL_ART_BOOLEAN_1486: 
            ARTRD_BOOLEAN(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, BOOLEAN);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       BOOLEAN.lexeme = "false"; BOOLEAN.v = false; 
      break;
        default: ; }}}
}

public void ARTRD_CHAR_BQ(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ART_CHAR_BQ CHAR_BQ)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*CHAR_BQ ::= &CHAR_BQ  .*/
    case ARTL_ART_CHAR_BQ_1440: 
            ARTRD_CHAR_BQ(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, CHAR_BQ);
            CHAR_BQ.lexeme = artLexeme(CHAR_BQ.leftExtent, CHAR_BQ.rightExtent); CHAR_BQ.v = artLexemeAsString(CHAR_BQ.leftExtent, CHAR_BQ.rightExtent, 1, 0); 
      break;
        default: ; }}}
}

public void ARTRD_ID(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ART_ID ID)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ID ::= &ID  .*/
    case ARTL_ART_ID_642: 
            ARTRD_ID(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID);
            ID.lexeme = artLexeme(ID.leftExtent, ID.rightExtent); ID.v = artLexemeAsID(ID.leftExtent, ID.rightExtent); 
      break;
        default: ; }}}
}

public void ARTRD_INTEGER(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ART_INTEGER INTEGER)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*INTEGER ::= &INTEGER  .*/
    case ARTL_ART_INTEGER_766: 
            ARTRD_INTEGER(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, INTEGER);
            INTEGER.lexeme = artLexeme(INTEGER.leftExtent, INTEGER.rightExtent); INTEGER.v = artLexemeAsInteger(INTEGER.leftExtent, INTEGER.rightExtent); 
      break;
        default: ; }}}
}

public void ARTRD_REAL(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ART_REAL REAL)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*REAL ::= &REAL  .*/
    case ARTL_ART_REAL_1492: 
            ARTRD_REAL(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, REAL);
            REAL.lexeme = artLexeme(REAL.leftExtent, REAL.rightExtent); REAL.v = artLexemeAsReal(REAL.leftExtent, REAL.rightExtent); 
      break;
        default: ; }}}
}

public void ARTRD_STRING_BRACE_NEST(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ART_STRING_BRACE_NEST STRING_BRACE_NEST)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*STRING_BRACE_NEST ::= &STRING_BRACE_NEST  .*/
    case ARTL_ART_STRING_BRACE_NEST_760: 
            ARTRD_STRING_BRACE_NEST(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, STRING_BRACE_NEST);
            STRING_BRACE_NEST.lexeme = artLexeme(STRING_BRACE_NEST.leftExtent, STRING_BRACE_NEST.rightExtent); STRING_BRACE_NEST.v = artLexemeAsString(STRING_BRACE_NEST.leftExtent, STRING_BRACE_NEST.rightExtent); 
      break;
        default: ; }}}
}

public void ARTRD_STRING_DOLLAR(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ART_STRING_DOLLAR STRING_DOLLAR)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*STRING_DOLLAR ::= &STRING_DOLLAR  .*/
    case ARTL_ART_STRING_DOLLAR_1434: 
            ARTRD_STRING_DOLLAR(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, STRING_DOLLAR);
            STRING_DOLLAR.lexeme = artLexeme(STRING_DOLLAR.leftExtent, STRING_DOLLAR.rightExtent); STRING_DOLLAR.v = artLexemeAsString(STRING_DOLLAR.leftExtent, STRING_DOLLAR.rightExtent); 
      break;
        default: ; }}}
}

public void ARTRD_STRING_DQ(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ART_STRING_DQ STRING_DQ)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*STRING_DQ ::= &STRING_DQ  .*/
    case ARTL_ART_STRING_DQ_896: 
            ARTRD_STRING_DQ(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, STRING_DQ);
            STRING_DQ.lexeme = artLexeme(STRING_DQ.leftExtent, STRING_DQ.rightExtent); STRING_DQ.v = artLexemeAsString(STRING_DQ.leftExtent, STRING_DQ.rightExtent); 
      break;
        default: ; }}}
}

public void ARTRD_STRING_PLAIN_SQ(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ART_STRING_PLAIN_SQ STRING_PLAIN_SQ)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*STRING_PLAIN_SQ ::= &STRING_PLAIN_SQ  .*/
    case ARTL_ART_STRING_PLAIN_SQ_806: 
            ARTRD_STRING_PLAIN_SQ(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, STRING_PLAIN_SQ);
            STRING_PLAIN_SQ.lexeme = artLexeme(STRING_PLAIN_SQ.leftExtent, STRING_PLAIN_SQ.rightExtent); STRING_PLAIN_SQ.v = artLexemeAsRawString(STRING_PLAIN_SQ.leftExtent, STRING_PLAIN_SQ.rightExtent, 1, 1); 
      break;
        default: ; }}}
}

public void ARTRD_TYPE(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ART_TYPE TYPE)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*TYPE ::= TypeNest .*/
    case ARTL_ART_TYPE_1172: 
            ARTRD_TYPE(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, TYPE);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_TypeNest(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
      TYPE.lexeme = artLexeme(TYPE.leftExtent, TYPE.rightExtent); TYPE.v = artLexemeAsID(TYPE.leftExtent, TYPE.rightExtent).trim(); 
      break;
        default: ; }}}
}

public void ARTRD_TypeList(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*TypeList ::= TypeNest .*/
    case ARTL_ART_TypeList_1468: 
            ARTRD_TypeList(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_TypeNest(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*TypeList ::= TypeNest ','  . TypeList */
    case ARTL_ART_TypeList_1474: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_TypeNest(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*TypeList ::= TypeNest ','  TypeList .*/
    case ARTL_ART_TypeList_1476: 
            ARTRD_TypeList(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_TypeList(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_TypeNest(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*TypeNest ::= &ID  .*/
    case ARTL_ART_TypeNest_1454: 
            ARTRD_TypeNest(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*TypeNest ::= &ID  '<'  . TypeList '>'  */
    case ARTL_ART_TypeNest_1460: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*TypeNest ::= &ID  '<'  TypeList . '>'  */
    case ARTL_ART_TypeNest_1462: 
      ARTRD_TypeNest(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_TypeList(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*TypeNest ::= &ID  '<'  TypeList '>'  .*/
    case ARTL_ART_TypeNest_1464: 
            ARTRD_TypeNest(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_abbrev(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*abbrev ::= iter .*/
    case ARTL_ART_abbrev_1230: 
            ARTRD_abbrev(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_iter(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*abbrev ::= iter '*'  .*/
    case ARTL_ART_abbrev_1236: 
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_iter(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
                  if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*abbrev ::= iter '+'  .*/
    case ARTL_ART_abbrev_1242: 
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_iter(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
                  if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*abbrev ::= iter '?'  .*/
    case ARTL_ART_abbrev_1248: 
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_iter(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
                  if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_action(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ART_action action, ARTAT_ART_STRING_BRACE_NEST STRING_BRACE_NEST1)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*action ::= STRING_BRACE_NEST .*/
    case ARTL_ART_action_1252: 
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
            ARTRD_action(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, action, STRING_BRACE_NEST1);
      STRING_BRACE_NEST1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode));
      STRING_BRACE_NEST1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode));
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_STRING_BRACE_NEST(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, STRING_BRACE_NEST1);
       action.v = STRING_BRACE_NEST1.v; 
      break;
        default: ; }}}
}

public void ARTRD_alt(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*alt ::= cat .*/
    case ARTL_ART_alt_1184: 
            ARTRD_alt(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cat(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*alt ::= cat '|'  . alt1 */
    case ARTL_ART_alt_1190: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_cat(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
                        break;
    /*alt ::= cat '|'  alt1 .*/
    case ARTL_ART_alt_1192: 
            ARTRD_alt(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_alt1(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_alt1(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*alt1 ::= cat .*/
    case ARTL_ART_alt1_1196: 
            ARTRD_alt1(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cat(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*alt1 ::= cat '|'  . alt1 */
    case ARTL_ART_alt1_1202: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_cat(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
                        break;
    /*alt1 ::= cat '|'  alt1 .*/
    case ARTL_ART_alt1_1204: 
            ARTRD_alt1(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_alt1(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_annotation(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*annotation ::= name .*/
    case ARTL_ART_annotation_1396: 
            ARTRD_annotation(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_name(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, null);
            break;
    /*annotation ::= delay .*/
    case ARTL_ART_annotation_1400: 
            ARTRD_annotation(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_delay(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*annotation ::= fold .*/
    case ARTL_ART_annotation_1404: 
            ARTRD_annotation(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_fold(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_annotations(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*annotations ::= annotation .*/
    case ARTL_ART_annotations_1386: 
            ARTRD_annotations(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_annotation(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*annotations ::= annotation annotations .*/
    case ARTL_ART_annotations_1392: 
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_annotation(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artNewWriteable = false; artNewParent = artParent;
      ARTRD_annotations(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_attribute(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ART_attribute attribute, ARTAT_ART_ID ID1, ARTAT_ART_TYPE TYPE1)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*attribute ::= ID ':'  . TYPE */
    case ARTL_ART_attribute_1158: 
      ID1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode));
      ID1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode));
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), ID1));
      ARTRD_ID(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable, ID1);
                        break;
    /*attribute ::= ID ':'  TYPE .*/
    case ARTL_ART_attribute_1160: 
      ID1 = new ARTAT_ART_ID();
      TYPE1 = new ARTAT_ART_TYPE();
            ARTRD_attribute(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, attribute, ID1, TYPE1);
      TYPE1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode));
      TYPE1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode));
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), TYPE1));
      ARTRD_TYPE(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, TYPE1);
       currentModule.addAttribute(attribute.lhs, ID1.v, TYPE1.v); 
      break;
    /*attribute ::= ID .*/
    case ARTL_ART_attribute_1166: 
      ID1 = new ARTAT_ART_ID();
      TYPE1 = new ARTAT_ART_TYPE();
            ARTRD_attribute(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, attribute, ID1, TYPE1);
      ID1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode));
      ID1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode));
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), ID1));
      ARTRD_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, ID1);
       currentModule.addAttribute(attribute.lhs, ID1.v, "Value"); 
      break;
        default: ; }}}
}

public void ARTRD_attributes(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ART_attributes attributes, ARTAT_ART_attribute attribute1, ARTAT_ART_attributes attributes1)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*attributes ::= attribute attributes .*/
    case ARTL_ART_attributes_1148: 
      attribute1 = new ARTAT_ART_attribute();
      attributes1 = new ARTAT_ART_attributes();
      attribute1.lhs = attributes.lhs; attributes1.lhs = attributes.lhs; 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), attribute1));
      ARTRD_attribute(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable, attribute1, null, null);
            artNewWriteable = false; artNewParent = artParent;
      ARTRD_attributes(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, attributes1, null, null);
            break;
    /*attributes ::= # .*/
    case ARTL_ART_attributes_1152: 
      attribute1 = new ARTAT_ART_attribute();
      attributes1 = new ARTAT_ART_attributes();
            ARTRD_attributes(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, attributes, attribute1, attributes1);
                  break;
        default: ; }}}
}

public void ARTRD_attributesOpt(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ART_attributesOpt attributesOpt, ARTAT_ART_attributes attributes1)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*attributesOpt ::= '<'  attributes . '>'  */
    case ARTL_ART_attributesOpt_1134: 
                  artNewWriteable = false; artNewParent = artParent;
      ARTRD_attributes(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, attributes1, null, null);
            break;
    /*attributesOpt ::= '<'  attributes '>'  .*/
    case ARTL_ART_attributesOpt_1136: 
      attributes1 = new ARTAT_ART_attributes();
      attributes1.lhs = attributesOpt.lhs;
      ARTRD_attributesOpt(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, attributesOpt, attributes1);
                  break;
    /*attributesOpt ::= # .*/
    case ARTL_ART_attributesOpt_1140: 
      attributes1 = new ARTAT_ART_attributes();
            ARTRD_attributesOpt(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, attributesOpt, attributes1);
                  break;
        default: ; }}}
}

public void ARTRD_builtinTerminal(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ART_builtinTerminal builtinTerminal, ARTAT_ART_ID ID1)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*builtinTerminal ::= '&'  ID .*/
    case ARTL_ART_builtinTerminal_890: 
      ID1 = new ARTAT_ART_ID();
                        ID1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode));
      ID1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode));
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, ID1);
      builtinTerminal.v = ID1.v; 
      break;
        default: ; }}}
}

public void ARTRD_caseInsensitiveTerminal(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ART_caseInsensitiveTerminal caseInsensitiveTerminal, ARTAT_ART_STRING_DQ STRING_DQ1)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*caseInsensitiveTerminal ::= STRING_DQ .*/
    case ARTL_ART_caseInsensitiveTerminal_864: 
      STRING_DQ1 = new ARTAT_ART_STRING_DQ();
            ARTRD_caseInsensitiveTerminal(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, caseInsensitiveTerminal, STRING_DQ1);
      STRING_DQ1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode));
      STRING_DQ1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode));
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_STRING_DQ(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, STRING_DQ1);
      caseInsensitiveTerminal.v = STRING_DQ1.v;
 if (STRING_DQ1.v.length() == 0) throw new ARTUncheckedException("empty case insensitive terminal is not allowed - the empty string is denoted by #");

      break;
        default: ; }}}
}

public void ARTRD_caseSensitiveTerminal(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ART_caseSensitiveTerminal caseSensitiveTerminal, ARTAT_ART_STRING_PLAIN_SQ STRING_PLAIN_SQ1)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*caseSensitiveTerminal ::= STRING_PLAIN_SQ .*/
    case ARTL_ART_caseSensitiveTerminal_858: 
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
            ARTRD_caseSensitiveTerminal(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, caseSensitiveTerminal, STRING_PLAIN_SQ1);
      STRING_PLAIN_SQ1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode));
      STRING_PLAIN_SQ1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode));
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_STRING_PLAIN_SQ(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, STRING_PLAIN_SQ1);
      caseSensitiveTerminal.v = STRING_PLAIN_SQ1.v;
 if (STRING_PLAIN_SQ1.v.length() == 0) throw new ARTUncheckedException("empty case sensitive terminal '' is not allowed - the empty string is denoted by #");

      break;
        default: ; }}}
}

public void ARTRD_cat(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*cat ::= slot catTail .*/
    case ARTL_ART_cat_1180: 
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_slot(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable, null);
            artNewWriteable = false; artNewParent = artParent;
      ARTRD_catTail(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_catTail(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*catTail ::= abbrev slot .*/
    case ARTL_ART_catTail_1218: 
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_abbrev(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_slot(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, null);
            break;
    /*catTail ::= abbrev slot . catTail */
    case ARTL_ART_catTail_1224: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_abbrev(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_slot(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, null);
            break;
    /*catTail ::= abbrev slot catTail .*/
    case ARTL_ART_catTail_1226: 
            ARTRD_catTail(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_catTail(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_characterSetTerminal(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ART_characterSetTerminal characterSetTerminal, ARTAT_ART_CHAR_BQ CHAR_BQ1, ARTAT_ART_CHAR_BQ CHAR_BQ2)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*characterSetTerminal ::= CHAR_BQ '..'  . CHAR_BQ */
    case ARTL_ART_characterSetTerminal_880: 
      CHAR_BQ1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode));
      CHAR_BQ1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode));
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_CHAR_BQ(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable, CHAR_BQ1);
       characterSetTerminal.lo = CHAR_BQ1.v; 
                  break;
    /*characterSetTerminal ::= CHAR_BQ '..'  CHAR_BQ .*/
    case ARTL_ART_characterSetTerminal_882: 
      CHAR_BQ1 = new ARTAT_ART_CHAR_BQ();
      CHAR_BQ2 = new ARTAT_ART_CHAR_BQ();
            ARTRD_characterSetTerminal(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, characterSetTerminal, CHAR_BQ1, CHAR_BQ2);
      CHAR_BQ2.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode));
      CHAR_BQ2.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode));
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_CHAR_BQ(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, CHAR_BQ2);
       characterSetTerminal.hi = CHAR_BQ2.v;
      break;
        default: ; }}}
}

public void ARTRD_characterTerminal(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ART_characterTerminal characterTerminal, ARTAT_ART_CHAR_BQ CHAR_BQ1)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*characterTerminal ::= CHAR_BQ .*/
    case ARTL_ART_characterTerminal_870: 
      CHAR_BQ1 = new ARTAT_ART_CHAR_BQ();
            ARTRD_characterTerminal(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, characterTerminal, CHAR_BQ1);
      CHAR_BQ1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode));
      CHAR_BQ1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode));
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_CHAR_BQ(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, CHAR_BQ1);
      characterTerminal.v = CHAR_BQ1.v;
      break;
        default: ; }}}
}

public void ARTRD_choiceSlot(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ART_choiceSlot choiceSlot, ARTAT_ART_choiceSlot choiceSlot1, ARTAT_ART_chooseElement chooseElement1)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*choiceSlot ::= chooseElement .*/
    case ARTL_ART_choiceSlot_1028: 
      choiceSlot1 = new ARTAT_ART_choiceSlot();
      chooseElement1 = new ARTAT_ART_chooseElement();
            ARTRD_choiceSlot(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, choiceSlot, choiceSlot1, chooseElement1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), chooseElement1));
      ARTRD_chooseElement(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, chooseElement1, null, null, null, null, null);
      choiceSlot.v = chooseElement1.v; 
      break;
    /*choiceSlot ::= chooseElement choiceSlot .*/
    case ARTL_ART_choiceSlot_1036: 
      choiceSlot1 = new ARTAT_ART_choiceSlot();
      chooseElement1 = new ARTAT_ART_chooseElement();
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), chooseElement1));
      ARTRD_chooseElement(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable, chooseElement1, null, null, null, null, null);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), choiceSlot1));
      ARTRD_choiceSlot(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, choiceSlot1, null, null);
      choiceSlot.v = chooseElement1.v + ", " + choiceSlot1.v; 
      break;
        default: ; }}}
}

public void ARTRD_chooseDiff(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ART_chooseDiff chooseDiff, ARTAT_ART_choiceSlot choiceSlot1, ARTAT_ART_chooseDiff chooseDiff1, ARTAT_ART_chooseUnionIntersection chooseUnionIntersection1, ARTAT_ART_nonterminal nonterminal1)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*chooseDiff ::= chooseUnionIntersection .*/
    case ARTL_ART_chooseDiff_976: 
      choiceSlot1 = new ARTAT_ART_choiceSlot();
      chooseDiff1 = new ARTAT_ART_chooseDiff();
      chooseUnionIntersection1 = new ARTAT_ART_chooseUnionIntersection();
      nonterminal1 = new ARTAT_ART_nonterminal();
            ARTRD_chooseDiff(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, chooseDiff, choiceSlot1, chooseDiff1, chooseUnionIntersection1, nonterminal1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), chooseUnionIntersection1));
      ARTRD_chooseUnionIntersection(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, chooseUnionIntersection1, null, null);
       chooseDiff.v = chooseUnionIntersection1.v; 
      break;
    /*chooseDiff ::= chooseDiff '\'  . chooseUnionIntersection */
    case ARTL_ART_chooseDiff_984: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), chooseDiff1));
      ARTRD_chooseDiff(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable, chooseDiff1, null, null, null, null);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*chooseDiff ::= chooseDiff '\'  chooseUnionIntersection .*/
    case ARTL_ART_chooseDiff_986: 
      choiceSlot1 = new ARTAT_ART_choiceSlot();
      chooseDiff1 = new ARTAT_ART_chooseDiff();
      chooseUnionIntersection1 = new ARTAT_ART_chooseUnionIntersection();
      nonterminal1 = new ARTAT_ART_nonterminal();
            ARTRD_chooseDiff(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, chooseDiff, choiceSlot1, chooseDiff1, chooseUnionIntersection1, nonterminal1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), chooseUnionIntersection1));
      ARTRD_chooseUnionIntersection(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, chooseUnionIntersection1, null, null);
       chooseDiff.v = "__difference(" + chooseDiff1.v + ", " + chooseUnionIntersection1.v + ")"; 
      break;
    /*chooseDiff ::= nonterminal '::='  . choiceSlot */
    case ARTL_ART_chooseDiff_994: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), nonterminal1));
      ARTRD_nonterminal(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable, nonterminal1, null, null);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*chooseDiff ::= nonterminal '::='  choiceSlot .*/
    case ARTL_ART_chooseDiff_996: 
      choiceSlot1 = new ARTAT_ART_choiceSlot();
      chooseDiff1 = new ARTAT_ART_chooseDiff();
      chooseUnionIntersection1 = new ARTAT_ART_chooseUnionIntersection();
      nonterminal1 = new ARTAT_ART_nonterminal();
            ARTRD_chooseDiff(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, chooseDiff, choiceSlot1, chooseDiff1, chooseUnionIntersection1, nonterminal1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), choiceSlot1));
      ARTRD_choiceSlot(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, choiceSlot1, null, null);
       chooseDiff.v = "chooseSlot(" + nonterminal1.v + ", " + choiceSlot1.v + ")"; 
      break;
        default: ; }}}
}

public void ARTRD_chooseElement(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ART_chooseElement chooseElement, ARTAT_ART_builtinTerminal builtinTerminal1, ARTAT_ART_caseInsensitiveTerminal caseInsensitiveTerminal1, ARTAT_ART_caseSensitiveTerminal caseSensitiveTerminal1, ARTAT_ART_chooseDiff chooseDiff1, ARTAT_ART_nonterminal nonterminal1)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*chooseElement ::= nonterminal .*/
    case ARTL_ART_chooseElement_1042: 
      builtinTerminal1 = new ARTAT_ART_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ART_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ART_caseSensitiveTerminal();
      chooseDiff1 = new ARTAT_ART_chooseDiff();
      nonterminal1 = new ARTAT_ART_nonterminal();
            ARTRD_chooseElement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, chooseElement, builtinTerminal1, caseInsensitiveTerminal1, caseSensitiveTerminal1, chooseDiff1, nonterminal1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), nonterminal1));
      ARTRD_nonterminal(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, nonterminal1, null, null);
       chooseElement.v = "__set(srNonterminal(" + ITerms.escapeMeta(nonterminal1.v) + "))"; 
      break;
    /*chooseElement ::= caseSensitiveTerminal .*/
    case ARTL_ART_chooseElement_1048: 
      builtinTerminal1 = new ARTAT_ART_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ART_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ART_caseSensitiveTerminal();
      chooseDiff1 = new ARTAT_ART_chooseDiff();
      nonterminal1 = new ARTAT_ART_nonterminal();
            ARTRD_chooseElement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, chooseElement, builtinTerminal1, caseInsensitiveTerminal1, caseSensitiveTerminal1, chooseDiff1, nonterminal1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), caseSensitiveTerminal1));
      ARTRD_caseSensitiveTerminal(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, caseSensitiveTerminal1, null);
       chooseElement.v = "__set(srCaseSensitiveTerminal(" + ITerms.escapeMeta(caseSensitiveTerminal1.v) + "))"; 
      break;
    /*chooseElement ::= caseInsensitiveTerminal .*/
    case ARTL_ART_chooseElement_1054: 
      builtinTerminal1 = new ARTAT_ART_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ART_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ART_caseSensitiveTerminal();
      chooseDiff1 = new ARTAT_ART_chooseDiff();
      nonterminal1 = new ARTAT_ART_nonterminal();
            ARTRD_chooseElement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, chooseElement, builtinTerminal1, caseInsensitiveTerminal1, caseSensitiveTerminal1, chooseDiff1, nonterminal1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), caseInsensitiveTerminal1));
      ARTRD_caseInsensitiveTerminal(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, caseInsensitiveTerminal1, null);
       chooseElement.v = "__set(srCaseInsensitiveTerminal(" + ITerms.escapeMeta(caseInsensitiveTerminal1.v) + "))"; 
      break;
    /*chooseElement ::= builtinTerminal .*/
    case ARTL_ART_chooseElement_1060: 
      builtinTerminal1 = new ARTAT_ART_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ART_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ART_caseSensitiveTerminal();
      chooseDiff1 = new ARTAT_ART_chooseDiff();
      nonterminal1 = new ARTAT_ART_nonterminal();
            ARTRD_chooseElement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, chooseElement, builtinTerminal1, caseInsensitiveTerminal1, caseSensitiveTerminal1, chooseDiff1, nonterminal1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), builtinTerminal1));
      ARTRD_builtinTerminal(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, builtinTerminal1, null);
       chooseElement.v = "__set(srBuiltinTerminal(" + ITerms.escapeMeta(builtinTerminal1.v) + "))"; 
      break;
    /*chooseElement ::= '.'  .*/
    case ARTL_ART_chooseElement_1066: 
      builtinTerminal1 = new ARTAT_ART_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ART_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ART_caseSensitiveTerminal();
      chooseDiff1 = new ARTAT_ART_chooseDiff();
      nonterminal1 = new ARTAT_ART_nonterminal();
            ARTRD_chooseElement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, chooseElement, builtinTerminal1, caseInsensitiveTerminal1, caseSensitiveTerminal1, chooseDiff1, nonterminal1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       chooseElement.v = "__set(srSlot)"; 
      break;
    /*chooseElement ::= 'anyCharacterTerminal'  .*/
    case ARTL_ART_chooseElement_1072: 
      builtinTerminal1 = new ARTAT_ART_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ART_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ART_caseSensitiveTerminal();
      chooseDiff1 = new ARTAT_ART_chooseDiff();
      nonterminal1 = new ARTAT_ART_nonterminal();
            ARTRD_chooseElement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, chooseElement, builtinTerminal1, caseInsensitiveTerminal1, caseSensitiveTerminal1, chooseDiff1, nonterminal1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       chooseElement.v = "_1"; 
      break;
    /*chooseElement ::= 'anyBuiltinTerminal'  .*/
    case ARTL_ART_chooseElement_1078: 
      builtinTerminal1 = new ARTAT_ART_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ART_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ART_caseSensitiveTerminal();
      chooseDiff1 = new ARTAT_ART_chooseDiff();
      nonterminal1 = new ARTAT_ART_nonterminal();
            ARTRD_chooseElement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, chooseElement, builtinTerminal1, caseInsensitiveTerminal1, caseSensitiveTerminal1, chooseDiff1, nonterminal1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       chooseElement.v = "_2"; 
      break;
    /*chooseElement ::= 'anyCaseSensitiveTerminal'  .*/
    case ARTL_ART_chooseElement_1084: 
      builtinTerminal1 = new ARTAT_ART_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ART_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ART_caseSensitiveTerminal();
      chooseDiff1 = new ARTAT_ART_chooseDiff();
      nonterminal1 = new ARTAT_ART_nonterminal();
            ARTRD_chooseElement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, chooseElement, builtinTerminal1, caseInsensitiveTerminal1, caseSensitiveTerminal1, chooseDiff1, nonterminal1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       chooseElement.v = "_3"; 
      break;
    /*chooseElement ::= 'anyCaseInsensitiveTerminal'  .*/
    case ARTL_ART_chooseElement_1090: 
      builtinTerminal1 = new ARTAT_ART_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ART_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ART_caseSensitiveTerminal();
      chooseDiff1 = new ARTAT_ART_chooseDiff();
      nonterminal1 = new ARTAT_ART_nonterminal();
            ARTRD_chooseElement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, chooseElement, builtinTerminal1, caseInsensitiveTerminal1, caseSensitiveTerminal1, chooseDiff1, nonterminal1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       chooseElement.v = "_4"; 
      break;
    /*chooseElement ::= 'anyParaterminal'  .*/
    case ARTL_ART_chooseElement_1096: 
      builtinTerminal1 = new ARTAT_ART_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ART_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ART_caseSensitiveTerminal();
      chooseDiff1 = new ARTAT_ART_chooseDiff();
      nonterminal1 = new ARTAT_ART_nonterminal();
            ARTRD_chooseElement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, chooseElement, builtinTerminal1, caseInsensitiveTerminal1, caseSensitiveTerminal1, chooseDiff1, nonterminal1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       chooseElement.v = "_5"; 
      break;
    /*chooseElement ::= 'anyNonterminal'  .*/
    case ARTL_ART_chooseElement_1102: 
      builtinTerminal1 = new ARTAT_ART_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ART_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ART_caseSensitiveTerminal();
      chooseDiff1 = new ARTAT_ART_chooseDiff();
      nonterminal1 = new ARTAT_ART_nonterminal();
            ARTRD_chooseElement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, chooseElement, builtinTerminal1, caseInsensitiveTerminal1, caseSensitiveTerminal1, chooseDiff1, nonterminal1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       chooseElement.v = "_6"; 
      break;
    /*chooseElement ::= 'anyLiteralTerminal'  .*/
    case ARTL_ART_chooseElement_1108: 
      builtinTerminal1 = new ARTAT_ART_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ART_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ART_caseSensitiveTerminal();
      chooseDiff1 = new ARTAT_ART_chooseDiff();
      nonterminal1 = new ARTAT_ART_nonterminal();
            ARTRD_chooseElement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, chooseElement, builtinTerminal1, caseInsensitiveTerminal1, caseSensitiveTerminal1, chooseDiff1, nonterminal1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       chooseElement.v = "_7"; 
      break;
    /*chooseElement ::= 'anyTerminal'  .*/
    case ARTL_ART_chooseElement_1114: 
      builtinTerminal1 = new ARTAT_ART_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ART_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ART_caseSensitiveTerminal();
      chooseDiff1 = new ARTAT_ART_chooseDiff();
      nonterminal1 = new ARTAT_ART_nonterminal();
            ARTRD_chooseElement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, chooseElement, builtinTerminal1, caseInsensitiveTerminal1, caseSensitiveTerminal1, chooseDiff1, nonterminal1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       chooseElement.v = "_8"; 
      break;
    /*chooseElement ::= '('  chooseDiff . ')'  */
    case ARTL_ART_chooseElement_1122: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), chooseDiff1));
      ARTRD_chooseDiff(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, chooseDiff1, null, null, null, null);
            break;
    /*chooseElement ::= '('  chooseDiff ')'  .*/
    case ARTL_ART_chooseElement_1124: 
      builtinTerminal1 = new ARTAT_ART_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ART_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ART_caseSensitiveTerminal();
      chooseDiff1 = new ARTAT_ART_chooseDiff();
      nonterminal1 = new ARTAT_ART_nonterminal();
            ARTRD_chooseElement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, chooseElement, builtinTerminal1, caseInsensitiveTerminal1, caseSensitiveTerminal1, chooseDiff1, nonterminal1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       chooseElement.v = chooseDiff1.v; 
      break;
        default: ; }}}
}

public void ARTRD_chooseUnionIntersection(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ART_chooseUnionIntersection chooseUnionIntersection, ARTAT_ART_chooseElement chooseElement1, ARTAT_ART_chooseUnionIntersection chooseUnionIntersection1)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*chooseUnionIntersection ::= chooseElement .*/
    case ARTL_ART_chooseUnionIntersection_1002: 
      chooseElement1 = new ARTAT_ART_chooseElement();
      chooseUnionIntersection1 = new ARTAT_ART_chooseUnionIntersection();
            ARTRD_chooseUnionIntersection(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, chooseUnionIntersection, chooseElement1, chooseUnionIntersection1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), chooseElement1));
      ARTRD_chooseElement(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, chooseElement1, null, null, null, null, null);
      chooseUnionIntersection.v = chooseElement1.v; 
      break;
    /*chooseUnionIntersection ::= chooseUnionIntersection '|'  . chooseElement */
    case ARTL_ART_chooseUnionIntersection_1010: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), chooseUnionIntersection1));
      ARTRD_chooseUnionIntersection(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable, chooseUnionIntersection1, null, null);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*chooseUnionIntersection ::= chooseUnionIntersection '|'  chooseElement .*/
    case ARTL_ART_chooseUnionIntersection_1012: 
      chooseElement1 = new ARTAT_ART_chooseElement();
      chooseUnionIntersection1 = new ARTAT_ART_chooseUnionIntersection();
            ARTRD_chooseUnionIntersection(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, chooseUnionIntersection, chooseElement1, chooseUnionIntersection1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), chooseElement1));
      ARTRD_chooseElement(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, chooseElement1, null, null, null, null, null);
       chooseUnionIntersection.v = "__union(" + chooseUnionIntersection1.v + ", " + chooseElement1.v + ")"; 
      break;
    /*chooseUnionIntersection ::= chooseUnionIntersection '/'  . chooseElement */
    case ARTL_ART_chooseUnionIntersection_1020: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), chooseUnionIntersection1));
      ARTRD_chooseUnionIntersection(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable, chooseUnionIntersection1, null, null);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*chooseUnionIntersection ::= chooseUnionIntersection '/'  chooseElement .*/
    case ARTL_ART_chooseUnionIntersection_1022: 
      chooseElement1 = new ARTAT_ART_chooseElement();
      chooseUnionIntersection1 = new ARTAT_ART_chooseUnionIntersection();
            ARTRD_chooseUnionIntersection(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, chooseUnionIntersection, chooseElement1, chooseUnionIntersection1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), chooseElement1));
      ARTRD_chooseElement(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, chooseElement1, null, null, null, null, null);
       chooseUnionIntersection.v = "__intersection(" + chooseUnionIntersection1.v + ", " + chooseElement1.v + ")"; 
      break;
        default: ; }}}
}

public void ARTRD_chooser(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ART_chooser chooser, ARTAT_ART_chooseDiff chooseDiff1, ARTAT_ART_chooseDiff chooseDiff2)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*chooser ::= chooseDiff '>'  . chooseDiff */
    case ARTL_ART_chooser_922: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), chooseDiff1));
      ARTRD_chooseDiff(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable, chooseDiff1, null, null, null, null);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*chooser ::= chooseDiff '>'  chooseDiff .*/
    case ARTL_ART_chooser_924: 
      chooseDiff1 = new ARTAT_ART_chooseDiff();
      chooseDiff2 = new ARTAT_ART_chooseDiff();
            ARTRD_chooser(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, chooser, chooseDiff1, chooseDiff2);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), chooseDiff2));
      ARTRD_chooseDiff(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, chooseDiff2, null, null, null, null);
       chooser.v = "chooseHigher("  + chooseDiff1.v + "," + chooseDiff2.v + ")"; 
      break;
    /*chooser ::= chooseDiff '<'  . chooseDiff */
    case ARTL_ART_chooser_932: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), chooseDiff1));
      ARTRD_chooseDiff(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable, chooseDiff1, null, null, null, null);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*chooser ::= chooseDiff '<'  chooseDiff .*/
    case ARTL_ART_chooser_934: 
      chooseDiff1 = new ARTAT_ART_chooseDiff();
      chooseDiff2 = new ARTAT_ART_chooseDiff();
            ARTRD_chooser(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, chooser, chooseDiff1, chooseDiff2);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), chooseDiff2));
      ARTRD_chooseDiff(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, chooseDiff2, null, null, null, null);
       chooser.v = "chooseHigher("  + chooseDiff2.v + "," + chooseDiff1.v + ")"; 
      break;
    /*chooser ::= chooseDiff '>>'  . chooseDiff */
    case ARTL_ART_chooser_942: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), chooseDiff1));
      ARTRD_chooseDiff(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable, chooseDiff1, null, null, null, null);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*chooser ::= chooseDiff '>>'  chooseDiff .*/
    case ARTL_ART_chooser_944: 
      chooseDiff1 = new ARTAT_ART_chooseDiff();
      chooseDiff2 = new ARTAT_ART_chooseDiff();
            ARTRD_chooser(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, chooser, chooseDiff1, chooseDiff2);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), chooseDiff2));
      ARTRD_chooseDiff(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, chooseDiff2, null, null, null, null);
       chooser.v = "chooseLonger("  + chooseDiff1.v + "," + chooseDiff2.v + ")"; 
      break;
    /*chooser ::= chooseDiff '<<'  . chooseDiff */
    case ARTL_ART_chooser_952: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), chooseDiff1));
      ARTRD_chooseDiff(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable, chooseDiff1, null, null, null, null);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*chooser ::= chooseDiff '<<'  chooseDiff .*/
    case ARTL_ART_chooser_954: 
      chooseDiff1 = new ARTAT_ART_chooseDiff();
      chooseDiff2 = new ARTAT_ART_chooseDiff();
            ARTRD_chooser(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, chooser, chooseDiff1, chooseDiff2);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), chooseDiff2));
      ARTRD_chooseDiff(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, chooseDiff2, null, null, null, null);
       chooser.v = "chooseShorter(" + chooseDiff1.v + "," + chooseDiff2.v + ")"; 
      break;
    /*chooser ::= 'longest'  chooseDiff .*/
    case ARTL_ART_chooser_962: 
      chooseDiff1 = new ARTAT_ART_chooseDiff();
      chooseDiff2 = new ARTAT_ART_chooseDiff();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), chooseDiff1));
      ARTRD_chooseDiff(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, chooseDiff1, null, null, null, null);
       chooser.v = "chooseLonger("  + chooseDiff1.v + "," + chooseDiff1.v + ")"; 
      break;
    /*chooser ::= 'shortest'  chooseDiff .*/
    case ARTL_ART_chooser_970: 
      chooseDiff1 = new ARTAT_ART_chooseDiff();
      chooseDiff2 = new ARTAT_ART_chooseDiff();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), chooseDiff1));
      ARTRD_chooseDiff(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, chooseDiff1, null, null, null, null);
       chooser.v = "chooseShorter(" + chooseDiff1.v + "," + chooseDiff1.v + ")"; 
      break;
        default: ; }}}
}

public void ARTRD_choosers(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ART_chooser chooser1)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*choosers ::= chooser .*/
    case ARTL_ART_choosers_746: 
      chooser1 = new ARTAT_ART_chooser();
            ARTRD_choosers(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, chooser1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), chooser1));
      ARTRD_chooser(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, chooser1, null, null);
       currentModule.currentChooserExpressions.add(chooser1.v); 
      break;
    /*choosers ::= chooser choosers .*/
    case ARTL_ART_choosers_756: 
      chooser1 = new ARTAT_ART_chooser();
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), chooser1));
      ARTRD_chooser(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable, chooser1, null, null);
       currentModule.currentChooserExpressions.add(chooser1.v); 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_choosers(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, null);
            break;
        default: ; }}}
}

public void ARTRD_delay(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*delay ::= '<'  .*/
    case ARTL_ART_delay_1414: 
            ARTRD_delay(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
                  break;
        default: ; }}}
}

public void ARTRD_diff(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*diff ::= union .*/
    case ARTL_ART_diff_1270: 
            ARTRD_diff(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_union(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*diff ::= diff '\\'  . union */
    case ARTL_ART_diff_1276: 
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_diff(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
                  if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*diff ::= diff '\\'  union .*/
    case ARTL_ART_diff_1278: 
            ARTRD_diff(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_union(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_directive(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ART_ID ID1, ARTAT_ART_INTEGER INTEGER1, ARTAT_ART_STRING_BRACE_NEST STRING_BRACE_NEST1, ARTAT_ART_STRING_PLAIN_SQ STRING_PLAIN_SQ1, ARTAT_ART_nonterminal nonterminal1, ARTAT_ART_rhs rhs1, ARTAT_ART_trueFalse trueFalse1)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*directive ::= 'import'  ID .*/
    case ARTL_ART_directive_32: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            ID1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode));
      ID1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode));
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), ID1));
      ARTRD_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, ID1);
            break;
    /*directive ::= 'element'  elementUpdaters .*/
    case ARTL_ART_directive_38: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_elementUpdaters(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*directive ::= 'start'  nonterminal .*/
    case ARTL_ART_directive_44: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), nonterminal1));
      ARTRD_nonterminal(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, nonterminal1, null, null);
       currentModule.setDefaultStart(nonterminal1.v); 
      break;
    /*directive ::= 'whitespace'  whitespacers .*/
    case ARTL_ART_directive_52: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_whitespacers(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*directive ::= 'paraterminal'  paraterminalisers .*/
    case ARTL_ART_directive_58: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_paraterminalisers(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, null, null);
            break;
    /*directive ::= 'injectInstance'  rhs .*/
    case ARTL_ART_directive_66: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      rhs1.lhs = "ART_InjectInstance"; rhs1.isDeleter = false; 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), rhs1));
      ARTRD_rhs(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, rhs1, null);
            break;
    /*directive ::= 'injectProduction'  rhs .*/
    case ARTL_ART_directive_74: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      rhs1.lhs = "ART_InjectProduction"; rhs1.isDeleter = false; 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), rhs1));
      ARTRD_rhs(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, rhs1, null);
            break;
    /*directive ::= 'injectProductionOff'  .*/
    case ARTL_ART_directive_78: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_BRACE_NEST1, STRING_PLAIN_SQ1, nonterminal1, rhs1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       currentModule.setInjectProductionString(""); 
      break;
    /*directive ::= 'absorb'  nonterminal .*/
    case ARTL_ART_directive_86: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), nonterminal1));
      ARTRD_nonterminal(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, nonterminal1, null, null);
      currentModule.setAbsorbNonterminal(nonterminal1.v); 
      break;
    /*directive ::= 'choose'  choosers .*/
    case ARTL_ART_directive_96: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
       currentModule.currentChooserExpressions = currentModule.findChooserExpressions(""); 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_choosers(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, null);
            break;
    /*directive ::= 'choose'  ID . choosers */
    case ARTL_ART_directive_102: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            ID1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode));
      ID1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode));
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), ID1));
      ARTRD_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, ID1);
       currentModule.currentChooserExpressions = currentModule.findChooserExpressions(ID1.v); 
      break;
    /*directive ::= 'choose'  ID choosers .*/
    case ARTL_ART_directive_106: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_BRACE_NEST1, STRING_PLAIN_SQ1, nonterminal1, rhs1, trueFalse1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_choosers(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, null);
            break;
    /*directive ::= 'prelude'  STRING_BRACE_NEST .*/
    case ARTL_ART_directive_112: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            STRING_BRACE_NEST1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode));
      STRING_BRACE_NEST1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode));
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), STRING_BRACE_NEST1));
      ARTRD_STRING_BRACE_NEST(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, STRING_BRACE_NEST1);
       currentModule.addPreludeString(STRING_BRACE_NEST1.v); 
      break;
    /*directive ::= 'support'  STRING_BRACE_NEST .*/
    case ARTL_ART_directive_120: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            STRING_BRACE_NEST1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode));
      STRING_BRACE_NEST1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode));
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), STRING_BRACE_NEST1));
      ARTRD_STRING_BRACE_NEST(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, STRING_BRACE_NEST1);
       currentModule.addSupportString(STRING_BRACE_NEST1.v); 
      break;
    /*directive ::= 'verbosity'  INTEGER .*/
    case ARTL_ART_directive_128: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            INTEGER1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode));
      INTEGER1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode));
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), INTEGER1));
      ARTRD_INTEGER(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, INTEGER1);
       artManager.artDirectives.set("verbosityLevel", INTEGER1.v); 
      break;
    /*directive ::= 'trace'  trueFalse .*/
    case ARTL_ART_directive_136: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.artDirectives.set("trace", trueFalse1.v); 
      break;
    /*directive ::= 'inputPrint'  trueFalse .*/
    case ARTL_ART_directive_144: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.artDirectives.set("inputPrint", trueFalse1.v); 
      break;
    /*directive ::= 'tweLexicalisations'  trueFalse .*/
    case ARTL_ART_directive_152: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.artDirectives.set("tweLexicalisations", trueFalse1.v); 
      break;
    /*directive ::= 'tweExtents'  trueFalse .*/
    case ARTL_ART_directive_160: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.artDirectives.set("tweExtents", trueFalse1.v); 
      break;
    /*directive ::= 'tweSegments'  trueFalse .*/
    case ARTL_ART_directive_168: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.artDirectives.set("tweSegments", trueFalse1.v); 
      break;
    /*directive ::= 'tweRecursive'  trueFalse .*/
    case ARTL_ART_directive_176: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.artDirectives.set("tweRecursive", trueFalse1.v); 
      break;
    /*directive ::= 'twePrintSummary'  trueFalse .*/
    case ARTL_ART_directive_184: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.artDirectives.set("twePrintSummary", trueFalse1.v); 
      break;
    /*directive ::= 'twePrint'  trueFalse .*/
    case ARTL_ART_directive_192: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.artDirectives.set("twePrint", trueFalse1.v); 
      break;
    /*directive ::= 'twePrintFull'  trueFalse .*/
    case ARTL_ART_directive_200: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.artDirectives.set("twePrintFull", trueFalse1.v); 
      break;
    /*directive ::= 'tweDead'  trueFalse .*/
    case ARTL_ART_directive_208: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.artDirectives.set("tweDead", trueFalse1.v); 
      break;
    /*directive ::= 'tweLongest'  trueFalse .*/
    case ARTL_ART_directive_216: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.artDirectives.set("tweLongest", trueFalse1.v); 
      break;
    /*directive ::= 'twePriority'  trueFalse .*/
    case ARTL_ART_directive_224: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.artDirectives.set("twePriority", trueFalse1.v); 
      break;
    /*directive ::= 'tweShortCircuit'  trueFalse .*/
    case ARTL_ART_directive_232: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.artDirectives.set("tweShortCircuit", trueFalse1.v); 
      break;
    /*directive ::= 'sppfLongest'  trueFalse .*/
    case ARTL_ART_directive_240: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.artDirectives.set("sppfLongest", trueFalse1.v); 
      break;
    /*directive ::= 'sppfPriority'  trueFalse .*/
    case ARTL_ART_directive_248: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.artDirectives.set("sppfPriority", trueFalse1.v); 
      break;
    /*directive ::= 'tweFromSPPF'  trueFalse .*/
    case ARTL_ART_directive_256: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.artDirectives.set("tweFromSPPF", trueFalse1.v); 
      break;
    /*directive ::= 'tweTokenWrite'  trueFalse .*/
    case ARTL_ART_directive_264: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.artDirectives.set("tweTokenWrite", trueFalse1.v); 
      break;
    /*directive ::= 'sppfShow'  trueFalse .*/
    case ARTL_ART_directive_272: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.artDirectives.set("sppfShow", trueFalse1.v); 
      break;
    /*directive ::= 'gssShow'  trueFalse .*/
    case ARTL_ART_directive_280: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.artDirectives.set("gssShow", trueFalse1.v); 
      break;
    /*directive ::= 'treeShow'  trueFalse .*/
    case ARTL_ART_directive_288: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.artDirectives.set("treeShow", trueFalse1.v); 
      break;
    /*directive ::= 'treePrint'  trueFalse .*/
    case ARTL_ART_directive_296: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.artDirectives.set("treePrint", trueFalse1.v); 
      break;
    /*directive ::= 'termPrint'  trueFalse .*/
    case ARTL_ART_directive_304: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.artDirectives.set("termPrint", trueFalse1.v); 
      break;
    /*directive ::= 'termWrite'  trueFalse .*/
    case ARTL_ART_directive_312: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.artDirectives.set("termWrite", trueFalse1.v); 
      break;
    /*directive ::= 'parseCounts'  trueFalse .*/
    case ARTL_ART_directive_320: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.artDirectives.set("parseCounts", trueFalse1.v); 
      break;
    /*directive ::= 'outputDirectory'  STRING_PLAIN_SQ .*/
    case ARTL_ART_directive_328: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            STRING_PLAIN_SQ1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode));
      STRING_PLAIN_SQ1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode));
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), STRING_PLAIN_SQ1));
      ARTRD_STRING_PLAIN_SQ(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, STRING_PLAIN_SQ1);
       artManager.artDirectives.set("outputDirectory", STRING_PLAIN_SQ1.v); 
      break;
    /*directive ::= 'namespace'  STRING_PLAIN_SQ .*/
    case ARTL_ART_directive_336: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            STRING_PLAIN_SQ1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode));
      STRING_PLAIN_SQ1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode));
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), STRING_PLAIN_SQ1));
      ARTRD_STRING_PLAIN_SQ(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, STRING_PLAIN_SQ1);
       artManager.artDirectives.set("namespace", STRING_PLAIN_SQ1.v); 
      break;
    /*directive ::= 'lexerName'  STRING_PLAIN_SQ .*/
    case ARTL_ART_directive_344: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            STRING_PLAIN_SQ1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode));
      STRING_PLAIN_SQ1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode));
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), STRING_PLAIN_SQ1));
      ARTRD_STRING_PLAIN_SQ(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, STRING_PLAIN_SQ1);
       artManager.artDirectives.set("lexerName", STRING_PLAIN_SQ1.v); 
      break;
    /*directive ::= 'parserName'  STRING_PLAIN_SQ .*/
    case ARTL_ART_directive_352: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            STRING_PLAIN_SQ1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode));
      STRING_PLAIN_SQ1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode));
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), STRING_PLAIN_SQ1));
      ARTRD_STRING_PLAIN_SQ(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, STRING_PLAIN_SQ1);
       artManager.artDirectives.set("parserName", STRING_PLAIN_SQ1.v); 
      break;
    /*directive ::= 'generateDynamic'  .*/
    case ARTL_ART_directive_358: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_BRACE_NEST1, STRING_PLAIN_SQ1, nonterminal1, rhs1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.artDirectives.set("despatchMode", ARTModeDespatch.dynamic); 
      break;
    /*directive ::= 'generateStatic'  .*/
    case ARTL_ART_directive_364: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_BRACE_NEST1, STRING_PLAIN_SQ1, nonterminal1, rhs1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.artDirectives.set("despatchMode", ARTModeDespatch.static_); 
      break;
    /*directive ::= 'generateState'  .*/
    case ARTL_ART_directive_370: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_BRACE_NEST1, STRING_PLAIN_SQ1, nonterminal1, rhs1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.artDirectives.set("despatchMode", ARTModeDespatch.state); 
      break;
    /*directive ::= 'generateFragment'  .*/
    case ARTL_ART_directive_376: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_BRACE_NEST1, STRING_PLAIN_SQ1, nonterminal1, rhs1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.artDirectives.set("despatchMode", ARTModeDespatch.fragment); 
      break;
    /*directive ::= 'generatePool'  .*/
    case ARTL_ART_directive_382: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_BRACE_NEST1, STRING_PLAIN_SQ1, nonterminal1, rhs1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.artDirectives.set("supportMode", ARTModeSupport.HashPool); 
      break;
    /*directive ::= 'predictivePops'  trueFalse .*/
    case ARTL_ART_directive_390: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.artDirectives.set("predictivePops", trueFalse1.v); 
      break;
    /*directive ::= 'FIFODescriptors'  trueFalse .*/
    case ARTL_ART_directive_398: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.artDirectives.set("FIFODescriptors", trueFalse1.v); 
      break;
    /*directive ::= 'suppressPopGuard'  trueFalse .*/
    case ARTL_ART_directive_406: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.artDirectives.set("suppressPopGuard", trueFalse1.v); 
      break;
    /*directive ::= 'suppressProductionGuard'  trueFalse .*/
    case ARTL_ART_directive_414: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.artDirectives.set("suppressProductionGuard", trueFalse1.v); 
      break;
    /*directive ::= 'suppressTestRepeat'  trueFalse .*/
    case ARTL_ART_directive_422: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.artDirectives.set("suppressTestRepeat", trueFalse1.v); 
      break;
    /*directive ::= 'suppressSemantics'  trueFalse .*/
    case ARTL_ART_directive_430: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), trueFalse1));
      ARTRD_trueFalse(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, trueFalse1);
       artManager.artDirectives.set("suppressSemantics", trueFalse1.v); 
      break;
    /*directive ::= 'lexerData'  .*/
    case ARTL_ART_directive_436: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_BRACE_NEST1, STRING_PLAIN_SQ1, nonterminal1, rhs1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.lexerData); 
      break;
    /*directive ::= 'lexDFA'  .*/
    case ARTL_ART_directive_442: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_BRACE_NEST1, STRING_PLAIN_SQ1, nonterminal1, rhs1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.lexDFA); 
      break;
    /*directive ::= 'earley'  .*/
    case ARTL_ART_directive_448: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_BRACE_NEST1, STRING_PLAIN_SQ1, nonterminal1, rhs1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.earleyLinkedAPI); 
      break;
    /*directive ::= 'earley2007LinkedAPI'  .*/
    case ARTL_ART_directive_454: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_BRACE_NEST1, STRING_PLAIN_SQ1, nonterminal1, rhs1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.earley2007LinkedAPI); 
      break;
    /*directive ::= 'earleyLinkedAPI'  .*/
    case ARTL_ART_directive_460: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_BRACE_NEST1, STRING_PLAIN_SQ1, nonterminal1, rhs1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.earleyLinkedAPI); 
      break;
    /*directive ::= 'earleyIndexedAPI'  .*/
    case ARTL_ART_directive_466: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_BRACE_NEST1, STRING_PLAIN_SQ1, nonterminal1, rhs1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.earleyIndexedAPI); 
      break;
    /*directive ::= 'earleyIndexedPool'  .*/
    case ARTL_ART_directive_472: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_BRACE_NEST1, STRING_PLAIN_SQ1, nonterminal1, rhs1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.earleyIndexedPool); 
      break;
    /*directive ::= 'earleyIndexedData'  .*/
    case ARTL_ART_directive_478: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_BRACE_NEST1, STRING_PLAIN_SQ1, nonterminal1, rhs1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.earleyIndexedData); 
      break;
    /*directive ::= 'earleyTable'  .*/
    case ARTL_ART_directive_484: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_BRACE_NEST1, STRING_PLAIN_SQ1, nonterminal1, rhs1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.earleyTableLinkedAPI); 
      break;
    /*directive ::= 'earleyTableLinkedAPI'  .*/
    case ARTL_ART_directive_490: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_BRACE_NEST1, STRING_PLAIN_SQ1, nonterminal1, rhs1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.earleyTableLinkedAPI); 
      break;
    /*directive ::= 'earleyTableIndexedAPI'  .*/
    case ARTL_ART_directive_496: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_BRACE_NEST1, STRING_PLAIN_SQ1, nonterminal1, rhs1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.earleyTableIndexedAPI); 
      break;
    /*directive ::= 'earleyTableIndexedPool'  .*/
    case ARTL_ART_directive_502: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_BRACE_NEST1, STRING_PLAIN_SQ1, nonterminal1, rhs1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.earleyTableIndexedPool); 
      break;
    /*directive ::= 'earleyTableIndexedData'  .*/
    case ARTL_ART_directive_508: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_BRACE_NEST1, STRING_PLAIN_SQ1, nonterminal1, rhs1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.earleyTableIndexedData); 
      break;
    /*directive ::= 'cnp'  .*/
    case ARTL_ART_directive_514: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_BRACE_NEST1, STRING_PLAIN_SQ1, nonterminal1, rhs1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.cnpLinkedAPI); 
      break;
    /*directive ::= 'cnpLinkedAPI'  .*/
    case ARTL_ART_directive_520: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_BRACE_NEST1, STRING_PLAIN_SQ1, nonterminal1, rhs1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.cnpLinkedAPI); 
      break;
    /*directive ::= 'cnpIndexedAPI'  .*/
    case ARTL_ART_directive_526: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_BRACE_NEST1, STRING_PLAIN_SQ1, nonterminal1, rhs1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.cnpIndexedAPI); 
      break;
    /*directive ::= 'cnpIndexedPool'  .*/
    case ARTL_ART_directive_532: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_BRACE_NEST1, STRING_PLAIN_SQ1, nonterminal1, rhs1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.cnpIndexedPool); 
      break;
    /*directive ::= 'cnpGeneratorPool'  .*/
    case ARTL_ART_directive_538: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_BRACE_NEST1, STRING_PLAIN_SQ1, nonterminal1, rhs1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.cnpGeneratorPool); 
      break;
    /*directive ::= 'lcnp'  .*/
    case ARTL_ART_directive_544: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_BRACE_NEST1, STRING_PLAIN_SQ1, nonterminal1, rhs1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.lcnpLinkedAPI); 
      break;
    /*directive ::= 'lcnpLinkedAPI'  .*/
    case ARTL_ART_directive_550: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_BRACE_NEST1, STRING_PLAIN_SQ1, nonterminal1, rhs1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.lcnpLinkedAPI); 
      break;
    /*directive ::= 'lcnpIndexedAPI'  .*/
    case ARTL_ART_directive_556: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_BRACE_NEST1, STRING_PLAIN_SQ1, nonterminal1, rhs1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.lcnpIndexedAPI); 
      break;
    /*directive ::= 'lcnpIndexedPool'  .*/
    case ARTL_ART_directive_562: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_BRACE_NEST1, STRING_PLAIN_SQ1, nonterminal1, rhs1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.lcnpIndexedPool); 
      break;
    /*directive ::= 'lcnpGeneratorPool'  .*/
    case ARTL_ART_directive_568: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_BRACE_NEST1, STRING_PLAIN_SQ1, nonterminal1, rhs1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.lcnpGeneratorPool); 
      break;
    /*directive ::= 'gll'  .*/
    case ARTL_ART_directive_574: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_BRACE_NEST1, STRING_PLAIN_SQ1, nonterminal1, rhs1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.gllGeneratorPool); 
      break;
    /*directive ::= 'gllGeneratorPool'  .*/
    case ARTL_ART_directive_580: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_BRACE_NEST1, STRING_PLAIN_SQ1, nonterminal1, rhs1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.gllGeneratorPool); 
      break;
    /*directive ::= 'gllTWEGeneratorPool'  .*/
    case ARTL_ART_directive_586: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_BRACE_NEST1, STRING_PLAIN_SQ1, nonterminal1, rhs1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.gllTWEGeneratorPool); 
      break;
    /*directive ::= 'gllClusteredGeneratorPool'  .*/
    case ARTL_ART_directive_592: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_BRACE_NEST1, STRING_PLAIN_SQ1, nonterminal1, rhs1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.gllGeneratorPool); artManager.artDirectives.set("clusteredGSS", true); 
      break;
    /*directive ::= 'mgll'  .*/
    case ARTL_ART_directive_598: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_BRACE_NEST1, STRING_PLAIN_SQ1, nonterminal1, rhs1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.mgllGeneratorPool); 
      break;
    /*directive ::= 'mgllGeneratorPool'  .*/
    case ARTL_ART_directive_604: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_BRACE_NEST1, STRING_PLAIN_SQ1, nonterminal1, rhs1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.mgllGeneratorPool); 
      break;
    /*directive ::= 'osbrd'  .*/
    case ARTL_ART_directive_610: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_BRACE_NEST1, STRING_PLAIN_SQ1, nonterminal1, rhs1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.osbrdGenerator); 
      break;
    /*directive ::= 'osbrdGenerator'  .*/
    case ARTL_ART_directive_616: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_BRACE_NEST1, STRING_PLAIN_SQ1, nonterminal1, rhs1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.osbrdGenerator); 
      break;
    /*directive ::= 'grammarWrite'  .*/
    case ARTL_ART_directive_622: 
      ID1 = new ARTAT_ART_ID();
      INTEGER1 = new ARTAT_ART_INTEGER();
      STRING_BRACE_NEST1 = new ARTAT_ART_STRING_BRACE_NEST();
      STRING_PLAIN_SQ1 = new ARTAT_ART_STRING_PLAIN_SQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
      trueFalse1 = new ARTAT_ART_trueFalse();
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, ID1, INTEGER1, STRING_BRACE_NEST1, STRING_PLAIN_SQ1, nonterminal1, rhs1, trueFalse1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.grammarWrite); 
      break;
        default: ; }}}
}

public void ARTRD_element1(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ART_element1 element1, ARTAT_ART_builtinTerminal builtinTerminal1, ARTAT_ART_caseInsensitiveTerminal caseInsensitiveTerminal1, ARTAT_ART_caseSensitiveTerminal caseSensitiveTerminal1, ARTAT_ART_characterSetTerminal characterSetTerminal1, ARTAT_ART_characterTerminal characterTerminal1, ARTAT_ART_nonterminal nonterminal1)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*element1 ::= epsilon .*/
    case ARTL_ART_element1_1304: 
      builtinTerminal1 = new ARTAT_ART_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ART_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ART_caseSensitiveTerminal();
      characterSetTerminal1 = new ARTAT_ART_characterSetTerminal();
      characterTerminal1 = new ARTAT_ART_characterTerminal();
      nonterminal1 = new ARTAT_ART_nonterminal();
            ARTRD_element1(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, element1, builtinTerminal1, caseInsensitiveTerminal1, caseSensitiveTerminal1, characterSetTerminal1, characterTerminal1, nonterminal1);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_epsilon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*element1 ::= nonterminal .*/
    case ARTL_ART_element1_1308: 
      builtinTerminal1 = new ARTAT_ART_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ART_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ART_caseSensitiveTerminal();
      characterSetTerminal1 = new ARTAT_ART_characterSetTerminal();
      characterTerminal1 = new ARTAT_ART_characterTerminal();
      nonterminal1 = new ARTAT_ART_nonterminal();
            ARTRD_element1(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, element1, builtinTerminal1, caseInsensitiveTerminal1, caseSensitiveTerminal1, characterSetTerminal1, characterTerminal1, nonterminal1);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), nonterminal1));
      ARTRD_nonterminal(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, nonterminal1, null, null);
       currentModule.addUsedNonterminal(nonterminal1.v); 
      break;
    /*element1 ::= caseSensitiveTerminal .*/
    case ARTL_ART_element1_1314: 
      builtinTerminal1 = new ARTAT_ART_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ART_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ART_caseSensitiveTerminal();
      characterSetTerminal1 = new ARTAT_ART_characterSetTerminal();
      characterTerminal1 = new ARTAT_ART_characterTerminal();
      nonterminal1 = new ARTAT_ART_nonterminal();
            ARTRD_element1(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, element1, builtinTerminal1, caseInsensitiveTerminal1, caseSensitiveTerminal1, characterSetTerminal1, characterTerminal1, nonterminal1);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), caseSensitiveTerminal1));
      ARTRD_caseSensitiveTerminal(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, caseSensitiveTerminal1, null);
            break;
    /*element1 ::= caseInsensitiveTerminal .*/
    case ARTL_ART_element1_1318: 
      builtinTerminal1 = new ARTAT_ART_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ART_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ART_caseSensitiveTerminal();
      characterSetTerminal1 = new ARTAT_ART_characterSetTerminal();
      characterTerminal1 = new ARTAT_ART_characterTerminal();
      nonterminal1 = new ARTAT_ART_nonterminal();
            ARTRD_element1(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, element1, builtinTerminal1, caseInsensitiveTerminal1, caseSensitiveTerminal1, characterSetTerminal1, characterTerminal1, nonterminal1);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), caseInsensitiveTerminal1));
      ARTRD_caseInsensitiveTerminal(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, caseInsensitiveTerminal1, null);
            break;
    /*element1 ::= characterTerminal .*/
    case ARTL_ART_element1_1322: 
      builtinTerminal1 = new ARTAT_ART_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ART_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ART_caseSensitiveTerminal();
      characterSetTerminal1 = new ARTAT_ART_characterSetTerminal();
      characterTerminal1 = new ARTAT_ART_characterTerminal();
      nonterminal1 = new ARTAT_ART_nonterminal();
            ARTRD_element1(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, element1, builtinTerminal1, caseInsensitiveTerminal1, caseSensitiveTerminal1, characterSetTerminal1, characterTerminal1, nonterminal1);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), characterTerminal1));
      ARTRD_characterTerminal(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, characterTerminal1, null);
            break;
    /*element1 ::= characterSetTerminal .*/
    case ARTL_ART_element1_1326: 
      builtinTerminal1 = new ARTAT_ART_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ART_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ART_caseSensitiveTerminal();
      characterSetTerminal1 = new ARTAT_ART_characterSetTerminal();
      characterTerminal1 = new ARTAT_ART_characterTerminal();
      nonterminal1 = new ARTAT_ART_nonterminal();
            ARTRD_element1(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, element1, builtinTerminal1, caseInsensitiveTerminal1, caseSensitiveTerminal1, characterSetTerminal1, characterTerminal1, nonterminal1);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), characterSetTerminal1));
      ARTRD_characterSetTerminal(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, characterSetTerminal1, null, null);
            break;
    /*element1 ::= builtinTerminal .*/
    case ARTL_ART_element1_1330: 
      builtinTerminal1 = new ARTAT_ART_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ART_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ART_caseSensitiveTerminal();
      characterSetTerminal1 = new ARTAT_ART_characterSetTerminal();
      characterTerminal1 = new ARTAT_ART_characterTerminal();
      nonterminal1 = new ARTAT_ART_nonterminal();
            ARTRD_element1(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, element1, builtinTerminal1, caseInsensitiveTerminal1, caseSensitiveTerminal1, characterSetTerminal1, characterTerminal1, nonterminal1);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), builtinTerminal1));
      ARTRD_builtinTerminal(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, builtinTerminal1, null);
            break;
    /*element1 ::= epsilon annotations .*/
    case ARTL_ART_element1_1336: 
      builtinTerminal1 = new ARTAT_ART_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ART_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ART_caseSensitiveTerminal();
      characterSetTerminal1 = new ARTAT_ART_characterSetTerminal();
      characterTerminal1 = new ARTAT_ART_characterTerminal();
      nonterminal1 = new ARTAT_ART_nonterminal();
            artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_epsilon(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_annotations(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*element1 ::= nonterminal annotations .*/
    case ARTL_ART_element1_1344: 
      builtinTerminal1 = new ARTAT_ART_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ART_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ART_caseSensitiveTerminal();
      characterSetTerminal1 = new ARTAT_ART_characterSetTerminal();
      characterTerminal1 = new ARTAT_ART_characterTerminal();
      nonterminal1 = new ARTAT_ART_nonterminal();
            artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), nonterminal1));
      ARTRD_nonterminal(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable, nonterminal1, null, null);
       currentModule.addUsedNonterminal(nonterminal1.v); 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_annotations(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*element1 ::= caseSensitiveTerminal annotations .*/
    case ARTL_ART_element1_1350: 
      builtinTerminal1 = new ARTAT_ART_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ART_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ART_caseSensitiveTerminal();
      characterSetTerminal1 = new ARTAT_ART_characterSetTerminal();
      characterTerminal1 = new ARTAT_ART_characterTerminal();
      nonterminal1 = new ARTAT_ART_nonterminal();
            artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), caseSensitiveTerminal1));
      ARTRD_caseSensitiveTerminal(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable, caseSensitiveTerminal1, null);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_annotations(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*element1 ::= caseInsensitiveTerminal annotations .*/
    case ARTL_ART_element1_1356: 
      builtinTerminal1 = new ARTAT_ART_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ART_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ART_caseSensitiveTerminal();
      characterSetTerminal1 = new ARTAT_ART_characterSetTerminal();
      characterTerminal1 = new ARTAT_ART_characterTerminal();
      nonterminal1 = new ARTAT_ART_nonterminal();
            artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), caseInsensitiveTerminal1));
      ARTRD_caseInsensitiveTerminal(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable, caseInsensitiveTerminal1, null);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_annotations(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*element1 ::= characterTerminal annotations .*/
    case ARTL_ART_element1_1362: 
      builtinTerminal1 = new ARTAT_ART_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ART_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ART_caseSensitiveTerminal();
      characterSetTerminal1 = new ARTAT_ART_characterSetTerminal();
      characterTerminal1 = new ARTAT_ART_characterTerminal();
      nonterminal1 = new ARTAT_ART_nonterminal();
            artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), characterTerminal1));
      ARTRD_characterTerminal(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable, characterTerminal1, null);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_annotations(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*element1 ::= characterSetTerminal annotations .*/
    case ARTL_ART_element1_1368: 
      builtinTerminal1 = new ARTAT_ART_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ART_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ART_caseSensitiveTerminal();
      characterSetTerminal1 = new ARTAT_ART_characterSetTerminal();
      characterTerminal1 = new ARTAT_ART_characterTerminal();
      nonterminal1 = new ARTAT_ART_nonterminal();
            artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), characterSetTerminal1));
      ARTRD_characterSetTerminal(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable, characterSetTerminal1, null, null);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_annotations(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*element1 ::= builtinTerminal annotations .*/
    case ARTL_ART_element1_1374: 
      builtinTerminal1 = new ARTAT_ART_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ART_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ART_caseSensitiveTerminal();
      characterSetTerminal1 = new ARTAT_ART_characterSetTerminal();
      characterTerminal1 = new ARTAT_ART_characterTerminal();
      nonterminal1 = new ARTAT_ART_nonterminal();
            artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), builtinTerminal1));
      ARTRD_builtinTerminal(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable, builtinTerminal1, null);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_annotations(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*element1 ::= '('  alt . ')'  */
    case ARTL_ART_element1_1380: 
            if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_alt(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*element1 ::= '('  alt ')'  .*/
    case ARTL_ART_element1_1382: 
      builtinTerminal1 = new ARTAT_ART_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ART_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ART_caseSensitiveTerminal();
      characterSetTerminal1 = new ARTAT_ART_characterSetTerminal();
      characterTerminal1 = new ARTAT_ART_characterTerminal();
      nonterminal1 = new ARTAT_ART_nonterminal();
            ARTRD_element1(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, element1, builtinTerminal1, caseInsensitiveTerminal1, caseSensitiveTerminal1, characterSetTerminal1, characterTerminal1, nonterminal1);
                  break;
        default: ; }}}
}

public void ARTRD_elementUpdater(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ART_builtinTerminal builtinTerminal1, ARTAT_ART_caseInsensitiveTerminal caseInsensitiveTerminal1, ARTAT_ART_caseSensitiveTerminal caseSensitiveTerminal1, ARTAT_ART_characterSetTerminal characterSetTerminal1, ARTAT_ART_characterTerminal characterTerminal1, ARTAT_ART_nonterminal nonterminal1)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*elementUpdater ::= epsilon .*/
    case ARTL_ART_elementUpdater_812: 
      builtinTerminal1 = new ARTAT_ART_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ART_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ART_caseSensitiveTerminal();
      characterSetTerminal1 = new ARTAT_ART_characterSetTerminal();
      characterTerminal1 = new ARTAT_ART_characterTerminal();
      nonterminal1 = new ARTAT_ART_nonterminal();
            ARTRD_elementUpdater(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, builtinTerminal1, caseInsensitiveTerminal1, caseSensitiveTerminal1, characterSetTerminal1, characterTerminal1, nonterminal1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_epsilon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
       currentModule.addElement(new ARTGrammarElementEpsilon()); 
      break;
    /*elementUpdater ::= nonterminal .*/
    case ARTL_ART_elementUpdater_818: 
      builtinTerminal1 = new ARTAT_ART_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ART_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ART_caseSensitiveTerminal();
      characterSetTerminal1 = new ARTAT_ART_characterSetTerminal();
      characterTerminal1 = new ARTAT_ART_characterTerminal();
      nonterminal1 = new ARTAT_ART_nonterminal();
            ARTRD_elementUpdater(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, builtinTerminal1, caseInsensitiveTerminal1, caseSensitiveTerminal1, characterSetTerminal1, characterTerminal1, nonterminal1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), nonterminal1));
      ARTRD_nonterminal(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, nonterminal1, null, null);
       currentModule.addElement(new ARTGrammarElementNonterminal(currentModule, nonterminal1.v)); 
      break;
    /*elementUpdater ::= caseSensitiveTerminal .*/
    case ARTL_ART_elementUpdater_824: 
      builtinTerminal1 = new ARTAT_ART_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ART_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ART_caseSensitiveTerminal();
      characterSetTerminal1 = new ARTAT_ART_characterSetTerminal();
      characterTerminal1 = new ARTAT_ART_characterTerminal();
      nonterminal1 = new ARTAT_ART_nonterminal();
            ARTRD_elementUpdater(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, builtinTerminal1, caseInsensitiveTerminal1, caseSensitiveTerminal1, characterSetTerminal1, characterTerminal1, nonterminal1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), caseSensitiveTerminal1));
      ARTRD_caseSensitiveTerminal(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, caseSensitiveTerminal1, null);
       currentModule.addElement(new ARTGrammarElementTerminalCaseSensitive(caseSensitiveTerminal1.v)); 
      break;
    /*elementUpdater ::= caseInsensitiveTerminal .*/
    case ARTL_ART_elementUpdater_830: 
      builtinTerminal1 = new ARTAT_ART_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ART_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ART_caseSensitiveTerminal();
      characterSetTerminal1 = new ARTAT_ART_characterSetTerminal();
      characterTerminal1 = new ARTAT_ART_characterTerminal();
      nonterminal1 = new ARTAT_ART_nonterminal();
            ARTRD_elementUpdater(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, builtinTerminal1, caseInsensitiveTerminal1, caseSensitiveTerminal1, characterSetTerminal1, characterTerminal1, nonterminal1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), caseInsensitiveTerminal1));
      ARTRD_caseInsensitiveTerminal(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, caseInsensitiveTerminal1, null);
       currentModule.addElement(new ARTGrammarElementTerminalCaseInsensitive(caseInsensitiveTerminal1.v)); 
      break;
    /*elementUpdater ::= characterTerminal .*/
    case ARTL_ART_elementUpdater_836: 
      builtinTerminal1 = new ARTAT_ART_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ART_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ART_caseSensitiveTerminal();
      characterSetTerminal1 = new ARTAT_ART_characterSetTerminal();
      characterTerminal1 = new ARTAT_ART_characterTerminal();
      nonterminal1 = new ARTAT_ART_nonterminal();
            ARTRD_elementUpdater(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, builtinTerminal1, caseInsensitiveTerminal1, caseSensitiveTerminal1, characterSetTerminal1, characterTerminal1, nonterminal1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), characterTerminal1));
      ARTRD_characterTerminal(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, characterTerminal1, null);
       currentModule.addElement(new ARTGrammarElementTerminalCharacter(characterTerminal1.v)); 
      break;
    /*elementUpdater ::= characterSetTerminal .*/
    case ARTL_ART_elementUpdater_842: 
      builtinTerminal1 = new ARTAT_ART_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ART_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ART_caseSensitiveTerminal();
      characterSetTerminal1 = new ARTAT_ART_characterSetTerminal();
      characterTerminal1 = new ARTAT_ART_characterTerminal();
      nonterminal1 = new ARTAT_ART_nonterminal();
            ARTRD_elementUpdater(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, builtinTerminal1, caseInsensitiveTerminal1, caseSensitiveTerminal1, characterSetTerminal1, characterTerminal1, nonterminal1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), characterSetTerminal1));
      ARTRD_characterSetTerminal(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, characterSetTerminal1, null, null);
       currentModule.addElement(new ARTGrammarElementTerminalCharacterSet(characterSetTerminal1.lo, characterSetTerminal1.hi)); 
      break;
    /*elementUpdater ::= builtinTerminal .*/
    case ARTL_ART_elementUpdater_848: 
      builtinTerminal1 = new ARTAT_ART_builtinTerminal();
      caseInsensitiveTerminal1 = new ARTAT_ART_caseInsensitiveTerminal();
      caseSensitiveTerminal1 = new ARTAT_ART_caseSensitiveTerminal();
      characterSetTerminal1 = new ARTAT_ART_characterSetTerminal();
      characterTerminal1 = new ARTAT_ART_characterTerminal();
      nonterminal1 = new ARTAT_ART_nonterminal();
            ARTRD_elementUpdater(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, builtinTerminal1, caseInsensitiveTerminal1, caseSensitiveTerminal1, characterSetTerminal1, characterTerminal1, nonterminal1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), builtinTerminal1));
      ARTRD_builtinTerminal(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, builtinTerminal1, null);
       currentModule.addElement(new ARTGrammarElementTerminalBuiltin(builtinTerminal1.v)); 
      break;
        default: ; }}}
}

public void ARTRD_elementUpdaters(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*elementUpdaters ::= elementUpdater ','  . elementUpdaters */
    case ARTL_ART_elementUpdaters_650: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_elementUpdater(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable, null, null, null, null, null, null);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*elementUpdaters ::= elementUpdater ','  elementUpdaters .*/
    case ARTL_ART_elementUpdaters_652: 
            ARTRD_elementUpdaters(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_elementUpdaters(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*elementUpdaters ::= elementUpdater .*/
    case ARTL_ART_elementUpdaters_656: 
            ARTRD_elementUpdaters(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_elementUpdater(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, null, null, null, null, null, null);
            break;
        default: ; }}}
}

public void ARTRD_epsilon(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*epsilon ::= '#'  .*/
    case ARTL_ART_epsilon_854: 
            ARTRD_epsilon(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
                  break;
        default: ; }}}
}

public void ARTRD_fold(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*fold ::= '^_'  .*/
    case ARTL_ART_fold_1418: 
            ARTRD_fold(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*fold ::= '^'  .*/
    case ARTL_ART_fold_1422: 
            ARTRD_fold(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*fold ::= '^^'  .*/
    case ARTL_ART_fold_1426: 
            ARTRD_fold(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*fold ::= '^^^'  .*/
    case ARTL_ART_fold_1430: 
            ARTRD_fold(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_grammarRule(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ART_attributesOpt attributesOpt1, ARTAT_ART_nonterminal nonterminal1, ARTAT_ART_rhs rhs1)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*grammarRule ::= nonterminal attributesOpt . '::='  rhs */
    case ARTL_ART_grammarRule_632: 
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_nonterminal(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable, nonterminal1, null, null);
       attributesOpt1.lhs = nonterminal1.v; if (currentModule.getDefaultStart() == null) currentModule.setDefaultStart(nonterminal1.v); 
           currentModule.checkFreshRHS(nonterminal1.v);
         
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_attributesOpt(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, attributesOpt1, null);
            break;
    /*grammarRule ::= nonterminal attributesOpt '::='  . rhs */
    case ARTL_ART_grammarRule_634: 
      ARTRD_grammarRule(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, attributesOpt1, nonterminal1, rhs1);
            rhs1.lhs = nonterminal1.v; rhs1.isDeleter = false; 
      break;
    /*grammarRule ::= nonterminal attributesOpt '::='  rhs .*/
    case ARTL_ART_grammarRule_638: 
      attributesOpt1 = new ARTAT_ART_attributesOpt();
      nonterminal1 = new ARTAT_ART_nonterminal();
      rhs1 = new ARTAT_ART_rhs();
            ARTRD_grammarRule(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, attributesOpt1, nonterminal1, rhs1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), rhs1));
      ARTRD_rhs(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, rhs1, null);
            break;
        default: ; }}}
}

public void ARTRD_insertionName(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ART_insertionName insertionName, ARTAT_ART_ID ID1)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*insertionName ::= '%%'  ID .*/
    case ARTL_ART_insertionName_1448: 
      ID1 = new ARTAT_ART_ID();
                        ID1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode));
      ID1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode));
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, ID1);
      insertionName.v = ID1.v;
      break;
        default: ; }}}
}

public void ARTRD_iter(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*iter ::= diff .*/
    case ARTL_ART_iter_1258: 
            ARTRD_iter(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_diff(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*iter ::= diff '@'  . iter */
    case ARTL_ART_iter_1264: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_diff(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
                  if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*iter ::= diff '@'  iter .*/
    case ARTL_ART_iter_1266: 
            ARTRD_iter(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_iter(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_name(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ART_ID ID1)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*name ::= ':'  ID .*/
    case ARTL_ART_name_1410: 
      ID1 = new ARTAT_ART_ID();
                        ID1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode));
      ID1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode));
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), ID1));
      ARTRD_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, ID1);
            break;
        default: ; }}}
}

public void ARTRD_nonterminal(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ART_nonterminal nonterminal, ARTAT_ART_ID ID1, ARTAT_ART_STRING_DOLLAR STRING_DOLLAR1)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*nonterminal ::= ID .*/
    case ARTL_ART_nonterminal_660: 
      ID1 = new ARTAT_ART_ID();
      STRING_DOLLAR1 = new ARTAT_ART_STRING_DOLLAR();
            ARTRD_nonterminal(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, nonterminal, ID1, STRING_DOLLAR1);
      ID1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode));
      ID1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode));
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, ID1);
      nonterminal.v = ID1.v;
      break;
    /*nonterminal ::= STRING_DOLLAR .*/
    case ARTL_ART_nonterminal_666: 
      ID1 = new ARTAT_ART_ID();
      STRING_DOLLAR1 = new ARTAT_ART_STRING_DOLLAR();
            ARTRD_nonterminal(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, nonterminal, ID1, STRING_DOLLAR1);
      STRING_DOLLAR1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode));
      STRING_DOLLAR1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode));
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_STRING_DOLLAR(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, STRING_DOLLAR1);
      nonterminal.v = "$" + STRING_DOLLAR1.v + "$";
      break;
        default: ; }}}
}

public void ARTRD_not(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ART_element1 element11)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*not ::= element1 .*/
    case ARTL_ART_not_1294: 
      element11 = new ARTAT_ART_element1();
            ARTRD_not(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, element11);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), element11));
      ARTRD_element1(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, element11, null, null, null, null, null, null);
            break;
    /*not ::= '\\'  element1 .*/
    case ARTL_ART_not_1300: 
      element11 = new ARTAT_ART_element1();
                  if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), element11));
      ARTRD_element1(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, element11, null, null, null, null, null, null);
            break;
        default: ; }}}
}

public void ARTRD_paraterminalisers(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ART_STRING_DQ STRING_DQ1, ARTAT_ART_nonterminal nonterminal1)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*paraterminalisers ::= nonterminal .*/
    case ARTL_ART_paraterminalisers_684: 
      STRING_DQ1 = new ARTAT_ART_STRING_DQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
            ARTRD_paraterminalisers(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, STRING_DQ1, nonterminal1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), nonterminal1));
      ARTRD_nonterminal(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, nonterminal1, null, null);
       currentModule.addParaterminal(new ARTValueTerm("nonterminal", new ARTValueTerm(nonterminal1.v))); 
      break;
    /*paraterminalisers ::= nonterminal ','  . paraterminalisers */
    case ARTL_ART_paraterminalisers_694: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), nonterminal1));
      ARTRD_nonterminal(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable, nonterminal1, null, null);
       currentModule.addParaterminal(new ARTValueTerm("nonterminal", new ARTValueTerm(nonterminal1.v))); 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*paraterminalisers ::= nonterminal ','  paraterminalisers .*/
    case ARTL_ART_paraterminalisers_696: 
      STRING_DQ1 = new ARTAT_ART_STRING_DQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
            ARTRD_paraterminalisers(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, STRING_DQ1, nonterminal1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_paraterminalisers(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, null, null);
            break;
    /*paraterminalisers ::= nonterminal '='  . STRING_DQ */
    case ARTL_ART_paraterminalisers_704: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), nonterminal1));
      ARTRD_nonterminal(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable, nonterminal1, null, null);
       currentModule.addParaterminal(new ARTValueTerm("nonterminal", new ARTValueTerm(nonterminal1.v))); 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*paraterminalisers ::= nonterminal '='  STRING_DQ .*/
    case ARTL_ART_paraterminalisers_706: 
      STRING_DQ1 = new ARTAT_ART_STRING_DQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
            ARTRD_paraterminalisers(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, STRING_DQ1, nonterminal1);
      STRING_DQ1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode));
      STRING_DQ1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode));
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), STRING_DQ1));
      ARTRD_STRING_DQ(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, STRING_DQ1);
       currentModule.addParaterminalAlias(new ARTValueTerm(nonterminal1.v), STRING_DQ1.v); 
      break;
    /*paraterminalisers ::= nonterminal '='  . STRING_DQ ','  paraterminalisers */
    case ARTL_ART_paraterminalisers_716: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), nonterminal1));
      ARTRD_nonterminal(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable, nonterminal1, null, null);
       currentModule.addParaterminal(new ARTValueTerm("nonterminal", new ARTValueTerm(nonterminal1.v))); 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*paraterminalisers ::= nonterminal '='  STRING_DQ . ','  paraterminalisers */
    case ARTL_ART_paraterminalisers_718: 
      ARTRD_paraterminalisers(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, STRING_DQ1, nonterminal1);
      STRING_DQ1.rightExtent = artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode));
      STRING_DQ1.leftExtent = artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode));
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), STRING_DQ1));
      ARTRD_STRING_DQ(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, STRING_DQ1);
       currentModule.addParaterminalAlias(new ARTValueTerm(nonterminal1.v), STRING_DQ1.v); 
      break;
    /*paraterminalisers ::= nonterminal '='  STRING_DQ ','  . paraterminalisers */
    case ARTL_ART_paraterminalisers_722: 
      ARTRD_paraterminalisers(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, STRING_DQ1, nonterminal1);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*paraterminalisers ::= nonterminal '='  STRING_DQ ','  paraterminalisers .*/
    case ARTL_ART_paraterminalisers_724: 
      STRING_DQ1 = new ARTAT_ART_STRING_DQ();
      nonterminal1 = new ARTAT_ART_nonterminal();
            ARTRD_paraterminalisers(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, STRING_DQ1, nonterminal1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_paraterminalisers(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, null, null);
            break;
        default: ; }}}
}

public void ARTRD_rhs(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ART_rhs rhs, ARTAT_ART_rhs rhs1)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*rhs ::= cat .*/
    case ARTL_ART_rhs_728: 
      rhs1 = new ARTAT_ART_rhs();
            ARTRD_rhs(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, rhs, rhs1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cat(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
       if (rhs.isDeleter) currentModule.addDeleter(rhs.lhs, artNewParent); else currentModule.addProduction(rhs.lhs, artNewParent);
      break;
    /*rhs ::= cat '|'  . rhs */
    case ARTL_ART_rhs_738: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_cat(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
       if (rhs.isDeleter) currentModule.addDeleter(rhs.lhs, artNewParent); else currentModule.addProduction(rhs.lhs, artNewParent);
            rhs1.lhs = rhs.lhs; rhs1.isDeleter = rhs.isDeleter; 
      break;
    /*rhs ::= cat '|'  rhs .*/
    case ARTL_ART_rhs_742: 
      rhs1 = new ARTAT_ART_rhs();
            ARTRD_rhs(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, rhs, rhs1);
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_rhs(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, rhs1, null);
            break;
        default: ; }}}
}

public void ARTRD_slot(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ART_action action1)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*slot ::= # .*/
    case ARTL_ART_slot_1208: 
      action1 = new ARTAT_ART_action();
            ARTRD_slot(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, action1);
                  break;
    /*slot ::= action .*/
    case ARTL_ART_slot_1212: 
      action1 = new ARTAT_ART_action();
            ARTRD_slot(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, action1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), action1));
      ARTRD_action(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, action1, null);
            break;
        default: ; }}}
}

public void ARTRD_text(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ART_text text)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*text ::= textElements .*/
    case ARTL_ART_text_6: 
       artManager = text.artManager; currentModule = artManager.findModule("ART"); 
        if (artManager.getDefaultMainModule() == null) artManager.setDefaultMainModule(currentModule); 
      
      ARTRD_text(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, text);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_textElements(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_textElement(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*textElement ::= '!'  directive .*/
    case ARTL_ART_textElement_22: 
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_directive(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, null, null, null, null, null, null, null);
            break;
    /*textElement ::= grammarRule .*/
    case ARTL_ART_textElement_26: 
            ARTRD_textElement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_grammarRule(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, null, null, null);
            break;
        default: ; }}}
}

public void ARTRD_textElements(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*textElements ::= textElement textElements .*/
    case ARTL_ART_textElements_12: 
            artNewWriteable = false; artNewParent = artParent;
      ARTRD_textElement(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artNewWriteable = false; artNewParent = artParent;
      ARTRD_textElements(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*textElements ::= textElement .*/
    case ARTL_ART_textElements_16: 
            ARTRD_textElements(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_textElement(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_trueFalse(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ART_trueFalse trueFalse)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*trueFalse ::= # .*/
    case ARTL_ART_trueFalse_772: 
            ARTRD_trueFalse(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, trueFalse);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       trueFalse.v = true; 
      break;
    /*trueFalse ::= 'true'  .*/
    case ARTL_ART_trueFalse_778: 
            ARTRD_trueFalse(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, trueFalse);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       trueFalse.v = true; 
      break;
    /*trueFalse ::= 'false'  .*/
    case ARTL_ART_trueFalse_784: 
            ARTRD_trueFalse(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, trueFalse);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       trueFalse.v = false; 
      break;
    /*trueFalse ::= ':'  'true'  .*/
    case ARTL_ART_trueFalse_792: 
                        artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       trueFalse.v = true; 
      break;
    /*trueFalse ::= ':'  'false'  .*/
    case ARTL_ART_trueFalse_800: 
                        artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
       trueFalse.v = false; 
      break;
        default: ; }}}
}

public void ARTRD_union(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*union ::= not .*/
    case ARTL_ART_union_1282: 
            ARTRD_union(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_not(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, null);
            break;
    /*union ::= union '||'  . not */
    case ARTL_ART_union_1288: 
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_union(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
                  if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*union ::= union '||'  not .*/
    case ARTL_ART_union_1290: 
            ARTRD_union(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_not(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, null);
            break;
        default: ; }}}
}

public void ARTRD_whitespacer(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ART_builtinTerminal builtinTerminal1, ARTAT_ART_characterTerminal characterTerminal1, ARTAT_ART_nonterminal nonterminal1)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*whitespacer ::= nonterminal .*/
    case ARTL_ART_whitespacer_902: 
      builtinTerminal1 = new ARTAT_ART_builtinTerminal();
      characterTerminal1 = new ARTAT_ART_characterTerminal();
      nonterminal1 = new ARTAT_ART_nonterminal();
            ARTRD_whitespacer(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, builtinTerminal1, characterTerminal1, nonterminal1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), nonterminal1));
      ARTRD_nonterminal(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, nonterminal1, null, null);
       currentModule.addWhiteSpaceTerminal(new ARTValueTerm("nonterminal", new ARTValueTerm(nonterminal1.v)));
                        currentModule.addParaterminal(new ARTValueTerm("nonterminal", new ARTValueTerm(nonterminal1.v))); 
      break;
    /*whitespacer ::= builtinTerminal .*/
    case ARTL_ART_whitespacer_908: 
      builtinTerminal1 = new ARTAT_ART_builtinTerminal();
      characterTerminal1 = new ARTAT_ART_characterTerminal();
      nonterminal1 = new ARTAT_ART_nonterminal();
            ARTRD_whitespacer(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, builtinTerminal1, characterTerminal1, nonterminal1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), builtinTerminal1));
      ARTRD_builtinTerminal(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, builtinTerminal1, null);
       currentModule.addWhiteSpaceTerminal(new ARTValueTerm("builtinTerminal", new ARTValueTerm(builtinTerminal1.v))); 
      break;
    /*whitespacer ::= characterTerminal .*/
    case ARTL_ART_whitespacer_914: 
      builtinTerminal1 = new ARTAT_ART_builtinTerminal();
      characterTerminal1 = new ARTAT_ART_characterTerminal();
      nonterminal1 = new ARTAT_ART_nonterminal();
            ARTRD_whitespacer(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, builtinTerminal1, characterTerminal1, nonterminal1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), characterTerminal1));
      ARTRD_characterTerminal(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, characterTerminal1, null);
       currentModule.addWhiteSpaceTerminal(new ARTValueTerm("characterTerminal", new ARTValueTerm(characterTerminal1.v))); 
      break;
        default: ; }}}
}

public void ARTRD_whitespacers(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*whitespacers ::= whitespacer .*/
    case ARTL_ART_whitespacers_672: 
            ARTRD_whitespacers(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_whitespacer(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, null, null, null);
            break;
    /*whitespacers ::= whitespacer ','  . whitespacers */
    case ARTL_ART_whitespacers_678: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_whitespacer(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable, null, null, null);
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*whitespacers ::= whitespacer ','  whitespacers .*/
    case ARTL_ART_whitespacers_680: 
            ARTRD_whitespacers(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_whitespacers(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void artEvaluate(ARTGLLRDTHandle artElement, ARTGLLAttributeBlock artAttributes, ARTGLLRDTVertex artParent, Boolean artWriteable)  {
  switch (artSPPFNodeLabel(artElement.element)) {
    case ARTL_ART_BOOLEAN:  ARTRD_BOOLEAN(artElement.element, artParent, artWriteable, (ARTAT_ART_BOOLEAN) artAttributes); break;
    case ARTL_ART_CHAR_BQ:  ARTRD_CHAR_BQ(artElement.element, artParent, artWriteable, (ARTAT_ART_CHAR_BQ) artAttributes); break;
    case ARTL_ART_ID:  ARTRD_ID(artElement.element, artParent, artWriteable, (ARTAT_ART_ID) artAttributes); break;
    case ARTL_ART_INTEGER:  ARTRD_INTEGER(artElement.element, artParent, artWriteable, (ARTAT_ART_INTEGER) artAttributes); break;
    case ARTL_ART_REAL:  ARTRD_REAL(artElement.element, artParent, artWriteable, (ARTAT_ART_REAL) artAttributes); break;
    case ARTL_ART_STRING_BRACE_NEST:  ARTRD_STRING_BRACE_NEST(artElement.element, artParent, artWriteable, (ARTAT_ART_STRING_BRACE_NEST) artAttributes); break;
    case ARTL_ART_STRING_DOLLAR:  ARTRD_STRING_DOLLAR(artElement.element, artParent, artWriteable, (ARTAT_ART_STRING_DOLLAR) artAttributes); break;
    case ARTL_ART_STRING_DQ:  ARTRD_STRING_DQ(artElement.element, artParent, artWriteable, (ARTAT_ART_STRING_DQ) artAttributes); break;
    case ARTL_ART_STRING_PLAIN_SQ:  ARTRD_STRING_PLAIN_SQ(artElement.element, artParent, artWriteable, (ARTAT_ART_STRING_PLAIN_SQ) artAttributes); break;
    case ARTL_ART_TYPE:  ARTRD_TYPE(artElement.element, artParent, artWriteable, (ARTAT_ART_TYPE) artAttributes); break;
    case ARTL_ART_TypeList: ARTRD_TypeList(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_TypeNest: ARTRD_TypeNest(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_abbrev: ARTRD_abbrev(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_action:  ARTRD_action(artElement.element, artParent, artWriteable, (ARTAT_ART_action) artAttributes, null); break;
    case ARTL_ART_alt: ARTRD_alt(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_alt1: ARTRD_alt1(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_annotation: ARTRD_annotation(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_annotations: ARTRD_annotations(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_attribute:  ARTRD_attribute(artElement.element, artParent, artWriteable, (ARTAT_ART_attribute) artAttributes, null, null); break;
    case ARTL_ART_attributes:  ARTRD_attributes(artElement.element, artParent, artWriteable, (ARTAT_ART_attributes) artAttributes, null, null); break;
    case ARTL_ART_attributesOpt:  ARTRD_attributesOpt(artElement.element, artParent, artWriteable, (ARTAT_ART_attributesOpt) artAttributes, null); break;
    case ARTL_ART_builtinTerminal:  ARTRD_builtinTerminal(artElement.element, artParent, artWriteable, (ARTAT_ART_builtinTerminal) artAttributes, null); break;
    case ARTL_ART_caseInsensitiveTerminal:  ARTRD_caseInsensitiveTerminal(artElement.element, artParent, artWriteable, (ARTAT_ART_caseInsensitiveTerminal) artAttributes, null); break;
    case ARTL_ART_caseSensitiveTerminal:  ARTRD_caseSensitiveTerminal(artElement.element, artParent, artWriteable, (ARTAT_ART_caseSensitiveTerminal) artAttributes, null); break;
    case ARTL_ART_cat: ARTRD_cat(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_catTail: ARTRD_catTail(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_characterSetTerminal:  ARTRD_characterSetTerminal(artElement.element, artParent, artWriteable, (ARTAT_ART_characterSetTerminal) artAttributes, null, null); break;
    case ARTL_ART_characterTerminal:  ARTRD_characterTerminal(artElement.element, artParent, artWriteable, (ARTAT_ART_characterTerminal) artAttributes, null); break;
    case ARTL_ART_choiceSlot:  ARTRD_choiceSlot(artElement.element, artParent, artWriteable, (ARTAT_ART_choiceSlot) artAttributes, null, null); break;
    case ARTL_ART_chooseDiff:  ARTRD_chooseDiff(artElement.element, artParent, artWriteable, (ARTAT_ART_chooseDiff) artAttributes, null, null, null, null); break;
    case ARTL_ART_chooseElement:  ARTRD_chooseElement(artElement.element, artParent, artWriteable, (ARTAT_ART_chooseElement) artAttributes, null, null, null, null, null); break;
    case ARTL_ART_chooseUnionIntersection:  ARTRD_chooseUnionIntersection(artElement.element, artParent, artWriteable, (ARTAT_ART_chooseUnionIntersection) artAttributes, null, null); break;
    case ARTL_ART_chooser:  ARTRD_chooser(artElement.element, artParent, artWriteable, (ARTAT_ART_chooser) artAttributes, null, null); break;
    case ARTL_ART_choosers: ARTRD_choosers(artElement.element, artParent, artWriteable, null); break;
    case ARTL_ART_delay: ARTRD_delay(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_diff: ARTRD_diff(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_directive: ARTRD_directive(artElement.element, artParent, artWriteable, null, null, null, null, null, null, null); break;
    case ARTL_ART_element1:  ARTRD_element1(artElement.element, artParent, artWriteable, (ARTAT_ART_element1) artAttributes, null, null, null, null, null, null); break;
    case ARTL_ART_elementUpdater: ARTRD_elementUpdater(artElement.element, artParent, artWriteable, null, null, null, null, null, null); break;
    case ARTL_ART_elementUpdaters: ARTRD_elementUpdaters(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_epsilon: ARTRD_epsilon(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_fold: ARTRD_fold(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_grammarRule: ARTRD_grammarRule(artElement.element, artParent, artWriteable, null, null, null); break;
    case ARTL_ART_insertionName:  ARTRD_insertionName(artElement.element, artParent, artWriteable, (ARTAT_ART_insertionName) artAttributes, null); break;
    case ARTL_ART_iter: ARTRD_iter(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_name: ARTRD_name(artElement.element, artParent, artWriteable, null); break;
    case ARTL_ART_nonterminal:  ARTRD_nonterminal(artElement.element, artParent, artWriteable, (ARTAT_ART_nonterminal) artAttributes, null, null); break;
    case ARTL_ART_not: ARTRD_not(artElement.element, artParent, artWriteable, null); break;
    case ARTL_ART_paraterminalisers: ARTRD_paraterminalisers(artElement.element, artParent, artWriteable, null, null); break;
    case ARTL_ART_rhs:  ARTRD_rhs(artElement.element, artParent, artWriteable, (ARTAT_ART_rhs) artAttributes, null); break;
    case ARTL_ART_slot: ARTRD_slot(artElement.element, artParent, artWriteable, null); break;
    case ARTL_ART_text:  ARTRD_text(artElement.element, artParent, artWriteable, (ARTAT_ART_text) artAttributes); break;
    case ARTL_ART_textElement: ARTRD_textElement(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_textElements: ARTRD_textElements(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_trueFalse:  ARTRD_trueFalse(artElement.element, artParent, artWriteable, (ARTAT_ART_trueFalse) artAttributes); break;
    case ARTL_ART_union: ARTRD_union(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_whitespacer: ARTRD_whitespacer(artElement.element, artParent, artWriteable, null, null, null); break;
    case ARTL_ART_whitespacers: ARTRD_whitespacers(artElement.element, artParent, artWriteable); break;
  }
}

};
