package uk.ac.rhul.cs.csle.art.v3.manager.parser;

import java.io.FileNotFoundException;
import uk.ac.rhul.cs.csle.art.v3.alg.gll.support.*;
import uk.ac.rhul.cs.csle.art.v3.lex.*;
import uk.ac.rhul.cs.csle.art.v3.manager.*;
import uk.ac.rhul.cs.csle.art.v3.manager.grammar.*;
import uk.ac.rhul.cs.csle.art.v3.manager.mode.*;
import uk.ac.rhul.cs.csle.art.util.text.*;
import uk.ac.rhul.cs.csle.art.term.*;
import uk.ac.rhul.cs.csle.art.util.bitset.ARTBitSet;
/*******************************************************************************
*
* ARTV4Parser.java
*
*******************************************************************************/
@SuppressWarnings("fallthrough") public class ARTV4Parser extends ARTGLLParserHashPool {
private static boolean[] ARTSet1;
private static boolean[] ARTSet2;
private static boolean[] ARTSet3;
private static boolean[] ARTSet4;
private static boolean[] ARTSet5;
private static boolean[] ARTSet6;
private static boolean[] ARTSet7;
private static boolean[] ARTSet8;
private static boolean[] ARTSet9;
private static boolean[] ARTSet10;
private static boolean[] ARTSet11;
private static boolean[] ARTSet12;
private static boolean[] ARTSet13;
private static boolean[] ARTSet14;
private static boolean[] ARTSet15;
private static boolean[] ARTSet16;
private static boolean[] ARTSet17;
private static boolean[] ARTSet18;
private static boolean[] ARTSet19;
private static boolean[] ARTSet20;
private static boolean[] ARTSet21;
private static boolean[] ARTSet22;
private static boolean[] ARTSet23;
private static boolean[] ARTSet24;
private static boolean[] ARTSet25;
private static boolean[] ARTSet26;
private static boolean[] ARTSet27;
private static boolean[] ARTSet28;
private static boolean[] ARTSet29;
private static boolean[] ARTSet30;
private static boolean[] ARTSet31;
private static boolean[] ARTSet32;
private static boolean[] ARTSet33;
private static boolean[] ARTSet34;
private static boolean[] ARTSet35;
private static boolean[] ARTSet36;
private static boolean[] ARTSet37;
private static boolean[] ARTSet38;
private static boolean[] ARTSet39;
private static boolean[] ARTSet40;
private static boolean[] ARTSet41;
private static boolean[] ARTSet42;
private static boolean[] ARTSet43;
private static boolean[] ARTSet44;
private static boolean[] ARTSet45;
private static boolean[] ARTSet46;
private static boolean[] ARTSet47;
private static boolean[] ARTSet48;
private static boolean[] ARTSet49;
private static boolean[] ARTSet50;
private static boolean[] ARTSet51;
private static boolean[] ARTSet52;
private static boolean[] ARTSet53;
private static boolean[] ARTSet54;
private static boolean[] ARTSet55;
private static boolean[] ARTSet56;
private static boolean[] ARTSet57;
private static boolean[] ARTSet58;
private static boolean[] ARTSet59;
private static boolean[] ARTSet60;
private static boolean[] ARTSet61;
private static boolean[] ARTSet62;
private static boolean[] ARTSet63;
private static boolean[] ARTSet64;
private static boolean[] ARTSet65;
private static boolean[] ARTSet66;
private static boolean[] ARTSet67;
private static boolean[] ARTSet68;
private static boolean[] ARTSet69;
private static boolean[] ARTSet70;
private static boolean[] ARTSet71;
private static boolean[] ARTSet72;
private static boolean[] ARTSet73;
private static boolean[] ARTSet74;
private static boolean[] ARTSet75;
private static boolean[] ARTSet76;
private static boolean[] ARTSet77;
private static boolean[] ARTSet78;
private static boolean[] ARTSet79;
private static boolean[] ARTSet80;
private static boolean[] ARTSet81;
private static boolean[] ARTSet82;
private static boolean[] ARTSet83;
private static boolean[] ARTSet84;
private static boolean[] ARTSet85;
private static boolean[] ARTSet86;
private static boolean[] ARTSet87;
private static boolean[] ARTSet88;
private static boolean[] ARTSet89;
private static boolean[] ARTSet90;
private static boolean[] ARTSet91;
private static boolean[] ARTSet92;
private static boolean[] ARTSet93;
private static boolean[] ARTSet94;
private static boolean[] ARTSet95;
private static boolean[] ARTSet96;
private static boolean[] ARTSet97;
private static boolean[] ARTSet98;
private static boolean[] ARTSet99;
private static boolean[] ARTSet100;
private static boolean[] ARTSet101;
private static boolean[] ARTSet102;
private static boolean[] ARTSet103;
private static boolean[] ARTSet104;
private static boolean[] ARTSet105;
private static boolean[] ARTSet106;
private static boolean[] ARTSet107;
private static boolean[] ARTSet108;
private static boolean[] ARTSet109;
private static boolean[] ARTSet110;
private static boolean[] ARTSet111;
private static boolean[] ARTSet112;
private static boolean[] ARTSet113;
private static boolean[] ARTSet114;
private static boolean[] ARTSet115;
private static boolean[] ARTSet116;
private static boolean[] ARTSet117;
private static boolean[] ARTSet118;
private static boolean[] ARTSet119;
private static boolean[] ARTSet120;
private static boolean[] ARTSet121;
private static boolean[] ARTSet122;
private static boolean[] ARTSet123;
private static boolean[] ARTSet124;
private static boolean[] ARTSet125;
private static boolean[] ARTSet126;
private static boolean[] ARTSet127;
private static boolean[] ARTSet128;
private static boolean[] ARTSet129;
private static boolean[] ARTSet130;
private static boolean[] ARTSet131;
private static boolean[] ARTSet132;
private static boolean[] ARTSet133;
private static boolean[] ARTSet134;
private static boolean[] ARTSet135;
private static boolean[] ARTSet136;
private static boolean[] ARTSet137;
private static boolean[] ARTSet138;
private static boolean[] ARTSet139;
private static boolean[] ARTSet140;
private static boolean[] ARTSet141;
private static boolean[] ARTSet142;
private static boolean[] ARTSet143;
private static boolean[] ARTSet144;
private static boolean[] ARTSet145;
private static boolean[] ARTSet146;
private static boolean[] ARTSet147;
private static boolean[] ARTSet148;
private static boolean[] ARTSet149;
private static boolean[] ARTSet150;
private static boolean[] ARTSet151;
private static boolean[] ARTSet152;
private static boolean[] ARTSet153;
private static boolean[] ARTSet154;
private static boolean[] ARTSet155;
private static boolean[] ARTSet156;
private static boolean[] ARTSet157;
private static boolean[] ARTSet158;
private static boolean[] ARTSet159;
private static boolean[] ARTSet160;
private static boolean[] ARTSet161;
private static boolean[] ARTSet162;
private static boolean[] ARTSet163;
private static boolean[] ARTSet164;
private static boolean[] ARTSet165;
private static boolean[] ARTSet166;
private static boolean[] ARTSet167;
private static boolean[] ARTSet168;
private static boolean[] ARTSet169;
private static boolean[] ARTSet170;
private static boolean[] ARTSet171;
private static boolean[] ARTSet172;
private static boolean[] ARTSet173;
private static boolean[] ARTSet174;
private static boolean[] ARTSet175;
private static boolean[] ARTSet176;
private static boolean[] ARTSet177;
private static boolean[] ARTSet178;
private static boolean[] ARTSet179;
private static boolean[] ARTSet180;
private static boolean[] ARTSet181;
private static boolean[] ARTSet182;
private static boolean[] ARTSet183;
private static boolean[] ARTSet184;
private static boolean[] ARTSet185;
private static boolean[] ARTSet186;
private static boolean[] ARTSet187;
private static boolean[] ARTSet188;
private static boolean[] ARTSet189;
private static boolean[] ARTSet190;
private static boolean[] ARTSet191;
private static boolean[] ARTSet192;
private static boolean[] ARTSet193;
private static boolean[] ARTSet194;
private static boolean[] ARTSet195;
private static boolean[] ARTSet196;
private static boolean[] ARTSet197;
private static boolean[] ARTSet198;
private static boolean[] ARTSet199;
private static boolean[] ARTSet200;
private static boolean[] ARTSet201;
private static boolean[] ARTSet202;
private static boolean[] ARTSet203;
private static boolean[] ARTSet204;
private static boolean[] ARTSet205;
private static boolean[] ARTSet206;
private static boolean[] ARTSet207;
private static boolean[] ARTSet208;
private static boolean[] ARTSet209;
private static boolean[] ARTSet210;
private static boolean[] ARTSet211;
private static boolean[] ARTSet212;
private static boolean[] ARTSet213;
private static boolean[] ARTSet214;
private static boolean[] ARTSet215;
private static boolean[] ARTSet216;
private static boolean[] ARTSet217;
private static boolean[] ARTSet218;
private static boolean[] ARTSet219;
private static boolean[] ARTSet220;
private static boolean[] ARTSet221;
private static boolean[] ARTSet222;
private static boolean[] ARTSet223;
private static boolean[] ARTSet224;
private static boolean[] ARTSet225;
private static boolean[] ARTSet226;
private static boolean[] ARTSet227;
private static boolean[] ARTSet228;
private static boolean[] ARTSet229;
private static boolean[] ARTSet230;
private static boolean[] ARTSet231;
private static boolean[] ARTSet232;
private static boolean[] ARTSet233;
private static boolean[] ARTSet234;
private static boolean[] ARTSet235;
private static boolean[] ARTSet236;
private static boolean[] ARTSet237;
private static boolean[] ARTSet238;
private static boolean[] ARTSet239;
private static boolean[] ARTSet240;
private static boolean[] ARTSet241;
private static boolean[] ARTSet242;
private static boolean[] ARTSet243;
private static boolean[] ARTSet244;
private static boolean[] ARTSet245;
private static boolean[] ARTSet246;
private static boolean[] ARTSet247;
private static boolean[] ARTSet248;
private static boolean[] ARTSet249;
private static boolean[] ARTSet250;
private static boolean[] ARTSet251;
private static boolean[] ARTSet252;
private static boolean[] ARTSet253;
private static boolean[] ARTSet254;
private static boolean[] ARTSet255;
private static boolean[] ARTSet256;
private static boolean[] ARTSet257;
private static boolean[] ARTSet258;
private static boolean[] ARTSet259;
private static boolean[] ARTSet260;
private static boolean[] ARTSet261;
private static boolean[] ARTSet262;
private static boolean[] ARTSet263;
private static boolean[] ARTSet264;
private static boolean[] ARTSet265;
private static boolean[] ARTSet266;
private static boolean[] ARTSet267;
private static boolean[] ARTSet268;
private static boolean[] ARTSet269;
private static boolean[] ARTSet270;
private static boolean[] ARTSet271;
private static boolean[] ARTSet272;
private static boolean[] ARTSet273;
private static boolean[] ARTSet274;
private static boolean[] ARTSet275;
private static boolean[] ARTSet276;
private static boolean[] ARTSet277;
private static boolean[] ARTSet278;
private static boolean[] ARTSet279;
private static boolean[] ARTSet280;
private static boolean[] ARTSet281;
private static boolean[] ARTSet282;
private static boolean[] ARTSet283;
private static boolean[] ARTSet284;
private static boolean[] ARTSet285;
private static boolean[] ARTSet286;
private static boolean[] ARTSet287;
private static boolean[] ARTSet288;
private static boolean[] ARTSet289;
private static boolean[] ARTSet290;
private static boolean[] ARTSet291;
private static boolean[] ARTSet292;
private static boolean[] ARTSet293;
private static boolean[] ARTSet294;
private static boolean[] ARTSet295;
private static boolean[] ARTSet296;
private static boolean[] ARTSet297;
private static boolean[] ARTSet298;
private static boolean[] ARTSet299;
private static boolean[] ARTSet300;
private static boolean[] ARTSet301;
private static boolean[] ARTSet302;
private static boolean[] ARTSet303;
private static boolean[] ARTSet304;
private static boolean[] ARTSet305;
private static boolean[] ARTSet306;
private static boolean[] ARTSet307;
private static boolean[] ARTSet308;
private static boolean[] ARTSet309;
private static boolean[] ARTSet310;
private static boolean[] ARTSet311;
private static boolean[] ARTSet312;
private static boolean[] ARTSet313;
private static boolean[] ARTSet314;
private static boolean[] ARTSet315;
private static boolean[] ARTSet316;
private static boolean[] ARTSet317;
private static boolean[] ARTSet318;
private static boolean[] ARTSet319;
private static boolean[] ARTSet320;
private static boolean[] ARTSet321;
private static boolean[] ARTSet322;
private static boolean[] ARTSet323;
private static boolean[] ARTSet324;
private static boolean[] ARTSet325;
private static boolean[] ARTSet326;
private static boolean[] ARTSet327;
private static boolean[] ARTSet328;
private static boolean[] ARTSet329;
private static boolean[] ARTSet330;
private static boolean[] ARTSet331;
private static boolean[] ARTSet332;
private static boolean[] ARTSet333;
private static boolean[] ARTSet334;
private static boolean[] ARTSet335;
private static boolean[] ARTSet336;
private static boolean[] ARTSet337;
private static boolean[] ARTSet338;
private static boolean[] ARTSet339;

/* Start of artLabel enumeration */
public static final int ARTX_EOS = 0;
public static final int ARTTB_CHAR_BQ = 1;
public static final int ARTTB_ID = 2;
public static final int ARTTB_SIGNED_INTEGER = 3;
public static final int ARTTB_SIGNED_REAL = 4;
public static final int ARTTB_STRING_BRACE_NEST = 5;
public static final int ARTTB_STRING_BRACKET_NEST = 6;
public static final int ARTTB_STRING_DOLLAR = 7;
public static final int ARTTB_STRING_DQ = 8;
public static final int ARTTB_STRING_PLAIN_SQ = 9;
public static final int ARTTB_STRING_SQ = 10;
public static final int ARTTS__SHREIKGLLFIFODescriptors = 11;
public static final int ARTTS__SHREIKGLLPredictivePops = 12;
public static final int ARTTS__SHREIKGLLSuppressPopGuard = 13;
public static final int ARTTS__SHREIKGLLSuppressProductionGuard = 14;
public static final int ARTTS__SHREIKGLLSuppressSemantics = 15;
public static final int ARTTS__SHREIKGLLSuppressTestRepeat = 16;
public static final int ARTTS__SHREIKabsorb = 17;
public static final int ARTTS__SHREIKalphabet = 18;
public static final int ARTTS__SHREIKcfgElements = 19;
public static final int ARTTS__SHREIKcnp = 20;
public static final int ARTTS__SHREIKcnpGeneratorPool = 21;
public static final int ARTTS__SHREIKcnpIndexedAPI = 22;
public static final int ARTTS__SHREIKcnpIndexedPool = 23;
public static final int ARTTS__SHREIKcnpLinkedAPI = 24;
public static final int ARTTS__SHREIKcompressWhitespaceJava = 25;
public static final int ARTTS__SHREIKearley = 26;
public static final int ARTTS__SHREIKearley2007LinkedAPI = 27;
public static final int ARTTS__SHREIKearleyIndexedAPI = 28;
public static final int ARTTS__SHREIKearleyIndexedData = 29;
public static final int ARTTS__SHREIKearleyIndexedPool = 30;
public static final int ARTTS__SHREIKearleyLinkedAPI = 31;
public static final int ARTTS__SHREIKearleyTable = 32;
public static final int ARTTS__SHREIKearleyTableIndexedAPI = 33;
public static final int ARTTS__SHREIKearleyTableIndexedData = 34;
public static final int ARTTS__SHREIKearleyTableIndexedPool = 35;
public static final int ARTTS__SHREIKearleyTableLinkedAPI = 36;
public static final int ARTTS__SHREIKextractJLS = 37;
public static final int ARTTS__SHREIKgenerateC_PLUS_PLUS = 38;
public static final int ARTTS__SHREIKgenerateDynamic = 39;
public static final int ARTTS__SHREIKgenerateFragment = 40;
public static final int ARTTS__SHREIKgenerateJava = 41;
public static final int ARTTS__SHREIKgenerateML = 42;
public static final int ARTTS__SHREIKgeneratePool = 43;
public static final int ARTTS__SHREIKgenerateState = 44;
public static final int ARTTS__SHREIKgenerateStatic = 45;
public static final int ARTTS__SHREIKgll = 46;
public static final int ARTTS__SHREIKgllClusteredGeneratorPool = 47;
public static final int ARTTS__SHREIKgllGeneratorPool = 48;
public static final int ARTTS__SHREIKgllTWEGeneratorPool = 49;
public static final int ARTTS__SHREIKgrammarWrite = 50;
public static final int ARTTS__SHREIKgssPrint = 51;
public static final int ARTTS__SHREIKgssShow = 52;
public static final int ARTTS__SHREIKgssWrite = 53;
public static final int ARTTS__SHREIKinjectInstance = 54;
public static final int ARTTS__SHREIKinjectProduction = 55;
public static final int ARTTS__SHREIKinput = 56;
public static final int ARTTS__SHREIKinputPrint = 57;
public static final int ARTTS__SHREIKlatex = 58;
public static final int ARTTS__SHREIKlcnp = 59;
public static final int ARTTS__SHREIKlcnpGeneratorPool = 60;
public static final int ARTTS__SHREIKlcnpIndexedAPI = 61;
public static final int ARTTS__SHREIKlcnpIndexedPool = 62;
public static final int ARTTS__SHREIKlcnpLinkedAPI = 63;
public static final int ARTTS__SHREIKlexDFA = 64;
public static final int ARTTS__SHREIKlexGLL = 65;
public static final int ARTTS__SHREIKlexHardCoded = 66;
public static final int ARTTS__SHREIKlexWSSuffix = 67;
public static final int ARTTS__SHREIKlexerData = 68;
public static final int ARTTS__SHREIKlexerName = 69;
public static final int ARTTS__SHREIKmain = 70;
public static final int ARTTS__SHREIKmerge = 71;
public static final int ARTTS__SHREIKmgll = 72;
public static final int ARTTS__SHREIKmgllGeneratorPool = 73;
public static final int ARTTS__SHREIKmodule = 74;
public static final int ARTTS__SHREIKnamespace = 75;
public static final int ARTTS__SHREIKosbrd = 76;
public static final int ARTTS__SHREIKosbrdGenerator = 77;
public static final int ARTTS__SHREIKoutputDirectory = 78;
public static final int ARTTS__SHREIKparaterminal = 79;
public static final int ARTTS__SHREIKparseCountsPrint = 80;
public static final int ARTTS__SHREIKparserName = 81;
public static final int ARTTS__SHREIKprelude = 82;
public static final int ARTTS__SHREIKrelation = 83;
public static final int ARTTS__SHREIKresult = 84;
public static final int ARTTS__SHREIKsml97Parser = 85;
public static final int ARTTS__SHREIKsppfLongest = 86;
public static final int ARTTS__SHREIKsppfPrint = 87;
public static final int ARTTS__SHREIKsppfPriority = 88;
public static final int ARTTS__SHREIKsppfShow = 89;
public static final int ARTTS__SHREIKsppfWrite = 90;
public static final int ARTTS__SHREIKstart = 91;
public static final int ARTTS__SHREIKstatistics = 92;
public static final int ARTTS__SHREIKstrategy = 93;
public static final int ARTTS__SHREIKsupport = 94;
public static final int ARTTS__SHREIKtermPrint = 95;
public static final int ARTTS__SHREIKtermShow = 96;
public static final int ARTTS__SHREIKtermTool = 97;
public static final int ARTTS__SHREIKtermWrite = 98;
public static final int ARTTS__SHREIKtrace = 99;
public static final int ARTTS__SHREIKtreePrint = 100;
public static final int ARTTS__SHREIKtreeShow = 101;
public static final int ARTTS__SHREIKtreeWrite = 102;
public static final int ARTTS__SHREIKtry = 103;
public static final int ARTTS__SHREIKtweDead = 104;
public static final int ARTTS__SHREIKtweExtents = 105;
public static final int ARTTS__SHREIKtweFromSPPF = 106;
public static final int ARTTS__SHREIKtweLexicalisations = 107;
public static final int ARTTS__SHREIKtweLongest = 108;
public static final int ARTTS__SHREIKtwePrint = 109;
public static final int ARTTS__SHREIKtwePrintFull = 110;
public static final int ARTTS__SHREIKtwePrintSummary = 111;
public static final int ARTTS__SHREIKtwePriority = 112;
public static final int ARTTS__SHREIKtweRecursive = 113;
public static final int ARTTS__SHREIKtweSegments = 114;
public static final int ARTTS__SHREIKtweShow = 115;
public static final int ARTTS__SHREIKtweTokenWrite = 116;
public static final int ARTTS__SHREIKtweWrite = 117;
public static final int ARTTS__SHREIKunicodeAsEscapeSeuences = 118;
public static final int ARTTS__SHREIKuse = 119;
public static final int ARTTS__SHREIKverbosity = 120;
public static final int ARTTS__SHREIKwhitespace = 121;
public static final int ARTTS__HASH = 122;
public static final int ARTTS__AMPERSAND = 123;
public static final int ARTTS__LPAR = 124;
public static final int ARTTS__RPAR = 125;
public static final int ARTTS__STAR = 126;
public static final int ARTTS__PLUS = 127;
public static final int ARTTS__COMMA = 128;
public static final int ARTTS__MINUS = 129;
public static final int ARTTS__MINUS_MINUS_MINUS = 130;
public static final int ARTTS__MINUS_SLASH = 131;
public static final int ARTTS__MINUS_SLASH_STAR = 132;
public static final int ARTTS__MINUS_SLASH_GT = 133;
public static final int ARTTS__MINUS_GT = 134;
public static final int ARTTS__MINUS_GT_STAR = 135;
public static final int ARTTS__MINUS_GT_GT = 136;
public static final int ARTTS__MINUS_BACKSLASH = 137;
public static final int ARTTS__MINUS_BACKSLASH_STAR = 138;
public static final int ARTTS__MINUS_BACKSLASH_GT = 139;
public static final int ARTTS__PERIOD = 140;
public static final int ARTTS__PERIOD_PERIOD = 141;
public static final int ARTTS__PERIODart = 142;
public static final int ARTTS__PERIODjava = 143;
public static final int ARTTS__PERIODraw = 144;
public static final int ARTTS__SLASH = 145;
public static final int ARTTS__COLON = 146;
public static final int ARTTS__COLON_COLON_EQUAL = 147;
public static final int ARTTS__LT = 148;
public static final int ARTTS__LT_LT = 149;
public static final int ARTTS__EQUAL = 150;
public static final int ARTTS__EQUAL_GT = 151;
public static final int ARTTS__EQUAL_GT_STAR = 152;
public static final int ARTTS__EQUAL_GT_GT = 153;
public static final int ARTTS__GT = 154;
public static final int ARTTS__GT_GT = 155;
public static final int ARTTS__QUERY = 156;
public static final int ARTTS__AT = 157;
public static final int ARTTS_False = 158;
public static final int ARTTS_True = 159;
public static final int ARTTS__BACKSLASH = 160;
public static final int ARTTS__BACKSLASH_BACKSLASH = 161;
public static final int ARTTS__UPARROW = 162;
public static final int ARTTS__UPARROW_PLUS = 163;
public static final int ARTTS__UPARROW_MINUS = 164;
public static final int ARTTS__UPARROW_UPARROW = 165;
public static final int ARTTS__UPARROW_UPARROW_UPARROW = 166;
public static final int ARTTS__UPARROW_ = 167;
public static final int ARTTS_anyBuiltinTerminal = 168;
public static final int ARTTS_anyCaseInsensitiveTerminal = 169;
public static final int ARTTS_anyCaseSensitiveTerminal = 170;
public static final int ARTTS_anyCharacterTerminal = 171;
public static final int ARTTS_anyLiteralTerminal = 172;
public static final int ARTTS_anyNonterminal = 173;
public static final int ARTTS_anyParaterminal = 174;
public static final int ARTTS_anyTerminal = 175;
public static final int ARTTS_listIn = 176;
public static final int ARTTS_listOut = 177;
public static final int ARTTS_map = 178;
public static final int ARTTS_mapFixed = 179;
public static final int ARTTS_postOrder = 180;
public static final int ARTTS_preOrderOneShot = 181;
public static final int ARTTS_root = 182;
public static final int ARTTS_singleton = 183;
public static final int ARTTS_untyped = 184;
public static final int ARTTS__BAR = 185;
public static final int ARTTS__BAR_GT = 186;
public static final int ARTTS__BAR_BAR = 187;
public static final int ARTTS__TILDE_GT = 188;
public static final int ARTTS__TILDE_GT_STAR = 189;
public static final int ARTTS__TILDE_GT_GT = 190;
public static final int ARTX_EPSILON = 191;
public static final int ARTL_ART_CHAR_BQ = 192;
public static final int ARTL_ART_False = 193;
public static final int ARTL_ART_ID = 194;
public static final int ARTL_ART_ID_ATTRIBUTE = 195;
public static final int ARTL_ART_STRING_BRACE_NEST = 196;
public static final int ARTL_ART_STRING_BRACKET_NEST = 197;
public static final int ARTL_ART_STRING_DOLLAR = 198;
public static final int ARTL_ART_STRING_DQ = 199;
public static final int ARTL_ART_STRING_PLAIN_SQ = 200;
public static final int ARTL_ART_TRRELATION = 201;
public static final int ARTL_ART_True = 202;
public static final int ARTL_ART___bool = 203;
public static final int ARTL_ART___char = 204;
public static final int ARTL_ART___int32 = 205;
public static final int ARTL_ART___real64 = 206;
public static final int ARTL_ART___string = 207;
public static final int ARTL_ART_aliasedCFGNonterminal = 208;
public static final int ARTL_ART_cfgAbbrev = 209;
public static final int ARTL_ART_cfgAlt = 210;
public static final int ARTL_ART_cfgAlt1 = 211;
public static final int ARTL_ART_cfgAtom = 212;
public static final int ARTL_ART_cfgAtoms = 213;
public static final int ARTL_ART_cfgAttributeEquation = 214;
public static final int ARTL_ART_cfgBuiltinTerminal = 215;
public static final int ARTL_ART_cfgCaseInsensitiveTerminal = 216;
public static final int ARTL_ART_cfgCaseSensitiveTerminal = 217;
public static final int ARTL_ART_cfgCat = 218;
public static final int ARTL_ART_cfgCatTail = 219;
public static final int ARTL_ART_cfgCharacterRangeTerminal = 220;
public static final int ARTL_ART_cfgCharacterTerminal = 221;
public static final int ARTL_ART_cfgDelay = 222;
public static final int ARTL_ART_cfgDiff = 223;
public static final int ARTL_ART_cfgDoFirst = 224;
public static final int ARTL_ART_cfgElement = 225;
public static final int ARTL_ART_cfgElementDeclaration = 226;
public static final int ARTL_ART_cfgElementDeclarations = 227;
public static final int ARTL_ART_cfgEpsilon = 228;
public static final int ARTL_ART_cfgFoldNone = 229;
public static final int ARTL_ART_cfgFoldOver = 230;
public static final int ARTL_ART_cfgFoldUnder = 231;
public static final int ARTL_ART_cfgGather = 232;
public static final int ARTL_ART_cfgGrammarAnnotations = 233;
public static final int ARTL_ART_cfgInsert = 234;
public static final int ARTL_ART_cfgIter = 235;
public static final int ARTL_ART_cfgKleeneClosure = 236;
public static final int ARTL_ART_cfgNativeAction = 237;
public static final int ARTL_ART_cfgNonterminal = 238;
public static final int ARTL_ART_cfgNonterminals = 239;
public static final int ARTL_ART_cfgNot = 240;
public static final int ARTL_ART_cfgOptional = 241;
public static final int ARTL_ART_cfgPositiveClosure = 242;
public static final int ARTL_ART_cfgRHS = 243;
public static final int ARTL_ART_cfgRule = 244;
public static final int ARTL_ART_cfgSlot = 245;
public static final int ARTL_ART_cfgSlotSymbol = 246;
public static final int ARTL_ART_cfgTear = 247;
public static final int ARTL_ART_cfgUnion = 248;
public static final int ARTL_ART_chooseDiff = 249;
public static final int ARTL_ART_chooseElement = 250;
public static final int ARTL_ART_chooseHigher = 251;
public static final int ARTL_ART_chooseIntersection = 252;
public static final int ARTL_ART_chooseLonger = 253;
public static final int ARTL_ART_chooseLower = 254;
public static final int ARTL_ART_choosePredefinedSet = 255;
public static final int ARTL_ART_chooseRule = 256;
public static final int ARTL_ART_chooseShorter = 257;
public static final int ARTL_ART_chooseUnion = 258;
public static final int ARTL_ART_chooseUnionIntersection = 259;
public static final int ARTL_ART_chooserOp = 260;
public static final int ARTL_ART_directive = 261;
public static final int ARTL_ART_idART = 262;
public static final int ARTL_ART_idJAVA = 263;
public static final int ARTL_ART_idRAW = 264;
public static final int ARTL_ART_latexDeclaration = 265;
public static final int ARTL_ART_latexDeclarations = 266;
public static final int ARTL_ART_paraterminalisers = 267;
public static final int ARTL_ART_text = 268;
public static final int ARTL_ART_textElement = 269;
public static final int ARTL_ART_tr = 270;
public static final int ARTL_ART_trConfiguration = 271;
public static final int ARTL_ART_trEntities = 272;
public static final int ARTL_ART_trEntityKind = 273;
public static final int ARTL_ART_trEntityReferences = 274;
public static final int ARTL_ART_trEquations = 275;
public static final int ARTL_ART_trLabel = 276;
public static final int ARTL_ART_trMatch = 277;
public static final int ARTL_ART_trNamedTerm = 278;
public static final int ARTL_ART_trPremises = 279;
public static final int ARTL_ART_trPrimaryTerm = 280;
public static final int ARTL_ART_trRule = 281;
public static final int ARTL_ART_trSubterms = 282;
public static final int ARTL_ART_trTerm = 283;
public static final int ARTL_ART_trTransition = 284;
public static final int ARTL_ART_trUnamedTerm = 285;
public static final int ARTL_ART_tryArgument = 286;
public static final int ARTL_ART_useElements = 287;
public static final int ARTL_ART_CHAR_BQ_1019 = 288;
public static final int ARTL_ART_CHAR_BQ_1020 = 289;
public static final int ARTL_ART_CHAR_BQ_1021 = 290;
public static final int ARTL_ART_CHAR_BQ_1022 = 291;
public static final int ARTL_ART_False_1601 = 292;
public static final int ARTL_ART_False_1602 = 293;
public static final int ARTL_ART_False_1603 = 294;
public static final int ARTL_ART_False_1604 = 295;
public static final int ARTL_ART_ID_997 = 296;
public static final int ARTL_ART_ID_998 = 297;
public static final int ARTL_ART_ID_999 = 298;
public static final int ARTL_ART_ID_1000 = 299;
public static final int ARTL_ART_ID_ATTRIBUTE_809 = 300;
public static final int ARTL_ART_ID_ATTRIBUTE_810 = 301;
public static final int ARTL_ART_ID_ATTRIBUTE_811 = 302;
public static final int ARTL_ART_ID_ATTRIBUTE_812 = 303;
public static final int ARTL_ART_ID_ATTRIBUTE_813 = 304;
public static final int ARTL_ART_ID_ATTRIBUTE_814 = 305;
public static final int ARTL_ART_ID_ATTRIBUTE_815 = 306;
public static final int ARTL_ART_ID_ATTRIBUTE_816 = 307;
public static final int ARTL_ART_STRING_BRACE_NEST_867 = 308;
public static final int ARTL_ART_STRING_BRACE_NEST_868 = 309;
public static final int ARTL_ART_STRING_BRACE_NEST_869 = 310;
public static final int ARTL_ART_STRING_BRACE_NEST_870 = 311;
public static final int ARTL_ART_STRING_BRACKET_NEST_1605 = 312;
public static final int ARTL_ART_STRING_BRACKET_NEST_1606 = 313;
public static final int ARTL_ART_STRING_BRACKET_NEST_1607 = 314;
public static final int ARTL_ART_STRING_BRACKET_NEST_1608 = 315;
public static final int ARTL_ART_STRING_DOLLAR_1007 = 316;
public static final int ARTL_ART_STRING_DOLLAR_1008 = 317;
public static final int ARTL_ART_STRING_DOLLAR_1009 = 318;
public static final int ARTL_ART_STRING_DOLLAR_1010 = 319;
public static final int ARTL_ART_STRING_DQ_1015 = 320;
public static final int ARTL_ART_STRING_DQ_1016 = 321;
public static final int ARTL_ART_STRING_DQ_1017 = 322;
public static final int ARTL_ART_STRING_DQ_1018 = 323;
public static final int ARTL_ART_STRING_PLAIN_SQ_1011 = 324;
public static final int ARTL_ART_STRING_PLAIN_SQ_1012 = 325;
public static final int ARTL_ART_STRING_PLAIN_SQ_1013 = 326;
public static final int ARTL_ART_STRING_PLAIN_SQ_1014 = 327;
public static final int ARTL_ART_TRRELATION_1141 = 328;
public static final int ARTL_ART_TRRELATION_1142 = 329;
public static final int ARTL_ART_TRRELATION_1143 = 330;
public static final int ARTL_ART_TRRELATION_1144 = 331;
public static final int ARTL_ART_TRRELATION_1145 = 332;
public static final int ARTL_ART_TRRELATION_1146 = 333;
public static final int ARTL_ART_TRRELATION_1147 = 334;
public static final int ARTL_ART_TRRELATION_1148 = 335;
public static final int ARTL_ART_TRRELATION_1149 = 336;
public static final int ARTL_ART_TRRELATION_1150 = 337;
public static final int ARTL_ART_TRRELATION_1151 = 338;
public static final int ARTL_ART_TRRELATION_1152 = 339;
public static final int ARTL_ART_TRRELATION_1153 = 340;
public static final int ARTL_ART_TRRELATION_1154 = 341;
public static final int ARTL_ART_TRRELATION_1155 = 342;
public static final int ARTL_ART_TRRELATION_1156 = 343;
public static final int ARTL_ART_TRRELATION_1157 = 344;
public static final int ARTL_ART_TRRELATION_1158 = 345;
public static final int ARTL_ART_TRRELATION_1159 = 346;
public static final int ARTL_ART_TRRELATION_1160 = 347;
public static final int ARTL_ART_TRRELATION_1161 = 348;
public static final int ARTL_ART_TRRELATION_1162 = 349;
public static final int ARTL_ART_TRRELATION_1163 = 350;
public static final int ARTL_ART_TRRELATION_1164 = 351;
public static final int ARTL_ART_TRRELATION_1165 = 352;
public static final int ARTL_ART_TRRELATION_1166 = 353;
public static final int ARTL_ART_TRRELATION_1167 = 354;
public static final int ARTL_ART_TRRELATION_1168 = 355;
public static final int ARTL_ART_TRRELATION_1169 = 356;
public static final int ARTL_ART_TRRELATION_1170 = 357;
public static final int ARTL_ART_TRRELATION_1171 = 358;
public static final int ARTL_ART_TRRELATION_1172 = 359;
public static final int ARTL_ART_TRRELATION_1173 = 360;
public static final int ARTL_ART_TRRELATION_1174 = 361;
public static final int ARTL_ART_TRRELATION_1175 = 362;
public static final int ARTL_ART_TRRELATION_1176 = 363;
public static final int ARTL_ART_TRRELATION_1177 = 364;
public static final int ARTL_ART_TRRELATION_1178 = 365;
public static final int ARTL_ART_TRRELATION_1179 = 366;
public static final int ARTL_ART_TRRELATION_1180 = 367;
public static final int ARTL_ART_TRRELATION_1181 = 368;
public static final int ARTL_ART_TRRELATION_1182 = 369;
public static final int ARTL_ART_TRRELATION_1183 = 370;
public static final int ARTL_ART_TRRELATION_1184 = 371;
public static final int ARTL_ART_TRRELATION_1185 = 372;
public static final int ARTL_ART_TRRELATION_1186 = 373;
public static final int ARTL_ART_TRRELATION_1187 = 374;
public static final int ARTL_ART_TRRELATION_1188 = 375;
public static final int ARTL_ART_TRRELATION_1189 = 376;
public static final int ARTL_ART_TRRELATION_1190 = 377;
public static final int ARTL_ART_TRRELATION_1191 = 378;
public static final int ARTL_ART_TRRELATION_1192 = 379;
public static final int ARTL_ART_TRRELATION_1193 = 380;
public static final int ARTL_ART_TRRELATION_1194 = 381;
public static final int ARTL_ART_TRRELATION_1195 = 382;
public static final int ARTL_ART_TRRELATION_1196 = 383;
public static final int ARTL_ART_TRRELATION_1197 = 384;
public static final int ARTL_ART_TRRELATION_1198 = 385;
public static final int ARTL_ART_TRRELATION_1199 = 386;
public static final int ARTL_ART_TRRELATION_1200 = 387;
public static final int ARTL_ART_True_1597 = 388;
public static final int ARTL_ART_True_1598 = 389;
public static final int ARTL_ART_True_1599 = 390;
public static final int ARTL_ART_True_1600 = 391;
public static final int ARTL_ART___bool_1237 = 392;
public static final int ARTL_ART___bool_1238 = 393;
public static final int ARTL_ART___bool_1239 = 394;
public static final int ARTL_ART___bool_1240 = 395;
public static final int ARTL_ART___bool_1241 = 396;
public static final int ARTL_ART___bool_1242 = 397;
public static final int ARTL_ART___bool_1243 = 398;
public static final int ARTL_ART___bool_1244 = 399;
public static final int ARTL_ART___char_1261 = 400;
public static final int ARTL_ART___char_1262 = 401;
public static final int ARTL_ART___char_1263 = 402;
public static final int ARTL_ART___char_1264 = 403;
public static final int ARTL_ART___int32_1245 = 404;
public static final int ARTL_ART___int32_1246 = 405;
public static final int ARTL_ART___int32_1247 = 406;
public static final int ARTL_ART___int32_1248 = 407;
public static final int ARTL_ART___real64_1249 = 408;
public static final int ARTL_ART___real64_1250 = 409;
public static final int ARTL_ART___real64_1251 = 410;
public static final int ARTL_ART___real64_1252 = 411;
public static final int ARTL_ART___string_1253 = 412;
public static final int ARTL_ART___string_1254 = 413;
public static final int ARTL_ART___string_1255 = 414;
public static final int ARTL_ART___string_1256 = 415;
public static final int ARTL_ART___string_1257 = 416;
public static final int ARTL_ART___string_1258 = 417;
public static final int ARTL_ART___string_1259 = 418;
public static final int ARTL_ART___string_1260 = 419;
public static final int ARTL_ART_aliasedCFGNonterminal_1561 = 420;
public static final int ARTL_ART_aliasedCFGNonterminal_1562 = 421;
public static final int ARTL_ART_aliasedCFGNonterminal_1563 = 422;
public static final int ARTL_ART_aliasedCFGNonterminal_1564 = 423;
public static final int ARTL_ART_aliasedCFGNonterminal_1565 = 424;
public static final int ARTL_ART_aliasedCFGNonterminal_1566 = 425;
public static final int ARTL_ART_aliasedCFGNonterminal_1567 = 426;
public static final int ARTL_ART_aliasedCFGNonterminal_1568 = 427;
public static final int ARTL_ART_aliasedCFGNonterminal_1569 = 428;
public static final int ARTL_ART_aliasedCFGNonterminal_1570 = 429;
public static final int ARTL_ART_aliasedCFGNonterminal_1571 = 430;
public static final int ARTL_ART_aliasedCFGNonterminal_1572 = 431;
public static final int ARTL_ART_cfgAbbrev_703 = 432;
public static final int ARTL_ART_cfgAbbrev_704 = 433;
public static final int ARTL_ART_cfgAbbrev_705 = 434;
public static final int ARTL_ART_cfgAbbrev_706 = 435;
public static final int ARTL_ART_cfgAbbrev_707 = 436;
public static final int ARTL_ART_cfgAbbrev_708 = 437;
public static final int ARTL_ART_cfgAbbrev_709 = 438;
public static final int ARTL_ART_cfgAbbrev_710 = 439;
public static final int ARTL_ART_cfgAbbrev_711 = 440;
public static final int ARTL_ART_cfgAbbrev_712 = 441;
public static final int ARTL_ART_cfgAbbrev_713 = 442;
public static final int ARTL_ART_cfgAbbrev_714 = 443;
public static final int ARTL_ART_cfgAbbrev_715 = 444;
public static final int ARTL_ART_cfgAbbrev_716 = 445;
public static final int ARTL_ART_cfgAbbrev_717 = 446;
public static final int ARTL_ART_cfgAbbrev_718 = 447;
public static final int ARTL_ART_cfgAbbrev_719 = 448;
public static final int ARTL_ART_cfgAbbrev_720 = 449;
public static final int ARTL_ART_cfgAbbrev_721 = 450;
public static final int ARTL_ART_cfgAbbrev_722 = 451;
public static final int ARTL_ART_cfgAbbrev_723 = 452;
public static final int ARTL_ART_cfgAbbrev_724 = 453;
public static final int ARTL_ART_cfgAlt_653 = 454;
public static final int ARTL_ART_cfgAlt_654 = 455;
public static final int ARTL_ART_cfgAlt_655 = 456;
public static final int ARTL_ART_cfgAlt_656 = 457;
public static final int ARTL_ART_cfgAlt_657 = 458;
public static final int ARTL_ART_cfgAlt_658 = 459;
public static final int ARTL_ART_cfgAlt_659 = 460;
public static final int ARTL_ART_cfgAlt_660 = 461;
public static final int ARTL_ART_cfgAlt_661 = 462;
public static final int ARTL_ART_cfgAlt_662 = 463;
public static final int ARTL_ART_cfgAlt_663 = 464;
public static final int ARTL_ART_cfgAlt_664 = 465;
public static final int ARTL_ART_cfgAlt1_665 = 466;
public static final int ARTL_ART_cfgAlt1_666 = 467;
public static final int ARTL_ART_cfgAlt1_667 = 468;
public static final int ARTL_ART_cfgAlt1_668 = 469;
public static final int ARTL_ART_cfgAlt1_669 = 470;
public static final int ARTL_ART_cfgAlt1_670 = 471;
public static final int ARTL_ART_cfgAlt1_671 = 472;
public static final int ARTL_ART_cfgAlt1_672 = 473;
public static final int ARTL_ART_cfgAlt1_673 = 474;
public static final int ARTL_ART_cfgAlt1_674 = 475;
public static final int ARTL_ART_cfgAlt1_675 = 476;
public static final int ARTL_ART_cfgAlt1_676 = 477;
public static final int ARTL_ART_cfgAtom_871 = 478;
public static final int ARTL_ART_cfgAtom_872 = 479;
public static final int ARTL_ART_cfgAtom_873 = 480;
public static final int ARTL_ART_cfgAtom_874 = 481;
public static final int ARTL_ART_cfgAtom_875 = 482;
public static final int ARTL_ART_cfgAtom_876 = 483;
public static final int ARTL_ART_cfgAtom_877 = 484;
public static final int ARTL_ART_cfgAtom_878 = 485;
public static final int ARTL_ART_cfgAtom_879 = 486;
public static final int ARTL_ART_cfgAtom_880 = 487;
public static final int ARTL_ART_cfgAtom_881 = 488;
public static final int ARTL_ART_cfgAtom_882 = 489;
public static final int ARTL_ART_cfgAtom_883 = 490;
public static final int ARTL_ART_cfgAtom_884 = 491;
public static final int ARTL_ART_cfgAtom_885 = 492;
public static final int ARTL_ART_cfgAtom_886 = 493;
public static final int ARTL_ART_cfgAtom_887 = 494;
public static final int ARTL_ART_cfgAtom_888 = 495;
public static final int ARTL_ART_cfgAtom_889 = 496;
public static final int ARTL_ART_cfgAtom_890 = 497;
public static final int ARTL_ART_cfgAtom_891 = 498;
public static final int ARTL_ART_cfgAtom_892 = 499;
public static final int ARTL_ART_cfgAtom_893 = 500;
public static final int ARTL_ART_cfgAtom_894 = 501;
public static final int ARTL_ART_cfgAtom_895 = 502;
public static final int ARTL_ART_cfgAtom_896 = 503;
public static final int ARTL_ART_cfgAtom_897 = 504;
public static final int ARTL_ART_cfgAtom_898 = 505;
public static final int ARTL_ART_cfgAtom_899 = 506;
public static final int ARTL_ART_cfgAtom_900 = 507;
public static final int ARTL_ART_cfgAtom_901 = 508;
public static final int ARTL_ART_cfgAtom_902 = 509;
public static final int ARTL_ART_cfgAtoms_1023 = 510;
public static final int ARTL_ART_cfgAtoms_1024 = 511;
public static final int ARTL_ART_cfgAtoms_1025 = 512;
public static final int ARTL_ART_cfgAtoms_1026 = 513;
public static final int ARTL_ART_cfgAtoms_1027 = 514;
public static final int ARTL_ART_cfgAtoms_1028 = 515;
public static final int ARTL_ART_cfgAtoms_1029 = 516;
public static final int ARTL_ART_cfgAtoms_1030 = 517;
public static final int ARTL_ART_cfgAtoms_1031 = 518;
public static final int ARTL_ART_cfgAtoms_1032 = 519;
public static final int ARTL_ART_cfgAtoms_1033 = 520;
public static final int ARTL_ART_cfgAtoms_1034 = 521;
public static final int ARTL_ART_cfgAttributeEquation_725 = 522;
public static final int ARTL_ART_cfgAttributeEquation_726 = 523;
public static final int ARTL_ART_cfgAttributeEquation_727 = 524;
public static final int ARTL_ART_cfgAttributeEquation_728 = 525;
public static final int ARTL_ART_cfgAttributeEquation_729 = 526;
public static final int ARTL_ART_cfgAttributeEquation_730 = 527;
public static final int ARTL_ART_cfgAttributeEquation_731 = 528;
public static final int ARTL_ART_cfgAttributeEquation_732 = 529;
public static final int ARTL_ART_cfgBuiltinTerminal_963 = 530;
public static final int ARTL_ART_cfgBuiltinTerminal_964 = 531;
public static final int ARTL_ART_cfgBuiltinTerminal_965 = 532;
public static final int ARTL_ART_cfgBuiltinTerminal_966 = 533;
public static final int ARTL_ART_cfgBuiltinTerminal_967 = 534;
public static final int ARTL_ART_cfgBuiltinTerminal_968 = 535;
public static final int ARTL_ART_cfgCaseInsensitiveTerminal_947 = 536;
public static final int ARTL_ART_cfgCaseInsensitiveTerminal_948 = 537;
public static final int ARTL_ART_cfgCaseInsensitiveTerminal_949 = 538;
public static final int ARTL_ART_cfgCaseInsensitiveTerminal_950 = 539;
public static final int ARTL_ART_cfgCaseSensitiveTerminal_943 = 540;
public static final int ARTL_ART_cfgCaseSensitiveTerminal_944 = 541;
public static final int ARTL_ART_cfgCaseSensitiveTerminal_945 = 542;
public static final int ARTL_ART_cfgCaseSensitiveTerminal_946 = 543;
public static final int ARTL_ART_cfgCat_647 = 544;
public static final int ARTL_ART_cfgCat_648 = 545;
public static final int ARTL_ART_cfgCat_649 = 546;
public static final int ARTL_ART_cfgCat_650 = 547;
public static final int ARTL_ART_cfgCat_651 = 548;
public static final int ARTL_ART_cfgCat_652 = 549;
public static final int ARTL_ART_cfgCatTail_689 = 550;
public static final int ARTL_ART_cfgCatTail_690 = 551;
public static final int ARTL_ART_cfgCatTail_691 = 552;
public static final int ARTL_ART_cfgCatTail_692 = 553;
public static final int ARTL_ART_cfgCatTail_693 = 554;
public static final int ARTL_ART_cfgCatTail_694 = 555;
public static final int ARTL_ART_cfgCatTail_695 = 556;
public static final int ARTL_ART_cfgCatTail_696 = 557;
public static final int ARTL_ART_cfgCatTail_697 = 558;
public static final int ARTL_ART_cfgCatTail_698 = 559;
public static final int ARTL_ART_cfgCatTail_699 = 560;
public static final int ARTL_ART_cfgCatTail_700 = 561;
public static final int ARTL_ART_cfgCatTail_701 = 562;
public static final int ARTL_ART_cfgCatTail_702 = 563;
public static final int ARTL_ART_cfgCharacterRangeTerminal_955 = 564;
public static final int ARTL_ART_cfgCharacterRangeTerminal_956 = 565;
public static final int ARTL_ART_cfgCharacterRangeTerminal_957 = 566;
public static final int ARTL_ART_cfgCharacterRangeTerminal_958 = 567;
public static final int ARTL_ART_cfgCharacterRangeTerminal_959 = 568;
public static final int ARTL_ART_cfgCharacterRangeTerminal_960 = 569;
public static final int ARTL_ART_cfgCharacterRangeTerminal_961 = 570;
public static final int ARTL_ART_cfgCharacterRangeTerminal_962 = 571;
public static final int ARTL_ART_cfgCharacterTerminal_951 = 572;
public static final int ARTL_ART_cfgCharacterTerminal_952 = 573;
public static final int ARTL_ART_cfgCharacterTerminal_953 = 574;
public static final int ARTL_ART_cfgCharacterTerminal_954 = 575;
public static final int ARTL_ART_cfgDelay_969 = 576;
public static final int ARTL_ART_cfgDelay_970 = 577;
public static final int ARTL_ART_cfgDelay_971 = 578;
public static final int ARTL_ART_cfgDelay_972 = 579;
public static final int ARTL_ART_cfgDiff_761 = 580;
public static final int ARTL_ART_cfgDiff_762 = 581;
public static final int ARTL_ART_cfgDiff_763 = 582;
public static final int ARTL_ART_cfgDiff_764 = 583;
public static final int ARTL_ART_cfgDiff_765 = 584;
public static final int ARTL_ART_cfgDiff_766 = 585;
public static final int ARTL_ART_cfgDiff_767 = 586;
public static final int ARTL_ART_cfgDiff_768 = 587;
public static final int ARTL_ART_cfgDiff_769 = 588;
public static final int ARTL_ART_cfgDiff_770 = 589;
public static final int ARTL_ART_cfgDiff_771 = 590;
public static final int ARTL_ART_cfgDiff_772 = 591;
public static final int ARTL_ART_cfgDoFirst_927 = 592;
public static final int ARTL_ART_cfgDoFirst_928 = 593;
public static final int ARTL_ART_cfgDoFirst_929 = 594;
public static final int ARTL_ART_cfgDoFirst_930 = 595;
public static final int ARTL_ART_cfgDoFirst_931 = 596;
public static final int ARTL_ART_cfgDoFirst_932 = 597;
public static final int ARTL_ART_cfgDoFirst_933 = 598;
public static final int ARTL_ART_cfgDoFirst_934 = 599;
public static final int ARTL_ART_cfgElement_795 = 600;
public static final int ARTL_ART_cfgElement_796 = 601;
public static final int ARTL_ART_cfgElement_797 = 602;
public static final int ARTL_ART_cfgElement_798 = 603;
public static final int ARTL_ART_cfgElement_799 = 604;
public static final int ARTL_ART_cfgElement_800 = 605;
public static final int ARTL_ART_cfgElement_801 = 606;
public static final int ARTL_ART_cfgElement_802 = 607;
public static final int ARTL_ART_cfgElement_803 = 608;
public static final int ARTL_ART_cfgElement_804 = 609;
public static final int ARTL_ART_cfgElement_805 = 610;
public static final int ARTL_ART_cfgElement_806 = 611;
public static final int ARTL_ART_cfgElement_807 = 612;
public static final int ARTL_ART_cfgElement_808 = 613;
public static final int ARTL_ART_cfgElementDeclaration_1549 = 614;
public static final int ARTL_ART_cfgElementDeclaration_1550 = 615;
public static final int ARTL_ART_cfgElementDeclaration_1551 = 616;
public static final int ARTL_ART_cfgElementDeclaration_1552 = 617;
public static final int ARTL_ART_cfgElementDeclaration_1553 = 618;
public static final int ARTL_ART_cfgElementDeclaration_1554 = 619;
public static final int ARTL_ART_cfgElementDeclaration_1555 = 620;
public static final int ARTL_ART_cfgElementDeclaration_1556 = 621;
public static final int ARTL_ART_cfgElementDeclaration_1557 = 622;
public static final int ARTL_ART_cfgElementDeclaration_1558 = 623;
public static final int ARTL_ART_cfgElementDeclaration_1559 = 624;
public static final int ARTL_ART_cfgElementDeclaration_1560 = 625;
public static final int ARTL_ART_cfgElementDeclarations_1461 = 626;
public static final int ARTL_ART_cfgElementDeclarations_1462 = 627;
public static final int ARTL_ART_cfgElementDeclarations_1463 = 628;
public static final int ARTL_ART_cfgElementDeclarations_1464 = 629;
public static final int ARTL_ART_cfgElementDeclarations_1465 = 630;
public static final int ARTL_ART_cfgElementDeclarations_1466 = 631;
public static final int ARTL_ART_cfgElementDeclarations_1467 = 632;
public static final int ARTL_ART_cfgElementDeclarations_1468 = 633;
public static final int ARTL_ART_cfgElementDeclarations_1469 = 634;
public static final int ARTL_ART_cfgElementDeclarations_1470 = 635;
public static final int ARTL_ART_cfgElementDeclarations_1471 = 636;
public static final int ARTL_ART_cfgElementDeclarations_1472 = 637;
public static final int ARTL_ART_cfgEpsilon_935 = 638;
public static final int ARTL_ART_cfgEpsilon_936 = 639;
public static final int ARTL_ART_cfgEpsilon_937 = 640;
public static final int ARTL_ART_cfgEpsilon_938 = 641;
public static final int ARTL_ART_cfgFoldNone_973 = 642;
public static final int ARTL_ART_cfgFoldNone_974 = 643;
public static final int ARTL_ART_cfgFoldNone_975 = 644;
public static final int ARTL_ART_cfgFoldNone_976 = 645;
public static final int ARTL_ART_cfgFoldOver_981 = 646;
public static final int ARTL_ART_cfgFoldOver_982 = 647;
public static final int ARTL_ART_cfgFoldOver_983 = 648;
public static final int ARTL_ART_cfgFoldOver_984 = 649;
public static final int ARTL_ART_cfgFoldUnder_977 = 650;
public static final int ARTL_ART_cfgFoldUnder_978 = 651;
public static final int ARTL_ART_cfgFoldUnder_979 = 652;
public static final int ARTL_ART_cfgFoldUnder_980 = 653;
public static final int ARTL_ART_cfgGather_985 = 654;
public static final int ARTL_ART_cfgGather_986 = 655;
public static final int ARTL_ART_cfgGather_987 = 656;
public static final int ARTL_ART_cfgGather_988 = 657;
public static final int ARTL_ART_cfgGather_989 = 658;
public static final int ARTL_ART_cfgGather_990 = 659;
public static final int ARTL_ART_cfgGrammarAnnotations_903 = 660;
public static final int ARTL_ART_cfgGrammarAnnotations_904 = 661;
public static final int ARTL_ART_cfgGrammarAnnotations_905 = 662;
public static final int ARTL_ART_cfgGrammarAnnotations_906 = 663;
public static final int ARTL_ART_cfgGrammarAnnotations_907 = 664;
public static final int ARTL_ART_cfgGrammarAnnotations_908 = 665;
public static final int ARTL_ART_cfgGrammarAnnotations_909 = 666;
public static final int ARTL_ART_cfgGrammarAnnotations_910 = 667;
public static final int ARTL_ART_cfgGrammarAnnotations_911 = 668;
public static final int ARTL_ART_cfgGrammarAnnotations_912 = 669;
public static final int ARTL_ART_cfgGrammarAnnotations_913 = 670;
public static final int ARTL_ART_cfgGrammarAnnotations_914 = 671;
public static final int ARTL_ART_cfgGrammarAnnotations_915 = 672;
public static final int ARTL_ART_cfgGrammarAnnotations_916 = 673;
public static final int ARTL_ART_cfgGrammarAnnotations_917 = 674;
public static final int ARTL_ART_cfgGrammarAnnotations_918 = 675;
public static final int ARTL_ART_cfgGrammarAnnotations_919 = 676;
public static final int ARTL_ART_cfgGrammarAnnotations_920 = 677;
public static final int ARTL_ART_cfgGrammarAnnotations_921 = 678;
public static final int ARTL_ART_cfgGrammarAnnotations_922 = 679;
public static final int ARTL_ART_cfgGrammarAnnotations_923 = 680;
public static final int ARTL_ART_cfgGrammarAnnotations_924 = 681;
public static final int ARTL_ART_cfgGrammarAnnotations_925 = 682;
public static final int ARTL_ART_cfgGrammarAnnotations_926 = 683;
public static final int ARTL_ART_cfgInsert_991 = 684;
public static final int ARTL_ART_cfgInsert_992 = 685;
public static final int ARTL_ART_cfgInsert_993 = 686;
public static final int ARTL_ART_cfgInsert_994 = 687;
public static final int ARTL_ART_cfgInsert_995 = 688;
public static final int ARTL_ART_cfgInsert_996 = 689;
public static final int ARTL_ART_cfgIter_737 = 690;
public static final int ARTL_ART_cfgIter_738 = 691;
public static final int ARTL_ART_cfgIter_739 = 692;
public static final int ARTL_ART_cfgIter_740 = 693;
public static final int ARTL_ART_cfgIter_741 = 694;
public static final int ARTL_ART_cfgIter_742 = 695;
public static final int ARTL_ART_cfgIter_743 = 696;
public static final int ARTL_ART_cfgIter_744 = 697;
public static final int ARTL_ART_cfgIter_745 = 698;
public static final int ARTL_ART_cfgIter_746 = 699;
public static final int ARTL_ART_cfgIter_747 = 700;
public static final int ARTL_ART_cfgIter_748 = 701;
public static final int ARTL_ART_cfgKleeneClosure_749 = 702;
public static final int ARTL_ART_cfgKleeneClosure_750 = 703;
public static final int ARTL_ART_cfgKleeneClosure_751 = 704;
public static final int ARTL_ART_cfgKleeneClosure_752 = 705;
public static final int ARTL_ART_cfgNativeAction_733 = 706;
public static final int ARTL_ART_cfgNativeAction_734 = 707;
public static final int ARTL_ART_cfgNativeAction_735 = 708;
public static final int ARTL_ART_cfgNativeAction_736 = 709;
public static final int ARTL_ART_cfgNonterminal_627 = 710;
public static final int ARTL_ART_cfgNonterminal_628 = 711;
public static final int ARTL_ART_cfgNonterminal_629 = 712;
public static final int ARTL_ART_cfgNonterminal_630 = 713;
public static final int ARTL_ART_cfgNonterminal_631 = 714;
public static final int ARTL_ART_cfgNonterminal_632 = 715;
public static final int ARTL_ART_cfgNonterminal_633 = 716;
public static final int ARTL_ART_cfgNonterminal_634 = 717;
public static final int ARTL_ART_cfgNonterminals_1035 = 718;
public static final int ARTL_ART_cfgNonterminals_1036 = 719;
public static final int ARTL_ART_cfgNonterminals_1037 = 720;
public static final int ARTL_ART_cfgNonterminals_1038 = 721;
public static final int ARTL_ART_cfgNonterminals_1039 = 722;
public static final int ARTL_ART_cfgNonterminals_1040 = 723;
public static final int ARTL_ART_cfgNonterminals_1041 = 724;
public static final int ARTL_ART_cfgNonterminals_1042 = 725;
public static final int ARTL_ART_cfgNonterminals_1043 = 726;
public static final int ARTL_ART_cfgNonterminals_1044 = 727;
public static final int ARTL_ART_cfgNonterminals_1045 = 728;
public static final int ARTL_ART_cfgNonterminals_1046 = 729;
public static final int ARTL_ART_cfgNot_785 = 730;
public static final int ARTL_ART_cfgNot_786 = 731;
public static final int ARTL_ART_cfgNot_787 = 732;
public static final int ARTL_ART_cfgNot_788 = 733;
public static final int ARTL_ART_cfgNot_789 = 734;
public static final int ARTL_ART_cfgNot_790 = 735;
public static final int ARTL_ART_cfgNot_791 = 736;
public static final int ARTL_ART_cfgNot_792 = 737;
public static final int ARTL_ART_cfgNot_793 = 738;
public static final int ARTL_ART_cfgNot_794 = 739;
public static final int ARTL_ART_cfgOptional_757 = 740;
public static final int ARTL_ART_cfgOptional_758 = 741;
public static final int ARTL_ART_cfgOptional_759 = 742;
public static final int ARTL_ART_cfgOptional_760 = 743;
public static final int ARTL_ART_cfgPositiveClosure_753 = 744;
public static final int ARTL_ART_cfgPositiveClosure_754 = 745;
public static final int ARTL_ART_cfgPositiveClosure_755 = 746;
public static final int ARTL_ART_cfgPositiveClosure_756 = 747;
public static final int ARTL_ART_cfgRHS_635 = 748;
public static final int ARTL_ART_cfgRHS_636 = 749;
public static final int ARTL_ART_cfgRHS_637 = 750;
public static final int ARTL_ART_cfgRHS_638 = 751;
public static final int ARTL_ART_cfgRHS_639 = 752;
public static final int ARTL_ART_cfgRHS_640 = 753;
public static final int ARTL_ART_cfgRHS_641 = 754;
public static final int ARTL_ART_cfgRHS_642 = 755;
public static final int ARTL_ART_cfgRHS_643 = 756;
public static final int ARTL_ART_cfgRHS_644 = 757;
public static final int ARTL_ART_cfgRHS_645 = 758;
public static final int ARTL_ART_cfgRHS_646 = 759;
public static final int ARTL_ART_cfgRule_27 = 760;
public static final int ARTL_ART_cfgRule_28 = 761;
public static final int ARTL_ART_cfgRule_29 = 762;
public static final int ARTL_ART_cfgRule_30 = 763;
public static final int ARTL_ART_cfgRule_31 = 764;
public static final int ARTL_ART_cfgRule_32 = 765;
public static final int ARTL_ART_cfgRule_33 = 766;
public static final int ARTL_ART_cfgRule_34 = 767;
public static final int ARTL_ART_cfgSlot_677 = 768;
public static final int ARTL_ART_cfgSlot_678 = 769;
public static final int ARTL_ART_cfgSlot_679 = 770;
public static final int ARTL_ART_cfgSlot_680 = 771;
public static final int ARTL_ART_cfgSlot_681 = 772;
public static final int ARTL_ART_cfgSlot_682 = 773;
public static final int ARTL_ART_cfgSlot_683 = 774;
public static final int ARTL_ART_cfgSlot_684 = 775;
public static final int ARTL_ART_cfgSlot_685 = 776;
public static final int ARTL_ART_cfgSlot_686 = 777;
public static final int ARTL_ART_cfgSlot_687 = 778;
public static final int ARTL_ART_cfgSlot_688 = 779;
public static final int ARTL_ART_cfgSlotSymbol_939 = 780;
public static final int ARTL_ART_cfgSlotSymbol_940 = 781;
public static final int ARTL_ART_cfgSlotSymbol_941 = 782;
public static final int ARTL_ART_cfgSlotSymbol_942 = 783;
public static final int ARTL_ART_cfgTear_1001 = 784;
public static final int ARTL_ART_cfgTear_1002 = 785;
public static final int ARTL_ART_cfgTear_1003 = 786;
public static final int ARTL_ART_cfgTear_1004 = 787;
public static final int ARTL_ART_cfgTear_1005 = 788;
public static final int ARTL_ART_cfgTear_1006 = 789;
public static final int ARTL_ART_cfgUnion_773 = 790;
public static final int ARTL_ART_cfgUnion_774 = 791;
public static final int ARTL_ART_cfgUnion_775 = 792;
public static final int ARTL_ART_cfgUnion_776 = 793;
public static final int ARTL_ART_cfgUnion_777 = 794;
public static final int ARTL_ART_cfgUnion_778 = 795;
public static final int ARTL_ART_cfgUnion_779 = 796;
public static final int ARTL_ART_cfgUnion_780 = 797;
public static final int ARTL_ART_cfgUnion_781 = 798;
public static final int ARTL_ART_cfgUnion_782 = 799;
public static final int ARTL_ART_cfgUnion_783 = 800;
public static final int ARTL_ART_cfgUnion_784 = 801;
public static final int ARTL_ART_chooseDiff_1283 = 802;
public static final int ARTL_ART_chooseDiff_1284 = 803;
public static final int ARTL_ART_chooseDiff_1285 = 804;
public static final int ARTL_ART_chooseDiff_1286 = 805;
public static final int ARTL_ART_chooseDiff_1287 = 806;
public static final int ARTL_ART_chooseDiff_1288 = 807;
public static final int ARTL_ART_chooseDiff_1289 = 808;
public static final int ARTL_ART_chooseDiff_1290 = 809;
public static final int ARTL_ART_chooseDiff_1291 = 810;
public static final int ARTL_ART_chooseDiff_1292 = 811;
public static final int ARTL_ART_chooseDiff_1293 = 812;
public static final int ARTL_ART_chooseDiff_1294 = 813;
public static final int ARTL_ART_chooseElement_1331 = 814;
public static final int ARTL_ART_chooseElement_1332 = 815;
public static final int ARTL_ART_chooseElement_1333 = 816;
public static final int ARTL_ART_chooseElement_1334 = 817;
public static final int ARTL_ART_chooseElement_1335 = 818;
public static final int ARTL_ART_chooseElement_1336 = 819;
public static final int ARTL_ART_chooseElement_1337 = 820;
public static final int ARTL_ART_chooseElement_1338 = 821;
public static final int ARTL_ART_chooseElement_1339 = 822;
public static final int ARTL_ART_chooseElement_1340 = 823;
public static final int ARTL_ART_chooseElement_1341 = 824;
public static final int ARTL_ART_chooseElement_1342 = 825;
public static final int ARTL_ART_chooseElement_1343 = 826;
public static final int ARTL_ART_chooseElement_1344 = 827;
public static final int ARTL_ART_chooseElement_1345 = 828;
public static final int ARTL_ART_chooseElement_1346 = 829;
public static final int ARTL_ART_chooseElement_1347 = 830;
public static final int ARTL_ART_chooseElement_1348 = 831;
public static final int ARTL_ART_chooseElement_1349 = 832;
public static final int ARTL_ART_chooseElement_1350 = 833;
public static final int ARTL_ART_chooseElement_1351 = 834;
public static final int ARTL_ART_chooseElement_1352 = 835;
public static final int ARTL_ART_chooseElement_1353 = 836;
public static final int ARTL_ART_chooseElement_1354 = 837;
public static final int ARTL_ART_chooseElement_1355 = 838;
public static final int ARTL_ART_chooseElement_1356 = 839;
public static final int ARTL_ART_chooseElement_1357 = 840;
public static final int ARTL_ART_chooseElement_1358 = 841;
public static final int ARTL_ART_chooseElement_1359 = 842;
public static final int ARTL_ART_chooseElement_1360 = 843;
public static final int ARTL_ART_chooseElement_1361 = 844;
public static final int ARTL_ART_chooseElement_1362 = 845;
public static final int ARTL_ART_chooseHigher_1403 = 846;
public static final int ARTL_ART_chooseHigher_1404 = 847;
public static final int ARTL_ART_chooseHigher_1405 = 848;
public static final int ARTL_ART_chooseHigher_1406 = 849;
public static final int ARTL_ART_chooseIntersection_1367 = 850;
public static final int ARTL_ART_chooseIntersection_1368 = 851;
public static final int ARTL_ART_chooseIntersection_1369 = 852;
public static final int ARTL_ART_chooseIntersection_1370 = 853;
public static final int ARTL_ART_chooseLonger_1411 = 854;
public static final int ARTL_ART_chooseLonger_1412 = 855;
public static final int ARTL_ART_chooseLonger_1413 = 856;
public static final int ARTL_ART_chooseLonger_1414 = 857;
public static final int ARTL_ART_chooseLower_1407 = 858;
public static final int ARTL_ART_chooseLower_1408 = 859;
public static final int ARTL_ART_chooseLower_1409 = 860;
public static final int ARTL_ART_chooseLower_1410 = 861;
public static final int ARTL_ART_choosePredefinedSet_1371 = 862;
public static final int ARTL_ART_choosePredefinedSet_1372 = 863;
public static final int ARTL_ART_choosePredefinedSet_1373 = 864;
public static final int ARTL_ART_choosePredefinedSet_1374 = 865;
public static final int ARTL_ART_choosePredefinedSet_1375 = 866;
public static final int ARTL_ART_choosePredefinedSet_1376 = 867;
public static final int ARTL_ART_choosePredefinedSet_1377 = 868;
public static final int ARTL_ART_choosePredefinedSet_1378 = 869;
public static final int ARTL_ART_choosePredefinedSet_1379 = 870;
public static final int ARTL_ART_choosePredefinedSet_1380 = 871;
public static final int ARTL_ART_choosePredefinedSet_1381 = 872;
public static final int ARTL_ART_choosePredefinedSet_1382 = 873;
public static final int ARTL_ART_choosePredefinedSet_1383 = 874;
public static final int ARTL_ART_choosePredefinedSet_1384 = 875;
public static final int ARTL_ART_choosePredefinedSet_1385 = 876;
public static final int ARTL_ART_choosePredefinedSet_1386 = 877;
public static final int ARTL_ART_choosePredefinedSet_1387 = 878;
public static final int ARTL_ART_choosePredefinedSet_1388 = 879;
public static final int ARTL_ART_choosePredefinedSet_1389 = 880;
public static final int ARTL_ART_choosePredefinedSet_1390 = 881;
public static final int ARTL_ART_choosePredefinedSet_1391 = 882;
public static final int ARTL_ART_choosePredefinedSet_1392 = 883;
public static final int ARTL_ART_choosePredefinedSet_1393 = 884;
public static final int ARTL_ART_choosePredefinedSet_1394 = 885;
public static final int ARTL_ART_choosePredefinedSet_1395 = 886;
public static final int ARTL_ART_choosePredefinedSet_1396 = 887;
public static final int ARTL_ART_choosePredefinedSet_1397 = 888;
public static final int ARTL_ART_choosePredefinedSet_1398 = 889;
public static final int ARTL_ART_choosePredefinedSet_1399 = 890;
public static final int ARTL_ART_choosePredefinedSet_1400 = 891;
public static final int ARTL_ART_choosePredefinedSet_1401 = 892;
public static final int ARTL_ART_choosePredefinedSet_1402 = 893;
public static final int ARTL_ART_chooseRule_41 = 894;
public static final int ARTL_ART_chooseRule_42 = 895;
public static final int ARTL_ART_chooseRule_43 = 896;
public static final int ARTL_ART_chooseRule_44 = 897;
public static final int ARTL_ART_chooseRule_45 = 898;
public static final int ARTL_ART_chooseRule_46 = 899;
public static final int ARTL_ART_chooseRule_47 = 900;
public static final int ARTL_ART_chooseRule_48 = 901;
public static final int ARTL_ART_chooseShorter_1415 = 902;
public static final int ARTL_ART_chooseShorter_1416 = 903;
public static final int ARTL_ART_chooseShorter_1417 = 904;
public static final int ARTL_ART_chooseShorter_1418 = 905;
public static final int ARTL_ART_chooseUnion_1363 = 906;
public static final int ARTL_ART_chooseUnion_1364 = 907;
public static final int ARTL_ART_chooseUnion_1365 = 908;
public static final int ARTL_ART_chooseUnion_1366 = 909;
public static final int ARTL_ART_chooseUnionIntersection_1311 = 910;
public static final int ARTL_ART_chooseUnionIntersection_1312 = 911;
public static final int ARTL_ART_chooseUnionIntersection_1313 = 912;
public static final int ARTL_ART_chooseUnionIntersection_1314 = 913;
public static final int ARTL_ART_chooseUnionIntersection_1315 = 914;
public static final int ARTL_ART_chooseUnionIntersection_1316 = 915;
public static final int ARTL_ART_chooseUnionIntersection_1317 = 916;
public static final int ARTL_ART_chooseUnionIntersection_1318 = 917;
public static final int ARTL_ART_chooseUnionIntersection_1319 = 918;
public static final int ARTL_ART_chooseUnionIntersection_1320 = 919;
public static final int ARTL_ART_chooseUnionIntersection_1321 = 920;
public static final int ARTL_ART_chooseUnionIntersection_1322 = 921;
public static final int ARTL_ART_chooseUnionIntersection_1323 = 922;
public static final int ARTL_ART_chooseUnionIntersection_1324 = 923;
public static final int ARTL_ART_chooseUnionIntersection_1325 = 924;
public static final int ARTL_ART_chooseUnionIntersection_1326 = 925;
public static final int ARTL_ART_chooseUnionIntersection_1327 = 926;
public static final int ARTL_ART_chooseUnionIntersection_1328 = 927;
public static final int ARTL_ART_chooseUnionIntersection_1329 = 928;
public static final int ARTL_ART_chooseUnionIntersection_1330 = 929;
public static final int ARTL_ART_chooserOp_1295 = 930;
public static final int ARTL_ART_chooserOp_1296 = 931;
public static final int ARTL_ART_chooserOp_1297 = 932;
public static final int ARTL_ART_chooserOp_1298 = 933;
public static final int ARTL_ART_chooserOp_1299 = 934;
public static final int ARTL_ART_chooserOp_1300 = 935;
public static final int ARTL_ART_chooserOp_1301 = 936;
public static final int ARTL_ART_chooserOp_1302 = 937;
public static final int ARTL_ART_chooserOp_1303 = 938;
public static final int ARTL_ART_chooserOp_1304 = 939;
public static final int ARTL_ART_chooserOp_1305 = 940;
public static final int ARTL_ART_chooserOp_1306 = 941;
public static final int ARTL_ART_chooserOp_1307 = 942;
public static final int ARTL_ART_chooserOp_1308 = 943;
public static final int ARTL_ART_chooserOp_1309 = 944;
public static final int ARTL_ART_chooserOp_1310 = 945;
public static final int ARTL_ART_directive_49 = 946;
public static final int ARTL_ART_directive_50 = 947;
public static final int ARTL_ART_directive_51 = 948;
public static final int ARTL_ART_directive_52 = 949;
public static final int ARTL_ART_directive_53 = 950;
public static final int ARTL_ART_directive_54 = 951;
public static final int ARTL_ART_directive_55 = 952;
public static final int ARTL_ART_directive_56 = 953;
public static final int ARTL_ART_directive_57 = 954;
public static final int ARTL_ART_directive_58 = 955;
public static final int ARTL_ART_directive_59 = 956;
public static final int ARTL_ART_directive_60 = 957;
public static final int ARTL_ART_directive_61 = 958;
public static final int ARTL_ART_directive_62 = 959;
public static final int ARTL_ART_directive_63 = 960;
public static final int ARTL_ART_directive_64 = 961;
public static final int ARTL_ART_directive_65 = 962;
public static final int ARTL_ART_directive_66 = 963;
public static final int ARTL_ART_directive_67 = 964;
public static final int ARTL_ART_directive_68 = 965;
public static final int ARTL_ART_directive_69 = 966;
public static final int ARTL_ART_directive_70 = 967;
public static final int ARTL_ART_directive_71 = 968;
public static final int ARTL_ART_directive_72 = 969;
public static final int ARTL_ART_directive_73 = 970;
public static final int ARTL_ART_directive_74 = 971;
public static final int ARTL_ART_directive_75 = 972;
public static final int ARTL_ART_directive_76 = 973;
public static final int ARTL_ART_directive_77 = 974;
public static final int ARTL_ART_directive_78 = 975;
public static final int ARTL_ART_directive_79 = 976;
public static final int ARTL_ART_directive_80 = 977;
public static final int ARTL_ART_directive_81 = 978;
public static final int ARTL_ART_directive_82 = 979;
public static final int ARTL_ART_directive_83 = 980;
public static final int ARTL_ART_directive_84 = 981;
public static final int ARTL_ART_directive_85 = 982;
public static final int ARTL_ART_directive_86 = 983;
public static final int ARTL_ART_directive_87 = 984;
public static final int ARTL_ART_directive_88 = 985;
public static final int ARTL_ART_directive_89 = 986;
public static final int ARTL_ART_directive_90 = 987;
public static final int ARTL_ART_directive_91 = 988;
public static final int ARTL_ART_directive_92 = 989;
public static final int ARTL_ART_directive_93 = 990;
public static final int ARTL_ART_directive_94 = 991;
public static final int ARTL_ART_directive_95 = 992;
public static final int ARTL_ART_directive_96 = 993;
public static final int ARTL_ART_directive_97 = 994;
public static final int ARTL_ART_directive_98 = 995;
public static final int ARTL_ART_directive_99 = 996;
public static final int ARTL_ART_directive_100 = 997;
public static final int ARTL_ART_directive_101 = 998;
public static final int ARTL_ART_directive_102 = 999;
public static final int ARTL_ART_directive_103 = 1000;
public static final int ARTL_ART_directive_104 = 1001;
public static final int ARTL_ART_directive_105 = 1002;
public static final int ARTL_ART_directive_106 = 1003;
public static final int ARTL_ART_directive_107 = 1004;
public static final int ARTL_ART_directive_108 = 1005;
public static final int ARTL_ART_directive_109 = 1006;
public static final int ARTL_ART_directive_110 = 1007;
public static final int ARTL_ART_directive_111 = 1008;
public static final int ARTL_ART_directive_112 = 1009;
public static final int ARTL_ART_directive_113 = 1010;
public static final int ARTL_ART_directive_114 = 1011;
public static final int ARTL_ART_directive_115 = 1012;
public static final int ARTL_ART_directive_116 = 1013;
public static final int ARTL_ART_directive_117 = 1014;
public static final int ARTL_ART_directive_118 = 1015;
public static final int ARTL_ART_directive_119 = 1016;
public static final int ARTL_ART_directive_120 = 1017;
public static final int ARTL_ART_directive_121 = 1018;
public static final int ARTL_ART_directive_122 = 1019;
public static final int ARTL_ART_directive_123 = 1020;
public static final int ARTL_ART_directive_124 = 1021;
public static final int ARTL_ART_directive_125 = 1022;
public static final int ARTL_ART_directive_126 = 1023;
public static final int ARTL_ART_directive_127 = 1024;
public static final int ARTL_ART_directive_128 = 1025;
public static final int ARTL_ART_directive_129 = 1026;
public static final int ARTL_ART_directive_130 = 1027;
public static final int ARTL_ART_directive_131 = 1028;
public static final int ARTL_ART_directive_132 = 1029;
public static final int ARTL_ART_directive_133 = 1030;
public static final int ARTL_ART_directive_134 = 1031;
public static final int ARTL_ART_directive_135 = 1032;
public static final int ARTL_ART_directive_136 = 1033;
public static final int ARTL_ART_directive_137 = 1034;
public static final int ARTL_ART_directive_138 = 1035;
public static final int ARTL_ART_directive_139 = 1036;
public static final int ARTL_ART_directive_140 = 1037;
public static final int ARTL_ART_directive_141 = 1038;
public static final int ARTL_ART_directive_142 = 1039;
public static final int ARTL_ART_directive_143 = 1040;
public static final int ARTL_ART_directive_144 = 1041;
public static final int ARTL_ART_directive_145 = 1042;
public static final int ARTL_ART_directive_146 = 1043;
public static final int ARTL_ART_directive_147 = 1044;
public static final int ARTL_ART_directive_148 = 1045;
public static final int ARTL_ART_directive_149 = 1046;
public static final int ARTL_ART_directive_150 = 1047;
public static final int ARTL_ART_directive_151 = 1048;
public static final int ARTL_ART_directive_152 = 1049;
public static final int ARTL_ART_directive_153 = 1050;
public static final int ARTL_ART_directive_154 = 1051;
public static final int ARTL_ART_directive_155 = 1052;
public static final int ARTL_ART_directive_156 = 1053;
public static final int ARTL_ART_directive_157 = 1054;
public static final int ARTL_ART_directive_158 = 1055;
public static final int ARTL_ART_directive_159 = 1056;
public static final int ARTL_ART_directive_160 = 1057;
public static final int ARTL_ART_directive_161 = 1058;
public static final int ARTL_ART_directive_162 = 1059;
public static final int ARTL_ART_directive_163 = 1060;
public static final int ARTL_ART_directive_164 = 1061;
public static final int ARTL_ART_directive_165 = 1062;
public static final int ARTL_ART_directive_166 = 1063;
public static final int ARTL_ART_directive_167 = 1064;
public static final int ARTL_ART_directive_168 = 1065;
public static final int ARTL_ART_directive_169 = 1066;
public static final int ARTL_ART_directive_170 = 1067;
public static final int ARTL_ART_directive_171 = 1068;
public static final int ARTL_ART_directive_172 = 1069;
public static final int ARTL_ART_directive_173 = 1070;
public static final int ARTL_ART_directive_174 = 1071;
public static final int ARTL_ART_directive_175 = 1072;
public static final int ARTL_ART_directive_176 = 1073;
public static final int ARTL_ART_directive_177 = 1074;
public static final int ARTL_ART_directive_178 = 1075;
public static final int ARTL_ART_directive_179 = 1076;
public static final int ARTL_ART_directive_180 = 1077;
public static final int ARTL_ART_directive_181 = 1078;
public static final int ARTL_ART_directive_182 = 1079;
public static final int ARTL_ART_directive_183 = 1080;
public static final int ARTL_ART_directive_184 = 1081;
public static final int ARTL_ART_directive_185 = 1082;
public static final int ARTL_ART_directive_186 = 1083;
public static final int ARTL_ART_directive_187 = 1084;
public static final int ARTL_ART_directive_188 = 1085;
public static final int ARTL_ART_directive_189 = 1086;
public static final int ARTL_ART_directive_190 = 1087;
public static final int ARTL_ART_directive_191 = 1088;
public static final int ARTL_ART_directive_192 = 1089;
public static final int ARTL_ART_directive_193 = 1090;
public static final int ARTL_ART_directive_194 = 1091;
public static final int ARTL_ART_directive_195 = 1092;
public static final int ARTL_ART_directive_196 = 1093;
public static final int ARTL_ART_directive_197 = 1094;
public static final int ARTL_ART_directive_198 = 1095;
public static final int ARTL_ART_directive_199 = 1096;
public static final int ARTL_ART_directive_200 = 1097;
public static final int ARTL_ART_directive_201 = 1098;
public static final int ARTL_ART_directive_202 = 1099;
public static final int ARTL_ART_directive_203 = 1100;
public static final int ARTL_ART_directive_204 = 1101;
public static final int ARTL_ART_directive_205 = 1102;
public static final int ARTL_ART_directive_206 = 1103;
public static final int ARTL_ART_directive_207 = 1104;
public static final int ARTL_ART_directive_208 = 1105;
public static final int ARTL_ART_directive_209 = 1106;
public static final int ARTL_ART_directive_210 = 1107;
public static final int ARTL_ART_directive_211 = 1108;
public static final int ARTL_ART_directive_212 = 1109;
public static final int ARTL_ART_directive_213 = 1110;
public static final int ARTL_ART_directive_214 = 1111;
public static final int ARTL_ART_directive_215 = 1112;
public static final int ARTL_ART_directive_216 = 1113;
public static final int ARTL_ART_directive_217 = 1114;
public static final int ARTL_ART_directive_218 = 1115;
public static final int ARTL_ART_directive_219 = 1116;
public static final int ARTL_ART_directive_220 = 1117;
public static final int ARTL_ART_directive_221 = 1118;
public static final int ARTL_ART_directive_222 = 1119;
public static final int ARTL_ART_directive_223 = 1120;
public static final int ARTL_ART_directive_224 = 1121;
public static final int ARTL_ART_directive_225 = 1122;
public static final int ARTL_ART_directive_226 = 1123;
public static final int ARTL_ART_directive_227 = 1124;
public static final int ARTL_ART_directive_228 = 1125;
public static final int ARTL_ART_directive_229 = 1126;
public static final int ARTL_ART_directive_230 = 1127;
public static final int ARTL_ART_directive_231 = 1128;
public static final int ARTL_ART_directive_232 = 1129;
public static final int ARTL_ART_directive_233 = 1130;
public static final int ARTL_ART_directive_234 = 1131;
public static final int ARTL_ART_directive_235 = 1132;
public static final int ARTL_ART_directive_236 = 1133;
public static final int ARTL_ART_directive_237 = 1134;
public static final int ARTL_ART_directive_238 = 1135;
public static final int ARTL_ART_directive_239 = 1136;
public static final int ARTL_ART_directive_240 = 1137;
public static final int ARTL_ART_directive_241 = 1138;
public static final int ARTL_ART_directive_242 = 1139;
public static final int ARTL_ART_directive_243 = 1140;
public static final int ARTL_ART_directive_244 = 1141;
public static final int ARTL_ART_directive_245 = 1142;
public static final int ARTL_ART_directive_246 = 1143;
public static final int ARTL_ART_directive_247 = 1144;
public static final int ARTL_ART_directive_248 = 1145;
public static final int ARTL_ART_directive_249 = 1146;
public static final int ARTL_ART_directive_250 = 1147;
public static final int ARTL_ART_directive_251 = 1148;
public static final int ARTL_ART_directive_252 = 1149;
public static final int ARTL_ART_directive_253 = 1150;
public static final int ARTL_ART_directive_254 = 1151;
public static final int ARTL_ART_directive_255 = 1152;
public static final int ARTL_ART_directive_256 = 1153;
public static final int ARTL_ART_directive_257 = 1154;
public static final int ARTL_ART_directive_258 = 1155;
public static final int ARTL_ART_directive_259 = 1156;
public static final int ARTL_ART_directive_260 = 1157;
public static final int ARTL_ART_directive_261 = 1158;
public static final int ARTL_ART_directive_262 = 1159;
public static final int ARTL_ART_directive_263 = 1160;
public static final int ARTL_ART_directive_264 = 1161;
public static final int ARTL_ART_directive_265 = 1162;
public static final int ARTL_ART_directive_266 = 1163;
public static final int ARTL_ART_directive_267 = 1164;
public static final int ARTL_ART_directive_268 = 1165;
public static final int ARTL_ART_directive_269 = 1166;
public static final int ARTL_ART_directive_270 = 1167;
public static final int ARTL_ART_directive_271 = 1168;
public static final int ARTL_ART_directive_272 = 1169;
public static final int ARTL_ART_directive_273 = 1170;
public static final int ARTL_ART_directive_274 = 1171;
public static final int ARTL_ART_directive_275 = 1172;
public static final int ARTL_ART_directive_276 = 1173;
public static final int ARTL_ART_directive_277 = 1174;
public static final int ARTL_ART_directive_278 = 1175;
public static final int ARTL_ART_directive_279 = 1176;
public static final int ARTL_ART_directive_280 = 1177;
public static final int ARTL_ART_directive_281 = 1178;
public static final int ARTL_ART_directive_282 = 1179;
public static final int ARTL_ART_directive_283 = 1180;
public static final int ARTL_ART_directive_284 = 1181;
public static final int ARTL_ART_directive_285 = 1182;
public static final int ARTL_ART_directive_286 = 1183;
public static final int ARTL_ART_directive_287 = 1184;
public static final int ARTL_ART_directive_288 = 1185;
public static final int ARTL_ART_directive_289 = 1186;
public static final int ARTL_ART_directive_290 = 1187;
public static final int ARTL_ART_directive_291 = 1188;
public static final int ARTL_ART_directive_292 = 1189;
public static final int ARTL_ART_directive_293 = 1190;
public static final int ARTL_ART_directive_294 = 1191;
public static final int ARTL_ART_directive_295 = 1192;
public static final int ARTL_ART_directive_296 = 1193;
public static final int ARTL_ART_directive_297 = 1194;
public static final int ARTL_ART_directive_298 = 1195;
public static final int ARTL_ART_directive_299 = 1196;
public static final int ARTL_ART_directive_300 = 1197;
public static final int ARTL_ART_directive_301 = 1198;
public static final int ARTL_ART_directive_302 = 1199;
public static final int ARTL_ART_directive_303 = 1200;
public static final int ARTL_ART_directive_304 = 1201;
public static final int ARTL_ART_directive_305 = 1202;
public static final int ARTL_ART_directive_306 = 1203;
public static final int ARTL_ART_directive_307 = 1204;
public static final int ARTL_ART_directive_308 = 1205;
public static final int ARTL_ART_directive_309 = 1206;
public static final int ARTL_ART_directive_310 = 1207;
public static final int ARTL_ART_directive_311 = 1208;
public static final int ARTL_ART_directive_312 = 1209;
public static final int ARTL_ART_directive_313 = 1210;
public static final int ARTL_ART_directive_314 = 1211;
public static final int ARTL_ART_directive_315 = 1212;
public static final int ARTL_ART_directive_316 = 1213;
public static final int ARTL_ART_directive_317 = 1214;
public static final int ARTL_ART_directive_318 = 1215;
public static final int ARTL_ART_directive_319 = 1216;
public static final int ARTL_ART_directive_320 = 1217;
public static final int ARTL_ART_directive_321 = 1218;
public static final int ARTL_ART_directive_322 = 1219;
public static final int ARTL_ART_directive_323 = 1220;
public static final int ARTL_ART_directive_324 = 1221;
public static final int ARTL_ART_directive_325 = 1222;
public static final int ARTL_ART_directive_326 = 1223;
public static final int ARTL_ART_directive_327 = 1224;
public static final int ARTL_ART_directive_328 = 1225;
public static final int ARTL_ART_directive_329 = 1226;
public static final int ARTL_ART_directive_330 = 1227;
public static final int ARTL_ART_directive_331 = 1228;
public static final int ARTL_ART_directive_332 = 1229;
public static final int ARTL_ART_directive_333 = 1230;
public static final int ARTL_ART_directive_334 = 1231;
public static final int ARTL_ART_directive_335 = 1232;
public static final int ARTL_ART_directive_336 = 1233;
public static final int ARTL_ART_directive_337 = 1234;
public static final int ARTL_ART_directive_338 = 1235;
public static final int ARTL_ART_directive_339 = 1236;
public static final int ARTL_ART_directive_340 = 1237;
public static final int ARTL_ART_directive_341 = 1238;
public static final int ARTL_ART_directive_342 = 1239;
public static final int ARTL_ART_directive_343 = 1240;
public static final int ARTL_ART_directive_344 = 1241;
public static final int ARTL_ART_directive_345 = 1242;
public static final int ARTL_ART_directive_346 = 1243;
public static final int ARTL_ART_directive_347 = 1244;
public static final int ARTL_ART_directive_348 = 1245;
public static final int ARTL_ART_directive_349 = 1246;
public static final int ARTL_ART_directive_350 = 1247;
public static final int ARTL_ART_directive_351 = 1248;
public static final int ARTL_ART_directive_352 = 1249;
public static final int ARTL_ART_directive_353 = 1250;
public static final int ARTL_ART_directive_354 = 1251;
public static final int ARTL_ART_directive_355 = 1252;
public static final int ARTL_ART_directive_356 = 1253;
public static final int ARTL_ART_directive_357 = 1254;
public static final int ARTL_ART_directive_358 = 1255;
public static final int ARTL_ART_directive_359 = 1256;
public static final int ARTL_ART_directive_360 = 1257;
public static final int ARTL_ART_directive_361 = 1258;
public static final int ARTL_ART_directive_362 = 1259;
public static final int ARTL_ART_directive_363 = 1260;
public static final int ARTL_ART_directive_364 = 1261;
public static final int ARTL_ART_directive_365 = 1262;
public static final int ARTL_ART_directive_366 = 1263;
public static final int ARTL_ART_directive_367 = 1264;
public static final int ARTL_ART_directive_368 = 1265;
public static final int ARTL_ART_directive_369 = 1266;
public static final int ARTL_ART_directive_370 = 1267;
public static final int ARTL_ART_directive_371 = 1268;
public static final int ARTL_ART_directive_372 = 1269;
public static final int ARTL_ART_directive_373 = 1270;
public static final int ARTL_ART_directive_374 = 1271;
public static final int ARTL_ART_directive_375 = 1272;
public static final int ARTL_ART_directive_376 = 1273;
public static final int ARTL_ART_directive_377 = 1274;
public static final int ARTL_ART_directive_378 = 1275;
public static final int ARTL_ART_directive_379 = 1276;
public static final int ARTL_ART_directive_380 = 1277;
public static final int ARTL_ART_directive_381 = 1278;
public static final int ARTL_ART_directive_382 = 1279;
public static final int ARTL_ART_directive_383 = 1280;
public static final int ARTL_ART_directive_384 = 1281;
public static final int ARTL_ART_directive_385 = 1282;
public static final int ARTL_ART_directive_386 = 1283;
public static final int ARTL_ART_directive_387 = 1284;
public static final int ARTL_ART_directive_388 = 1285;
public static final int ARTL_ART_directive_389 = 1286;
public static final int ARTL_ART_directive_390 = 1287;
public static final int ARTL_ART_directive_391 = 1288;
public static final int ARTL_ART_directive_392 = 1289;
public static final int ARTL_ART_directive_393 = 1290;
public static final int ARTL_ART_directive_394 = 1291;
public static final int ARTL_ART_directive_395 = 1292;
public static final int ARTL_ART_directive_396 = 1293;
public static final int ARTL_ART_directive_397 = 1294;
public static final int ARTL_ART_directive_398 = 1295;
public static final int ARTL_ART_directive_399 = 1296;
public static final int ARTL_ART_directive_400 = 1297;
public static final int ARTL_ART_directive_401 = 1298;
public static final int ARTL_ART_directive_402 = 1299;
public static final int ARTL_ART_directive_403 = 1300;
public static final int ARTL_ART_directive_404 = 1301;
public static final int ARTL_ART_directive_405 = 1302;
public static final int ARTL_ART_directive_406 = 1303;
public static final int ARTL_ART_directive_407 = 1304;
public static final int ARTL_ART_directive_408 = 1305;
public static final int ARTL_ART_directive_409 = 1306;
public static final int ARTL_ART_directive_410 = 1307;
public static final int ARTL_ART_directive_411 = 1308;
public static final int ARTL_ART_directive_412 = 1309;
public static final int ARTL_ART_directive_413 = 1310;
public static final int ARTL_ART_directive_414 = 1311;
public static final int ARTL_ART_directive_415 = 1312;
public static final int ARTL_ART_directive_416 = 1313;
public static final int ARTL_ART_directive_417 = 1314;
public static final int ARTL_ART_directive_418 = 1315;
public static final int ARTL_ART_directive_419 = 1316;
public static final int ARTL_ART_directive_420 = 1317;
public static final int ARTL_ART_directive_421 = 1318;
public static final int ARTL_ART_directive_422 = 1319;
public static final int ARTL_ART_directive_423 = 1320;
public static final int ARTL_ART_directive_424 = 1321;
public static final int ARTL_ART_directive_425 = 1322;
public static final int ARTL_ART_directive_426 = 1323;
public static final int ARTL_ART_directive_427 = 1324;
public static final int ARTL_ART_directive_428 = 1325;
public static final int ARTL_ART_directive_429 = 1326;
public static final int ARTL_ART_directive_430 = 1327;
public static final int ARTL_ART_directive_431 = 1328;
public static final int ARTL_ART_directive_432 = 1329;
public static final int ARTL_ART_directive_433 = 1330;
public static final int ARTL_ART_directive_434 = 1331;
public static final int ARTL_ART_directive_435 = 1332;
public static final int ARTL_ART_directive_436 = 1333;
public static final int ARTL_ART_directive_437 = 1334;
public static final int ARTL_ART_directive_438 = 1335;
public static final int ARTL_ART_directive_439 = 1336;
public static final int ARTL_ART_directive_440 = 1337;
public static final int ARTL_ART_directive_441 = 1338;
public static final int ARTL_ART_directive_442 = 1339;
public static final int ARTL_ART_directive_443 = 1340;
public static final int ARTL_ART_directive_444 = 1341;
public static final int ARTL_ART_directive_445 = 1342;
public static final int ARTL_ART_directive_446 = 1343;
public static final int ARTL_ART_directive_447 = 1344;
public static final int ARTL_ART_directive_448 = 1345;
public static final int ARTL_ART_directive_449 = 1346;
public static final int ARTL_ART_directive_450 = 1347;
public static final int ARTL_ART_directive_451 = 1348;
public static final int ARTL_ART_directive_452 = 1349;
public static final int ARTL_ART_directive_453 = 1350;
public static final int ARTL_ART_directive_454 = 1351;
public static final int ARTL_ART_directive_455 = 1352;
public static final int ARTL_ART_directive_456 = 1353;
public static final int ARTL_ART_directive_457 = 1354;
public static final int ARTL_ART_directive_458 = 1355;
public static final int ARTL_ART_directive_459 = 1356;
public static final int ARTL_ART_directive_460 = 1357;
public static final int ARTL_ART_directive_461 = 1358;
public static final int ARTL_ART_directive_462 = 1359;
public static final int ARTL_ART_directive_463 = 1360;
public static final int ARTL_ART_directive_464 = 1361;
public static final int ARTL_ART_directive_465 = 1362;
public static final int ARTL_ART_directive_466 = 1363;
public static final int ARTL_ART_directive_467 = 1364;
public static final int ARTL_ART_directive_468 = 1365;
public static final int ARTL_ART_directive_469 = 1366;
public static final int ARTL_ART_directive_470 = 1367;
public static final int ARTL_ART_directive_471 = 1368;
public static final int ARTL_ART_directive_472 = 1369;
public static final int ARTL_ART_directive_473 = 1370;
public static final int ARTL_ART_directive_474 = 1371;
public static final int ARTL_ART_directive_475 = 1372;
public static final int ARTL_ART_directive_476 = 1373;
public static final int ARTL_ART_directive_477 = 1374;
public static final int ARTL_ART_directive_478 = 1375;
public static final int ARTL_ART_directive_479 = 1376;
public static final int ARTL_ART_directive_480 = 1377;
public static final int ARTL_ART_directive_481 = 1378;
public static final int ARTL_ART_directive_482 = 1379;
public static final int ARTL_ART_directive_483 = 1380;
public static final int ARTL_ART_directive_484 = 1381;
public static final int ARTL_ART_directive_485 = 1382;
public static final int ARTL_ART_directive_486 = 1383;
public static final int ARTL_ART_directive_487 = 1384;
public static final int ARTL_ART_directive_488 = 1385;
public static final int ARTL_ART_directive_489 = 1386;
public static final int ARTL_ART_directive_490 = 1387;
public static final int ARTL_ART_directive_491 = 1388;
public static final int ARTL_ART_directive_492 = 1389;
public static final int ARTL_ART_directive_493 = 1390;
public static final int ARTL_ART_directive_494 = 1391;
public static final int ARTL_ART_directive_495 = 1392;
public static final int ARTL_ART_directive_496 = 1393;
public static final int ARTL_ART_directive_497 = 1394;
public static final int ARTL_ART_directive_498 = 1395;
public static final int ARTL_ART_directive_499 = 1396;
public static final int ARTL_ART_directive_500 = 1397;
public static final int ARTL_ART_directive_501 = 1398;
public static final int ARTL_ART_directive_502 = 1399;
public static final int ARTL_ART_directive_503 = 1400;
public static final int ARTL_ART_directive_504 = 1401;
public static final int ARTL_ART_directive_505 = 1402;
public static final int ARTL_ART_directive_506 = 1403;
public static final int ARTL_ART_directive_507 = 1404;
public static final int ARTL_ART_directive_508 = 1405;
public static final int ARTL_ART_directive_509 = 1406;
public static final int ARTL_ART_directive_510 = 1407;
public static final int ARTL_ART_directive_511 = 1408;
public static final int ARTL_ART_directive_512 = 1409;
public static final int ARTL_ART_directive_513 = 1410;
public static final int ARTL_ART_directive_514 = 1411;
public static final int ARTL_ART_directive_515 = 1412;
public static final int ARTL_ART_directive_516 = 1413;
public static final int ARTL_ART_directive_517 = 1414;
public static final int ARTL_ART_directive_518 = 1415;
public static final int ARTL_ART_directive_519 = 1416;
public static final int ARTL_ART_directive_520 = 1417;
public static final int ARTL_ART_directive_521 = 1418;
public static final int ARTL_ART_directive_522 = 1419;
public static final int ARTL_ART_directive_523 = 1420;
public static final int ARTL_ART_directive_524 = 1421;
public static final int ARTL_ART_directive_525 = 1422;
public static final int ARTL_ART_directive_526 = 1423;
public static final int ARTL_ART_directive_527 = 1424;
public static final int ARTL_ART_directive_528 = 1425;
public static final int ARTL_ART_directive_529 = 1426;
public static final int ARTL_ART_directive_530 = 1427;
public static final int ARTL_ART_directive_531 = 1428;
public static final int ARTL_ART_directive_532 = 1429;
public static final int ARTL_ART_directive_533 = 1430;
public static final int ARTL_ART_directive_534 = 1431;
public static final int ARTL_ART_directive_535 = 1432;
public static final int ARTL_ART_directive_536 = 1433;
public static final int ARTL_ART_directive_537 = 1434;
public static final int ARTL_ART_directive_538 = 1435;
public static final int ARTL_ART_directive_539 = 1436;
public static final int ARTL_ART_directive_540 = 1437;
public static final int ARTL_ART_directive_541 = 1438;
public static final int ARTL_ART_directive_542 = 1439;
public static final int ARTL_ART_directive_543 = 1440;
public static final int ARTL_ART_directive_544 = 1441;
public static final int ARTL_ART_directive_545 = 1442;
public static final int ARTL_ART_directive_546 = 1443;
public static final int ARTL_ART_directive_547 = 1444;
public static final int ARTL_ART_directive_548 = 1445;
public static final int ARTL_ART_directive_549 = 1446;
public static final int ARTL_ART_directive_550 = 1447;
public static final int ARTL_ART_directive_551 = 1448;
public static final int ARTL_ART_directive_552 = 1449;
public static final int ARTL_ART_directive_553 = 1450;
public static final int ARTL_ART_directive_554 = 1451;
public static final int ARTL_ART_directive_555 = 1452;
public static final int ARTL_ART_directive_556 = 1453;
public static final int ARTL_ART_directive_557 = 1454;
public static final int ARTL_ART_directive_558 = 1455;
public static final int ARTL_ART_directive_559 = 1456;
public static final int ARTL_ART_directive_560 = 1457;
public static final int ARTL_ART_directive_561 = 1458;
public static final int ARTL_ART_directive_562 = 1459;
public static final int ARTL_ART_directive_563 = 1460;
public static final int ARTL_ART_directive_564 = 1461;
public static final int ARTL_ART_directive_565 = 1462;
public static final int ARTL_ART_directive_566 = 1463;
public static final int ARTL_ART_directive_567 = 1464;
public static final int ARTL_ART_directive_568 = 1465;
public static final int ARTL_ART_directive_569 = 1466;
public static final int ARTL_ART_directive_570 = 1467;
public static final int ARTL_ART_directive_571 = 1468;
public static final int ARTL_ART_directive_572 = 1469;
public static final int ARTL_ART_directive_573 = 1470;
public static final int ARTL_ART_directive_574 = 1471;
public static final int ARTL_ART_directive_575 = 1472;
public static final int ARTL_ART_directive_576 = 1473;
public static final int ARTL_ART_directive_577 = 1474;
public static final int ARTL_ART_directive_578 = 1475;
public static final int ARTL_ART_directive_579 = 1476;
public static final int ARTL_ART_directive_580 = 1477;
public static final int ARTL_ART_directive_581 = 1478;
public static final int ARTL_ART_directive_582 = 1479;
public static final int ARTL_ART_directive_583 = 1480;
public static final int ARTL_ART_directive_584 = 1481;
public static final int ARTL_ART_directive_585 = 1482;
public static final int ARTL_ART_directive_586 = 1483;
public static final int ARTL_ART_directive_587 = 1484;
public static final int ARTL_ART_directive_588 = 1485;
public static final int ARTL_ART_directive_589 = 1486;
public static final int ARTL_ART_directive_590 = 1487;
public static final int ARTL_ART_directive_591 = 1488;
public static final int ARTL_ART_directive_592 = 1489;
public static final int ARTL_ART_directive_593 = 1490;
public static final int ARTL_ART_directive_594 = 1491;
public static final int ARTL_ART_directive_595 = 1492;
public static final int ARTL_ART_directive_596 = 1493;
public static final int ARTL_ART_directive_597 = 1494;
public static final int ARTL_ART_directive_598 = 1495;
public static final int ARTL_ART_directive_599 = 1496;
public static final int ARTL_ART_directive_600 = 1497;
public static final int ARTL_ART_directive_601 = 1498;
public static final int ARTL_ART_directive_602 = 1499;
public static final int ARTL_ART_directive_603 = 1500;
public static final int ARTL_ART_directive_604 = 1501;
public static final int ARTL_ART_directive_605 = 1502;
public static final int ARTL_ART_directive_606 = 1503;
public static final int ARTL_ART_directive_607 = 1504;
public static final int ARTL_ART_directive_608 = 1505;
public static final int ARTL_ART_directive_609 = 1506;
public static final int ARTL_ART_directive_610 = 1507;
public static final int ARTL_ART_directive_611 = 1508;
public static final int ARTL_ART_directive_612 = 1509;
public static final int ARTL_ART_directive_613 = 1510;
public static final int ARTL_ART_directive_614 = 1511;
public static final int ARTL_ART_directive_615 = 1512;
public static final int ARTL_ART_directive_616 = 1513;
public static final int ARTL_ART_directive_617 = 1514;
public static final int ARTL_ART_directive_618 = 1515;
public static final int ARTL_ART_directive_619 = 1516;
public static final int ARTL_ART_directive_620 = 1517;
public static final int ARTL_ART_directive_621 = 1518;
public static final int ARTL_ART_directive_622 = 1519;
public static final int ARTL_ART_directive_623 = 1520;
public static final int ARTL_ART_directive_624 = 1521;
public static final int ARTL_ART_directive_625 = 1522;
public static final int ARTL_ART_directive_626 = 1523;
public static final int ARTL_ART_idART_1419 = 1524;
public static final int ARTL_ART_idART_1420 = 1525;
public static final int ARTL_ART_idART_1421 = 1526;
public static final int ARTL_ART_idART_1422 = 1527;
public static final int ARTL_ART_idART_1423 = 1528;
public static final int ARTL_ART_idART_1424 = 1529;
public static final int ARTL_ART_idART_1425 = 1530;
public static final int ARTL_ART_idART_1426 = 1531;
public static final int ARTL_ART_idART_1427 = 1532;
public static final int ARTL_ART_idART_1428 = 1533;
public static final int ARTL_ART_idJAVA_1439 = 1534;
public static final int ARTL_ART_idJAVA_1440 = 1535;
public static final int ARTL_ART_idJAVA_1441 = 1536;
public static final int ARTL_ART_idJAVA_1442 = 1537;
public static final int ARTL_ART_idJAVA_1443 = 1538;
public static final int ARTL_ART_idJAVA_1444 = 1539;
public static final int ARTL_ART_idJAVA_1445 = 1540;
public static final int ARTL_ART_idJAVA_1446 = 1541;
public static final int ARTL_ART_idJAVA_1447 = 1542;
public static final int ARTL_ART_idJAVA_1448 = 1543;
public static final int ARTL_ART_idRAW_1429 = 1544;
public static final int ARTL_ART_idRAW_1430 = 1545;
public static final int ARTL_ART_idRAW_1431 = 1546;
public static final int ARTL_ART_idRAW_1432 = 1547;
public static final int ARTL_ART_idRAW_1433 = 1548;
public static final int ARTL_ART_idRAW_1434 = 1549;
public static final int ARTL_ART_idRAW_1435 = 1550;
public static final int ARTL_ART_idRAW_1436 = 1551;
public static final int ARTL_ART_idRAW_1437 = 1552;
public static final int ARTL_ART_idRAW_1438 = 1553;
public static final int ARTL_ART_latexDeclaration_1541 = 1554;
public static final int ARTL_ART_latexDeclaration_1542 = 1555;
public static final int ARTL_ART_latexDeclaration_1543 = 1556;
public static final int ARTL_ART_latexDeclaration_1544 = 1557;
public static final int ARTL_ART_latexDeclaration_1545 = 1558;
public static final int ARTL_ART_latexDeclaration_1546 = 1559;
public static final int ARTL_ART_latexDeclaration_1547 = 1560;
public static final int ARTL_ART_latexDeclaration_1548 = 1561;
public static final int ARTL_ART_latexDeclarations_1485 = 1562;
public static final int ARTL_ART_latexDeclarations_1486 = 1563;
public static final int ARTL_ART_latexDeclarations_1487 = 1564;
public static final int ARTL_ART_latexDeclarations_1488 = 1565;
public static final int ARTL_ART_latexDeclarations_1489 = 1566;
public static final int ARTL_ART_latexDeclarations_1490 = 1567;
public static final int ARTL_ART_latexDeclarations_1491 = 1568;
public static final int ARTL_ART_latexDeclarations_1492 = 1569;
public static final int ARTL_ART_latexDeclarations_1493 = 1570;
public static final int ARTL_ART_latexDeclarations_1494 = 1571;
public static final int ARTL_ART_latexDeclarations_1495 = 1572;
public static final int ARTL_ART_latexDeclarations_1496 = 1573;
public static final int ARTL_ART_paraterminalisers_1473 = 1574;
public static final int ARTL_ART_paraterminalisers_1474 = 1575;
public static final int ARTL_ART_paraterminalisers_1475 = 1576;
public static final int ARTL_ART_paraterminalisers_1476 = 1577;
public static final int ARTL_ART_paraterminalisers_1477 = 1578;
public static final int ARTL_ART_paraterminalisers_1478 = 1579;
public static final int ARTL_ART_paraterminalisers_1479 = 1580;
public static final int ARTL_ART_paraterminalisers_1480 = 1581;
public static final int ARTL_ART_paraterminalisers_1481 = 1582;
public static final int ARTL_ART_paraterminalisers_1482 = 1583;
public static final int ARTL_ART_paraterminalisers_1483 = 1584;
public static final int ARTL_ART_paraterminalisers_1484 = 1585;
public static final int ARTL_ART_text_1 = 1586;
public static final int ARTL_ART_text_2 = 1587;
public static final int ARTL_ART_text_3 = 1588;
public static final int ARTL_ART_text_4 = 1589;
public static final int ARTL_ART_text_5 = 1590;
public static final int ARTL_ART_text_6 = 1591;
public static final int ARTL_ART_text_7 = 1592;
public static final int ARTL_ART_text_8 = 1593;
public static final int ARTL_ART_text_9 = 1594;
public static final int ARTL_ART_text_10 = 1595;
public static final int ARTL_ART_textElement_11 = 1596;
public static final int ARTL_ART_textElement_12 = 1597;
public static final int ARTL_ART_textElement_13 = 1598;
public static final int ARTL_ART_textElement_14 = 1599;
public static final int ARTL_ART_textElement_15 = 1600;
public static final int ARTL_ART_textElement_16 = 1601;
public static final int ARTL_ART_textElement_17 = 1602;
public static final int ARTL_ART_textElement_18 = 1603;
public static final int ARTL_ART_textElement_19 = 1604;
public static final int ARTL_ART_textElement_20 = 1605;
public static final int ARTL_ART_textElement_21 = 1606;
public static final int ARTL_ART_textElement_22 = 1607;
public static final int ARTL_ART_textElement_23 = 1608;
public static final int ARTL_ART_textElement_24 = 1609;
public static final int ARTL_ART_textElement_25 = 1610;
public static final int ARTL_ART_textElement_26 = 1611;
public static final int ARTL_ART_tr_1063 = 1612;
public static final int ARTL_ART_tr_1064 = 1613;
public static final int ARTL_ART_tr_1065 = 1614;
public static final int ARTL_ART_tr_1066 = 1615;
public static final int ARTL_ART_tr_1067 = 1616;
public static final int ARTL_ART_tr_1068 = 1617;
public static final int ARTL_ART_tr_1069 = 1618;
public static final int ARTL_ART_tr_1070 = 1619;
public static final int ARTL_ART_tr_1071 = 1620;
public static final int ARTL_ART_tr_1072 = 1621;
public static final int ARTL_ART_tr_1073 = 1622;
public static final int ARTL_ART_tr_1074 = 1623;
public static final int ARTL_ART_tr_1075 = 1624;
public static final int ARTL_ART_tr_1076 = 1625;
public static final int ARTL_ART_tr_1077 = 1626;
public static final int ARTL_ART_tr_1078 = 1627;
public static final int ARTL_ART_tr_1079 = 1628;
public static final int ARTL_ART_tr_1080 = 1629;
public static final int ARTL_ART_trConfiguration_1125 = 1630;
public static final int ARTL_ART_trConfiguration_1126 = 1631;
public static final int ARTL_ART_trConfiguration_1127 = 1632;
public static final int ARTL_ART_trConfiguration_1128 = 1633;
public static final int ARTL_ART_trConfiguration_1129 = 1634;
public static final int ARTL_ART_trConfiguration_1130 = 1635;
public static final int ARTL_ART_trConfiguration_1131 = 1636;
public static final int ARTL_ART_trConfiguration_1132 = 1637;
public static final int ARTL_ART_trConfiguration_1133 = 1638;
public static final int ARTL_ART_trConfiguration_1134 = 1639;
public static final int ARTL_ART_trConfiguration_1135 = 1640;
public static final int ARTL_ART_trConfiguration_1136 = 1641;
public static final int ARTL_ART_trConfiguration_1137 = 1642;
public static final int ARTL_ART_trConfiguration_1138 = 1643;
public static final int ARTL_ART_trConfiguration_1139 = 1644;
public static final int ARTL_ART_trConfiguration_1140 = 1645;
public static final int ARTL_ART_trEntities_1497 = 1646;
public static final int ARTL_ART_trEntities_1498 = 1647;
public static final int ARTL_ART_trEntities_1499 = 1648;
public static final int ARTL_ART_trEntities_1500 = 1649;
public static final int ARTL_ART_trEntities_1501 = 1650;
public static final int ARTL_ART_trEntities_1502 = 1651;
public static final int ARTL_ART_trEntities_1503 = 1652;
public static final int ARTL_ART_trEntities_1504 = 1653;
public static final int ARTL_ART_trEntities_1505 = 1654;
public static final int ARTL_ART_trEntities_1506 = 1655;
public static final int ARTL_ART_trEntities_1507 = 1656;
public static final int ARTL_ART_trEntities_1508 = 1657;
public static final int ARTL_ART_trEntities_1509 = 1658;
public static final int ARTL_ART_trEntities_1510 = 1659;
public static final int ARTL_ART_trEntities_1511 = 1660;
public static final int ARTL_ART_trEntities_1512 = 1661;
public static final int ARTL_ART_trEntities_1513 = 1662;
public static final int ARTL_ART_trEntities_1514 = 1663;
public static final int ARTL_ART_trEntities_1515 = 1664;
public static final int ARTL_ART_trEntities_1516 = 1665;
public static final int ARTL_ART_trEntities_1517 = 1666;
public static final int ARTL_ART_trEntities_1518 = 1667;
public static final int ARTL_ART_trEntities_1519 = 1668;
public static final int ARTL_ART_trEntities_1520 = 1669;
public static final int ARTL_ART_trEntities_1521 = 1670;
public static final int ARTL_ART_trEntities_1522 = 1671;
public static final int ARTL_ART_trEntities_1523 = 1672;
public static final int ARTL_ART_trEntities_1524 = 1673;
public static final int ARTL_ART_trEntities_1525 = 1674;
public static final int ARTL_ART_trEntities_1526 = 1675;
public static final int ARTL_ART_trEntities_1527 = 1676;
public static final int ARTL_ART_trEntities_1528 = 1677;
public static final int ARTL_ART_trEntityKind_1573 = 1678;
public static final int ARTL_ART_trEntityKind_1574 = 1679;
public static final int ARTL_ART_trEntityKind_1575 = 1680;
public static final int ARTL_ART_trEntityKind_1576 = 1681;
public static final int ARTL_ART_trEntityKind_1577 = 1682;
public static final int ARTL_ART_trEntityKind_1578 = 1683;
public static final int ARTL_ART_trEntityKind_1579 = 1684;
public static final int ARTL_ART_trEntityKind_1580 = 1685;
public static final int ARTL_ART_trEntityKind_1581 = 1686;
public static final int ARTL_ART_trEntityKind_1582 = 1687;
public static final int ARTL_ART_trEntityKind_1583 = 1688;
public static final int ARTL_ART_trEntityKind_1584 = 1689;
public static final int ARTL_ART_trEntityKind_1585 = 1690;
public static final int ARTL_ART_trEntityKind_1586 = 1691;
public static final int ARTL_ART_trEntityKind_1587 = 1692;
public static final int ARTL_ART_trEntityKind_1588 = 1693;
public static final int ARTL_ART_trEntityKind_1589 = 1694;
public static final int ARTL_ART_trEntityKind_1590 = 1695;
public static final int ARTL_ART_trEntityKind_1591 = 1696;
public static final int ARTL_ART_trEntityKind_1592 = 1697;
public static final int ARTL_ART_trEntityKind_1593 = 1698;
public static final int ARTL_ART_trEntityKind_1594 = 1699;
public static final int ARTL_ART_trEntityKind_1595 = 1700;
public static final int ARTL_ART_trEntityKind_1596 = 1701;
public static final int ARTL_ART_trEntityReferences_1205 = 1702;
public static final int ARTL_ART_trEntityReferences_1206 = 1703;
public static final int ARTL_ART_trEntityReferences_1207 = 1704;
public static final int ARTL_ART_trEntityReferences_1208 = 1705;
public static final int ARTL_ART_trEntityReferences_1209 = 1706;
public static final int ARTL_ART_trEntityReferences_1210 = 1707;
public static final int ARTL_ART_trEntityReferences_1211 = 1708;
public static final int ARTL_ART_trEntityReferences_1212 = 1709;
public static final int ARTL_ART_trEntityReferences_1213 = 1710;
public static final int ARTL_ART_trEntityReferences_1214 = 1711;
public static final int ARTL_ART_trEntityReferences_1215 = 1712;
public static final int ARTL_ART_trEntityReferences_1216 = 1713;
public static final int ARTL_ART_trEntityReferences_1217 = 1714;
public static final int ARTL_ART_trEntityReferences_1218 = 1715;
public static final int ARTL_ART_trEntityReferences_1219 = 1716;
public static final int ARTL_ART_trEntityReferences_1220 = 1717;
public static final int ARTL_ART_trEntityReferences_1221 = 1718;
public static final int ARTL_ART_trEntityReferences_1222 = 1719;
public static final int ARTL_ART_trEntityReferences_1223 = 1720;
public static final int ARTL_ART_trEntityReferences_1224 = 1721;
public static final int ARTL_ART_trEquations_1105 = 1722;
public static final int ARTL_ART_trEquations_1106 = 1723;
public static final int ARTL_ART_trEquations_1107 = 1724;
public static final int ARTL_ART_trEquations_1108 = 1725;
public static final int ARTL_ART_trEquations_1109 = 1726;
public static final int ARTL_ART_trEquations_1110 = 1727;
public static final int ARTL_ART_trEquations_1111 = 1728;
public static final int ARTL_ART_trEquations_1112 = 1729;
public static final int ARTL_ART_trEquations_1113 = 1730;
public static final int ARTL_ART_trEquations_1114 = 1731;
public static final int ARTL_ART_trEquations_1115 = 1732;
public static final int ARTL_ART_trEquations_1116 = 1733;
public static final int ARTL_ART_trLabel_1047 = 1734;
public static final int ARTL_ART_trLabel_1048 = 1735;
public static final int ARTL_ART_trLabel_1049 = 1736;
public static final int ARTL_ART_trLabel_1050 = 1737;
public static final int ARTL_ART_trLabel_1051 = 1738;
public static final int ARTL_ART_trLabel_1052 = 1739;
public static final int ARTL_ART_trLabel_1053 = 1740;
public static final int ARTL_ART_trLabel_1054 = 1741;
public static final int ARTL_ART_trLabel_1055 = 1742;
public static final int ARTL_ART_trLabel_1056 = 1743;
public static final int ARTL_ART_trLabel_1057 = 1744;
public static final int ARTL_ART_trLabel_1058 = 1745;
public static final int ARTL_ART_trLabel_1059 = 1746;
public static final int ARTL_ART_trLabel_1060 = 1747;
public static final int ARTL_ART_trLabel_1061 = 1748;
public static final int ARTL_ART_trLabel_1062 = 1749;
public static final int ARTL_ART_trMatch_1117 = 1750;
public static final int ARTL_ART_trMatch_1118 = 1751;
public static final int ARTL_ART_trMatch_1119 = 1752;
public static final int ARTL_ART_trMatch_1120 = 1753;
public static final int ARTL_ART_trMatch_1121 = 1754;
public static final int ARTL_ART_trMatch_1122 = 1755;
public static final int ARTL_ART_trMatch_1123 = 1756;
public static final int ARTL_ART_trMatch_1124 = 1757;
public static final int ARTL_ART_trNamedTerm_1229 = 1758;
public static final int ARTL_ART_trNamedTerm_1230 = 1759;
public static final int ARTL_ART_trNamedTerm_1231 = 1760;
public static final int ARTL_ART_trNamedTerm_1232 = 1761;
public static final int ARTL_ART_trNamedTerm_1233 = 1762;
public static final int ARTL_ART_trNamedTerm_1234 = 1763;
public static final int ARTL_ART_trNamedTerm_1235 = 1764;
public static final int ARTL_ART_trNamedTerm_1236 = 1765;
public static final int ARTL_ART_trPremises_1081 = 1766;
public static final int ARTL_ART_trPremises_1082 = 1767;
public static final int ARTL_ART_trPremises_1083 = 1768;
public static final int ARTL_ART_trPremises_1084 = 1769;
public static final int ARTL_ART_trPremises_1085 = 1770;
public static final int ARTL_ART_trPremises_1086 = 1771;
public static final int ARTL_ART_trPremises_1087 = 1772;
public static final int ARTL_ART_trPremises_1088 = 1773;
public static final int ARTL_ART_trPremises_1089 = 1774;
public static final int ARTL_ART_trPremises_1090 = 1775;
public static final int ARTL_ART_trPremises_1091 = 1776;
public static final int ARTL_ART_trPremises_1092 = 1777;
public static final int ARTL_ART_trPremises_1093 = 1778;
public static final int ARTL_ART_trPremises_1094 = 1779;
public static final int ARTL_ART_trPremises_1095 = 1780;
public static final int ARTL_ART_trPremises_1096 = 1781;
public static final int ARTL_ART_trPrimaryTerm_1201 = 1782;
public static final int ARTL_ART_trPrimaryTerm_1202 = 1783;
public static final int ARTL_ART_trPrimaryTerm_1203 = 1784;
public static final int ARTL_ART_trPrimaryTerm_1204 = 1785;
public static final int ARTL_ART_trRule_35 = 1786;
public static final int ARTL_ART_trRule_36 = 1787;
public static final int ARTL_ART_trRule_37 = 1788;
public static final int ARTL_ART_trRule_38 = 1789;
public static final int ARTL_ART_trRule_39 = 1790;
public static final int ARTL_ART_trRule_40 = 1791;
public static final int ARTL_ART_trSubterms_1265 = 1792;
public static final int ARTL_ART_trSubterms_1266 = 1793;
public static final int ARTL_ART_trSubterms_1267 = 1794;
public static final int ARTL_ART_trSubterms_1268 = 1795;
public static final int ARTL_ART_trSubterms_1269 = 1796;
public static final int ARTL_ART_trSubterms_1270 = 1797;
public static final int ARTL_ART_trSubterms_1271 = 1798;
public static final int ARTL_ART_trSubterms_1272 = 1799;
public static final int ARTL_ART_trSubterms_1273 = 1800;
public static final int ARTL_ART_trSubterms_1274 = 1801;
public static final int ARTL_ART_trSubterms_1275 = 1802;
public static final int ARTL_ART_trSubterms_1276 = 1803;
public static final int ARTL_ART_trSubterms_1277 = 1804;
public static final int ARTL_ART_trSubterms_1278 = 1805;
public static final int ARTL_ART_trSubterms_1279 = 1806;
public static final int ARTL_ART_trSubterms_1280 = 1807;
public static final int ARTL_ART_trSubterms_1281 = 1808;
public static final int ARTL_ART_trSubterms_1282 = 1809;
public static final int ARTL_ART_trTerm_817 = 1810;
public static final int ARTL_ART_trTerm_818 = 1811;
public static final int ARTL_ART_trTerm_819 = 1812;
public static final int ARTL_ART_trTerm_820 = 1813;
public static final int ARTL_ART_trTerm_821 = 1814;
public static final int ARTL_ART_trTerm_822 = 1815;
public static final int ARTL_ART_trTerm_823 = 1816;
public static final int ARTL_ART_trTerm_824 = 1817;
public static final int ARTL_ART_trTerm_825 = 1818;
public static final int ARTL_ART_trTerm_826 = 1819;
public static final int ARTL_ART_trTerm_827 = 1820;
public static final int ARTL_ART_trTerm_828 = 1821;
public static final int ARTL_ART_trTerm_829 = 1822;
public static final int ARTL_ART_trTerm_830 = 1823;
public static final int ARTL_ART_trTerm_831 = 1824;
public static final int ARTL_ART_trTerm_832 = 1825;
public static final int ARTL_ART_trTerm_833 = 1826;
public static final int ARTL_ART_trTerm_834 = 1827;
public static final int ARTL_ART_trTerm_835 = 1828;
public static final int ARTL_ART_trTerm_836 = 1829;
public static final int ARTL_ART_trTerm_837 = 1830;
public static final int ARTL_ART_trTerm_838 = 1831;
public static final int ARTL_ART_trTerm_839 = 1832;
public static final int ARTL_ART_trTerm_840 = 1833;
public static final int ARTL_ART_trTerm_841 = 1834;
public static final int ARTL_ART_trTerm_842 = 1835;
public static final int ARTL_ART_trTerm_843 = 1836;
public static final int ARTL_ART_trTerm_844 = 1837;
public static final int ARTL_ART_trTerm_845 = 1838;
public static final int ARTL_ART_trTerm_846 = 1839;
public static final int ARTL_ART_trTerm_847 = 1840;
public static final int ARTL_ART_trTerm_848 = 1841;
public static final int ARTL_ART_trTerm_849 = 1842;
public static final int ARTL_ART_trTerm_850 = 1843;
public static final int ARTL_ART_trTerm_851 = 1844;
public static final int ARTL_ART_trTerm_852 = 1845;
public static final int ARTL_ART_trTerm_853 = 1846;
public static final int ARTL_ART_trTerm_854 = 1847;
public static final int ARTL_ART_trTerm_855 = 1848;
public static final int ARTL_ART_trTerm_856 = 1849;
public static final int ARTL_ART_trTerm_857 = 1850;
public static final int ARTL_ART_trTerm_858 = 1851;
public static final int ARTL_ART_trTerm_859 = 1852;
public static final int ARTL_ART_trTerm_860 = 1853;
public static final int ARTL_ART_trTerm_861 = 1854;
public static final int ARTL_ART_trTerm_862 = 1855;
public static final int ARTL_ART_trTerm_863 = 1856;
public static final int ARTL_ART_trTerm_864 = 1857;
public static final int ARTL_ART_trTerm_865 = 1858;
public static final int ARTL_ART_trTerm_866 = 1859;
public static final int ARTL_ART_trTransition_1097 = 1860;
public static final int ARTL_ART_trTransition_1098 = 1861;
public static final int ARTL_ART_trTransition_1099 = 1862;
public static final int ARTL_ART_trTransition_1100 = 1863;
public static final int ARTL_ART_trTransition_1101 = 1864;
public static final int ARTL_ART_trTransition_1102 = 1865;
public static final int ARTL_ART_trTransition_1103 = 1866;
public static final int ARTL_ART_trTransition_1104 = 1867;
public static final int ARTL_ART_trUnamedTerm_1225 = 1868;
public static final int ARTL_ART_trUnamedTerm_1226 = 1869;
public static final int ARTL_ART_trUnamedTerm_1227 = 1870;
public static final int ARTL_ART_trUnamedTerm_1228 = 1871;
public static final int ARTL_ART_tryArgument_1529 = 1872;
public static final int ARTL_ART_tryArgument_1530 = 1873;
public static final int ARTL_ART_tryArgument_1531 = 1874;
public static final int ARTL_ART_tryArgument_1532 = 1875;
public static final int ARTL_ART_tryArgument_1533 = 1876;
public static final int ARTL_ART_tryArgument_1534 = 1877;
public static final int ARTL_ART_tryArgument_1535 = 1878;
public static final int ARTL_ART_tryArgument_1536 = 1879;
public static final int ARTL_ART_tryArgument_1537 = 1880;
public static final int ARTL_ART_tryArgument_1538 = 1881;
public static final int ARTL_ART_tryArgument_1539 = 1882;
public static final int ARTL_ART_tryArgument_1540 = 1883;
public static final int ARTL_ART_useElements_1449 = 1884;
public static final int ARTL_ART_useElements_1450 = 1885;
public static final int ARTL_ART_useElements_1451 = 1886;
public static final int ARTL_ART_useElements_1452 = 1887;
public static final int ARTL_ART_useElements_1453 = 1888;
public static final int ARTL_ART_useElements_1454 = 1889;
public static final int ARTL_ART_useElements_1455 = 1890;
public static final int ARTL_ART_useElements_1456 = 1891;
public static final int ARTL_ART_useElements_1457 = 1892;
public static final int ARTL_ART_useElements_1458 = 1893;
public static final int ARTL_ART_useElements_1459 = 1894;
public static final int ARTL_ART_useElements_1460 = 1895;
public static final int ARTX_DESPATCH = 1896;
public static final int ARTX_DUMMY = 1897;
public static final int ARTX_LABEL_EXTENT = 1898;
/* End of artLabel enumeration */

/* Start of artName enumeration */
public static final int ARTNAME_NONE = 0;
public static final int ARTNAME_EXTENT = 1;
/* End of artName enumeration */
public void ARTPF_ART_CHAR_BQ() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal CHAR_BQ production descriptor loads*/
    case ARTL_ART_CHAR_BQ: 
      if (ARTSet2[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_CHAR_BQ_1020, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal CHAR_BQ: match production*/
    case ARTL_ART_CHAR_BQ_1020: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTB_CHAR_BQ, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_CHAR_BQ_1022, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet3[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_False() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal False production descriptor loads*/
    case ARTL_ART_False: 
      if (ARTSet5[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_False_1602, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal False: match production*/
    case ARTL_ART_False_1602: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_False, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_False_1604, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet6[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_ID() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal ID production descriptor loads*/
    case ARTL_ART_ID: 
      if (ARTSet7[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_ID_998, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal ID: match production*/
    case ARTL_ART_ID_998: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTB_ID, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_ID_1000, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet8[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_ID_ATTRIBUTE() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal ID_ATTRIBUTE production descriptor loads*/
    case ARTL_ART_ID_ATTRIBUTE: 
      if (ARTSet7[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_ID_ATTRIBUTE_810, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal ID_ATTRIBUTE: match production*/
    case ARTL_ART_ID_ATTRIBUTE_810: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTB_ID, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_ID_ATTRIBUTE_812, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet9[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__PERIOD, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_ID_ATTRIBUTE_814, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet7[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTB_ID, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_ID_ATTRIBUTE_816, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet6[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_STRING_BRACE_NEST() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal STRING_BRACE_NEST production descriptor loads*/
    case ARTL_ART_STRING_BRACE_NEST: 
      if (ARTSet10[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_STRING_BRACE_NEST_868, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal STRING_BRACE_NEST: match production*/
    case ARTL_ART_STRING_BRACE_NEST_868: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTB_STRING_BRACE_NEST, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_STRING_BRACE_NEST_870, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_STRING_BRACKET_NEST() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal STRING_BRACKET_NEST production descriptor loads*/
    case ARTL_ART_STRING_BRACKET_NEST: 
      if (ARTSet12[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_STRING_BRACKET_NEST_1606, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal STRING_BRACKET_NEST: match production*/
    case ARTL_ART_STRING_BRACKET_NEST_1606: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTB_STRING_BRACKET_NEST, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_STRING_BRACKET_NEST_1608, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet1[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_STRING_DOLLAR() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal STRING_DOLLAR production descriptor loads*/
    case ARTL_ART_STRING_DOLLAR: 
      if (ARTSet13[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_STRING_DOLLAR_1008, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal STRING_DOLLAR: match production*/
    case ARTL_ART_STRING_DOLLAR_1008: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTB_STRING_DOLLAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_STRING_DOLLAR_1010, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet14[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_STRING_DQ() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal STRING_DQ production descriptor loads*/
    case ARTL_ART_STRING_DQ: 
      if (ARTSet15[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_STRING_DQ_1016, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal STRING_DQ: match production*/
    case ARTL_ART_STRING_DQ_1016: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTB_STRING_DQ, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_STRING_DQ_1018, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet16[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_STRING_PLAIN_SQ() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal STRING_PLAIN_SQ production descriptor loads*/
    case ARTL_ART_STRING_PLAIN_SQ: 
      if (ARTSet17[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_STRING_PLAIN_SQ_1012, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal STRING_PLAIN_SQ: match production*/
    case ARTL_ART_STRING_PLAIN_SQ_1012: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTB_STRING_PLAIN_SQ, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_STRING_PLAIN_SQ_1014, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet18[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_TRRELATION() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal TRRELATION production descriptor loads*/
    case ARTL_ART_TRRELATION: 
      if (ARTSet21[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_TRRELATION_1142, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet22[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_TRRELATION_1146, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet23[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_TRRELATION_1150, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet24[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_TRRELATION_1154, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet25[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_TRRELATION_1158, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet26[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_TRRELATION_1162, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet27[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_TRRELATION_1166, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet28[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_TRRELATION_1170, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet29[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_TRRELATION_1174, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet30[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_TRRELATION_1178, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet31[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_TRRELATION_1182, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet32[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_TRRELATION_1186, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet33[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_TRRELATION_1190, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet34[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_TRRELATION_1194, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet35[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_TRRELATION_1198, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal TRRELATION: match production*/
    case ARTL_ART_TRRELATION_1142: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__MINUS_GT, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_TRRELATION_1144, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet20[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal TRRELATION: match production*/
    case ARTL_ART_TRRELATION_1146: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__MINUS_GT_STAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_TRRELATION_1148, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet20[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal TRRELATION: match production*/
    case ARTL_ART_TRRELATION_1150: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__MINUS_GT_GT, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_TRRELATION_1152, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet20[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal TRRELATION: match production*/
    case ARTL_ART_TRRELATION_1154: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__EQUAL_GT, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_TRRELATION_1156, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet20[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal TRRELATION: match production*/
    case ARTL_ART_TRRELATION_1158: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__EQUAL_GT_STAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_TRRELATION_1160, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet20[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal TRRELATION: match production*/
    case ARTL_ART_TRRELATION_1162: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__EQUAL_GT_GT, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_TRRELATION_1164, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet20[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal TRRELATION: match production*/
    case ARTL_ART_TRRELATION_1166: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__MINUS_BACKSLASH, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_TRRELATION_1168, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet20[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal TRRELATION: match production*/
    case ARTL_ART_TRRELATION_1170: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__MINUS_BACKSLASH_STAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_TRRELATION_1172, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet20[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal TRRELATION: match production*/
    case ARTL_ART_TRRELATION_1174: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__MINUS_BACKSLASH_GT, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_TRRELATION_1176, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet20[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal TRRELATION: match production*/
    case ARTL_ART_TRRELATION_1178: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__MINUS_SLASH, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_TRRELATION_1180, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet20[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal TRRELATION: match production*/
    case ARTL_ART_TRRELATION_1182: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__MINUS_SLASH_STAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_TRRELATION_1184, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet20[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal TRRELATION: match production*/
    case ARTL_ART_TRRELATION_1186: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__MINUS_SLASH_GT, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_TRRELATION_1188, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet20[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal TRRELATION: match production*/
    case ARTL_ART_TRRELATION_1190: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__TILDE_GT, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_TRRELATION_1192, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet20[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal TRRELATION: match production*/
    case ARTL_ART_TRRELATION_1194: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__TILDE_GT_STAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_TRRELATION_1196, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet20[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal TRRELATION: match production*/
    case ARTL_ART_TRRELATION_1198: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__TILDE_GT_GT, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_TRRELATION_1200, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet20[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_True() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal True production descriptor loads*/
    case ARTL_ART_True: 
      if (ARTSet36[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_True_1598, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal True: match production*/
    case ARTL_ART_True_1598: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_True, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_True_1600, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet6[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART___bool() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal __bool production descriptor loads*/
    case ARTL_ART___bool: 
      if (ARTSet38[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART___bool_1238, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet39[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART___bool_1242, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal __bool: match production*/
    case ARTL_ART___bool_1238: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART___bool_1240, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_True; return; }
    case ARTL_ART___bool_1240: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet6[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal __bool: match production*/
    case ARTL_ART___bool_1242: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART___bool_1244, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_False; return; }
    case ARTL_ART___bool_1244: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet6[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART___char() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal __char production descriptor loads*/
    case ARTL_ART___char: 
      if (ARTSet2[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART___char_1262, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal __char: match production*/
    case ARTL_ART___char_1262: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTB_CHAR_BQ, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART___char_1264, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet6[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART___int32() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal __int32 production descriptor loads*/
    case ARTL_ART___int32: 
      if (ARTSet40[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART___int32_1246, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal __int32: match production*/
    case ARTL_ART___int32_1246: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTB_SIGNED_INTEGER, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART___int32_1248, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet6[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART___real64() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal __real64 production descriptor loads*/
    case ARTL_ART___real64: 
      if (ARTSet41[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART___real64_1250, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal __real64: match production*/
    case ARTL_ART___real64_1250: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTB_SIGNED_REAL, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART___real64_1252, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet6[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART___string() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal __string production descriptor loads*/
    case ARTL_ART___string: 
      if (ARTSet15[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART___string_1254, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet43[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART___string_1258, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal __string: match production*/
    case ARTL_ART___string_1254: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTB_STRING_DQ, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART___string_1256, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet6[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal __string: match production*/
    case ARTL_ART___string_1258: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTB_STRING_SQ, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART___string_1260, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet6[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_aliasedCFGNonterminal() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal aliasedCFGNonterminal production descriptor loads*/
    case ARTL_ART_aliasedCFGNonterminal: 
      if (ARTSet44[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_aliasedCFGNonterminal_1562, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet44[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_aliasedCFGNonterminal_1566, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal aliasedCFGNonterminal: match production*/
    case ARTL_ART_aliasedCFGNonterminal_1562: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_aliasedCFGNonterminal_1564, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgNonterminal; return; }
    case ARTL_ART_aliasedCFGNonterminal_1564: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet20[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal aliasedCFGNonterminal: match production*/
    case ARTL_ART_aliasedCFGNonterminal_1566: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_aliasedCFGNonterminal_1568, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgNonterminal; return; }
    case ARTL_ART_aliasedCFGNonterminal_1568: 
      /* Nonterminal template end */
      if (!ARTSet45[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__EQUAL, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_aliasedCFGNonterminal_1570, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet46[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_aliasedCFGNonterminal_1572, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART___string; return; }
    case ARTL_ART_aliasedCFGNonterminal_1572: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet20[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_cfgAbbrev() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal cfgAbbrev production descriptor loads*/
    case ARTL_ART_cfgAbbrev: 
      if (ARTSet47[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgAbbrev_704, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet47[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgAbbrev_708, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet47[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgAbbrev_714, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet47[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgAbbrev_720, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal cfgAbbrev: match production*/
    case ARTL_ART_cfgAbbrev_704: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgAbbrev_706, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgIter; return; }
    case ARTL_ART_cfgAbbrev_706: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet48[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal cfgAbbrev: match production*/
    case ARTL_ART_cfgAbbrev_708: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgAbbrev_710, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgIter; return; }
    case ARTL_ART_cfgAbbrev_710: 
      /* Nonterminal template end */
      if (!ARTSet49[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgAbbrev_712, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgKleeneClosure; return; }
    case ARTL_ART_cfgAbbrev_712: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet48[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal cfgAbbrev: match production*/
    case ARTL_ART_cfgAbbrev_714: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgAbbrev_716, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgIter; return; }
    case ARTL_ART_cfgAbbrev_716: 
      /* Nonterminal template end */
      if (!ARTSet50[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgAbbrev_718, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgPositiveClosure; return; }
    case ARTL_ART_cfgAbbrev_718: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet48[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal cfgAbbrev: match production*/
    case ARTL_ART_cfgAbbrev_720: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgAbbrev_722, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgIter; return; }
    case ARTL_ART_cfgAbbrev_722: 
      /* Nonterminal template end */
      if (!ARTSet51[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgAbbrev_724, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgOptional; return; }
    case ARTL_ART_cfgAbbrev_724: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet48[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_cfgAlt() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal cfgAlt production descriptor loads*/
    case ARTL_ART_cfgAlt: 
      if (ARTSet52[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgAlt_654, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet52[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgAlt_658, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal cfgAlt: match production*/
    case ARTL_ART_cfgAlt_654: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgAlt_656, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgCat; return; }
    case ARTL_ART_cfgAlt_656: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet53[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal cfgAlt: match production*/
    case ARTL_ART_cfgAlt_658: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgAlt_660, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgCat; return; }
    case ARTL_ART_cfgAlt_660: 
      /* Nonterminal template end */
      if (!ARTSet54[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__BAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_cfgAlt_662, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet55[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgAlt_664, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgAlt1; return; }
    case ARTL_ART_cfgAlt_664: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet53[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_cfgAlt1() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal cfgAlt1 production descriptor loads*/
    case ARTL_ART_cfgAlt1: 
      if (ARTSet52[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgAlt1_666, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet52[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgAlt1_670, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal cfgAlt1: match production*/
    case ARTL_ART_cfgAlt1_666: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgAlt1_668, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgCat; return; }
    case ARTL_ART_cfgAlt1_668: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet53[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal cfgAlt1: match production*/
    case ARTL_ART_cfgAlt1_670: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgAlt1_672, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgCat; return; }
    case ARTL_ART_cfgAlt1_672: 
      /* Nonterminal template end */
      if (!ARTSet54[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__BAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_cfgAlt1_674, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet55[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgAlt1_676, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgAlt1; return; }
    case ARTL_ART_cfgAlt1_676: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet53[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_cfgAtom() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal cfgAtom production descriptor loads*/
    case ARTL_ART_cfgAtom: 
      if (ARTSet58[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgAtom_872, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet44[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgAtom_876, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet59[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgAtom_880, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet60[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgAtom_884, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet61[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgAtom_888, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet62[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgAtom_892, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet63[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgAtom_896, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet64[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgAtom_900, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal cfgAtom: match production*/
    case ARTL_ART_cfgAtom_872: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgAtom_874, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgEpsilon; return; }
    case ARTL_ART_cfgAtom_874: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet57[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal cfgAtom: match production*/
    case ARTL_ART_cfgAtom_876: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgAtom_878, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgNonterminal; return; }
    case ARTL_ART_cfgAtom_878: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet57[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal cfgAtom: match production*/
    case ARTL_ART_cfgAtom_880: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgAtom_882, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgSlotSymbol; return; }
    case ARTL_ART_cfgAtom_882: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet57[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal cfgAtom: match production*/
    case ARTL_ART_cfgAtom_884: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgAtom_886, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgCaseSensitiveTerminal; return; }
    case ARTL_ART_cfgAtom_886: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet57[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal cfgAtom: match production*/
    case ARTL_ART_cfgAtom_888: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgAtom_890, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgCaseInsensitiveTerminal; return; }
    case ARTL_ART_cfgAtom_890: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet57[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal cfgAtom: match production*/
    case ARTL_ART_cfgAtom_892: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgAtom_894, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgCharacterTerminal; return; }
    case ARTL_ART_cfgAtom_894: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet57[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal cfgAtom: match production*/
    case ARTL_ART_cfgAtom_896: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgAtom_898, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgCharacterRangeTerminal; return; }
    case ARTL_ART_cfgAtom_898: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet57[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal cfgAtom: match production*/
    case ARTL_ART_cfgAtom_900: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgAtom_902, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgBuiltinTerminal; return; }
    case ARTL_ART_cfgAtom_902: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet57[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_cfgAtoms() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal cfgAtoms production descriptor loads*/
    case ARTL_ART_cfgAtoms: 
      if (ARTSet65[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgAtoms_1024, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet65[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgAtoms_1028, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal cfgAtoms: match production*/
    case ARTL_ART_cfgAtoms_1024: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgAtoms_1026, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgAtom; return; }
    case ARTL_ART_cfgAtoms_1026: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet1[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal cfgAtoms: match production*/
    case ARTL_ART_cfgAtoms_1028: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgAtoms_1030, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgAtom; return; }
    case ARTL_ART_cfgAtoms_1030: 
      /* Nonterminal template end */
      if (!ARTSet66[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COMMA, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_cfgAtoms_1032, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet67[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgAtoms_1034, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgAtoms; return; }
    case ARTL_ART_cfgAtoms_1034: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet1[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_cfgAttributeEquation() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal cfgAttributeEquation production descriptor loads*/
    case ARTL_ART_cfgAttributeEquation: 
      if (ARTSet68[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgAttributeEquation_726, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal cfgAttributeEquation: match production*/
    case ARTL_ART_cfgAttributeEquation_726: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgAttributeEquation_728, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_ID_ATTRIBUTE; return; }
    case ARTL_ART_cfgAttributeEquation_728: 
      /* Nonterminal template end */
      if (!ARTSet45[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__EQUAL, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_cfgAttributeEquation_730, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet70[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgAttributeEquation_732, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trTerm; return; }
    case ARTL_ART_cfgAttributeEquation_732: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet69[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_cfgBuiltinTerminal() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal cfgBuiltinTerminal production descriptor loads*/
    case ARTL_ART_cfgBuiltinTerminal: 
      if (ARTSet71[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgBuiltinTerminal_964, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal cfgBuiltinTerminal: match production*/
    case ARTL_ART_cfgBuiltinTerminal_964: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__AMPERSAND, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_cfgBuiltinTerminal_966, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet72[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgBuiltinTerminal_968, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_ID; return; }
    case ARTL_ART_cfgBuiltinTerminal_968: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet16[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_cfgCaseInsensitiveTerminal() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal cfgCaseInsensitiveTerminal production descriptor loads*/
    case ARTL_ART_cfgCaseInsensitiveTerminal: 
      if (ARTSet73[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgCaseInsensitiveTerminal_948, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal cfgCaseInsensitiveTerminal: match production*/
    case ARTL_ART_cfgCaseInsensitiveTerminal_948: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgCaseInsensitiveTerminal_950, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_STRING_DQ; return; }
    case ARTL_ART_cfgCaseInsensitiveTerminal_950: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet16[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_cfgCaseSensitiveTerminal() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal cfgCaseSensitiveTerminal production descriptor loads*/
    case ARTL_ART_cfgCaseSensitiveTerminal: 
      if (ARTSet74[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgCaseSensitiveTerminal_944, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal cfgCaseSensitiveTerminal: match production*/
    case ARTL_ART_cfgCaseSensitiveTerminal_944: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgCaseSensitiveTerminal_946, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_STRING_PLAIN_SQ; return; }
    case ARTL_ART_cfgCaseSensitiveTerminal_946: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet16[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_cfgCat() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal cfgCat production descriptor loads*/
    case ARTL_ART_cfgCat: 
      if (ARTSet75[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgCat_648, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal cfgCat: match production*/
    case ARTL_ART_cfgCat_648: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgCat_650, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgSlot; return; }
    case ARTL_ART_cfgCat_650: 
      /* Nonterminal template end */
      if (!ARTSet78[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgCat_652, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgCatTail; return; }
    case ARTL_ART_cfgCat_652: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet76[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_cfgCatTail() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal cfgCatTail production descriptor loads*/
    case ARTL_ART_cfgCatTail: 
      if (ARTSet79[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgCatTail_690, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet79[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgCatTail_696, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal cfgCatTail: match production*/
    case ARTL_ART_cfgCatTail_690: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgCatTail_692, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgAbbrev; return; }
    case ARTL_ART_cfgCatTail_692: 
      /* Nonterminal template end */
      if (!ARTSet80[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgCatTail_694, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgSlot; return; }
    case ARTL_ART_cfgCatTail_694: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet76[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal cfgCatTail: match production*/
    case ARTL_ART_cfgCatTail_696: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgCatTail_698, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgAbbrev; return; }
    case ARTL_ART_cfgCatTail_698: 
      /* Nonterminal template end */
      if (!ARTSet75[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgCatTail_700, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgSlot; return; }
    case ARTL_ART_cfgCatTail_700: 
      /* Nonterminal template end */
      if (!ARTSet78[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgCatTail_702, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgCatTail; return; }
    case ARTL_ART_cfgCatTail_702: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet76[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_cfgCharacterRangeTerminal() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal cfgCharacterRangeTerminal production descriptor loads*/
    case ARTL_ART_cfgCharacterRangeTerminal: 
      if (ARTSet81[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgCharacterRangeTerminal_956, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal cfgCharacterRangeTerminal: match production*/
    case ARTL_ART_cfgCharacterRangeTerminal_956: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgCharacterRangeTerminal_958, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_CHAR_BQ; return; }
    case ARTL_ART_cfgCharacterRangeTerminal_958: 
      /* Nonterminal template end */
      if (!ARTSet82[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__PERIOD_PERIOD, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_cfgCharacterRangeTerminal_960, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet81[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgCharacterRangeTerminal_962, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_CHAR_BQ; return; }
    case ARTL_ART_cfgCharacterRangeTerminal_962: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet57[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_cfgCharacterTerminal() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal cfgCharacterTerminal production descriptor loads*/
    case ARTL_ART_cfgCharacterTerminal: 
      if (ARTSet81[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgCharacterTerminal_952, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal cfgCharacterTerminal: match production*/
    case ARTL_ART_cfgCharacterTerminal_952: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgCharacterTerminal_954, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_CHAR_BQ; return; }
    case ARTL_ART_cfgCharacterTerminal_954: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet16[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_cfgDelay() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal cfgDelay production descriptor loads*/
    case ARTL_ART_cfgDelay: 
      if (ARTSet83[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgDelay_970, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal cfgDelay: match production*/
    case ARTL_ART_cfgDelay_970: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__LT, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_cfgDelay_972, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet84[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_cfgDiff() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal cfgDiff production descriptor loads*/
    case ARTL_ART_cfgDiff: 
      if (ARTSet87[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgDiff_762, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet85[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgDiff_766, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal cfgDiff: match production*/
    case ARTL_ART_cfgDiff_762: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgDiff_764, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgUnion; return; }
    case ARTL_ART_cfgDiff_764: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet86[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal cfgDiff: match production*/
    case ARTL_ART_cfgDiff_766: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgDiff_768, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgDiff; return; }
    case ARTL_ART_cfgDiff_768: 
      /* Nonterminal template end */
      if (!ARTSet88[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__BACKSLASH_BACKSLASH, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_cfgDiff_770, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet87[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgDiff_772, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgUnion; return; }
    case ARTL_ART_cfgDiff_772: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet86[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_cfgDoFirst() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal cfgDoFirst production descriptor loads*/
    case ARTL_ART_cfgDoFirst: 
      if (ARTSet89[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgDoFirst_928, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal cfgDoFirst: match production*/
    case ARTL_ART_cfgDoFirst_928: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__LPAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_cfgDoFirst_930, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet90[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgDoFirst_932, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgAlt; return; }
    case ARTL_ART_cfgDoFirst_932: 
      /* Nonterminal template end */
      if (!ARTSet53[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__RPAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_cfgDoFirst_934, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet84[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_cfgElement() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal cfgElement production descriptor loads*/
    case ARTL_ART_cfgElement: 
      if (ARTSet65[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgElement_796, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet65[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgElement_800, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet93[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgElement_806, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal cfgElement: match production*/
    case ARTL_ART_cfgElement_796: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgElement_798, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgAtom; return; }
    case ARTL_ART_cfgElement_798: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet84[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal cfgElement: match production*/
    case ARTL_ART_cfgElement_800: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgElement_802, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgAtom; return; }
    case ARTL_ART_cfgElement_802: 
      /* Nonterminal template end */
      if (!ARTSet92[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgElement_804, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgGrammarAnnotations; return; }
    case ARTL_ART_cfgElement_804: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet84[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal cfgElement: match production*/
    case ARTL_ART_cfgElement_806: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgElement_808, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgDoFirst; return; }
    case ARTL_ART_cfgElement_808: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet84[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_cfgElementDeclaration() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal cfgElementDeclaration production descriptor loads*/
    case ARTL_ART_cfgElementDeclaration: 
      if (ARTSet65[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgElementDeclaration_1550, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet65[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgElementDeclaration_1554, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal cfgElementDeclaration: match production*/
    case ARTL_ART_cfgElementDeclaration_1550: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgElementDeclaration_1552, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgAtom; return; }
    case ARTL_ART_cfgElementDeclaration_1552: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet20[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal cfgElementDeclaration: match production*/
    case ARTL_ART_cfgElementDeclaration_1554: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgElementDeclaration_1556, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgAtom; return; }
    case ARTL_ART_cfgElementDeclaration_1556: 
      /* Nonterminal template end */
      if (!ARTSet45[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__EQUAL, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_cfgElementDeclaration_1558, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet72[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgElementDeclaration_1560, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_ID; return; }
    case ARTL_ART_cfgElementDeclaration_1560: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet20[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_cfgElementDeclarations() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal cfgElementDeclarations production descriptor loads*/
    case ARTL_ART_cfgElementDeclarations: 
      if (ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgElementDeclarations_1462, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet94[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgElementDeclarations_1466, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal cfgElementDeclarations: match production*/
    case ARTL_ART_cfgElementDeclarations_1462: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgElementDeclarations_1464, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgElementDeclaration; return; }
    case ARTL_ART_cfgElementDeclarations_1464: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal cfgElementDeclarations: match production*/
    case ARTL_ART_cfgElementDeclarations_1466: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgElementDeclarations_1468, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgElementDeclaration; return; }
    case ARTL_ART_cfgElementDeclarations_1468: 
      /* Nonterminal template end */
      if (!ARTSet66[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COMMA, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_cfgElementDeclarations_1470, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet96[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgElementDeclarations_1472, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgElementDeclarations; return; }
    case ARTL_ART_cfgElementDeclarations_1472: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_cfgEpsilon() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal cfgEpsilon production descriptor loads*/
    case ARTL_ART_cfgEpsilon: 
      if (ARTSet97[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgEpsilon_936, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal cfgEpsilon: match production*/
    case ARTL_ART_cfgEpsilon_936: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__HASH, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_cfgEpsilon_938, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet57[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_cfgFoldNone() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal cfgFoldNone production descriptor loads*/
    case ARTL_ART_cfgFoldNone: 
      if (ARTSet98[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgFoldNone_974, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal cfgFoldNone: match production*/
    case ARTL_ART_cfgFoldNone_974: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__UPARROW_, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_cfgFoldNone_976, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet84[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_cfgFoldOver() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal cfgFoldOver production descriptor loads*/
    case ARTL_ART_cfgFoldOver: 
      if (ARTSet99[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgFoldOver_982, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal cfgFoldOver: match production*/
    case ARTL_ART_cfgFoldOver_982: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__UPARROW_UPARROW, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_cfgFoldOver_984, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet84[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_cfgFoldUnder() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal cfgFoldUnder production descriptor loads*/
    case ARTL_ART_cfgFoldUnder: 
      if (ARTSet100[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgFoldUnder_978, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal cfgFoldUnder: match production*/
    case ARTL_ART_cfgFoldUnder_978: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__UPARROW, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_cfgFoldUnder_980, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet84[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_cfgGather() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal cfgGather production descriptor loads*/
    case ARTL_ART_cfgGather: 
      if (ARTSet101[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgGather_986, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal cfgGather: match production*/
    case ARTL_ART_cfgGather_986: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__UPARROW_UPARROW_UPARROW, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_cfgGather_988, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet72[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgGather_990, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_ID; return; }
    case ARTL_ART_cfgGather_990: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet84[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_cfgGrammarAnnotations() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal cfgGrammarAnnotations production descriptor loads*/
    case ARTL_ART_cfgGrammarAnnotations: 
      if (ARTSet103[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgGrammarAnnotations_904, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet104[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgGrammarAnnotations_908, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet105[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgGrammarAnnotations_912, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet106[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgGrammarAnnotations_916, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet107[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgGrammarAnnotations_920, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet108[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgGrammarAnnotations_924, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal cfgGrammarAnnotations: match production*/
    case ARTL_ART_cfgGrammarAnnotations_904: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgGrammarAnnotations_906, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgDelay; return; }
    case ARTL_ART_cfgGrammarAnnotations_906: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet84[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal cfgGrammarAnnotations: match production*/
    case ARTL_ART_cfgGrammarAnnotations_908: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgGrammarAnnotations_910, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgFoldNone; return; }
    case ARTL_ART_cfgGrammarAnnotations_910: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet84[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal cfgGrammarAnnotations: match production*/
    case ARTL_ART_cfgGrammarAnnotations_912: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgGrammarAnnotations_914, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgFoldUnder; return; }
    case ARTL_ART_cfgGrammarAnnotations_914: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet84[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal cfgGrammarAnnotations: match production*/
    case ARTL_ART_cfgGrammarAnnotations_916: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgGrammarAnnotations_918, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgFoldOver; return; }
    case ARTL_ART_cfgGrammarAnnotations_918: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet84[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal cfgGrammarAnnotations: match production*/
    case ARTL_ART_cfgGrammarAnnotations_920: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgGrammarAnnotations_922, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgGather; return; }
    case ARTL_ART_cfgGrammarAnnotations_922: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet84[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal cfgGrammarAnnotations: match production*/
    case ARTL_ART_cfgGrammarAnnotations_924: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgGrammarAnnotations_926, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgInsert; return; }
    case ARTL_ART_cfgGrammarAnnotations_926: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet84[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_cfgInsert() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal cfgInsert production descriptor loads*/
    case ARTL_ART_cfgInsert: 
      if (ARTSet109[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgInsert_992, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal cfgInsert: match production*/
    case ARTL_ART_cfgInsert_992: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__UPARROW_PLUS, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_cfgInsert_994, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet72[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgInsert_996, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_ID; return; }
    case ARTL_ART_cfgInsert_996: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet84[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_cfgIter() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal cfgIter production descriptor loads*/
    case ARTL_ART_cfgIter: 
      if (ARTSet85[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgIter_738, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet85[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgIter_742, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal cfgIter: match production*/
    case ARTL_ART_cfgIter_738: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgIter_740, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgDiff; return; }
    case ARTL_ART_cfgIter_740: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet110[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal cfgIter: match production*/
    case ARTL_ART_cfgIter_742: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgIter_744, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgDiff; return; }
    case ARTL_ART_cfgIter_744: 
      /* Nonterminal template end */
      if (!ARTSet111[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__AT, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_cfgIter_746, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet47[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgIter_748, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgIter; return; }
    case ARTL_ART_cfgIter_748: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet110[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_cfgKleeneClosure() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal cfgKleeneClosure production descriptor loads*/
    case ARTL_ART_cfgKleeneClosure: 
      if (ARTSet112[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgKleeneClosure_750, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal cfgKleeneClosure: match production*/
    case ARTL_ART_cfgKleeneClosure_750: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__STAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_cfgKleeneClosure_752, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet48[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_cfgNativeAction() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal cfgNativeAction production descriptor loads*/
    case ARTL_ART_cfgNativeAction: 
      if (ARTSet113[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgNativeAction_734, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal cfgNativeAction: match production*/
    case ARTL_ART_cfgNativeAction_734: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgNativeAction_736, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_STRING_BRACE_NEST; return; }
    case ARTL_ART_cfgNativeAction_736: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_cfgNonterminal() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal cfgNonterminal production descriptor loads*/
    case ARTL_ART_cfgNonterminal: 
      if (ARTSet72[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgNonterminal_628, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet115[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgNonterminal_632, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal cfgNonterminal: match production*/
    case ARTL_ART_cfgNonterminal_628: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgNonterminal_630, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_ID; return; }
    case ARTL_ART_cfgNonterminal_630: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet14[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal cfgNonterminal: match production*/
    case ARTL_ART_cfgNonterminal_632: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgNonterminal_634, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_STRING_DOLLAR; return; }
    case ARTL_ART_cfgNonterminal_634: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet14[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_cfgNonterminals() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal cfgNonterminals production descriptor loads*/
    case ARTL_ART_cfgNonterminals: 
      if (ARTSet44[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgNonterminals_1036, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet44[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgNonterminals_1040, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal cfgNonterminals: match production*/
    case ARTL_ART_cfgNonterminals_1036: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgNonterminals_1038, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgNonterminal; return; }
    case ARTL_ART_cfgNonterminals_1038: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal cfgNonterminals: match production*/
    case ARTL_ART_cfgNonterminals_1040: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgNonterminals_1042, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgNonterminal; return; }
    case ARTL_ART_cfgNonterminals_1042: 
      /* Nonterminal template end */
      if (!ARTSet66[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COMMA, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_cfgNonterminals_1044, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet116[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgNonterminals_1046, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgNonterminals; return; }
    case ARTL_ART_cfgNonterminals_1046: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_cfgNot() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal cfgNot production descriptor loads*/
    case ARTL_ART_cfgNot: 
      if (ARTSet118[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgNot_786, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet88[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgNot_790, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal cfgNot: match production*/
    case ARTL_ART_cfgNot_786: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgNot_788, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgElement; return; }
    case ARTL_ART_cfgNot_788: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet84[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal cfgNot: match production*/
    case ARTL_ART_cfgNot_790: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__BACKSLASH_BACKSLASH, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_cfgNot_792, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet118[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgNot_794, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgElement; return; }
    case ARTL_ART_cfgNot_794: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet84[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_cfgOptional() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal cfgOptional production descriptor loads*/
    case ARTL_ART_cfgOptional: 
      if (ARTSet119[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgOptional_758, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal cfgOptional: match production*/
    case ARTL_ART_cfgOptional_758: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__QUERY, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_cfgOptional_760, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet48[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_cfgPositiveClosure() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal cfgPositiveClosure production descriptor loads*/
    case ARTL_ART_cfgPositiveClosure: 
      if (ARTSet120[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgPositiveClosure_754, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal cfgPositiveClosure: match production*/
    case ARTL_ART_cfgPositiveClosure_754: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__PLUS, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_cfgPositiveClosure_756, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet48[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_cfgRHS() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal cfgRHS production descriptor loads*/
    case ARTL_ART_cfgRHS: 
      if (ARTSet52[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgRHS_636, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet52[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgRHS_640, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal cfgRHS: match production*/
    case ARTL_ART_cfgRHS_636: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgRHS_638, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgCat; return; }
    case ARTL_ART_cfgRHS_638: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal cfgRHS: match production*/
    case ARTL_ART_cfgRHS_640: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgRHS_642, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgCat; return; }
    case ARTL_ART_cfgRHS_642: 
      /* Nonterminal template end */
      if (!ARTSet54[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__BAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_cfgRHS_644, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet121[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgRHS_646, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgRHS; return; }
    case ARTL_ART_cfgRHS_646: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_cfgRule() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal cfgRule production descriptor loads*/
    case ARTL_ART_cfgRule: 
      if (ARTSet44[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgRule_28, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal cfgRule: match production*/
    case ARTL_ART_cfgRule_28: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgRule_30, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgNonterminal; return; }
    case ARTL_ART_cfgRule_30: 
      /* Nonterminal template end */
      if (!ARTSet122[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COLON_COLON_EQUAL, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_cfgRule_32, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet121[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgRule_34, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgRHS; return; }
    case ARTL_ART_cfgRule_34: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_cfgSlot() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal cfgSlot production descriptor loads*/
    case ARTL_ART_cfgSlot: 
      if (ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgSlot_678, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet124[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgSlot_682, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet125[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgSlot_686, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal cfgSlot: match production*/
    case ARTL_ART_cfgSlot_678: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_cfgSlot_680, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal cfgSlot: match production*/
    case ARTL_ART_cfgSlot_682: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgSlot_684, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgAttributeEquation; return; }
    case ARTL_ART_cfgSlot_684: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal cfgSlot: match production*/
    case ARTL_ART_cfgSlot_686: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgSlot_688, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgNativeAction; return; }
    case ARTL_ART_cfgSlot_688: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet11[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_cfgSlotSymbol() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal cfgSlotSymbol production descriptor loads*/
    case ARTL_ART_cfgSlotSymbol: 
      if (ARTSet9[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgSlotSymbol_940, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal cfgSlotSymbol: match production*/
    case ARTL_ART_cfgSlotSymbol_940: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__PERIOD, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_cfgSlotSymbol_942, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet57[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_cfgTear() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal cfgTear production descriptor loads*/
    case ARTL_ART_cfgTear: 
      if (ARTSet126[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgTear_1002, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal cfgTear: match production*/
    case ARTL_ART_cfgTear_1002: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__UPARROW_MINUS, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_cfgTear_1004, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet72[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgTear_1006, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_ID; return; }
    case ARTL_ART_cfgTear_1006: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet1[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_cfgUnion() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal cfgUnion production descriptor loads*/
    case ARTL_ART_cfgUnion: 
      if (ARTSet127[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgUnion_774, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet87[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_cfgUnion_778, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal cfgUnion: match production*/
    case ARTL_ART_cfgUnion_774: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgUnion_776, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgNot; return; }
    case ARTL_ART_cfgUnion_776: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet84[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal cfgUnion: match production*/
    case ARTL_ART_cfgUnion_778: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgUnion_780, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgUnion; return; }
    case ARTL_ART_cfgUnion_780: 
      /* Nonterminal template end */
      if (!ARTSet128[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__BAR_BAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_cfgUnion_782, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet127[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_cfgUnion_784, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgNot; return; }
    case ARTL_ART_cfgUnion_784: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet84[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_chooseDiff() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal chooseDiff production descriptor loads*/
    case ARTL_ART_chooseDiff: 
      if (ARTSet131[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_chooseDiff_1284, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet129[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_chooseDiff_1288, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal chooseDiff: match production*/
    case ARTL_ART_chooseDiff_1284: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_chooseDiff_1286, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_chooseUnionIntersection; return; }
    case ARTL_ART_chooseDiff_1286: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet130[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal chooseDiff: match production*/
    case ARTL_ART_chooseDiff_1288: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_chooseDiff_1290, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_chooseDiff; return; }
    case ARTL_ART_chooseDiff_1290: 
      /* Nonterminal template end */
      if (!ARTSet132[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__BACKSLASH, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_chooseDiff_1292, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet131[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_chooseDiff_1294, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_chooseUnionIntersection; return; }
    case ARTL_ART_chooseDiff_1294: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet130[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_chooseElement() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal chooseElement production descriptor loads*/
    case ARTL_ART_chooseElement: 
      if (ARTSet44[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_chooseElement_1332, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet62[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_chooseElement_1336, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet64[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_chooseElement_1340, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet61[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_chooseElement_1344, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet60[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_chooseElement_1348, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet135[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_chooseElement_1352, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet89[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_chooseElement_1356, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal chooseElement: match production*/
    case ARTL_ART_chooseElement_1332: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_chooseElement_1334, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgNonterminal; return; }
    case ARTL_ART_chooseElement_1334: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet134[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal chooseElement: match production*/
    case ARTL_ART_chooseElement_1336: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_chooseElement_1338, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgCharacterTerminal; return; }
    case ARTL_ART_chooseElement_1338: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet134[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal chooseElement: match production*/
    case ARTL_ART_chooseElement_1340: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_chooseElement_1342, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgBuiltinTerminal; return; }
    case ARTL_ART_chooseElement_1342: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet134[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal chooseElement: match production*/
    case ARTL_ART_chooseElement_1344: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_chooseElement_1346, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgCaseInsensitiveTerminal; return; }
    case ARTL_ART_chooseElement_1346: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet134[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal chooseElement: match production*/
    case ARTL_ART_chooseElement_1348: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_chooseElement_1350, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgCaseSensitiveTerminal; return; }
    case ARTL_ART_chooseElement_1350: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet134[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal chooseElement: match production*/
    case ARTL_ART_chooseElement_1352: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_chooseElement_1354, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_choosePredefinedSet; return; }
    case ARTL_ART_chooseElement_1354: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet134[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal chooseElement: match production*/
    case ARTL_ART_chooseElement_1356: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__LPAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_chooseElement_1358, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet129[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_chooseElement_1360, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_chooseDiff; return; }
    case ARTL_ART_chooseElement_1360: 
      /* Nonterminal template end */
      if (!ARTSet53[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__RPAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_chooseElement_1362, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet134[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_chooseHigher() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal chooseHigher production descriptor loads*/
    case ARTL_ART_chooseHigher: 
      if (ARTSet136[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_chooseHigher_1404, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal chooseHigher: match production*/
    case ARTL_ART_chooseHigher_1404: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__GT, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_chooseHigher_1406, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet129[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_chooseIntersection() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal chooseIntersection production descriptor loads*/
    case ARTL_ART_chooseIntersection: 
      if (ARTSet137[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_chooseIntersection_1368, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal chooseIntersection: match production*/
    case ARTL_ART_chooseIntersection_1368: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SLASH, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_chooseIntersection_1370, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet138[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_chooseLonger() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal chooseLonger production descriptor loads*/
    case ARTL_ART_chooseLonger: 
      if (ARTSet139[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_chooseLonger_1412, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal chooseLonger: match production*/
    case ARTL_ART_chooseLonger_1412: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__GT_GT, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_chooseLonger_1414, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet129[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_chooseLower() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal chooseLower production descriptor loads*/
    case ARTL_ART_chooseLower: 
      if (ARTSet83[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_chooseLower_1408, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal chooseLower: match production*/
    case ARTL_ART_chooseLower_1408: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__LT, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_chooseLower_1410, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet129[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_choosePredefinedSet() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal choosePredefinedSet production descriptor loads*/
    case ARTL_ART_choosePredefinedSet: 
      if (ARTSet141[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_choosePredefinedSet_1372, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet142[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_choosePredefinedSet_1376, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet143[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_choosePredefinedSet_1380, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet144[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_choosePredefinedSet_1384, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet145[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_choosePredefinedSet_1388, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet146[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_choosePredefinedSet_1392, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet147[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_choosePredefinedSet_1396, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet148[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_choosePredefinedSet_1400, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal choosePredefinedSet: match production*/
    case ARTL_ART_choosePredefinedSet_1372: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_anyCharacterTerminal, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_choosePredefinedSet_1374, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet134[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal choosePredefinedSet: match production*/
    case ARTL_ART_choosePredefinedSet_1376: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_anyBuiltinTerminal, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_choosePredefinedSet_1378, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet134[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal choosePredefinedSet: match production*/
    case ARTL_ART_choosePredefinedSet_1380: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_anyCaseSensitiveTerminal, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_choosePredefinedSet_1382, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet134[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal choosePredefinedSet: match production*/
    case ARTL_ART_choosePredefinedSet_1384: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_anyCaseInsensitiveTerminal, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_choosePredefinedSet_1386, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet134[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal choosePredefinedSet: match production*/
    case ARTL_ART_choosePredefinedSet_1388: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_anyNonterminal, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_choosePredefinedSet_1390, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet134[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal choosePredefinedSet: match production*/
    case ARTL_ART_choosePredefinedSet_1392: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_anyParaterminal, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_choosePredefinedSet_1394, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet134[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal choosePredefinedSet: match production*/
    case ARTL_ART_choosePredefinedSet_1396: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_anyLiteralTerminal, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_choosePredefinedSet_1398, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet134[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal choosePredefinedSet: match production*/
    case ARTL_ART_choosePredefinedSet_1400: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_anyTerminal, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_choosePredefinedSet_1402, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet134[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_chooseRule() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal chooseRule production descriptor loads*/
    case ARTL_ART_chooseRule: 
      if (ARTSet129[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_chooseRule_42, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal chooseRule: match production*/
    case ARTL_ART_chooseRule_42: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_chooseRule_44, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_chooseDiff; return; }
    case ARTL_ART_chooseRule_44: 
      /* Nonterminal template end */
      if (!ARTSet149[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_chooseRule_46, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_chooserOp; return; }
    case ARTL_ART_chooseRule_46: 
      /* Nonterminal template end */
      if (!ARTSet129[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_chooseRule_48, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_chooseDiff; return; }
    case ARTL_ART_chooseRule_48: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_chooseShorter() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal chooseShorter production descriptor loads*/
    case ARTL_ART_chooseShorter: 
      if (ARTSet150[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_chooseShorter_1416, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal chooseShorter: match production*/
    case ARTL_ART_chooseShorter_1416: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__LT_LT, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_chooseShorter_1418, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet129[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_chooseUnion() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal chooseUnion production descriptor loads*/
    case ARTL_ART_chooseUnion: 
      if (ARTSet54[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_chooseUnion_1364, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal chooseUnion: match production*/
    case ARTL_ART_chooseUnion_1364: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__BAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_chooseUnion_1366, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet138[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_chooseUnionIntersection() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal chooseUnionIntersection production descriptor loads*/
    case ARTL_ART_chooseUnionIntersection: 
      if (ARTSet138[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_chooseUnionIntersection_1312, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet131[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_chooseUnionIntersection_1316, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet131[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_chooseUnionIntersection_1324, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal chooseUnionIntersection: match production*/
    case ARTL_ART_chooseUnionIntersection_1312: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_chooseUnionIntersection_1314, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_chooseElement; return; }
    case ARTL_ART_chooseUnionIntersection_1314: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet134[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal chooseUnionIntersection: match production*/
    case ARTL_ART_chooseUnionIntersection_1316: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_chooseUnionIntersection_1318, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_chooseUnionIntersection; return; }
    case ARTL_ART_chooseUnionIntersection_1318: 
      /* Nonterminal template end */
      if (!ARTSet151[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_chooseUnionIntersection_1320, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_chooseUnion; return; }
    case ARTL_ART_chooseUnionIntersection_1320: 
      /* Nonterminal template end */
      if (!ARTSet138[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_chooseUnionIntersection_1322, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_chooseElement; return; }
    case ARTL_ART_chooseUnionIntersection_1322: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet134[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal chooseUnionIntersection: match production*/
    case ARTL_ART_chooseUnionIntersection_1324: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_chooseUnionIntersection_1326, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_chooseUnionIntersection; return; }
    case ARTL_ART_chooseUnionIntersection_1326: 
      /* Nonterminal template end */
      if (!ARTSet152[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_chooseUnionIntersection_1328, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_chooseIntersection; return; }
    case ARTL_ART_chooseUnionIntersection_1328: 
      /* Nonterminal template end */
      if (!ARTSet138[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_chooseUnionIntersection_1330, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_chooseElement; return; }
    case ARTL_ART_chooseUnionIntersection_1330: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet134[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_chooserOp() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal chooserOp production descriptor loads*/
    case ARTL_ART_chooserOp: 
      if (ARTSet154[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_chooserOp_1296, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet155[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_chooserOp_1300, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet156[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_chooserOp_1304, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet157[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_chooserOp_1308, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal chooserOp: match production*/
    case ARTL_ART_chooserOp_1296: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_chooserOp_1298, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_chooseHigher; return; }
    case ARTL_ART_chooserOp_1298: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet129[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal chooserOp: match production*/
    case ARTL_ART_chooserOp_1300: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_chooserOp_1302, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_chooseLower; return; }
    case ARTL_ART_chooserOp_1302: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet129[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal chooserOp: match production*/
    case ARTL_ART_chooserOp_1304: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_chooserOp_1306, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_chooseLonger; return; }
    case ARTL_ART_chooserOp_1306: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet129[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal chooserOp: match production*/
    case ARTL_ART_chooserOp_1308: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_chooserOp_1310, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_chooseShorter; return; }
    case ARTL_ART_chooserOp_1310: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet129[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_directive() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal directive production descriptor loads*/
    case ARTL_ART_directive: 
      if (ARTSet159[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_50, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet161[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_56, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet162[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_62, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet164[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_68, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet165[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_74, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet167[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_80, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet168[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_86, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet170[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_92, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet172[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_98, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet173[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_104, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet174[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_110, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet175[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_114, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet176[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_118, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet177[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_122, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet178[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_126, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet179[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_130, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet180[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_134, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet181[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_138, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet182[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_142, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet183[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_146, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet184[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_150, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet185[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_154, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet186[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_158, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet187[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_162, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet188[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_166, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet189[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_170, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet190[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_174, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet191[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_178, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet192[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_182, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet193[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_186, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet194[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_192, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet195[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_196, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet197[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_204, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet198[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_212, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet200[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_226, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet201[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_230, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet202[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_234, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet203[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_238, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet204[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_242, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet205[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_248, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet205[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_254, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet206[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_260, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet206[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_266, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet207[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_272, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet207[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_278, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet208[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_284, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet209[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_288, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet210[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_292, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet211[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_296, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet212[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_300, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet213[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_304, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet214[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_308, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet215[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_312, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet216[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_316, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet217[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_320, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet218[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_324, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet219[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_328, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet220[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_334, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet221[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_340, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet222[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_346, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet223[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_352, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet224[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_356, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet225[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_360, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet226[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_364, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet227[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_368, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet228[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_372, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet229[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_376, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet230[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_380, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet231[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_384, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet232[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_390, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet233[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_396, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet234[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_400, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet235[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_404, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet236[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_408, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet237[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_412, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet238[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_416, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet239[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_420, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet240[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_424, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet241[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_428, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet242[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_432, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet243[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_436, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet244[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_440, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet245[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_444, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet246[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_448, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet247[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_452, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet248[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_456, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet249[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_460, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet250[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_464, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet251[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_468, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet252[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_472, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet253[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_476, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet254[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_480, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet255[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_484, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet256[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_488, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet257[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_492, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet258[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_496, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet259[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_500, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet260[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_504, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet261[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_508, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet262[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_512, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet263[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_516, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet264[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_520, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet265[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_524, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet266[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_528, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet267[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_532, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet268[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_536, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet269[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_540, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet270[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_544, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet270[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_550, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet273[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_560, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet274[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_566, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet274[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_572, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet275[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_578, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet277[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_584, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet278[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_590, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet278[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_596, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet278[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_602, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet282[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_608, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet282[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_612, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet282[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_directive_618, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_50: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKmerge, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_52, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet160[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_54, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_idART; return; }
    case ARTL_ART_directive_54: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_56: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKmodule, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_58, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet72[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_60, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_ID; return; }
    case ARTL_ART_directive_60: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_62: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKuse, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_64, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet163[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_66, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_useElements; return; }
    case ARTL_ART_directive_66: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_68: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKcfgElements, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_70, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet96[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_72, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgElementDeclarations; return; }
    case ARTL_ART_directive_72: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_74: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKparaterminal, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_76, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet166[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_78, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_paraterminalisers; return; }
    case ARTL_ART_directive_78: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_80: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKalphabet, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_82, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet116[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_84, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgNonterminals; return; }
    case ARTL_ART_directive_84: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_86: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKlatex, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_88, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet169[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_90, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_latexDeclarations; return; }
    case ARTL_ART_directive_90: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_92: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKverbosity, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_94, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet171[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_96, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART___int32; return; }
    case ARTL_ART_directive_96: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_98: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKstatistics, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_100, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet171[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_102, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART___int32; return; }
    case ARTL_ART_directive_102: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_104: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKtrace, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_106, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet171[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_108, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART___int32; return; }
    case ARTL_ART_directive_108: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_110: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKinputPrint, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_112, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_114: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKtwePrintFull, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_116, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_118: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKtwePrintSummary, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_120, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_122: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKtwePrint, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_124, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_126: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKtweWrite, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_128, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_130: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKtweShow, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_132, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_134: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKgssPrint, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_136, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_138: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKgssWrite, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_140, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_142: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKgssShow, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_144, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_146: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKsppfPrint, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_148, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_150: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKsppfWrite, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_152, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_154: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKsppfShow, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_156, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_158: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKtreePrint, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_160, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_162: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKtreeWrite, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_164, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_166: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKtreeShow, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_168, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_170: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKtermPrint, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_172, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_174: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKtermWrite, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_176, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_178: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKtermShow, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_180, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_182: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKparseCountsPrint, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_184, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_186: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKgrammarWrite, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_188, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet160[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_190, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_idART; return; }
    case ARTL_ART_directive_190: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_192: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKtermTool, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_194, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_196: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKunicodeAsEscapeSeuences, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_198, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet196[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_200, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_idJAVA; return; }
    case ARTL_ART_directive_200: 
      /* Nonterminal template end */
      if (!ARTSet196[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_202, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_idJAVA; return; }
    case ARTL_ART_directive_202: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_204: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKcompressWhitespaceJava, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_206, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet196[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_208, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_idJAVA; return; }
    case ARTL_ART_directive_208: 
      /* Nonterminal template end */
      if (!ARTSet196[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_210, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_idJAVA; return; }
    case ARTL_ART_directive_210: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_212: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKextractJLS, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_214, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet199[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_216, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_idRAW; return; }
    case ARTL_ART_directive_216: 
      /* Nonterminal template end */
      if (!ARTSet199[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_218, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_idRAW; return; }
    case ARTL_ART_directive_218: 
      /* Nonterminal template end */
      if (!ARTSet199[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_220, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_idRAW; return; }
    case ARTL_ART_directive_220: 
      /* Nonterminal template end */
      if (!ARTSet160[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_222, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_idART; return; }
    case ARTL_ART_directive_222: 
      /* Nonterminal template end */
      if (!ARTSet72[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_224, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_ID; return; }
    case ARTL_ART_directive_224: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_226: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKlexDFA, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_228, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_230: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKlexGLL, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_232, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_234: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKlexHardCoded, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_236, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_238: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKlexWSSuffix, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_240, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_242: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKwhitespace, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_244, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet44[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_246, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgNonterminal; return; }
    case ARTL_ART_directive_246: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_248: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKabsorb, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_250, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet44[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_252, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgNonterminal; return; }
    case ARTL_ART_directive_252: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_254: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKabsorb, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_256, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet97[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__HASH, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_258, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_260: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKinjectInstance, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_262, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet121[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_264, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgRHS; return; }
    case ARTL_ART_directive_264: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_266: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKinjectInstance, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_268, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet97[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__HASH, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_270, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_272: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKinjectProduction, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_274, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet121[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_276, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgRHS; return; }
    case ARTL_ART_directive_276: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_278: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKinjectProduction, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_280, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet97[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__HASH, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_282, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_284: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKtweFromSPPF, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_286, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_288: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKtweTokenWrite, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_290, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_292: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKtweLexicalisations, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_294, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_296: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKtweExtents, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_298, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_300: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKtweSegments, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_302, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_304: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKtweRecursive, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_306, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_308: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKtweLongest, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_310, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_312: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKtwePriority, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_314, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_316: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKtweDead, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_318, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_320: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKsppfLongest, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_322, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_324: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKsppfPriority, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_326, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_328: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKoutputDirectory, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_330, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet74[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_332, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_STRING_PLAIN_SQ; return; }
    case ARTL_ART_directive_332: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_334: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKnamespace, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_336, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet74[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_338, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_STRING_PLAIN_SQ; return; }
    case ARTL_ART_directive_338: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_340: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKlexerName, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_342, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet74[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_344, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_STRING_PLAIN_SQ; return; }
    case ARTL_ART_directive_344: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_346: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKparserName, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_348, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet74[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_350, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_STRING_PLAIN_SQ; return; }
    case ARTL_ART_directive_350: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_352: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKgenerateDynamic, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_354, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_356: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKgenerateStatic, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_358, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_360: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKgenerateState, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_362, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_364: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKgenerateFragment, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_366, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_368: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKgeneratePool, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_370, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_372: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKgenerateJava, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_374, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_376: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKgenerateC_PLUS_PLUS, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_378, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_380: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKgenerateML, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_382, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_384: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKprelude, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_386, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet113[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_388, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_STRING_BRACE_NEST; return; }
    case ARTL_ART_directive_388: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_390: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKsupport, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_392, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet113[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_394, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_STRING_BRACE_NEST; return; }
    case ARTL_ART_directive_394: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_396: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKGLLPredictivePops, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_398, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_400: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKGLLFIFODescriptors, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_402, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_404: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKGLLSuppressPopGuard, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_406, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_408: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKGLLSuppressProductionGuard, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_410, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_412: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKGLLSuppressTestRepeat, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_414, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_416: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKGLLSuppressSemantics, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_418, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_420: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKearley2007LinkedAPI, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_422, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_424: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKearley, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_426, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_428: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKearleyLinkedAPI, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_430, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_432: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKearleyIndexedAPI, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_434, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_436: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKearleyIndexedPool, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_438, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_440: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKearleyIndexedData, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_442, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_444: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKearleyTable, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_446, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_448: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKearleyTableLinkedAPI, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_450, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_452: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKearleyTableIndexedAPI, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_454, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_456: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKearleyTableIndexedPool, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_458, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_460: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKearleyTableIndexedData, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_462, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_464: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKcnp, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_466, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_468: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKcnpLinkedAPI, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_470, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_472: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKcnpIndexedAPI, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_474, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_476: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKcnpIndexedPool, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_478, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_480: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKcnpGeneratorPool, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_482, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_484: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKlcnp, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_486, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_488: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKlcnpLinkedAPI, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_490, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_492: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKlcnpIndexedAPI, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_494, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_496: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKlcnpIndexedPool, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_498, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_500: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKlcnpGeneratorPool, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_502, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_504: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKgll, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_506, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_508: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKgllGeneratorPool, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_510, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_512: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKgllTWEGeneratorPool, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_514, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_516: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKgllClusteredGeneratorPool, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_518, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_520: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKmgll, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_522, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_524: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKmgllGeneratorPool, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_526, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_528: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKosbrd, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_530, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_532: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKosbrdGenerator, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_534, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_536: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKsml97Parser, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_538, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_540: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKlexerData, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_542, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_544: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKrelation, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_546, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet271[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_548, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_TRRELATION; return; }
    case ARTL_ART_directive_548: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_550: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKrelation, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_552, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet271[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_554, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_TRRELATION; return; }
    case ARTL_ART_directive_554: 
      /* Nonterminal template end */
      if (!ARTSet66[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COMMA, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_556, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet272[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_558, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trEntities; return; }
    case ARTL_ART_directive_558: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_560: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKmain, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_562, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet160[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_564, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_idART; return; }
    case ARTL_ART_directive_564: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_566: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKstart, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_568, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet44[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_570, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgNonterminal; return; }
    case ARTL_ART_directive_570: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_572: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKstart, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_574, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet271[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_576, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_TRRELATION; return; }
    case ARTL_ART_directive_576: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_578: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKinput, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_580, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet276[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_582, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_tryArgument; return; }
    case ARTL_ART_directive_582: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_584: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKresult, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_586, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet276[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_588, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_tryArgument; return; }
    case ARTL_ART_directive_588: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_590: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKstrategy, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_592, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet279[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_root, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_594, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_596: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKstrategy, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_598, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet280[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_postOrder, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_600, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_602: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKstrategy, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_604, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet281[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_preOrderOneShot, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_606, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_608: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKtry, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_610, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_612: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKtry, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_614, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet276[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_616, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_tryArgument; return; }
    case ARTL_ART_directive_616: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal directive: match production*/
    case ARTL_ART_directive_618: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__SHREIKtry, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_620, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet276[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_622, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_tryArgument; return; }
    case ARTL_ART_directive_622: 
      /* Nonterminal template end */
      if (!ARTSet45[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__EQUAL, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_directive_624, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet276[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_directive_626, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_tryArgument; return; }
    case ARTL_ART_directive_626: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_idART() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal idART production descriptor loads*/
    case ARTL_ART_idART: 
      if (ARTSet72[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_idART_1420, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet72[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_idART_1424, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal idART: match production*/
    case ARTL_ART_idART_1420: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_idART_1422, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_ID; return; }
    case ARTL_ART_idART_1422: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet20[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal idART: match production*/
    case ARTL_ART_idART_1424: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_idART_1426, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_ID; return; }
    case ARTL_ART_idART_1426: 
      /* Nonterminal template end */
      if (!ARTSet283[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__PERIODart, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_idART_1428, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet20[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_idJAVA() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal idJAVA production descriptor loads*/
    case ARTL_ART_idJAVA: 
      if (ARTSet72[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_idJAVA_1440, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet72[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_idJAVA_1444, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal idJAVA: match production*/
    case ARTL_ART_idJAVA_1440: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_idJAVA_1442, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_ID; return; }
    case ARTL_ART_idJAVA_1442: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet284[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal idJAVA: match production*/
    case ARTL_ART_idJAVA_1444: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_idJAVA_1446, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_ID; return; }
    case ARTL_ART_idJAVA_1446: 
      /* Nonterminal template end */
      if (!ARTSet285[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__PERIODjava, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_idJAVA_1448, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet284[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_idRAW() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal idRAW production descriptor loads*/
    case ARTL_ART_idRAW: 
      if (ARTSet72[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_idRAW_1430, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet72[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_idRAW_1434, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal idRAW: match production*/
    case ARTL_ART_idRAW_1430: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_idRAW_1432, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_ID; return; }
    case ARTL_ART_idRAW_1432: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet286[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal idRAW: match production*/
    case ARTL_ART_idRAW_1434: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_idRAW_1436, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_ID; return; }
    case ARTL_ART_idRAW_1436: 
      /* Nonterminal template end */
      if (!ARTSet287[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__PERIODraw, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_idRAW_1438, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet286[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_latexDeclaration() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal latexDeclaration production descriptor loads*/
    case ARTL_ART_latexDeclaration: 
      if (ARTSet46[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_latexDeclaration_1542, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal latexDeclaration: match production*/
    case ARTL_ART_latexDeclaration_1542: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_latexDeclaration_1544, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART___string; return; }
    case ARTL_ART_latexDeclaration_1544: 
      /* Nonterminal template end */
      if (!ARTSet45[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__EQUAL, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_latexDeclaration_1546, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet46[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_latexDeclaration_1548, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART___string; return; }
    case ARTL_ART_latexDeclaration_1548: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet20[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_latexDeclarations() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal latexDeclarations production descriptor loads*/
    case ARTL_ART_latexDeclarations: 
      if (ARTSet288[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_latexDeclarations_1486, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet288[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_latexDeclarations_1490, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal latexDeclarations: match production*/
    case ARTL_ART_latexDeclarations_1486: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_latexDeclarations_1488, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_latexDeclaration; return; }
    case ARTL_ART_latexDeclarations_1488: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal latexDeclarations: match production*/
    case ARTL_ART_latexDeclarations_1490: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_latexDeclarations_1492, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_latexDeclaration; return; }
    case ARTL_ART_latexDeclarations_1492: 
      /* Nonterminal template end */
      if (!ARTSet66[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COMMA, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_latexDeclarations_1494, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet169[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_latexDeclarations_1496, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_latexDeclarations; return; }
    case ARTL_ART_latexDeclarations_1496: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_paraterminalisers() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal paraterminalisers production descriptor loads*/
    case ARTL_ART_paraterminalisers: 
      if (ARTSet289[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_paraterminalisers_1474, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet289[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_paraterminalisers_1478, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal paraterminalisers: match production*/
    case ARTL_ART_paraterminalisers_1474: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_paraterminalisers_1476, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_aliasedCFGNonterminal; return; }
    case ARTL_ART_paraterminalisers_1476: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal paraterminalisers: match production*/
    case ARTL_ART_paraterminalisers_1478: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_paraterminalisers_1480, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_aliasedCFGNonterminal; return; }
    case ARTL_ART_paraterminalisers_1480: 
      /* Nonterminal template end */
      if (!ARTSet66[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COMMA, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_paraterminalisers_1482, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet166[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_paraterminalisers_1484, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_paraterminalisers; return; }
    case ARTL_ART_paraterminalisers_1484: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_text() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal text production descriptor loads*/
    case ARTL_ART_text: 
      if (ARTSet290[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_text_2, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet290[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_text_6, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal text: match production*/
    case ARTL_ART_text_2: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_text_4, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_textElement; return; }
    case ARTL_ART_text_4: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet291[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal text: match production*/
    case ARTL_ART_text_6: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_text_8, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_textElement; return; }
    case ARTL_ART_text_8: 
      /* Nonterminal template end */
      if (!ARTSet292[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_text_10, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_text; return; }
    case ARTL_ART_text_10: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet291[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_textElement() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal textElement production descriptor loads*/
    case ARTL_ART_textElement: 
      if (ARTSet294[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_textElement_12, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet295[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_textElement_16, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet296[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_textElement_20, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet297[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_textElement_24, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal textElement: match production*/
    case ARTL_ART_textElement_12: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_textElement_14, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgRule; return; }
    case ARTL_ART_textElement_14: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal textElement: match production*/
    case ARTL_ART_textElement_16: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_textElement_18, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trRule; return; }
    case ARTL_ART_textElement_18: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal textElement: match production*/
    case ARTL_ART_textElement_20: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_textElement_22, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_chooseRule; return; }
    case ARTL_ART_textElement_22: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal textElement: match production*/
    case ARTL_ART_textElement_24: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_textElement_26, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_directive; return; }
    case ARTL_ART_textElement_26: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_tr() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal tr production descriptor loads*/
    case ARTL_ART_tr: 
      if (ARTSet298[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_tr_1064, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet298[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_tr_1074, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal tr: match production*/
    case ARTL_ART_tr_1064: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_tr_1066, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trPremises; return; }
    case ARTL_ART_tr_1066: 
      /* Nonterminal template end */
      if (!ARTSet300[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__MINUS_MINUS_MINUS, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_tr_1068, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet301[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_tr_1070, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trTransition; return; }
    case ARTL_ART_tr_1070: 
      /* Nonterminal template end */
      if (!ARTSet302[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_tr_1072, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trEquations; return; }
    case ARTL_ART_tr_1072: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal tr: match production*/
    case ARTL_ART_tr_1074: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_tr_1076, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trPremises; return; }
    case ARTL_ART_tr_1076: 
      /* Nonterminal template end */
      if (!ARTSet300[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__MINUS_MINUS_MINUS, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_tr_1078, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet301[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_tr_1080, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trTransition; return; }
    case ARTL_ART_tr_1080: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_trConfiguration() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal trConfiguration production descriptor loads*/
    case ARTL_ART_trConfiguration: 
      if (ARTSet305[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_trConfiguration_1126, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet83[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_trConfiguration_1132, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal trConfiguration: match production*/
    case ARTL_ART_trConfiguration_1126: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_trConfiguration_1128, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trPrimaryTerm; return; }
    case ARTL_ART_trConfiguration_1128: 
      /* Nonterminal template end */
      if (!ARTSet306[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_trConfiguration_1130, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trEntityReferences; return; }
    case ARTL_ART_trConfiguration_1130: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet304[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal trConfiguration: match production*/
    case ARTL_ART_trConfiguration_1132: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__LT, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_trConfiguration_1134, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet305[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_trConfiguration_1136, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trPrimaryTerm; return; }
    case ARTL_ART_trConfiguration_1136: 
      /* Nonterminal template end */
      if (!ARTSet308[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_trConfiguration_1138, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trEntityReferences; return; }
    case ARTL_ART_trConfiguration_1138: 
      /* Nonterminal template end */
      if (!ARTSet136[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__GT, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_trConfiguration_1140, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet304[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_trEntities() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal trEntities production descriptor loads*/
    case ARTL_ART_trEntities: 
      if (ARTSet70[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_trEntities_1498, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet70[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_trEntities_1502, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet70[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_trEntities_1510, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet70[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_trEntities_1518, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal trEntities: match production*/
    case ARTL_ART_trEntities_1498: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_trEntities_1500, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trTerm; return; }
    case ARTL_ART_trEntities_1500: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal trEntities: match production*/
    case ARTL_ART_trEntities_1502: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_trEntities_1504, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trTerm; return; }
    case ARTL_ART_trEntities_1504: 
      /* Nonterminal template end */
      if (!ARTSet309[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COLON, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_trEntities_1506, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet310[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_trEntities_1508, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trEntityKind; return; }
    case ARTL_ART_trEntities_1508: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal trEntities: match production*/
    case ARTL_ART_trEntities_1510: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_trEntities_1512, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trTerm; return; }
    case ARTL_ART_trEntities_1512: 
      /* Nonterminal template end */
      if (!ARTSet66[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COMMA, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_trEntities_1514, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet272[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_trEntities_1516, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trEntities; return; }
    case ARTL_ART_trEntities_1516: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal trEntities: match production*/
    case ARTL_ART_trEntities_1518: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_trEntities_1520, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trTerm; return; }
    case ARTL_ART_trEntities_1520: 
      /* Nonterminal template end */
      if (!ARTSet309[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COLON, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_trEntities_1522, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet310[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_trEntities_1524, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trEntityKind; return; }
    case ARTL_ART_trEntities_1524: 
      /* Nonterminal template end */
      if (!ARTSet66[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COMMA, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_trEntities_1526, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet272[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_trEntities_1528, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trEntities; return; }
    case ARTL_ART_trEntities_1528: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_trEntityKind() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal trEntityKind production descriptor loads*/
    case ARTL_ART_trEntityKind: 
      if (ARTSet312[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_trEntityKind_1574, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet313[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_trEntityKind_1578, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet314[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_trEntityKind_1582, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet315[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_trEntityKind_1586, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet316[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_trEntityKind_1590, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet317[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_trEntityKind_1594, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal trEntityKind: match production*/
    case ARTL_ART_trEntityKind_1574: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_map, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_trEntityKind_1576, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet20[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal trEntityKind: match production*/
    case ARTL_ART_trEntityKind_1578: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_mapFixed, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_trEntityKind_1580, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet20[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal trEntityKind: match production*/
    case ARTL_ART_trEntityKind_1582: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_listIn, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_trEntityKind_1584, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet20[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal trEntityKind: match production*/
    case ARTL_ART_trEntityKind_1586: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_listOut, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_trEntityKind_1588, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet20[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal trEntityKind: match production*/
    case ARTL_ART_trEntityKind_1590: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_singleton, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_trEntityKind_1592, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet20[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal trEntityKind: match production*/
    case ARTL_ART_trEntityKind_1594: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS_untyped, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_trEntityKind_1596, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet20[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_trEntityReferences() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal trEntityReferences production descriptor loads*/
    case ARTL_ART_trEntityReferences: 
      if (ARTSet319[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_trEntityReferences_1206, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet66[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_trEntityReferences_1210, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet66[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_trEntityReferences_1218, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal trEntityReferences: match production*/
    case ARTL_ART_trEntityReferences_1206: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_trEntityReferences_1208, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet319[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal trEntityReferences: match production*/
    case ARTL_ART_trEntityReferences_1210: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COMMA, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_trEntityReferences_1212, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet320[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_trEntityReferences_1214, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trUnamedTerm; return; }
    case ARTL_ART_trEntityReferences_1214: 
      /* Nonterminal template end */
      if (!ARTSet321[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_trEntityReferences_1216, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trEntityReferences; return; }
    case ARTL_ART_trEntityReferences_1216: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet319[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal trEntityReferences: match production*/
    case ARTL_ART_trEntityReferences_1218: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COMMA, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_trEntityReferences_1220, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet322[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_trEntityReferences_1222, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trNamedTerm; return; }
    case ARTL_ART_trEntityReferences_1222: 
      /* Nonterminal template end */
      if (!ARTSet321[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_trEntityReferences_1224, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trEntityReferences; return; }
    case ARTL_ART_trEntityReferences_1224: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet319[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_trEquations() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal trEquations production descriptor loads*/
    case ARTL_ART_trEquations: 
      if (ARTSet124[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_trEquations_1106, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet124[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_trEquations_1110, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal trEquations: match production*/
    case ARTL_ART_trEquations_1106: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_trEquations_1108, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgAttributeEquation; return; }
    case ARTL_ART_trEquations_1108: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal trEquations: match production*/
    case ARTL_ART_trEquations_1110: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_trEquations_1112, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_cfgAttributeEquation; return; }
    case ARTL_ART_trEquations_1112: 
      /* Nonterminal template end */
      if (!ARTSet66[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COMMA, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_trEquations_1114, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet302[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_trEquations_1116, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trEquations; return; }
    case ARTL_ART_trEquations_1116: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_trLabel() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal trLabel production descriptor loads*/
    case ARTL_ART_trLabel: 
      if (ARTSet324[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_trLabel_1048, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet325[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_trLabel_1052, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet325[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_trLabel_1058, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal trLabel: match production*/
    case ARTL_ART_trLabel_1048: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_trLabel_1050, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet324[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal trLabel: match production*/
    case ARTL_ART_trLabel_1052: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__MINUS, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_trLabel_1054, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet72[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_trLabel_1056, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_ID; return; }
    case ARTL_ART_trLabel_1056: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet324[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal trLabel: match production*/
    case ARTL_ART_trLabel_1058: 
      /* Cat/unary template start */
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__MINUS, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_trLabel_1060, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet73[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_trLabel_1062, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_STRING_DQ; return; }
    case ARTL_ART_trLabel_1062: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet324[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_trMatch() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal trMatch production descriptor loads*/
    case ARTL_ART_trMatch: 
      if (ARTSet70[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_trMatch_1118, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal trMatch: match production*/
    case ARTL_ART_trMatch_1118: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_trMatch_1120, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trTerm; return; }
    case ARTL_ART_trMatch_1120: 
      /* Nonterminal template end */
      if (!ARTSet326[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__BAR_GT, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_trMatch_1122, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet70[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_trMatch_1124, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trTerm; return; }
    case ARTL_ART_trMatch_1124: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet298[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_trNamedTerm() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal trNamedTerm production descriptor loads*/
    case ARTL_ART_trNamedTerm: 
      if (ARTSet72[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_trNamedTerm_1230, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal trNamedTerm: match production*/
    case ARTL_ART_trNamedTerm_1230: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_trNamedTerm_1232, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_ID; return; }
    case ARTL_ART_trNamedTerm_1232: 
      /* Nonterminal template end */
      if (!ARTSet45[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__EQUAL, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_trNamedTerm_1234, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet70[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_trNamedTerm_1236, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trTerm; return; }
    case ARTL_ART_trNamedTerm_1236: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet321[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_trPremises() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal trPremises production descriptor loads*/
    case ARTL_ART_trPremises: 
      if (ARTSet300[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_trPremises_1082, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet301[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_trPremises_1086, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet328[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_trPremises_1092, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal trPremises: match production*/
    case ARTL_ART_trPremises_1082: 
      /* Cat/unary template start */
      /* Epsilon template start */
      artCurrentSPPFRightChildNode = artFindSPPFEpsilon(artCurrentInputPairIndex);
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_trPremises_1084, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Epsilon template end */
      /* Cat/unary template end */
      if (!ARTSet300[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal trPremises: match production*/
    case ARTL_ART_trPremises_1086: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_trPremises_1088, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trTransition; return; }
    case ARTL_ART_trPremises_1088: 
      /* Nonterminal template end */
      if (!ARTSet298[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_trPremises_1090, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trPremises; return; }
    case ARTL_ART_trPremises_1090: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet300[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal trPremises: match production*/
    case ARTL_ART_trPremises_1092: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_trPremises_1094, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trMatch; return; }
    case ARTL_ART_trPremises_1094: 
      /* Nonterminal template end */
      if (!ARTSet298[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_trPremises_1096, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trPremises; return; }
    case ARTL_ART_trPremises_1096: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet300[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_trPrimaryTerm() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal trPrimaryTerm production descriptor loads*/
    case ARTL_ART_trPrimaryTerm: 
      if (ARTSet70[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_trPrimaryTerm_1202, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal trPrimaryTerm: match production*/
    case ARTL_ART_trPrimaryTerm_1202: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_trPrimaryTerm_1204, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trTerm; return; }
    case ARTL_ART_trPrimaryTerm_1204: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet321[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_trRule() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal trRule production descriptor loads*/
    case ARTL_ART_trRule: 
      if (ARTSet329[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_trRule_36, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal trRule: match production*/
    case ARTL_ART_trRule_36: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_trRule_38, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trLabel; return; }
    case ARTL_ART_trRule_38: 
      /* Nonterminal template end */
      if (!ARTSet324[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_trRule_40, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_tr; return; }
    case ARTL_ART_trRule_40: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_trSubterms() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal trSubterms production descriptor loads*/
    case ARTL_ART_trSubterms: 
      if (ARTSet70[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_trSubterms_1266, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet70[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_trSubterms_1270, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet70[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_trSubterms_1278, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal trSubterms: match production*/
    case ARTL_ART_trSubterms_1266: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_trSubterms_1268, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trTerm; return; }
    case ARTL_ART_trSubterms_1268: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet53[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal trSubterms: match production*/
    case ARTL_ART_trSubterms_1270: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_trSubterms_1272, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trTerm; return; }
    case ARTL_ART_trSubterms_1272: 
      /* Nonterminal template end */
      if (!ARTSet66[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COMMA, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_trSubterms_1274, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet331[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_trSubterms_1276, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trSubterms; return; }
    case ARTL_ART_trSubterms_1276: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet53[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal trSubterms: match production*/
    case ARTL_ART_trSubterms_1278: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_trSubterms_1280, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trTerm; return; }
    case ARTL_ART_trSubterms_1280: 
      /* Nonterminal template end */
      if (!ARTSet331[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_trSubterms_1282, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trSubterms; return; }
    case ARTL_ART_trSubterms_1282: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet53[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_trTerm() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal trTerm production descriptor loads*/
    case ARTL_ART_trTerm: 
      if (ARTSet333[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_trTerm_818, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet171[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_trTerm_822, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet334[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_trTerm_826, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet46[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_trTerm_830, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet335[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_trTerm_834, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet72[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_trTerm_838, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet72[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_trTerm_842, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet72[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_trTerm_850, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet68[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_trTerm_860, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet74[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_trTerm_864, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal trTerm: match production*/
    case ARTL_ART_trTerm_818: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_trTerm_820, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART___bool; return; }
    case ARTL_ART_trTerm_820: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet6[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal trTerm: match production*/
    case ARTL_ART_trTerm_822: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_trTerm_824, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART___int32; return; }
    case ARTL_ART_trTerm_824: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet6[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal trTerm: match production*/
    case ARTL_ART_trTerm_826: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_trTerm_828, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART___real64; return; }
    case ARTL_ART_trTerm_828: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet6[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal trTerm: match production*/
    case ARTL_ART_trTerm_830: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_trTerm_832, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART___string; return; }
    case ARTL_ART_trTerm_832: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet6[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal trTerm: match production*/
    case ARTL_ART_trTerm_834: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_trTerm_836, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART___char; return; }
    case ARTL_ART_trTerm_836: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet6[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal trTerm: match production*/
    case ARTL_ART_trTerm_838: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_trTerm_840, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_ID; return; }
    case ARTL_ART_trTerm_840: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet6[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal trTerm: match production*/
    case ARTL_ART_trTerm_842: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_trTerm_844, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_ID; return; }
    case ARTL_ART_trTerm_844: 
      /* Nonterminal template end */
      if (!ARTSet89[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__LPAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_trTerm_846, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet53[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__RPAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_trTerm_848, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet6[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal trTerm: match production*/
    case ARTL_ART_trTerm_850: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_trTerm_852, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_ID; return; }
    case ARTL_ART_trTerm_852: 
      /* Nonterminal template end */
      if (!ARTSet89[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__LPAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_trTerm_854, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet331[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_trTerm_856, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trSubterms; return; }
    case ARTL_ART_trTerm_856: 
      /* Nonterminal template end */
      if (!ARTSet53[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__RPAR, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_trTerm_858, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      /* Cat/unary template end */
      if (!ARTSet6[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal trTerm: match production*/
    case ARTL_ART_trTerm_860: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_trTerm_862, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_ID_ATTRIBUTE; return; }
    case ARTL_ART_trTerm_862: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet6[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal trTerm: match production*/
    case ARTL_ART_trTerm_864: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_trTerm_866, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_STRING_PLAIN_SQ; return; }
    case ARTL_ART_trTerm_866: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet6[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_trTransition() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal trTransition production descriptor loads*/
    case ARTL_ART_trTransition: 
      if (ARTSet336[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_trTransition_1098, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal trTransition: match production*/
    case ARTL_ART_trTransition_1098: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_trTransition_1100, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trConfiguration; return; }
    case ARTL_ART_trTransition_1100: 
      /* Nonterminal template end */
      if (!ARTSet271[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_trTransition_1102, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_TRRELATION; return; }
    case ARTL_ART_trTransition_1102: 
      /* Nonterminal template end */
      if (!ARTSet336[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_trTransition_1104, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trConfiguration; return; }
    case ARTL_ART_trTransition_1104: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet337[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_trUnamedTerm() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal trUnamedTerm production descriptor loads*/
    case ARTL_ART_trUnamedTerm: 
      if (ARTSet70[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_trUnamedTerm_1226, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal trUnamedTerm: match production*/
    case ARTL_ART_trUnamedTerm_1226: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_trUnamedTerm_1228, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trTerm; return; }
    case ARTL_ART_trUnamedTerm_1228: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet321[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_tryArgument() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal tryArgument production descriptor loads*/
    case ARTL_ART_tryArgument: 
      if (ARTSet74[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_tryArgument_1530, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet336[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_tryArgument_1534, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet73[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_tryArgument_1538, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal tryArgument: match production*/
    case ARTL_ART_tryArgument_1530: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_tryArgument_1532, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_STRING_PLAIN_SQ; return; }
    case ARTL_ART_tryArgument_1532: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet339[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal tryArgument: match production*/
    case ARTL_ART_tryArgument_1534: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_tryArgument_1536, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_trConfiguration; return; }
    case ARTL_ART_tryArgument_1536: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet339[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal tryArgument: match production*/
    case ARTL_ART_tryArgument_1538: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_tryArgument_1540, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_STRING_DQ; return; }
    case ARTL_ART_tryArgument_1540: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet339[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void ARTPF_ART_useElements() {
  switch (artCurrentRestartLabel) {
      /* Nonterminal useElements production descriptor loads*/
    case ARTL_ART_useElements: 
      if (ARTSet160[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_useElements_1450, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      if (ARTSet160[artInputPairBuffer[artCurrentInputPairReference]]) 
        artFindDescriptor(ARTL_ART_useElements_1454, artCurrentGSSNode, artCurrentInputPairIndex, artDummySPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal useElements: match production*/
    case ARTL_ART_useElements_1450: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_useElements_1452, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_idART; return; }
    case ARTL_ART_useElements_1452: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
      /* Nonterminal useElements: match production*/
    case ARTL_ART_useElements_1454: 
      /* Cat/unary template start */
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_useElements_1456, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_idART; return; }
    case ARTL_ART_useElements_1456: 
      /* Nonterminal template end */
      if (!ARTSet66[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Terminal template start */
      artCurrentInputPairReference = artInputSuccessorIndex[artInputPairBuffer[artCurrentInputPairReference + 1]][artInputPairBuffer[artCurrentInputPairReference]];
      artCurrentSPPFRightChildNode = artFindSPPFTerminal(ARTTS__COMMA, artCurrentInputPairIndex, artInputPairBuffer[artCurrentInputPairReference + 1]);
      artCurrentInputPairIndex = artInputPairBuffer[artCurrentInputPairReference + 1];
      artCurrentSPPFNode = artFindSPPF(ARTL_ART_useElements_1458, artCurrentSPPFNode, artCurrentSPPFRightChildNode);
      /* Terminal template end */
      if (!ARTSet163[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      /* Nonterminal template start */
      artCurrentGSSNode = artFindGSS(ARTL_ART_useElements_1460, artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTL_ART_useElements; return; }
    case ARTL_ART_useElements_1460: 
      /* Nonterminal template end */
      /* Cat/unary template end */
      if (!ARTSet95[artInputPairBuffer[artCurrentInputPairReference]]) { artCurrentRestartLabel = ARTX_DESPATCH; return; }
      artPop(artCurrentGSSNode, artCurrentInputPairIndex, artCurrentSPPFNode);
      { artCurrentRestartLabel = ARTX_DESPATCH /* Top level pop */; return; }
  }
}

public void artParseBody(int artStartLabel) {
  artSetupCompleteTime = artReadClock();
  artStartSymbolLabel = artStartLabel;
  artIsInLanguage = false;
  artTokenExtent = 288;
  artLexicaliseForV3GLL(artInputString, null);
  artLexCompleteTime = artReadClock();
  artDummySPPFNode = artFindSPPFInitial(ARTL_DUMMY, 0, 0);
  artCurrentSPPFNode = artDummySPPFNode;
  artRootGSSNode = artFindGSS(ARTL_EOS, 0, 0, 0);
  artCurrentGSSNode = artRootGSSNode;
  artCurrentRestartLabel = artStartSymbolLabel;
  artCurrentInputPairIndex = 0;
  artCurrentInputPairReference = 0;
  while (true)
    switch (artlhsL[artCurrentRestartLabel]) {
      case ARTL_ART_CHAR_BQ: 
        ARTPF_ART_CHAR_BQ();
        break;
      case ARTL_ART_False: 
        ARTPF_ART_False();
        break;
      case ARTL_ART_ID: 
        ARTPF_ART_ID();
        break;
      case ARTL_ART_ID_ATTRIBUTE: 
        ARTPF_ART_ID_ATTRIBUTE();
        break;
      case ARTL_ART_STRING_BRACE_NEST: 
        ARTPF_ART_STRING_BRACE_NEST();
        break;
      case ARTL_ART_STRING_BRACKET_NEST: 
        ARTPF_ART_STRING_BRACKET_NEST();
        break;
      case ARTL_ART_STRING_DOLLAR: 
        ARTPF_ART_STRING_DOLLAR();
        break;
      case ARTL_ART_STRING_DQ: 
        ARTPF_ART_STRING_DQ();
        break;
      case ARTL_ART_STRING_PLAIN_SQ: 
        ARTPF_ART_STRING_PLAIN_SQ();
        break;
      case ARTL_ART_TRRELATION: 
        ARTPF_ART_TRRELATION();
        break;
      case ARTL_ART_True: 
        ARTPF_ART_True();
        break;
      case ARTL_ART___bool: 
        ARTPF_ART___bool();
        break;
      case ARTL_ART___char: 
        ARTPF_ART___char();
        break;
      case ARTL_ART___int32: 
        ARTPF_ART___int32();
        break;
      case ARTL_ART___real64: 
        ARTPF_ART___real64();
        break;
      case ARTL_ART___string: 
        ARTPF_ART___string();
        break;
      case ARTL_ART_aliasedCFGNonterminal: 
        ARTPF_ART_aliasedCFGNonterminal();
        break;
      case ARTL_ART_cfgAbbrev: 
        ARTPF_ART_cfgAbbrev();
        break;
      case ARTL_ART_cfgAlt: 
        ARTPF_ART_cfgAlt();
        break;
      case ARTL_ART_cfgAlt1: 
        ARTPF_ART_cfgAlt1();
        break;
      case ARTL_ART_cfgAtom: 
        ARTPF_ART_cfgAtom();
        break;
      case ARTL_ART_cfgAtoms: 
        ARTPF_ART_cfgAtoms();
        break;
      case ARTL_ART_cfgAttributeEquation: 
        ARTPF_ART_cfgAttributeEquation();
        break;
      case ARTL_ART_cfgBuiltinTerminal: 
        ARTPF_ART_cfgBuiltinTerminal();
        break;
      case ARTL_ART_cfgCaseInsensitiveTerminal: 
        ARTPF_ART_cfgCaseInsensitiveTerminal();
        break;
      case ARTL_ART_cfgCaseSensitiveTerminal: 
        ARTPF_ART_cfgCaseSensitiveTerminal();
        break;
      case ARTL_ART_cfgCat: 
        ARTPF_ART_cfgCat();
        break;
      case ARTL_ART_cfgCatTail: 
        ARTPF_ART_cfgCatTail();
        break;
      case ARTL_ART_cfgCharacterRangeTerminal: 
        ARTPF_ART_cfgCharacterRangeTerminal();
        break;
      case ARTL_ART_cfgCharacterTerminal: 
        ARTPF_ART_cfgCharacterTerminal();
        break;
      case ARTL_ART_cfgDelay: 
        ARTPF_ART_cfgDelay();
        break;
      case ARTL_ART_cfgDiff: 
        ARTPF_ART_cfgDiff();
        break;
      case ARTL_ART_cfgDoFirst: 
        ARTPF_ART_cfgDoFirst();
        break;
      case ARTL_ART_cfgElement: 
        ARTPF_ART_cfgElement();
        break;
      case ARTL_ART_cfgElementDeclaration: 
        ARTPF_ART_cfgElementDeclaration();
        break;
      case ARTL_ART_cfgElementDeclarations: 
        ARTPF_ART_cfgElementDeclarations();
        break;
      case ARTL_ART_cfgEpsilon: 
        ARTPF_ART_cfgEpsilon();
        break;
      case ARTL_ART_cfgFoldNone: 
        ARTPF_ART_cfgFoldNone();
        break;
      case ARTL_ART_cfgFoldOver: 
        ARTPF_ART_cfgFoldOver();
        break;
      case ARTL_ART_cfgFoldUnder: 
        ARTPF_ART_cfgFoldUnder();
        break;
      case ARTL_ART_cfgGather: 
        ARTPF_ART_cfgGather();
        break;
      case ARTL_ART_cfgGrammarAnnotations: 
        ARTPF_ART_cfgGrammarAnnotations();
        break;
      case ARTL_ART_cfgInsert: 
        ARTPF_ART_cfgInsert();
        break;
      case ARTL_ART_cfgIter: 
        ARTPF_ART_cfgIter();
        break;
      case ARTL_ART_cfgKleeneClosure: 
        ARTPF_ART_cfgKleeneClosure();
        break;
      case ARTL_ART_cfgNativeAction: 
        ARTPF_ART_cfgNativeAction();
        break;
      case ARTL_ART_cfgNonterminal: 
        ARTPF_ART_cfgNonterminal();
        break;
      case ARTL_ART_cfgNonterminals: 
        ARTPF_ART_cfgNonterminals();
        break;
      case ARTL_ART_cfgNot: 
        ARTPF_ART_cfgNot();
        break;
      case ARTL_ART_cfgOptional: 
        ARTPF_ART_cfgOptional();
        break;
      case ARTL_ART_cfgPositiveClosure: 
        ARTPF_ART_cfgPositiveClosure();
        break;
      case ARTL_ART_cfgRHS: 
        ARTPF_ART_cfgRHS();
        break;
      case ARTL_ART_cfgRule: 
        ARTPF_ART_cfgRule();
        break;
      case ARTL_ART_cfgSlot: 
        ARTPF_ART_cfgSlot();
        break;
      case ARTL_ART_cfgSlotSymbol: 
        ARTPF_ART_cfgSlotSymbol();
        break;
      case ARTL_ART_cfgTear: 
        ARTPF_ART_cfgTear();
        break;
      case ARTL_ART_cfgUnion: 
        ARTPF_ART_cfgUnion();
        break;
      case ARTL_ART_chooseDiff: 
        ARTPF_ART_chooseDiff();
        break;
      case ARTL_ART_chooseElement: 
        ARTPF_ART_chooseElement();
        break;
      case ARTL_ART_chooseHigher: 
        ARTPF_ART_chooseHigher();
        break;
      case ARTL_ART_chooseIntersection: 
        ARTPF_ART_chooseIntersection();
        break;
      case ARTL_ART_chooseLonger: 
        ARTPF_ART_chooseLonger();
        break;
      case ARTL_ART_chooseLower: 
        ARTPF_ART_chooseLower();
        break;
      case ARTL_ART_choosePredefinedSet: 
        ARTPF_ART_choosePredefinedSet();
        break;
      case ARTL_ART_chooseRule: 
        ARTPF_ART_chooseRule();
        break;
      case ARTL_ART_chooseShorter: 
        ARTPF_ART_chooseShorter();
        break;
      case ARTL_ART_chooseUnion: 
        ARTPF_ART_chooseUnion();
        break;
      case ARTL_ART_chooseUnionIntersection: 
        ARTPF_ART_chooseUnionIntersection();
        break;
      case ARTL_ART_chooserOp: 
        ARTPF_ART_chooserOp();
        break;
      case ARTL_ART_directive: 
        ARTPF_ART_directive();
        break;
      case ARTL_ART_idART: 
        ARTPF_ART_idART();
        break;
      case ARTL_ART_idJAVA: 
        ARTPF_ART_idJAVA();
        break;
      case ARTL_ART_idRAW: 
        ARTPF_ART_idRAW();
        break;
      case ARTL_ART_latexDeclaration: 
        ARTPF_ART_latexDeclaration();
        break;
      case ARTL_ART_latexDeclarations: 
        ARTPF_ART_latexDeclarations();
        break;
      case ARTL_ART_paraterminalisers: 
        ARTPF_ART_paraterminalisers();
        break;
      case ARTL_ART_text: 
        ARTPF_ART_text();
        break;
      case ARTL_ART_textElement: 
        ARTPF_ART_textElement();
        break;
      case ARTL_ART_tr: 
        ARTPF_ART_tr();
        break;
      case ARTL_ART_trConfiguration: 
        ARTPF_ART_trConfiguration();
        break;
      case ARTL_ART_trEntities: 
        ARTPF_ART_trEntities();
        break;
      case ARTL_ART_trEntityKind: 
        ARTPF_ART_trEntityKind();
        break;
      case ARTL_ART_trEntityReferences: 
        ARTPF_ART_trEntityReferences();
        break;
      case ARTL_ART_trEquations: 
        ARTPF_ART_trEquations();
        break;
      case ARTL_ART_trLabel: 
        ARTPF_ART_trLabel();
        break;
      case ARTL_ART_trMatch: 
        ARTPF_ART_trMatch();
        break;
      case ARTL_ART_trNamedTerm: 
        ARTPF_ART_trNamedTerm();
        break;
      case ARTL_ART_trPremises: 
        ARTPF_ART_trPremises();
        break;
      case ARTL_ART_trPrimaryTerm: 
        ARTPF_ART_trPrimaryTerm();
        break;
      case ARTL_ART_trRule: 
        ARTPF_ART_trRule();
        break;
      case ARTL_ART_trSubterms: 
        ARTPF_ART_trSubterms();
        break;
      case ARTL_ART_trTerm: 
        ARTPF_ART_trTerm();
        break;
      case ARTL_ART_trTransition: 
        ARTPF_ART_trTransition();
        break;
      case ARTL_ART_trUnamedTerm: 
        ARTPF_ART_trUnamedTerm();
        break;
      case ARTL_ART_tryArgument: 
        ARTPF_ART_tryArgument();
        break;
      case ARTL_ART_useElements: 
        ARTPF_ART_useElements();
        break;
      case ARTX_DESPATCH: 
        if (artNoDescriptors()) { 
          artCheckAcceptance();
          artParseCompleteTime = artReadClock();
          return;
         }
        artUnloadDescriptor();
    }
}

public void ARTSet1initialise() {
  ARTSet1 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet1, 0, artSetExtent, false);
}

public void ARTSet277initialise() {
  ARTSet277 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet277, 0, artSetExtent, false);
  ARTSet277[ARTTS__SHREIKresult] = true;
}

public void ARTSet241initialise() {
  ARTSet241 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet241, 0, artSetExtent, false);
  ARTSet241[ARTTS__SHREIKearleyLinkedAPI] = true;
}

public void ARTSet74initialise() {
  ARTSet74 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet74, 0, artSetExtent, false);
  ARTSet74[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet74[ARTL_ART_STRING_PLAIN_SQ] = true;
}

public void ARTSet165initialise() {
  ARTSet165 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet165, 0, artSetExtent, false);
  ARTSet165[ARTTS__SHREIKparaterminal] = true;
}

public void ARTSet246initialise() {
  ARTSet246 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet246, 0, artSetExtent, false);
  ARTSet246[ARTTS__SHREIKearleyTableLinkedAPI] = true;
}

public void ARTSet334initialise() {
  ARTSet334 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet334, 0, artSetExtent, false);
  ARTSet334[ARTTB_SIGNED_REAL] = true;
  ARTSet334[ARTL_ART___real64] = true;
}

public void ARTSet109initialise() {
  ARTSet109 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet109, 0, artSetExtent, false);
  ARTSet109[ARTTS__UPARROW_PLUS] = true;
}

public void ARTSet244initialise() {
  ARTSet244 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet244, 0, artSetExtent, false);
  ARTSet244[ARTTS__SHREIKearleyIndexedData] = true;
}

public void ARTSet266initialise() {
  ARTSet266 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet266, 0, artSetExtent, false);
  ARTSet266[ARTTS__SHREIKosbrd] = true;
}

public void ARTSet126initialise() {
  ARTSet126 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet126, 0, artSetExtent, false);
  ARTSet126[ARTTS__UPARROW_MINUS] = true;
}

public void ARTSet129initialise() {
  ARTSet129 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet129, 0, artSetExtent, false);
  ARTSet129[ARTTB_CHAR_BQ] = true;
  ARTSet129[ARTTB_ID] = true;
  ARTSet129[ARTTB_STRING_DOLLAR] = true;
  ARTSet129[ARTTB_STRING_DQ] = true;
  ARTSet129[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet129[ARTTS__AMPERSAND] = true;
  ARTSet129[ARTTS__LPAR] = true;
  ARTSet129[ARTTS_anyBuiltinTerminal] = true;
  ARTSet129[ARTTS_anyCaseInsensitiveTerminal] = true;
  ARTSet129[ARTTS_anyCaseSensitiveTerminal] = true;
  ARTSet129[ARTTS_anyCharacterTerminal] = true;
  ARTSet129[ARTTS_anyLiteralTerminal] = true;
  ARTSet129[ARTTS_anyNonterminal] = true;
  ARTSet129[ARTTS_anyParaterminal] = true;
  ARTSet129[ARTTS_anyTerminal] = true;
  ARTSet129[ARTL_ART_CHAR_BQ] = true;
  ARTSet129[ARTL_ART_ID] = true;
  ARTSet129[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet129[ARTL_ART_STRING_DQ] = true;
  ARTSet129[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet129[ARTL_ART_cfgBuiltinTerminal] = true;
  ARTSet129[ARTL_ART_cfgCaseInsensitiveTerminal] = true;
  ARTSet129[ARTL_ART_cfgCaseSensitiveTerminal] = true;
  ARTSet129[ARTL_ART_cfgCharacterTerminal] = true;
  ARTSet129[ARTL_ART_cfgNonterminal] = true;
  ARTSet129[ARTL_ART_chooseDiff] = true;
  ARTSet129[ARTL_ART_chooseElement] = true;
  ARTSet129[ARTL_ART_choosePredefinedSet] = true;
  ARTSet129[ARTL_ART_chooseUnionIntersection] = true;
}

public void ARTSet327initialise() {
  ARTSet327 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet327, 0, artSetExtent, false);
  ARTSet327[ARTTB_CHAR_BQ] = true;
  ARTSet327[ARTTB_ID] = true;
  ARTSet327[ARTTB_SIGNED_INTEGER] = true;
  ARTSet327[ARTTB_SIGNED_REAL] = true;
  ARTSet327[ARTTB_STRING_DQ] = true;
  ARTSet327[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet327[ARTTB_STRING_SQ] = true;
  ARTSet327[ARTTS__LT] = true;
  ARTSet327[ARTTS_False] = true;
  ARTSet327[ARTTS_True] = true;
  ARTSet327[ARTL_ART_False] = true;
  ARTSet327[ARTL_ART_ID] = true;
  ARTSet327[ARTL_ART_ID_ATTRIBUTE] = true;
  ARTSet327[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet327[ARTL_ART_True] = true;
  ARTSet327[ARTL_ART___bool] = true;
  ARTSet327[ARTL_ART___char] = true;
  ARTSet327[ARTL_ART___int32] = true;
  ARTSet327[ARTL_ART___real64] = true;
  ARTSet327[ARTL_ART___string] = true;
  ARTSet327[ARTL_ART_trConfiguration] = true;
  ARTSet327[ARTL_ART_trMatch] = true;
  ARTSet327[ARTL_ART_trPrimaryTerm] = true;
  ARTSet327[ARTL_ART_trTerm] = true;
  ARTSet327[ARTL_ART_trTransition] = true;
}

public void ARTSet36initialise() {
  ARTSet36 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet36, 0, artSetExtent, false);
  ARTSet36[ARTTS_True] = true;
}

public void ARTSet149initialise() {
  ARTSet149 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet149, 0, artSetExtent, false);
  ARTSet149[ARTTS__LT] = true;
  ARTSet149[ARTTS__LT_LT] = true;
  ARTSet149[ARTTS__GT] = true;
  ARTSet149[ARTTS__GT_GT] = true;
  ARTSet149[ARTL_ART_chooseHigher] = true;
  ARTSet149[ARTL_ART_chooseLonger] = true;
  ARTSet149[ARTL_ART_chooseLower] = true;
  ARTSet149[ARTL_ART_chooseShorter] = true;
  ARTSet149[ARTL_ART_chooserOp] = true;
}

public void ARTSet338initialise() {
  ARTSet338 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet338, 0, artSetExtent, false);
  ARTSet338[ARTTB_CHAR_BQ] = true;
  ARTSet338[ARTTB_ID] = true;
  ARTSet338[ARTTB_SIGNED_INTEGER] = true;
  ARTSet338[ARTTB_SIGNED_REAL] = true;
  ARTSet338[ARTTB_STRING_DQ] = true;
  ARTSet338[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet338[ARTTB_STRING_SQ] = true;
  ARTSet338[ARTTS__LT] = true;
  ARTSet338[ARTTS_False] = true;
  ARTSet338[ARTTS_True] = true;
  ARTSet338[ARTL_ART_False] = true;
  ARTSet338[ARTL_ART_ID] = true;
  ARTSet338[ARTL_ART_ID_ATTRIBUTE] = true;
  ARTSet338[ARTL_ART_STRING_DQ] = true;
  ARTSet338[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet338[ARTL_ART_True] = true;
  ARTSet338[ARTL_ART___bool] = true;
  ARTSet338[ARTL_ART___char] = true;
  ARTSet338[ARTL_ART___int32] = true;
  ARTSet338[ARTL_ART___real64] = true;
  ARTSet338[ARTL_ART___string] = true;
  ARTSet338[ARTL_ART_trConfiguration] = true;
  ARTSet338[ARTL_ART_trPrimaryTerm] = true;
  ARTSet338[ARTL_ART_trTerm] = true;
}

public void ARTSet293initialise() {
  ARTSet293 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet293, 0, artSetExtent, false);
  ARTSet293[ARTTB_CHAR_BQ] = true;
  ARTSet293[ARTTB_ID] = true;
  ARTSet293[ARTTB_SIGNED_INTEGER] = true;
  ARTSet293[ARTTB_SIGNED_REAL] = true;
  ARTSet293[ARTTB_STRING_DOLLAR] = true;
  ARTSet293[ARTTB_STRING_DQ] = true;
  ARTSet293[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet293[ARTTB_STRING_SQ] = true;
  ARTSet293[ARTTS__SHREIKGLLFIFODescriptors] = true;
  ARTSet293[ARTTS__SHREIKGLLPredictivePops] = true;
  ARTSet293[ARTTS__SHREIKGLLSuppressPopGuard] = true;
  ARTSet293[ARTTS__SHREIKGLLSuppressProductionGuard] = true;
  ARTSet293[ARTTS__SHREIKGLLSuppressSemantics] = true;
  ARTSet293[ARTTS__SHREIKGLLSuppressTestRepeat] = true;
  ARTSet293[ARTTS__SHREIKabsorb] = true;
  ARTSet293[ARTTS__SHREIKalphabet] = true;
  ARTSet293[ARTTS__SHREIKcfgElements] = true;
  ARTSet293[ARTTS__SHREIKcnp] = true;
  ARTSet293[ARTTS__SHREIKcnpGeneratorPool] = true;
  ARTSet293[ARTTS__SHREIKcnpIndexedAPI] = true;
  ARTSet293[ARTTS__SHREIKcnpIndexedPool] = true;
  ARTSet293[ARTTS__SHREIKcnpLinkedAPI] = true;
  ARTSet293[ARTTS__SHREIKcompressWhitespaceJava] = true;
  ARTSet293[ARTTS__SHREIKearley] = true;
  ARTSet293[ARTTS__SHREIKearley2007LinkedAPI] = true;
  ARTSet293[ARTTS__SHREIKearleyIndexedAPI] = true;
  ARTSet293[ARTTS__SHREIKearleyIndexedData] = true;
  ARTSet293[ARTTS__SHREIKearleyIndexedPool] = true;
  ARTSet293[ARTTS__SHREIKearleyLinkedAPI] = true;
  ARTSet293[ARTTS__SHREIKearleyTable] = true;
  ARTSet293[ARTTS__SHREIKearleyTableIndexedAPI] = true;
  ARTSet293[ARTTS__SHREIKearleyTableIndexedData] = true;
  ARTSet293[ARTTS__SHREIKearleyTableIndexedPool] = true;
  ARTSet293[ARTTS__SHREIKearleyTableLinkedAPI] = true;
  ARTSet293[ARTTS__SHREIKextractJLS] = true;
  ARTSet293[ARTTS__SHREIKgenerateC_PLUS_PLUS] = true;
  ARTSet293[ARTTS__SHREIKgenerateDynamic] = true;
  ARTSet293[ARTTS__SHREIKgenerateFragment] = true;
  ARTSet293[ARTTS__SHREIKgenerateJava] = true;
  ARTSet293[ARTTS__SHREIKgenerateML] = true;
  ARTSet293[ARTTS__SHREIKgeneratePool] = true;
  ARTSet293[ARTTS__SHREIKgenerateState] = true;
  ARTSet293[ARTTS__SHREIKgenerateStatic] = true;
  ARTSet293[ARTTS__SHREIKgll] = true;
  ARTSet293[ARTTS__SHREIKgllClusteredGeneratorPool] = true;
  ARTSet293[ARTTS__SHREIKgllGeneratorPool] = true;
  ARTSet293[ARTTS__SHREIKgllTWEGeneratorPool] = true;
  ARTSet293[ARTTS__SHREIKgrammarWrite] = true;
  ARTSet293[ARTTS__SHREIKgssPrint] = true;
  ARTSet293[ARTTS__SHREIKgssShow] = true;
  ARTSet293[ARTTS__SHREIKgssWrite] = true;
  ARTSet293[ARTTS__SHREIKinjectInstance] = true;
  ARTSet293[ARTTS__SHREIKinjectProduction] = true;
  ARTSet293[ARTTS__SHREIKinput] = true;
  ARTSet293[ARTTS__SHREIKinputPrint] = true;
  ARTSet293[ARTTS__SHREIKlatex] = true;
  ARTSet293[ARTTS__SHREIKlcnp] = true;
  ARTSet293[ARTTS__SHREIKlcnpGeneratorPool] = true;
  ARTSet293[ARTTS__SHREIKlcnpIndexedAPI] = true;
  ARTSet293[ARTTS__SHREIKlcnpIndexedPool] = true;
  ARTSet293[ARTTS__SHREIKlcnpLinkedAPI] = true;
  ARTSet293[ARTTS__SHREIKlexDFA] = true;
  ARTSet293[ARTTS__SHREIKlexGLL] = true;
  ARTSet293[ARTTS__SHREIKlexHardCoded] = true;
  ARTSet293[ARTTS__SHREIKlexWSSuffix] = true;
  ARTSet293[ARTTS__SHREIKlexerData] = true;
  ARTSet293[ARTTS__SHREIKlexerName] = true;
  ARTSet293[ARTTS__SHREIKmain] = true;
  ARTSet293[ARTTS__SHREIKmerge] = true;
  ARTSet293[ARTTS__SHREIKmgll] = true;
  ARTSet293[ARTTS__SHREIKmgllGeneratorPool] = true;
  ARTSet293[ARTTS__SHREIKmodule] = true;
  ARTSet293[ARTTS__SHREIKnamespace] = true;
  ARTSet293[ARTTS__SHREIKosbrd] = true;
  ARTSet293[ARTTS__SHREIKosbrdGenerator] = true;
  ARTSet293[ARTTS__SHREIKoutputDirectory] = true;
  ARTSet293[ARTTS__SHREIKparaterminal] = true;
  ARTSet293[ARTTS__SHREIKparseCountsPrint] = true;
  ARTSet293[ARTTS__SHREIKparserName] = true;
  ARTSet293[ARTTS__SHREIKprelude] = true;
  ARTSet293[ARTTS__SHREIKrelation] = true;
  ARTSet293[ARTTS__SHREIKresult] = true;
  ARTSet293[ARTTS__SHREIKsml97Parser] = true;
  ARTSet293[ARTTS__SHREIKsppfLongest] = true;
  ARTSet293[ARTTS__SHREIKsppfPrint] = true;
  ARTSet293[ARTTS__SHREIKsppfPriority] = true;
  ARTSet293[ARTTS__SHREIKsppfShow] = true;
  ARTSet293[ARTTS__SHREIKsppfWrite] = true;
  ARTSet293[ARTTS__SHREIKstart] = true;
  ARTSet293[ARTTS__SHREIKstatistics] = true;
  ARTSet293[ARTTS__SHREIKstrategy] = true;
  ARTSet293[ARTTS__SHREIKsupport] = true;
  ARTSet293[ARTTS__SHREIKtermPrint] = true;
  ARTSet293[ARTTS__SHREIKtermShow] = true;
  ARTSet293[ARTTS__SHREIKtermTool] = true;
  ARTSet293[ARTTS__SHREIKtermWrite] = true;
  ARTSet293[ARTTS__SHREIKtrace] = true;
  ARTSet293[ARTTS__SHREIKtreePrint] = true;
  ARTSet293[ARTTS__SHREIKtreeShow] = true;
  ARTSet293[ARTTS__SHREIKtreeWrite] = true;
  ARTSet293[ARTTS__SHREIKtry] = true;
  ARTSet293[ARTTS__SHREIKtweDead] = true;
  ARTSet293[ARTTS__SHREIKtweExtents] = true;
  ARTSet293[ARTTS__SHREIKtweFromSPPF] = true;
  ARTSet293[ARTTS__SHREIKtweLexicalisations] = true;
  ARTSet293[ARTTS__SHREIKtweLongest] = true;
  ARTSet293[ARTTS__SHREIKtwePrint] = true;
  ARTSet293[ARTTS__SHREIKtwePrintFull] = true;
  ARTSet293[ARTTS__SHREIKtwePrintSummary] = true;
  ARTSet293[ARTTS__SHREIKtwePriority] = true;
  ARTSet293[ARTTS__SHREIKtweRecursive] = true;
  ARTSet293[ARTTS__SHREIKtweSegments] = true;
  ARTSet293[ARTTS__SHREIKtweShow] = true;
  ARTSet293[ARTTS__SHREIKtweTokenWrite] = true;
  ARTSet293[ARTTS__SHREIKtweWrite] = true;
  ARTSet293[ARTTS__SHREIKunicodeAsEscapeSeuences] = true;
  ARTSet293[ARTTS__SHREIKuse] = true;
  ARTSet293[ARTTS__SHREIKverbosity] = true;
  ARTSet293[ARTTS__SHREIKwhitespace] = true;
  ARTSet293[ARTTS__AMPERSAND] = true;
  ARTSet293[ARTTS__LPAR] = true;
  ARTSet293[ARTTS__MINUS] = true;
  ARTSet293[ARTTS__MINUS_MINUS_MINUS] = true;
  ARTSet293[ARTTS__LT] = true;
  ARTSet293[ARTTS_False] = true;
  ARTSet293[ARTTS_True] = true;
  ARTSet293[ARTTS_anyBuiltinTerminal] = true;
  ARTSet293[ARTTS_anyCaseInsensitiveTerminal] = true;
  ARTSet293[ARTTS_anyCaseSensitiveTerminal] = true;
  ARTSet293[ARTTS_anyCharacterTerminal] = true;
  ARTSet293[ARTTS_anyLiteralTerminal] = true;
  ARTSet293[ARTTS_anyNonterminal] = true;
  ARTSet293[ARTTS_anyParaterminal] = true;
  ARTSet293[ARTTS_anyTerminal] = true;
  ARTSet293[ARTL_ART_CHAR_BQ] = true;
  ARTSet293[ARTL_ART_False] = true;
  ARTSet293[ARTL_ART_ID] = true;
  ARTSet293[ARTL_ART_ID_ATTRIBUTE] = true;
  ARTSet293[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet293[ARTL_ART_STRING_DQ] = true;
  ARTSet293[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet293[ARTL_ART_True] = true;
  ARTSet293[ARTL_ART___bool] = true;
  ARTSet293[ARTL_ART___char] = true;
  ARTSet293[ARTL_ART___int32] = true;
  ARTSet293[ARTL_ART___real64] = true;
  ARTSet293[ARTL_ART___string] = true;
  ARTSet293[ARTL_ART_cfgBuiltinTerminal] = true;
  ARTSet293[ARTL_ART_cfgCaseInsensitiveTerminal] = true;
  ARTSet293[ARTL_ART_cfgCaseSensitiveTerminal] = true;
  ARTSet293[ARTL_ART_cfgCharacterTerminal] = true;
  ARTSet293[ARTL_ART_cfgNonterminal] = true;
  ARTSet293[ARTL_ART_cfgRule] = true;
  ARTSet293[ARTL_ART_chooseDiff] = true;
  ARTSet293[ARTL_ART_chooseElement] = true;
  ARTSet293[ARTL_ART_choosePredefinedSet] = true;
  ARTSet293[ARTL_ART_chooseRule] = true;
  ARTSet293[ARTL_ART_chooseUnionIntersection] = true;
  ARTSet293[ARTL_ART_directive] = true;
  ARTSet293[ARTL_ART_tr] = true;
  ARTSet293[ARTL_ART_trConfiguration] = true;
  ARTSet293[ARTL_ART_trLabel] = true;
  ARTSet293[ARTL_ART_trMatch] = true;
  ARTSet293[ARTL_ART_trPremises] = true;
  ARTSet293[ARTL_ART_trPrimaryTerm] = true;
  ARTSet293[ARTL_ART_trRule] = true;
  ARTSet293[ARTL_ART_trTerm] = true;
  ARTSet293[ARTL_ART_trTransition] = true;
}

public void ARTSet261initialise() {
  ARTSet261 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet261, 0, artSetExtent, false);
  ARTSet261[ARTTS__SHREIKgllGeneratorPool] = true;
}

public void ARTSet284initialise() {
  ARTSet284 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet284, 0, artSetExtent, false);
  ARTSet284[ARTX_EOS] = true;
  ARTSet284[ARTTB_CHAR_BQ] = true;
  ARTSet284[ARTTB_ID] = true;
  ARTSet284[ARTTB_SIGNED_INTEGER] = true;
  ARTSet284[ARTTB_SIGNED_REAL] = true;
  ARTSet284[ARTTB_STRING_DOLLAR] = true;
  ARTSet284[ARTTB_STRING_DQ] = true;
  ARTSet284[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet284[ARTTB_STRING_SQ] = true;
  ARTSet284[ARTTS__SHREIKGLLFIFODescriptors] = true;
  ARTSet284[ARTTS__SHREIKGLLPredictivePops] = true;
  ARTSet284[ARTTS__SHREIKGLLSuppressPopGuard] = true;
  ARTSet284[ARTTS__SHREIKGLLSuppressProductionGuard] = true;
  ARTSet284[ARTTS__SHREIKGLLSuppressSemantics] = true;
  ARTSet284[ARTTS__SHREIKGLLSuppressTestRepeat] = true;
  ARTSet284[ARTTS__SHREIKabsorb] = true;
  ARTSet284[ARTTS__SHREIKalphabet] = true;
  ARTSet284[ARTTS__SHREIKcfgElements] = true;
  ARTSet284[ARTTS__SHREIKcnp] = true;
  ARTSet284[ARTTS__SHREIKcnpGeneratorPool] = true;
  ARTSet284[ARTTS__SHREIKcnpIndexedAPI] = true;
  ARTSet284[ARTTS__SHREIKcnpIndexedPool] = true;
  ARTSet284[ARTTS__SHREIKcnpLinkedAPI] = true;
  ARTSet284[ARTTS__SHREIKcompressWhitespaceJava] = true;
  ARTSet284[ARTTS__SHREIKearley] = true;
  ARTSet284[ARTTS__SHREIKearley2007LinkedAPI] = true;
  ARTSet284[ARTTS__SHREIKearleyIndexedAPI] = true;
  ARTSet284[ARTTS__SHREIKearleyIndexedData] = true;
  ARTSet284[ARTTS__SHREIKearleyIndexedPool] = true;
  ARTSet284[ARTTS__SHREIKearleyLinkedAPI] = true;
  ARTSet284[ARTTS__SHREIKearleyTable] = true;
  ARTSet284[ARTTS__SHREIKearleyTableIndexedAPI] = true;
  ARTSet284[ARTTS__SHREIKearleyTableIndexedData] = true;
  ARTSet284[ARTTS__SHREIKearleyTableIndexedPool] = true;
  ARTSet284[ARTTS__SHREIKearleyTableLinkedAPI] = true;
  ARTSet284[ARTTS__SHREIKextractJLS] = true;
  ARTSet284[ARTTS__SHREIKgenerateC_PLUS_PLUS] = true;
  ARTSet284[ARTTS__SHREIKgenerateDynamic] = true;
  ARTSet284[ARTTS__SHREIKgenerateFragment] = true;
  ARTSet284[ARTTS__SHREIKgenerateJava] = true;
  ARTSet284[ARTTS__SHREIKgenerateML] = true;
  ARTSet284[ARTTS__SHREIKgeneratePool] = true;
  ARTSet284[ARTTS__SHREIKgenerateState] = true;
  ARTSet284[ARTTS__SHREIKgenerateStatic] = true;
  ARTSet284[ARTTS__SHREIKgll] = true;
  ARTSet284[ARTTS__SHREIKgllClusteredGeneratorPool] = true;
  ARTSet284[ARTTS__SHREIKgllGeneratorPool] = true;
  ARTSet284[ARTTS__SHREIKgllTWEGeneratorPool] = true;
  ARTSet284[ARTTS__SHREIKgrammarWrite] = true;
  ARTSet284[ARTTS__SHREIKgssPrint] = true;
  ARTSet284[ARTTS__SHREIKgssShow] = true;
  ARTSet284[ARTTS__SHREIKgssWrite] = true;
  ARTSet284[ARTTS__SHREIKinjectInstance] = true;
  ARTSet284[ARTTS__SHREIKinjectProduction] = true;
  ARTSet284[ARTTS__SHREIKinput] = true;
  ARTSet284[ARTTS__SHREIKinputPrint] = true;
  ARTSet284[ARTTS__SHREIKlatex] = true;
  ARTSet284[ARTTS__SHREIKlcnp] = true;
  ARTSet284[ARTTS__SHREIKlcnpGeneratorPool] = true;
  ARTSet284[ARTTS__SHREIKlcnpIndexedAPI] = true;
  ARTSet284[ARTTS__SHREIKlcnpIndexedPool] = true;
  ARTSet284[ARTTS__SHREIKlcnpLinkedAPI] = true;
  ARTSet284[ARTTS__SHREIKlexDFA] = true;
  ARTSet284[ARTTS__SHREIKlexGLL] = true;
  ARTSet284[ARTTS__SHREIKlexHardCoded] = true;
  ARTSet284[ARTTS__SHREIKlexWSSuffix] = true;
  ARTSet284[ARTTS__SHREIKlexerData] = true;
  ARTSet284[ARTTS__SHREIKlexerName] = true;
  ARTSet284[ARTTS__SHREIKmain] = true;
  ARTSet284[ARTTS__SHREIKmerge] = true;
  ARTSet284[ARTTS__SHREIKmgll] = true;
  ARTSet284[ARTTS__SHREIKmgllGeneratorPool] = true;
  ARTSet284[ARTTS__SHREIKmodule] = true;
  ARTSet284[ARTTS__SHREIKnamespace] = true;
  ARTSet284[ARTTS__SHREIKosbrd] = true;
  ARTSet284[ARTTS__SHREIKosbrdGenerator] = true;
  ARTSet284[ARTTS__SHREIKoutputDirectory] = true;
  ARTSet284[ARTTS__SHREIKparaterminal] = true;
  ARTSet284[ARTTS__SHREIKparseCountsPrint] = true;
  ARTSet284[ARTTS__SHREIKparserName] = true;
  ARTSet284[ARTTS__SHREIKprelude] = true;
  ARTSet284[ARTTS__SHREIKrelation] = true;
  ARTSet284[ARTTS__SHREIKresult] = true;
  ARTSet284[ARTTS__SHREIKsml97Parser] = true;
  ARTSet284[ARTTS__SHREIKsppfLongest] = true;
  ARTSet284[ARTTS__SHREIKsppfPrint] = true;
  ARTSet284[ARTTS__SHREIKsppfPriority] = true;
  ARTSet284[ARTTS__SHREIKsppfShow] = true;
  ARTSet284[ARTTS__SHREIKsppfWrite] = true;
  ARTSet284[ARTTS__SHREIKstart] = true;
  ARTSet284[ARTTS__SHREIKstatistics] = true;
  ARTSet284[ARTTS__SHREIKstrategy] = true;
  ARTSet284[ARTTS__SHREIKsupport] = true;
  ARTSet284[ARTTS__SHREIKtermPrint] = true;
  ARTSet284[ARTTS__SHREIKtermShow] = true;
  ARTSet284[ARTTS__SHREIKtermTool] = true;
  ARTSet284[ARTTS__SHREIKtermWrite] = true;
  ARTSet284[ARTTS__SHREIKtrace] = true;
  ARTSet284[ARTTS__SHREIKtreePrint] = true;
  ARTSet284[ARTTS__SHREIKtreeShow] = true;
  ARTSet284[ARTTS__SHREIKtreeWrite] = true;
  ARTSet284[ARTTS__SHREIKtry] = true;
  ARTSet284[ARTTS__SHREIKtweDead] = true;
  ARTSet284[ARTTS__SHREIKtweExtents] = true;
  ARTSet284[ARTTS__SHREIKtweFromSPPF] = true;
  ARTSet284[ARTTS__SHREIKtweLexicalisations] = true;
  ARTSet284[ARTTS__SHREIKtweLongest] = true;
  ARTSet284[ARTTS__SHREIKtwePrint] = true;
  ARTSet284[ARTTS__SHREIKtwePrintFull] = true;
  ARTSet284[ARTTS__SHREIKtwePrintSummary] = true;
  ARTSet284[ARTTS__SHREIKtwePriority] = true;
  ARTSet284[ARTTS__SHREIKtweRecursive] = true;
  ARTSet284[ARTTS__SHREIKtweSegments] = true;
  ARTSet284[ARTTS__SHREIKtweShow] = true;
  ARTSet284[ARTTS__SHREIKtweTokenWrite] = true;
  ARTSet284[ARTTS__SHREIKtweWrite] = true;
  ARTSet284[ARTTS__SHREIKunicodeAsEscapeSeuences] = true;
  ARTSet284[ARTTS__SHREIKuse] = true;
  ARTSet284[ARTTS__SHREIKverbosity] = true;
  ARTSet284[ARTTS__SHREIKwhitespace] = true;
  ARTSet284[ARTTS__AMPERSAND] = true;
  ARTSet284[ARTTS__LPAR] = true;
  ARTSet284[ARTTS__MINUS] = true;
  ARTSet284[ARTTS__MINUS_MINUS_MINUS] = true;
  ARTSet284[ARTTS__LT] = true;
  ARTSet284[ARTTS_False] = true;
  ARTSet284[ARTTS_True] = true;
  ARTSet284[ARTTS_anyBuiltinTerminal] = true;
  ARTSet284[ARTTS_anyCaseInsensitiveTerminal] = true;
  ARTSet284[ARTTS_anyCaseSensitiveTerminal] = true;
  ARTSet284[ARTTS_anyCharacterTerminal] = true;
  ARTSet284[ARTTS_anyLiteralTerminal] = true;
  ARTSet284[ARTTS_anyNonterminal] = true;
  ARTSet284[ARTTS_anyParaterminal] = true;
  ARTSet284[ARTTS_anyTerminal] = true;
  ARTSet284[ARTL_ART_CHAR_BQ] = true;
  ARTSet284[ARTL_ART_False] = true;
  ARTSet284[ARTL_ART_ID] = true;
  ARTSet284[ARTL_ART_ID_ATTRIBUTE] = true;
  ARTSet284[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet284[ARTL_ART_STRING_DQ] = true;
  ARTSet284[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet284[ARTL_ART_True] = true;
  ARTSet284[ARTL_ART___bool] = true;
  ARTSet284[ARTL_ART___char] = true;
  ARTSet284[ARTL_ART___int32] = true;
  ARTSet284[ARTL_ART___real64] = true;
  ARTSet284[ARTL_ART___string] = true;
  ARTSet284[ARTL_ART_cfgBuiltinTerminal] = true;
  ARTSet284[ARTL_ART_cfgCaseInsensitiveTerminal] = true;
  ARTSet284[ARTL_ART_cfgCaseSensitiveTerminal] = true;
  ARTSet284[ARTL_ART_cfgCharacterTerminal] = true;
  ARTSet284[ARTL_ART_cfgNonterminal] = true;
  ARTSet284[ARTL_ART_cfgRule] = true;
  ARTSet284[ARTL_ART_chooseDiff] = true;
  ARTSet284[ARTL_ART_chooseElement] = true;
  ARTSet284[ARTL_ART_choosePredefinedSet] = true;
  ARTSet284[ARTL_ART_chooseRule] = true;
  ARTSet284[ARTL_ART_chooseUnionIntersection] = true;
  ARTSet284[ARTL_ART_directive] = true;
  ARTSet284[ARTL_ART_idJAVA] = true;
  ARTSet284[ARTL_ART_text] = true;
  ARTSet284[ARTL_ART_textElement] = true;
  ARTSet284[ARTL_ART_tr] = true;
  ARTSet284[ARTL_ART_trConfiguration] = true;
  ARTSet284[ARTL_ART_trLabel] = true;
  ARTSet284[ARTL_ART_trMatch] = true;
  ARTSet284[ARTL_ART_trPremises] = true;
  ARTSet284[ARTL_ART_trPrimaryTerm] = true;
  ARTSet284[ARTL_ART_trRule] = true;
  ARTSet284[ARTL_ART_trTerm] = true;
  ARTSet284[ARTL_ART_trTransition] = true;
}

public void ARTSet38initialise() {
  ARTSet38 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet38, 0, artSetExtent, false);
  ARTSet38[ARTTS_True] = true;
  ARTSet38[ARTL_ART_True] = true;
}

public void ARTSet216initialise() {
  ARTSet216 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet216, 0, artSetExtent, false);
  ARTSet216[ARTTS__SHREIKtweDead] = true;
}

public void ARTSet85initialise() {
  ARTSet85 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet85, 0, artSetExtent, false);
  ARTSet85[ARTTB_CHAR_BQ] = true;
  ARTSet85[ARTTB_ID] = true;
  ARTSet85[ARTTB_STRING_DOLLAR] = true;
  ARTSet85[ARTTB_STRING_DQ] = true;
  ARTSet85[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet85[ARTTS__HASH] = true;
  ARTSet85[ARTTS__AMPERSAND] = true;
  ARTSet85[ARTTS__LPAR] = true;
  ARTSet85[ARTTS__PERIOD] = true;
  ARTSet85[ARTTS__BACKSLASH_BACKSLASH] = true;
  ARTSet85[ARTL_ART_CHAR_BQ] = true;
  ARTSet85[ARTL_ART_ID] = true;
  ARTSet85[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet85[ARTL_ART_STRING_DQ] = true;
  ARTSet85[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet85[ARTL_ART_cfgAtom] = true;
  ARTSet85[ARTL_ART_cfgBuiltinTerminal] = true;
  ARTSet85[ARTL_ART_cfgCaseInsensitiveTerminal] = true;
  ARTSet85[ARTL_ART_cfgCaseSensitiveTerminal] = true;
  ARTSet85[ARTL_ART_cfgCharacterRangeTerminal] = true;
  ARTSet85[ARTL_ART_cfgCharacterTerminal] = true;
  ARTSet85[ARTL_ART_cfgDiff] = true;
  ARTSet85[ARTL_ART_cfgDoFirst] = true;
  ARTSet85[ARTL_ART_cfgElement] = true;
  ARTSet85[ARTL_ART_cfgEpsilon] = true;
  ARTSet85[ARTL_ART_cfgNonterminal] = true;
  ARTSet85[ARTL_ART_cfgNot] = true;
  ARTSet85[ARTL_ART_cfgSlotSymbol] = true;
  ARTSet85[ARTL_ART_cfgUnion] = true;
}

public void ARTSet290initialise() {
  ARTSet290 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet290, 0, artSetExtent, false);
  ARTSet290[ARTTB_CHAR_BQ] = true;
  ARTSet290[ARTTB_ID] = true;
  ARTSet290[ARTTB_SIGNED_INTEGER] = true;
  ARTSet290[ARTTB_SIGNED_REAL] = true;
  ARTSet290[ARTTB_STRING_DOLLAR] = true;
  ARTSet290[ARTTB_STRING_DQ] = true;
  ARTSet290[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet290[ARTTB_STRING_SQ] = true;
  ARTSet290[ARTTS__SHREIKGLLFIFODescriptors] = true;
  ARTSet290[ARTTS__SHREIKGLLPredictivePops] = true;
  ARTSet290[ARTTS__SHREIKGLLSuppressPopGuard] = true;
  ARTSet290[ARTTS__SHREIKGLLSuppressProductionGuard] = true;
  ARTSet290[ARTTS__SHREIKGLLSuppressSemantics] = true;
  ARTSet290[ARTTS__SHREIKGLLSuppressTestRepeat] = true;
  ARTSet290[ARTTS__SHREIKabsorb] = true;
  ARTSet290[ARTTS__SHREIKalphabet] = true;
  ARTSet290[ARTTS__SHREIKcfgElements] = true;
  ARTSet290[ARTTS__SHREIKcnp] = true;
  ARTSet290[ARTTS__SHREIKcnpGeneratorPool] = true;
  ARTSet290[ARTTS__SHREIKcnpIndexedAPI] = true;
  ARTSet290[ARTTS__SHREIKcnpIndexedPool] = true;
  ARTSet290[ARTTS__SHREIKcnpLinkedAPI] = true;
  ARTSet290[ARTTS__SHREIKcompressWhitespaceJava] = true;
  ARTSet290[ARTTS__SHREIKearley] = true;
  ARTSet290[ARTTS__SHREIKearley2007LinkedAPI] = true;
  ARTSet290[ARTTS__SHREIKearleyIndexedAPI] = true;
  ARTSet290[ARTTS__SHREIKearleyIndexedData] = true;
  ARTSet290[ARTTS__SHREIKearleyIndexedPool] = true;
  ARTSet290[ARTTS__SHREIKearleyLinkedAPI] = true;
  ARTSet290[ARTTS__SHREIKearleyTable] = true;
  ARTSet290[ARTTS__SHREIKearleyTableIndexedAPI] = true;
  ARTSet290[ARTTS__SHREIKearleyTableIndexedData] = true;
  ARTSet290[ARTTS__SHREIKearleyTableIndexedPool] = true;
  ARTSet290[ARTTS__SHREIKearleyTableLinkedAPI] = true;
  ARTSet290[ARTTS__SHREIKextractJLS] = true;
  ARTSet290[ARTTS__SHREIKgenerateC_PLUS_PLUS] = true;
  ARTSet290[ARTTS__SHREIKgenerateDynamic] = true;
  ARTSet290[ARTTS__SHREIKgenerateFragment] = true;
  ARTSet290[ARTTS__SHREIKgenerateJava] = true;
  ARTSet290[ARTTS__SHREIKgenerateML] = true;
  ARTSet290[ARTTS__SHREIKgeneratePool] = true;
  ARTSet290[ARTTS__SHREIKgenerateState] = true;
  ARTSet290[ARTTS__SHREIKgenerateStatic] = true;
  ARTSet290[ARTTS__SHREIKgll] = true;
  ARTSet290[ARTTS__SHREIKgllClusteredGeneratorPool] = true;
  ARTSet290[ARTTS__SHREIKgllGeneratorPool] = true;
  ARTSet290[ARTTS__SHREIKgllTWEGeneratorPool] = true;
  ARTSet290[ARTTS__SHREIKgrammarWrite] = true;
  ARTSet290[ARTTS__SHREIKgssPrint] = true;
  ARTSet290[ARTTS__SHREIKgssShow] = true;
  ARTSet290[ARTTS__SHREIKgssWrite] = true;
  ARTSet290[ARTTS__SHREIKinjectInstance] = true;
  ARTSet290[ARTTS__SHREIKinjectProduction] = true;
  ARTSet290[ARTTS__SHREIKinput] = true;
  ARTSet290[ARTTS__SHREIKinputPrint] = true;
  ARTSet290[ARTTS__SHREIKlatex] = true;
  ARTSet290[ARTTS__SHREIKlcnp] = true;
  ARTSet290[ARTTS__SHREIKlcnpGeneratorPool] = true;
  ARTSet290[ARTTS__SHREIKlcnpIndexedAPI] = true;
  ARTSet290[ARTTS__SHREIKlcnpIndexedPool] = true;
  ARTSet290[ARTTS__SHREIKlcnpLinkedAPI] = true;
  ARTSet290[ARTTS__SHREIKlexDFA] = true;
  ARTSet290[ARTTS__SHREIKlexGLL] = true;
  ARTSet290[ARTTS__SHREIKlexHardCoded] = true;
  ARTSet290[ARTTS__SHREIKlexWSSuffix] = true;
  ARTSet290[ARTTS__SHREIKlexerData] = true;
  ARTSet290[ARTTS__SHREIKlexerName] = true;
  ARTSet290[ARTTS__SHREIKmain] = true;
  ARTSet290[ARTTS__SHREIKmerge] = true;
  ARTSet290[ARTTS__SHREIKmgll] = true;
  ARTSet290[ARTTS__SHREIKmgllGeneratorPool] = true;
  ARTSet290[ARTTS__SHREIKmodule] = true;
  ARTSet290[ARTTS__SHREIKnamespace] = true;
  ARTSet290[ARTTS__SHREIKosbrd] = true;
  ARTSet290[ARTTS__SHREIKosbrdGenerator] = true;
  ARTSet290[ARTTS__SHREIKoutputDirectory] = true;
  ARTSet290[ARTTS__SHREIKparaterminal] = true;
  ARTSet290[ARTTS__SHREIKparseCountsPrint] = true;
  ARTSet290[ARTTS__SHREIKparserName] = true;
  ARTSet290[ARTTS__SHREIKprelude] = true;
  ARTSet290[ARTTS__SHREIKrelation] = true;
  ARTSet290[ARTTS__SHREIKresult] = true;
  ARTSet290[ARTTS__SHREIKsml97Parser] = true;
  ARTSet290[ARTTS__SHREIKsppfLongest] = true;
  ARTSet290[ARTTS__SHREIKsppfPrint] = true;
  ARTSet290[ARTTS__SHREIKsppfPriority] = true;
  ARTSet290[ARTTS__SHREIKsppfShow] = true;
  ARTSet290[ARTTS__SHREIKsppfWrite] = true;
  ARTSet290[ARTTS__SHREIKstart] = true;
  ARTSet290[ARTTS__SHREIKstatistics] = true;
  ARTSet290[ARTTS__SHREIKstrategy] = true;
  ARTSet290[ARTTS__SHREIKsupport] = true;
  ARTSet290[ARTTS__SHREIKtermPrint] = true;
  ARTSet290[ARTTS__SHREIKtermShow] = true;
  ARTSet290[ARTTS__SHREIKtermTool] = true;
  ARTSet290[ARTTS__SHREIKtermWrite] = true;
  ARTSet290[ARTTS__SHREIKtrace] = true;
  ARTSet290[ARTTS__SHREIKtreePrint] = true;
  ARTSet290[ARTTS__SHREIKtreeShow] = true;
  ARTSet290[ARTTS__SHREIKtreeWrite] = true;
  ARTSet290[ARTTS__SHREIKtry] = true;
  ARTSet290[ARTTS__SHREIKtweDead] = true;
  ARTSet290[ARTTS__SHREIKtweExtents] = true;
  ARTSet290[ARTTS__SHREIKtweFromSPPF] = true;
  ARTSet290[ARTTS__SHREIKtweLexicalisations] = true;
  ARTSet290[ARTTS__SHREIKtweLongest] = true;
  ARTSet290[ARTTS__SHREIKtwePrint] = true;
  ARTSet290[ARTTS__SHREIKtwePrintFull] = true;
  ARTSet290[ARTTS__SHREIKtwePrintSummary] = true;
  ARTSet290[ARTTS__SHREIKtwePriority] = true;
  ARTSet290[ARTTS__SHREIKtweRecursive] = true;
  ARTSet290[ARTTS__SHREIKtweSegments] = true;
  ARTSet290[ARTTS__SHREIKtweShow] = true;
  ARTSet290[ARTTS__SHREIKtweTokenWrite] = true;
  ARTSet290[ARTTS__SHREIKtweWrite] = true;
  ARTSet290[ARTTS__SHREIKunicodeAsEscapeSeuences] = true;
  ARTSet290[ARTTS__SHREIKuse] = true;
  ARTSet290[ARTTS__SHREIKverbosity] = true;
  ARTSet290[ARTTS__SHREIKwhitespace] = true;
  ARTSet290[ARTTS__AMPERSAND] = true;
  ARTSet290[ARTTS__LPAR] = true;
  ARTSet290[ARTTS__MINUS] = true;
  ARTSet290[ARTTS__MINUS_MINUS_MINUS] = true;
  ARTSet290[ARTTS__LT] = true;
  ARTSet290[ARTTS_False] = true;
  ARTSet290[ARTTS_True] = true;
  ARTSet290[ARTTS_anyBuiltinTerminal] = true;
  ARTSet290[ARTTS_anyCaseInsensitiveTerminal] = true;
  ARTSet290[ARTTS_anyCaseSensitiveTerminal] = true;
  ARTSet290[ARTTS_anyCharacterTerminal] = true;
  ARTSet290[ARTTS_anyLiteralTerminal] = true;
  ARTSet290[ARTTS_anyNonterminal] = true;
  ARTSet290[ARTTS_anyParaterminal] = true;
  ARTSet290[ARTTS_anyTerminal] = true;
  ARTSet290[ARTL_ART_CHAR_BQ] = true;
  ARTSet290[ARTL_ART_False] = true;
  ARTSet290[ARTL_ART_ID] = true;
  ARTSet290[ARTL_ART_ID_ATTRIBUTE] = true;
  ARTSet290[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet290[ARTL_ART_STRING_DQ] = true;
  ARTSet290[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet290[ARTL_ART_True] = true;
  ARTSet290[ARTL_ART___bool] = true;
  ARTSet290[ARTL_ART___char] = true;
  ARTSet290[ARTL_ART___int32] = true;
  ARTSet290[ARTL_ART___real64] = true;
  ARTSet290[ARTL_ART___string] = true;
  ARTSet290[ARTL_ART_cfgBuiltinTerminal] = true;
  ARTSet290[ARTL_ART_cfgCaseInsensitiveTerminal] = true;
  ARTSet290[ARTL_ART_cfgCaseSensitiveTerminal] = true;
  ARTSet290[ARTL_ART_cfgCharacterTerminal] = true;
  ARTSet290[ARTL_ART_cfgNonterminal] = true;
  ARTSet290[ARTL_ART_cfgRule] = true;
  ARTSet290[ARTL_ART_chooseDiff] = true;
  ARTSet290[ARTL_ART_chooseElement] = true;
  ARTSet290[ARTL_ART_choosePredefinedSet] = true;
  ARTSet290[ARTL_ART_chooseRule] = true;
  ARTSet290[ARTL_ART_chooseUnionIntersection] = true;
  ARTSet290[ARTL_ART_directive] = true;
  ARTSet290[ARTL_ART_textElement] = true;
  ARTSet290[ARTL_ART_tr] = true;
  ARTSet290[ARTL_ART_trConfiguration] = true;
  ARTSet290[ARTL_ART_trLabel] = true;
  ARTSet290[ARTL_ART_trMatch] = true;
  ARTSet290[ARTL_ART_trPremises] = true;
  ARTSet290[ARTL_ART_trPrimaryTerm] = true;
  ARTSet290[ARTL_ART_trRule] = true;
  ARTSet290[ARTL_ART_trTerm] = true;
  ARTSet290[ARTL_ART_trTransition] = true;
}

public void ARTSet24initialise() {
  ARTSet24 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet24, 0, artSetExtent, false);
  ARTSet24[ARTTS__EQUAL_GT] = true;
}

public void ARTSet30initialise() {
  ARTSet30 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet30, 0, artSetExtent, false);
  ARTSet30[ARTTS__MINUS_SLASH] = true;
}

public void ARTSet223initialise() {
  ARTSet223 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet223, 0, artSetExtent, false);
  ARTSet223[ARTTS__SHREIKgenerateDynamic] = true;
}

public void ARTSet328initialise() {
  ARTSet328 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet328, 0, artSetExtent, false);
  ARTSet328[ARTTB_CHAR_BQ] = true;
  ARTSet328[ARTTB_ID] = true;
  ARTSet328[ARTTB_SIGNED_INTEGER] = true;
  ARTSet328[ARTTB_SIGNED_REAL] = true;
  ARTSet328[ARTTB_STRING_DQ] = true;
  ARTSet328[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet328[ARTTB_STRING_SQ] = true;
  ARTSet328[ARTTS_False] = true;
  ARTSet328[ARTTS_True] = true;
  ARTSet328[ARTL_ART_False] = true;
  ARTSet328[ARTL_ART_ID] = true;
  ARTSet328[ARTL_ART_ID_ATTRIBUTE] = true;
  ARTSet328[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet328[ARTL_ART_True] = true;
  ARTSet328[ARTL_ART___bool] = true;
  ARTSet328[ARTL_ART___char] = true;
  ARTSet328[ARTL_ART___int32] = true;
  ARTSet328[ARTL_ART___real64] = true;
  ARTSet328[ARTL_ART___string] = true;
  ARTSet328[ARTL_ART_trMatch] = true;
  ARTSet328[ARTL_ART_trTerm] = true;
}

public void ARTSet61initialise() {
  ARTSet61 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet61, 0, artSetExtent, false);
  ARTSet61[ARTTB_STRING_DQ] = true;
  ARTSet61[ARTL_ART_STRING_DQ] = true;
  ARTSet61[ARTL_ART_cfgCaseInsensitiveTerminal] = true;
}

public void ARTSet144initialise() {
  ARTSet144 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet144, 0, artSetExtent, false);
  ARTSet144[ARTTS_anyCaseInsensitiveTerminal] = true;
}

public void ARTSet84initialise() {
  ARTSet84 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet84, 0, artSetExtent, false);
  ARTSet84[ARTX_EOS] = true;
  ARTSet84[ARTTB_CHAR_BQ] = true;
  ARTSet84[ARTTB_ID] = true;
  ARTSet84[ARTTB_SIGNED_INTEGER] = true;
  ARTSet84[ARTTB_SIGNED_REAL] = true;
  ARTSet84[ARTTB_STRING_BRACE_NEST] = true;
  ARTSet84[ARTTB_STRING_DOLLAR] = true;
  ARTSet84[ARTTB_STRING_DQ] = true;
  ARTSet84[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet84[ARTTB_STRING_SQ] = true;
  ARTSet84[ARTTS__SHREIKGLLFIFODescriptors] = true;
  ARTSet84[ARTTS__SHREIKGLLPredictivePops] = true;
  ARTSet84[ARTTS__SHREIKGLLSuppressPopGuard] = true;
  ARTSet84[ARTTS__SHREIKGLLSuppressProductionGuard] = true;
  ARTSet84[ARTTS__SHREIKGLLSuppressSemantics] = true;
  ARTSet84[ARTTS__SHREIKGLLSuppressTestRepeat] = true;
  ARTSet84[ARTTS__SHREIKabsorb] = true;
  ARTSet84[ARTTS__SHREIKalphabet] = true;
  ARTSet84[ARTTS__SHREIKcfgElements] = true;
  ARTSet84[ARTTS__SHREIKcnp] = true;
  ARTSet84[ARTTS__SHREIKcnpGeneratorPool] = true;
  ARTSet84[ARTTS__SHREIKcnpIndexedAPI] = true;
  ARTSet84[ARTTS__SHREIKcnpIndexedPool] = true;
  ARTSet84[ARTTS__SHREIKcnpLinkedAPI] = true;
  ARTSet84[ARTTS__SHREIKcompressWhitespaceJava] = true;
  ARTSet84[ARTTS__SHREIKearley] = true;
  ARTSet84[ARTTS__SHREIKearley2007LinkedAPI] = true;
  ARTSet84[ARTTS__SHREIKearleyIndexedAPI] = true;
  ARTSet84[ARTTS__SHREIKearleyIndexedData] = true;
  ARTSet84[ARTTS__SHREIKearleyIndexedPool] = true;
  ARTSet84[ARTTS__SHREIKearleyLinkedAPI] = true;
  ARTSet84[ARTTS__SHREIKearleyTable] = true;
  ARTSet84[ARTTS__SHREIKearleyTableIndexedAPI] = true;
  ARTSet84[ARTTS__SHREIKearleyTableIndexedData] = true;
  ARTSet84[ARTTS__SHREIKearleyTableIndexedPool] = true;
  ARTSet84[ARTTS__SHREIKearleyTableLinkedAPI] = true;
  ARTSet84[ARTTS__SHREIKextractJLS] = true;
  ARTSet84[ARTTS__SHREIKgenerateC_PLUS_PLUS] = true;
  ARTSet84[ARTTS__SHREIKgenerateDynamic] = true;
  ARTSet84[ARTTS__SHREIKgenerateFragment] = true;
  ARTSet84[ARTTS__SHREIKgenerateJava] = true;
  ARTSet84[ARTTS__SHREIKgenerateML] = true;
  ARTSet84[ARTTS__SHREIKgeneratePool] = true;
  ARTSet84[ARTTS__SHREIKgenerateState] = true;
  ARTSet84[ARTTS__SHREIKgenerateStatic] = true;
  ARTSet84[ARTTS__SHREIKgll] = true;
  ARTSet84[ARTTS__SHREIKgllClusteredGeneratorPool] = true;
  ARTSet84[ARTTS__SHREIKgllGeneratorPool] = true;
  ARTSet84[ARTTS__SHREIKgllTWEGeneratorPool] = true;
  ARTSet84[ARTTS__SHREIKgrammarWrite] = true;
  ARTSet84[ARTTS__SHREIKgssPrint] = true;
  ARTSet84[ARTTS__SHREIKgssShow] = true;
  ARTSet84[ARTTS__SHREIKgssWrite] = true;
  ARTSet84[ARTTS__SHREIKinjectInstance] = true;
  ARTSet84[ARTTS__SHREIKinjectProduction] = true;
  ARTSet84[ARTTS__SHREIKinput] = true;
  ARTSet84[ARTTS__SHREIKinputPrint] = true;
  ARTSet84[ARTTS__SHREIKlatex] = true;
  ARTSet84[ARTTS__SHREIKlcnp] = true;
  ARTSet84[ARTTS__SHREIKlcnpGeneratorPool] = true;
  ARTSet84[ARTTS__SHREIKlcnpIndexedAPI] = true;
  ARTSet84[ARTTS__SHREIKlcnpIndexedPool] = true;
  ARTSet84[ARTTS__SHREIKlcnpLinkedAPI] = true;
  ARTSet84[ARTTS__SHREIKlexDFA] = true;
  ARTSet84[ARTTS__SHREIKlexGLL] = true;
  ARTSet84[ARTTS__SHREIKlexHardCoded] = true;
  ARTSet84[ARTTS__SHREIKlexWSSuffix] = true;
  ARTSet84[ARTTS__SHREIKlexerData] = true;
  ARTSet84[ARTTS__SHREIKlexerName] = true;
  ARTSet84[ARTTS__SHREIKmain] = true;
  ARTSet84[ARTTS__SHREIKmerge] = true;
  ARTSet84[ARTTS__SHREIKmgll] = true;
  ARTSet84[ARTTS__SHREIKmgllGeneratorPool] = true;
  ARTSet84[ARTTS__SHREIKmodule] = true;
  ARTSet84[ARTTS__SHREIKnamespace] = true;
  ARTSet84[ARTTS__SHREIKosbrd] = true;
  ARTSet84[ARTTS__SHREIKosbrdGenerator] = true;
  ARTSet84[ARTTS__SHREIKoutputDirectory] = true;
  ARTSet84[ARTTS__SHREIKparaterminal] = true;
  ARTSet84[ARTTS__SHREIKparseCountsPrint] = true;
  ARTSet84[ARTTS__SHREIKparserName] = true;
  ARTSet84[ARTTS__SHREIKprelude] = true;
  ARTSet84[ARTTS__SHREIKrelation] = true;
  ARTSet84[ARTTS__SHREIKresult] = true;
  ARTSet84[ARTTS__SHREIKsml97Parser] = true;
  ARTSet84[ARTTS__SHREIKsppfLongest] = true;
  ARTSet84[ARTTS__SHREIKsppfPrint] = true;
  ARTSet84[ARTTS__SHREIKsppfPriority] = true;
  ARTSet84[ARTTS__SHREIKsppfShow] = true;
  ARTSet84[ARTTS__SHREIKsppfWrite] = true;
  ARTSet84[ARTTS__SHREIKstart] = true;
  ARTSet84[ARTTS__SHREIKstatistics] = true;
  ARTSet84[ARTTS__SHREIKstrategy] = true;
  ARTSet84[ARTTS__SHREIKsupport] = true;
  ARTSet84[ARTTS__SHREIKtermPrint] = true;
  ARTSet84[ARTTS__SHREIKtermShow] = true;
  ARTSet84[ARTTS__SHREIKtermTool] = true;
  ARTSet84[ARTTS__SHREIKtermWrite] = true;
  ARTSet84[ARTTS__SHREIKtrace] = true;
  ARTSet84[ARTTS__SHREIKtreePrint] = true;
  ARTSet84[ARTTS__SHREIKtreeShow] = true;
  ARTSet84[ARTTS__SHREIKtreeWrite] = true;
  ARTSet84[ARTTS__SHREIKtry] = true;
  ARTSet84[ARTTS__SHREIKtweDead] = true;
  ARTSet84[ARTTS__SHREIKtweExtents] = true;
  ARTSet84[ARTTS__SHREIKtweFromSPPF] = true;
  ARTSet84[ARTTS__SHREIKtweLexicalisations] = true;
  ARTSet84[ARTTS__SHREIKtweLongest] = true;
  ARTSet84[ARTTS__SHREIKtwePrint] = true;
  ARTSet84[ARTTS__SHREIKtwePrintFull] = true;
  ARTSet84[ARTTS__SHREIKtwePrintSummary] = true;
  ARTSet84[ARTTS__SHREIKtwePriority] = true;
  ARTSet84[ARTTS__SHREIKtweRecursive] = true;
  ARTSet84[ARTTS__SHREIKtweSegments] = true;
  ARTSet84[ARTTS__SHREIKtweShow] = true;
  ARTSet84[ARTTS__SHREIKtweTokenWrite] = true;
  ARTSet84[ARTTS__SHREIKtweWrite] = true;
  ARTSet84[ARTTS__SHREIKunicodeAsEscapeSeuences] = true;
  ARTSet84[ARTTS__SHREIKuse] = true;
  ARTSet84[ARTTS__SHREIKverbosity] = true;
  ARTSet84[ARTTS__SHREIKwhitespace] = true;
  ARTSet84[ARTTS__HASH] = true;
  ARTSet84[ARTTS__AMPERSAND] = true;
  ARTSet84[ARTTS__LPAR] = true;
  ARTSet84[ARTTS__RPAR] = true;
  ARTSet84[ARTTS__STAR] = true;
  ARTSet84[ARTTS__PLUS] = true;
  ARTSet84[ARTTS__MINUS] = true;
  ARTSet84[ARTTS__MINUS_MINUS_MINUS] = true;
  ARTSet84[ARTTS__PERIOD] = true;
  ARTSet84[ARTTS__LT] = true;
  ARTSet84[ARTTS__QUERY] = true;
  ARTSet84[ARTTS__AT] = true;
  ARTSet84[ARTTS_False] = true;
  ARTSet84[ARTTS_True] = true;
  ARTSet84[ARTTS__BACKSLASH_BACKSLASH] = true;
  ARTSet84[ARTTS_anyBuiltinTerminal] = true;
  ARTSet84[ARTTS_anyCaseInsensitiveTerminal] = true;
  ARTSet84[ARTTS_anyCaseSensitiveTerminal] = true;
  ARTSet84[ARTTS_anyCharacterTerminal] = true;
  ARTSet84[ARTTS_anyLiteralTerminal] = true;
  ARTSet84[ARTTS_anyNonterminal] = true;
  ARTSet84[ARTTS_anyParaterminal] = true;
  ARTSet84[ARTTS_anyTerminal] = true;
  ARTSet84[ARTTS__BAR] = true;
  ARTSet84[ARTTS__BAR_BAR] = true;
  ARTSet84[ARTL_ART_CHAR_BQ] = true;
  ARTSet84[ARTL_ART_False] = true;
  ARTSet84[ARTL_ART_ID] = true;
  ARTSet84[ARTL_ART_ID_ATTRIBUTE] = true;
  ARTSet84[ARTL_ART_STRING_BRACE_NEST] = true;
  ARTSet84[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet84[ARTL_ART_STRING_DQ] = true;
  ARTSet84[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet84[ARTL_ART_True] = true;
  ARTSet84[ARTL_ART___bool] = true;
  ARTSet84[ARTL_ART___char] = true;
  ARTSet84[ARTL_ART___int32] = true;
  ARTSet84[ARTL_ART___real64] = true;
  ARTSet84[ARTL_ART___string] = true;
  ARTSet84[ARTL_ART_cfgAbbrev] = true;
  ARTSet84[ARTL_ART_cfgAtom] = true;
  ARTSet84[ARTL_ART_cfgAttributeEquation] = true;
  ARTSet84[ARTL_ART_cfgBuiltinTerminal] = true;
  ARTSet84[ARTL_ART_cfgCaseInsensitiveTerminal] = true;
  ARTSet84[ARTL_ART_cfgCaseSensitiveTerminal] = true;
  ARTSet84[ARTL_ART_cfgCatTail] = true;
  ARTSet84[ARTL_ART_cfgCharacterRangeTerminal] = true;
  ARTSet84[ARTL_ART_cfgCharacterTerminal] = true;
  ARTSet84[ARTL_ART_cfgDiff] = true;
  ARTSet84[ARTL_ART_cfgDoFirst] = true;
  ARTSet84[ARTL_ART_cfgElement] = true;
  ARTSet84[ARTL_ART_cfgEpsilon] = true;
  ARTSet84[ARTL_ART_cfgIter] = true;
  ARTSet84[ARTL_ART_cfgKleeneClosure] = true;
  ARTSet84[ARTL_ART_cfgNativeAction] = true;
  ARTSet84[ARTL_ART_cfgNonterminal] = true;
  ARTSet84[ARTL_ART_cfgNot] = true;
  ARTSet84[ARTL_ART_cfgOptional] = true;
  ARTSet84[ARTL_ART_cfgPositiveClosure] = true;
  ARTSet84[ARTL_ART_cfgRule] = true;
  ARTSet84[ARTL_ART_cfgSlot] = true;
  ARTSet84[ARTL_ART_cfgSlotSymbol] = true;
  ARTSet84[ARTL_ART_cfgUnion] = true;
  ARTSet84[ARTL_ART_chooseDiff] = true;
  ARTSet84[ARTL_ART_chooseElement] = true;
  ARTSet84[ARTL_ART_choosePredefinedSet] = true;
  ARTSet84[ARTL_ART_chooseRule] = true;
  ARTSet84[ARTL_ART_chooseUnionIntersection] = true;
  ARTSet84[ARTL_ART_directive] = true;
  ARTSet84[ARTL_ART_text] = true;
  ARTSet84[ARTL_ART_textElement] = true;
  ARTSet84[ARTL_ART_tr] = true;
  ARTSet84[ARTL_ART_trConfiguration] = true;
  ARTSet84[ARTL_ART_trLabel] = true;
  ARTSet84[ARTL_ART_trMatch] = true;
  ARTSet84[ARTL_ART_trPremises] = true;
  ARTSet84[ARTL_ART_trPrimaryTerm] = true;
  ARTSet84[ARTL_ART_trRule] = true;
  ARTSet84[ARTL_ART_trTerm] = true;
  ARTSet84[ARTL_ART_trTransition] = true;
}

public void ARTSet247initialise() {
  ARTSet247 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet247, 0, artSetExtent, false);
  ARTSet247[ARTTS__SHREIKearleyTableIndexedAPI] = true;
}

public void ARTSet86initialise() {
  ARTSet86 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet86, 0, artSetExtent, false);
  ARTSet86[ARTX_EOS] = true;
  ARTSet86[ARTTB_CHAR_BQ] = true;
  ARTSet86[ARTTB_ID] = true;
  ARTSet86[ARTTB_SIGNED_INTEGER] = true;
  ARTSet86[ARTTB_SIGNED_REAL] = true;
  ARTSet86[ARTTB_STRING_BRACE_NEST] = true;
  ARTSet86[ARTTB_STRING_DOLLAR] = true;
  ARTSet86[ARTTB_STRING_DQ] = true;
  ARTSet86[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet86[ARTTB_STRING_SQ] = true;
  ARTSet86[ARTTS__SHREIKGLLFIFODescriptors] = true;
  ARTSet86[ARTTS__SHREIKGLLPredictivePops] = true;
  ARTSet86[ARTTS__SHREIKGLLSuppressPopGuard] = true;
  ARTSet86[ARTTS__SHREIKGLLSuppressProductionGuard] = true;
  ARTSet86[ARTTS__SHREIKGLLSuppressSemantics] = true;
  ARTSet86[ARTTS__SHREIKGLLSuppressTestRepeat] = true;
  ARTSet86[ARTTS__SHREIKabsorb] = true;
  ARTSet86[ARTTS__SHREIKalphabet] = true;
  ARTSet86[ARTTS__SHREIKcfgElements] = true;
  ARTSet86[ARTTS__SHREIKcnp] = true;
  ARTSet86[ARTTS__SHREIKcnpGeneratorPool] = true;
  ARTSet86[ARTTS__SHREIKcnpIndexedAPI] = true;
  ARTSet86[ARTTS__SHREIKcnpIndexedPool] = true;
  ARTSet86[ARTTS__SHREIKcnpLinkedAPI] = true;
  ARTSet86[ARTTS__SHREIKcompressWhitespaceJava] = true;
  ARTSet86[ARTTS__SHREIKearley] = true;
  ARTSet86[ARTTS__SHREIKearley2007LinkedAPI] = true;
  ARTSet86[ARTTS__SHREIKearleyIndexedAPI] = true;
  ARTSet86[ARTTS__SHREIKearleyIndexedData] = true;
  ARTSet86[ARTTS__SHREIKearleyIndexedPool] = true;
  ARTSet86[ARTTS__SHREIKearleyLinkedAPI] = true;
  ARTSet86[ARTTS__SHREIKearleyTable] = true;
  ARTSet86[ARTTS__SHREIKearleyTableIndexedAPI] = true;
  ARTSet86[ARTTS__SHREIKearleyTableIndexedData] = true;
  ARTSet86[ARTTS__SHREIKearleyTableIndexedPool] = true;
  ARTSet86[ARTTS__SHREIKearleyTableLinkedAPI] = true;
  ARTSet86[ARTTS__SHREIKextractJLS] = true;
  ARTSet86[ARTTS__SHREIKgenerateC_PLUS_PLUS] = true;
  ARTSet86[ARTTS__SHREIKgenerateDynamic] = true;
  ARTSet86[ARTTS__SHREIKgenerateFragment] = true;
  ARTSet86[ARTTS__SHREIKgenerateJava] = true;
  ARTSet86[ARTTS__SHREIKgenerateML] = true;
  ARTSet86[ARTTS__SHREIKgeneratePool] = true;
  ARTSet86[ARTTS__SHREIKgenerateState] = true;
  ARTSet86[ARTTS__SHREIKgenerateStatic] = true;
  ARTSet86[ARTTS__SHREIKgll] = true;
  ARTSet86[ARTTS__SHREIKgllClusteredGeneratorPool] = true;
  ARTSet86[ARTTS__SHREIKgllGeneratorPool] = true;
  ARTSet86[ARTTS__SHREIKgllTWEGeneratorPool] = true;
  ARTSet86[ARTTS__SHREIKgrammarWrite] = true;
  ARTSet86[ARTTS__SHREIKgssPrint] = true;
  ARTSet86[ARTTS__SHREIKgssShow] = true;
  ARTSet86[ARTTS__SHREIKgssWrite] = true;
  ARTSet86[ARTTS__SHREIKinjectInstance] = true;
  ARTSet86[ARTTS__SHREIKinjectProduction] = true;
  ARTSet86[ARTTS__SHREIKinput] = true;
  ARTSet86[ARTTS__SHREIKinputPrint] = true;
  ARTSet86[ARTTS__SHREIKlatex] = true;
  ARTSet86[ARTTS__SHREIKlcnp] = true;
  ARTSet86[ARTTS__SHREIKlcnpGeneratorPool] = true;
  ARTSet86[ARTTS__SHREIKlcnpIndexedAPI] = true;
  ARTSet86[ARTTS__SHREIKlcnpIndexedPool] = true;
  ARTSet86[ARTTS__SHREIKlcnpLinkedAPI] = true;
  ARTSet86[ARTTS__SHREIKlexDFA] = true;
  ARTSet86[ARTTS__SHREIKlexGLL] = true;
  ARTSet86[ARTTS__SHREIKlexHardCoded] = true;
  ARTSet86[ARTTS__SHREIKlexWSSuffix] = true;
  ARTSet86[ARTTS__SHREIKlexerData] = true;
  ARTSet86[ARTTS__SHREIKlexerName] = true;
  ARTSet86[ARTTS__SHREIKmain] = true;
  ARTSet86[ARTTS__SHREIKmerge] = true;
  ARTSet86[ARTTS__SHREIKmgll] = true;
  ARTSet86[ARTTS__SHREIKmgllGeneratorPool] = true;
  ARTSet86[ARTTS__SHREIKmodule] = true;
  ARTSet86[ARTTS__SHREIKnamespace] = true;
  ARTSet86[ARTTS__SHREIKosbrd] = true;
  ARTSet86[ARTTS__SHREIKosbrdGenerator] = true;
  ARTSet86[ARTTS__SHREIKoutputDirectory] = true;
  ARTSet86[ARTTS__SHREIKparaterminal] = true;
  ARTSet86[ARTTS__SHREIKparseCountsPrint] = true;
  ARTSet86[ARTTS__SHREIKparserName] = true;
  ARTSet86[ARTTS__SHREIKprelude] = true;
  ARTSet86[ARTTS__SHREIKrelation] = true;
  ARTSet86[ARTTS__SHREIKresult] = true;
  ARTSet86[ARTTS__SHREIKsml97Parser] = true;
  ARTSet86[ARTTS__SHREIKsppfLongest] = true;
  ARTSet86[ARTTS__SHREIKsppfPrint] = true;
  ARTSet86[ARTTS__SHREIKsppfPriority] = true;
  ARTSet86[ARTTS__SHREIKsppfShow] = true;
  ARTSet86[ARTTS__SHREIKsppfWrite] = true;
  ARTSet86[ARTTS__SHREIKstart] = true;
  ARTSet86[ARTTS__SHREIKstatistics] = true;
  ARTSet86[ARTTS__SHREIKstrategy] = true;
  ARTSet86[ARTTS__SHREIKsupport] = true;
  ARTSet86[ARTTS__SHREIKtermPrint] = true;
  ARTSet86[ARTTS__SHREIKtermShow] = true;
  ARTSet86[ARTTS__SHREIKtermTool] = true;
  ARTSet86[ARTTS__SHREIKtermWrite] = true;
  ARTSet86[ARTTS__SHREIKtrace] = true;
  ARTSet86[ARTTS__SHREIKtreePrint] = true;
  ARTSet86[ARTTS__SHREIKtreeShow] = true;
  ARTSet86[ARTTS__SHREIKtreeWrite] = true;
  ARTSet86[ARTTS__SHREIKtry] = true;
  ARTSet86[ARTTS__SHREIKtweDead] = true;
  ARTSet86[ARTTS__SHREIKtweExtents] = true;
  ARTSet86[ARTTS__SHREIKtweFromSPPF] = true;
  ARTSet86[ARTTS__SHREIKtweLexicalisations] = true;
  ARTSet86[ARTTS__SHREIKtweLongest] = true;
  ARTSet86[ARTTS__SHREIKtwePrint] = true;
  ARTSet86[ARTTS__SHREIKtwePrintFull] = true;
  ARTSet86[ARTTS__SHREIKtwePrintSummary] = true;
  ARTSet86[ARTTS__SHREIKtwePriority] = true;
  ARTSet86[ARTTS__SHREIKtweRecursive] = true;
  ARTSet86[ARTTS__SHREIKtweSegments] = true;
  ARTSet86[ARTTS__SHREIKtweShow] = true;
  ARTSet86[ARTTS__SHREIKtweTokenWrite] = true;
  ARTSet86[ARTTS__SHREIKtweWrite] = true;
  ARTSet86[ARTTS__SHREIKunicodeAsEscapeSeuences] = true;
  ARTSet86[ARTTS__SHREIKuse] = true;
  ARTSet86[ARTTS__SHREIKverbosity] = true;
  ARTSet86[ARTTS__SHREIKwhitespace] = true;
  ARTSet86[ARTTS__HASH] = true;
  ARTSet86[ARTTS__AMPERSAND] = true;
  ARTSet86[ARTTS__LPAR] = true;
  ARTSet86[ARTTS__RPAR] = true;
  ARTSet86[ARTTS__STAR] = true;
  ARTSet86[ARTTS__PLUS] = true;
  ARTSet86[ARTTS__MINUS] = true;
  ARTSet86[ARTTS__MINUS_MINUS_MINUS] = true;
  ARTSet86[ARTTS__PERIOD] = true;
  ARTSet86[ARTTS__LT] = true;
  ARTSet86[ARTTS__QUERY] = true;
  ARTSet86[ARTTS__AT] = true;
  ARTSet86[ARTTS_False] = true;
  ARTSet86[ARTTS_True] = true;
  ARTSet86[ARTTS__BACKSLASH_BACKSLASH] = true;
  ARTSet86[ARTTS_anyBuiltinTerminal] = true;
  ARTSet86[ARTTS_anyCaseInsensitiveTerminal] = true;
  ARTSet86[ARTTS_anyCaseSensitiveTerminal] = true;
  ARTSet86[ARTTS_anyCharacterTerminal] = true;
  ARTSet86[ARTTS_anyLiteralTerminal] = true;
  ARTSet86[ARTTS_anyNonterminal] = true;
  ARTSet86[ARTTS_anyParaterminal] = true;
  ARTSet86[ARTTS_anyTerminal] = true;
  ARTSet86[ARTTS__BAR] = true;
  ARTSet86[ARTL_ART_CHAR_BQ] = true;
  ARTSet86[ARTL_ART_False] = true;
  ARTSet86[ARTL_ART_ID] = true;
  ARTSet86[ARTL_ART_ID_ATTRIBUTE] = true;
  ARTSet86[ARTL_ART_STRING_BRACE_NEST] = true;
  ARTSet86[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet86[ARTL_ART_STRING_DQ] = true;
  ARTSet86[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet86[ARTL_ART_True] = true;
  ARTSet86[ARTL_ART___bool] = true;
  ARTSet86[ARTL_ART___char] = true;
  ARTSet86[ARTL_ART___int32] = true;
  ARTSet86[ARTL_ART___real64] = true;
  ARTSet86[ARTL_ART___string] = true;
  ARTSet86[ARTL_ART_cfgAbbrev] = true;
  ARTSet86[ARTL_ART_cfgAtom] = true;
  ARTSet86[ARTL_ART_cfgAttributeEquation] = true;
  ARTSet86[ARTL_ART_cfgBuiltinTerminal] = true;
  ARTSet86[ARTL_ART_cfgCaseInsensitiveTerminal] = true;
  ARTSet86[ARTL_ART_cfgCaseSensitiveTerminal] = true;
  ARTSet86[ARTL_ART_cfgCatTail] = true;
  ARTSet86[ARTL_ART_cfgCharacterRangeTerminal] = true;
  ARTSet86[ARTL_ART_cfgCharacterTerminal] = true;
  ARTSet86[ARTL_ART_cfgDiff] = true;
  ARTSet86[ARTL_ART_cfgDoFirst] = true;
  ARTSet86[ARTL_ART_cfgElement] = true;
  ARTSet86[ARTL_ART_cfgEpsilon] = true;
  ARTSet86[ARTL_ART_cfgIter] = true;
  ARTSet86[ARTL_ART_cfgKleeneClosure] = true;
  ARTSet86[ARTL_ART_cfgNativeAction] = true;
  ARTSet86[ARTL_ART_cfgNonterminal] = true;
  ARTSet86[ARTL_ART_cfgNot] = true;
  ARTSet86[ARTL_ART_cfgOptional] = true;
  ARTSet86[ARTL_ART_cfgPositiveClosure] = true;
  ARTSet86[ARTL_ART_cfgRule] = true;
  ARTSet86[ARTL_ART_cfgSlot] = true;
  ARTSet86[ARTL_ART_cfgSlotSymbol] = true;
  ARTSet86[ARTL_ART_cfgUnion] = true;
  ARTSet86[ARTL_ART_chooseDiff] = true;
  ARTSet86[ARTL_ART_chooseElement] = true;
  ARTSet86[ARTL_ART_choosePredefinedSet] = true;
  ARTSet86[ARTL_ART_chooseRule] = true;
  ARTSet86[ARTL_ART_chooseUnionIntersection] = true;
  ARTSet86[ARTL_ART_directive] = true;
  ARTSet86[ARTL_ART_text] = true;
  ARTSet86[ARTL_ART_textElement] = true;
  ARTSet86[ARTL_ART_tr] = true;
  ARTSet86[ARTL_ART_trConfiguration] = true;
  ARTSet86[ARTL_ART_trLabel] = true;
  ARTSet86[ARTL_ART_trMatch] = true;
  ARTSet86[ARTL_ART_trPremises] = true;
  ARTSet86[ARTL_ART_trPrimaryTerm] = true;
  ARTSet86[ARTL_ART_trRule] = true;
  ARTSet86[ARTL_ART_trTerm] = true;
  ARTSet86[ARTL_ART_trTransition] = true;
}

public void ARTSet204initialise() {
  ARTSet204 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet204, 0, artSetExtent, false);
  ARTSet204[ARTTS__SHREIKwhitespace] = true;
}

public void ARTSet256initialise() {
  ARTSet256 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet256, 0, artSetExtent, false);
  ARTSet256[ARTTS__SHREIKlcnpLinkedAPI] = true;
}

public void ARTSet68initialise() {
  ARTSet68 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet68, 0, artSetExtent, false);
  ARTSet68[ARTTB_ID] = true;
  ARTSet68[ARTL_ART_ID_ATTRIBUTE] = true;
}

public void ARTSet133initialise() {
  ARTSet133 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet133, 0, artSetExtent, false);
  ARTSet133[ARTTB_CHAR_BQ] = true;
  ARTSet133[ARTTB_ID] = true;
  ARTSet133[ARTTB_STRING_DOLLAR] = true;
  ARTSet133[ARTTB_STRING_DQ] = true;
  ARTSet133[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet133[ARTTS__AMPERSAND] = true;
  ARTSet133[ARTTS__LPAR] = true;
  ARTSet133[ARTTS_anyBuiltinTerminal] = true;
  ARTSet133[ARTTS_anyCaseInsensitiveTerminal] = true;
  ARTSet133[ARTTS_anyCaseSensitiveTerminal] = true;
  ARTSet133[ARTTS_anyCharacterTerminal] = true;
  ARTSet133[ARTTS_anyLiteralTerminal] = true;
  ARTSet133[ARTTS_anyNonterminal] = true;
  ARTSet133[ARTTS_anyParaterminal] = true;
  ARTSet133[ARTTS_anyTerminal] = true;
  ARTSet133[ARTL_ART_CHAR_BQ] = true;
  ARTSet133[ARTL_ART_ID] = true;
  ARTSet133[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet133[ARTL_ART_STRING_DQ] = true;
  ARTSet133[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet133[ARTL_ART_cfgBuiltinTerminal] = true;
  ARTSet133[ARTL_ART_cfgCaseInsensitiveTerminal] = true;
  ARTSet133[ARTL_ART_cfgCaseSensitiveTerminal] = true;
  ARTSet133[ARTL_ART_cfgCharacterTerminal] = true;
  ARTSet133[ARTL_ART_cfgNonterminal] = true;
  ARTSet133[ARTL_ART_choosePredefinedSet] = true;
}

public void ARTSet188initialise() {
  ARTSet188 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet188, 0, artSetExtent, false);
  ARTSet188[ARTTS__SHREIKtreeShow] = true;
}

public void ARTSet80initialise() {
  ARTSet80 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet80, 0, artSetExtent, false);
  ARTSet80[ARTX_EOS] = true;
  ARTSet80[ARTTB_CHAR_BQ] = true;
  ARTSet80[ARTTB_ID] = true;
  ARTSet80[ARTTB_SIGNED_INTEGER] = true;
  ARTSet80[ARTTB_SIGNED_REAL] = true;
  ARTSet80[ARTTB_STRING_BRACE_NEST] = true;
  ARTSet80[ARTTB_STRING_DOLLAR] = true;
  ARTSet80[ARTTB_STRING_DQ] = true;
  ARTSet80[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet80[ARTTB_STRING_SQ] = true;
  ARTSet80[ARTTS__SHREIKGLLFIFODescriptors] = true;
  ARTSet80[ARTTS__SHREIKGLLPredictivePops] = true;
  ARTSet80[ARTTS__SHREIKGLLSuppressPopGuard] = true;
  ARTSet80[ARTTS__SHREIKGLLSuppressProductionGuard] = true;
  ARTSet80[ARTTS__SHREIKGLLSuppressSemantics] = true;
  ARTSet80[ARTTS__SHREIKGLLSuppressTestRepeat] = true;
  ARTSet80[ARTTS__SHREIKabsorb] = true;
  ARTSet80[ARTTS__SHREIKalphabet] = true;
  ARTSet80[ARTTS__SHREIKcfgElements] = true;
  ARTSet80[ARTTS__SHREIKcnp] = true;
  ARTSet80[ARTTS__SHREIKcnpGeneratorPool] = true;
  ARTSet80[ARTTS__SHREIKcnpIndexedAPI] = true;
  ARTSet80[ARTTS__SHREIKcnpIndexedPool] = true;
  ARTSet80[ARTTS__SHREIKcnpLinkedAPI] = true;
  ARTSet80[ARTTS__SHREIKcompressWhitespaceJava] = true;
  ARTSet80[ARTTS__SHREIKearley] = true;
  ARTSet80[ARTTS__SHREIKearley2007LinkedAPI] = true;
  ARTSet80[ARTTS__SHREIKearleyIndexedAPI] = true;
  ARTSet80[ARTTS__SHREIKearleyIndexedData] = true;
  ARTSet80[ARTTS__SHREIKearleyIndexedPool] = true;
  ARTSet80[ARTTS__SHREIKearleyLinkedAPI] = true;
  ARTSet80[ARTTS__SHREIKearleyTable] = true;
  ARTSet80[ARTTS__SHREIKearleyTableIndexedAPI] = true;
  ARTSet80[ARTTS__SHREIKearleyTableIndexedData] = true;
  ARTSet80[ARTTS__SHREIKearleyTableIndexedPool] = true;
  ARTSet80[ARTTS__SHREIKearleyTableLinkedAPI] = true;
  ARTSet80[ARTTS__SHREIKextractJLS] = true;
  ARTSet80[ARTTS__SHREIKgenerateC_PLUS_PLUS] = true;
  ARTSet80[ARTTS__SHREIKgenerateDynamic] = true;
  ARTSet80[ARTTS__SHREIKgenerateFragment] = true;
  ARTSet80[ARTTS__SHREIKgenerateJava] = true;
  ARTSet80[ARTTS__SHREIKgenerateML] = true;
  ARTSet80[ARTTS__SHREIKgeneratePool] = true;
  ARTSet80[ARTTS__SHREIKgenerateState] = true;
  ARTSet80[ARTTS__SHREIKgenerateStatic] = true;
  ARTSet80[ARTTS__SHREIKgll] = true;
  ARTSet80[ARTTS__SHREIKgllClusteredGeneratorPool] = true;
  ARTSet80[ARTTS__SHREIKgllGeneratorPool] = true;
  ARTSet80[ARTTS__SHREIKgllTWEGeneratorPool] = true;
  ARTSet80[ARTTS__SHREIKgrammarWrite] = true;
  ARTSet80[ARTTS__SHREIKgssPrint] = true;
  ARTSet80[ARTTS__SHREIKgssShow] = true;
  ARTSet80[ARTTS__SHREIKgssWrite] = true;
  ARTSet80[ARTTS__SHREIKinjectInstance] = true;
  ARTSet80[ARTTS__SHREIKinjectProduction] = true;
  ARTSet80[ARTTS__SHREIKinput] = true;
  ARTSet80[ARTTS__SHREIKinputPrint] = true;
  ARTSet80[ARTTS__SHREIKlatex] = true;
  ARTSet80[ARTTS__SHREIKlcnp] = true;
  ARTSet80[ARTTS__SHREIKlcnpGeneratorPool] = true;
  ARTSet80[ARTTS__SHREIKlcnpIndexedAPI] = true;
  ARTSet80[ARTTS__SHREIKlcnpIndexedPool] = true;
  ARTSet80[ARTTS__SHREIKlcnpLinkedAPI] = true;
  ARTSet80[ARTTS__SHREIKlexDFA] = true;
  ARTSet80[ARTTS__SHREIKlexGLL] = true;
  ARTSet80[ARTTS__SHREIKlexHardCoded] = true;
  ARTSet80[ARTTS__SHREIKlexWSSuffix] = true;
  ARTSet80[ARTTS__SHREIKlexerData] = true;
  ARTSet80[ARTTS__SHREIKlexerName] = true;
  ARTSet80[ARTTS__SHREIKmain] = true;
  ARTSet80[ARTTS__SHREIKmerge] = true;
  ARTSet80[ARTTS__SHREIKmgll] = true;
  ARTSet80[ARTTS__SHREIKmgllGeneratorPool] = true;
  ARTSet80[ARTTS__SHREIKmodule] = true;
  ARTSet80[ARTTS__SHREIKnamespace] = true;
  ARTSet80[ARTTS__SHREIKosbrd] = true;
  ARTSet80[ARTTS__SHREIKosbrdGenerator] = true;
  ARTSet80[ARTTS__SHREIKoutputDirectory] = true;
  ARTSet80[ARTTS__SHREIKparaterminal] = true;
  ARTSet80[ARTTS__SHREIKparseCountsPrint] = true;
  ARTSet80[ARTTS__SHREIKparserName] = true;
  ARTSet80[ARTTS__SHREIKprelude] = true;
  ARTSet80[ARTTS__SHREIKrelation] = true;
  ARTSet80[ARTTS__SHREIKresult] = true;
  ARTSet80[ARTTS__SHREIKsml97Parser] = true;
  ARTSet80[ARTTS__SHREIKsppfLongest] = true;
  ARTSet80[ARTTS__SHREIKsppfPrint] = true;
  ARTSet80[ARTTS__SHREIKsppfPriority] = true;
  ARTSet80[ARTTS__SHREIKsppfShow] = true;
  ARTSet80[ARTTS__SHREIKsppfWrite] = true;
  ARTSet80[ARTTS__SHREIKstart] = true;
  ARTSet80[ARTTS__SHREIKstatistics] = true;
  ARTSet80[ARTTS__SHREIKstrategy] = true;
  ARTSet80[ARTTS__SHREIKsupport] = true;
  ARTSet80[ARTTS__SHREIKtermPrint] = true;
  ARTSet80[ARTTS__SHREIKtermShow] = true;
  ARTSet80[ARTTS__SHREIKtermTool] = true;
  ARTSet80[ARTTS__SHREIKtermWrite] = true;
  ARTSet80[ARTTS__SHREIKtrace] = true;
  ARTSet80[ARTTS__SHREIKtreePrint] = true;
  ARTSet80[ARTTS__SHREIKtreeShow] = true;
  ARTSet80[ARTTS__SHREIKtreeWrite] = true;
  ARTSet80[ARTTS__SHREIKtry] = true;
  ARTSet80[ARTTS__SHREIKtweDead] = true;
  ARTSet80[ARTTS__SHREIKtweExtents] = true;
  ARTSet80[ARTTS__SHREIKtweFromSPPF] = true;
  ARTSet80[ARTTS__SHREIKtweLexicalisations] = true;
  ARTSet80[ARTTS__SHREIKtweLongest] = true;
  ARTSet80[ARTTS__SHREIKtwePrint] = true;
  ARTSet80[ARTTS__SHREIKtwePrintFull] = true;
  ARTSet80[ARTTS__SHREIKtwePrintSummary] = true;
  ARTSet80[ARTTS__SHREIKtwePriority] = true;
  ARTSet80[ARTTS__SHREIKtweRecursive] = true;
  ARTSet80[ARTTS__SHREIKtweSegments] = true;
  ARTSet80[ARTTS__SHREIKtweShow] = true;
  ARTSet80[ARTTS__SHREIKtweTokenWrite] = true;
  ARTSet80[ARTTS__SHREIKtweWrite] = true;
  ARTSet80[ARTTS__SHREIKunicodeAsEscapeSeuences] = true;
  ARTSet80[ARTTS__SHREIKuse] = true;
  ARTSet80[ARTTS__SHREIKverbosity] = true;
  ARTSet80[ARTTS__SHREIKwhitespace] = true;
  ARTSet80[ARTTS__AMPERSAND] = true;
  ARTSet80[ARTTS__LPAR] = true;
  ARTSet80[ARTTS__RPAR] = true;
  ARTSet80[ARTTS__MINUS] = true;
  ARTSet80[ARTTS__MINUS_MINUS_MINUS] = true;
  ARTSet80[ARTTS__LT] = true;
  ARTSet80[ARTTS_False] = true;
  ARTSet80[ARTTS_True] = true;
  ARTSet80[ARTTS_anyBuiltinTerminal] = true;
  ARTSet80[ARTTS_anyCaseInsensitiveTerminal] = true;
  ARTSet80[ARTTS_anyCaseSensitiveTerminal] = true;
  ARTSet80[ARTTS_anyCharacterTerminal] = true;
  ARTSet80[ARTTS_anyLiteralTerminal] = true;
  ARTSet80[ARTTS_anyNonterminal] = true;
  ARTSet80[ARTTS_anyParaterminal] = true;
  ARTSet80[ARTTS_anyTerminal] = true;
  ARTSet80[ARTTS__BAR] = true;
  ARTSet80[ARTL_ART_CHAR_BQ] = true;
  ARTSet80[ARTL_ART_False] = true;
  ARTSet80[ARTL_ART_ID] = true;
  ARTSet80[ARTL_ART_ID_ATTRIBUTE] = true;
  ARTSet80[ARTL_ART_STRING_BRACE_NEST] = true;
  ARTSet80[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet80[ARTL_ART_STRING_DQ] = true;
  ARTSet80[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet80[ARTL_ART_True] = true;
  ARTSet80[ARTL_ART___bool] = true;
  ARTSet80[ARTL_ART___char] = true;
  ARTSet80[ARTL_ART___int32] = true;
  ARTSet80[ARTL_ART___real64] = true;
  ARTSet80[ARTL_ART___string] = true;
  ARTSet80[ARTL_ART_cfgAttributeEquation] = true;
  ARTSet80[ARTL_ART_cfgBuiltinTerminal] = true;
  ARTSet80[ARTL_ART_cfgCaseInsensitiveTerminal] = true;
  ARTSet80[ARTL_ART_cfgCaseSensitiveTerminal] = true;
  ARTSet80[ARTL_ART_cfgCharacterTerminal] = true;
  ARTSet80[ARTL_ART_cfgNativeAction] = true;
  ARTSet80[ARTL_ART_cfgNonterminal] = true;
  ARTSet80[ARTL_ART_cfgRule] = true;
  ARTSet80[ARTL_ART_cfgSlot] = true;
  ARTSet80[ARTL_ART_chooseDiff] = true;
  ARTSet80[ARTL_ART_chooseElement] = true;
  ARTSet80[ARTL_ART_choosePredefinedSet] = true;
  ARTSet80[ARTL_ART_chooseRule] = true;
  ARTSet80[ARTL_ART_chooseUnionIntersection] = true;
  ARTSet80[ARTL_ART_directive] = true;
  ARTSet80[ARTL_ART_text] = true;
  ARTSet80[ARTL_ART_textElement] = true;
  ARTSet80[ARTL_ART_tr] = true;
  ARTSet80[ARTL_ART_trConfiguration] = true;
  ARTSet80[ARTL_ART_trLabel] = true;
  ARTSet80[ARTL_ART_trMatch] = true;
  ARTSet80[ARTL_ART_trPremises] = true;
  ARTSet80[ARTL_ART_trPrimaryTerm] = true;
  ARTSet80[ARTL_ART_trRule] = true;
  ARTSet80[ARTL_ART_trTerm] = true;
  ARTSet80[ARTL_ART_trTransition] = true;
}

public void ARTSet90initialise() {
  ARTSet90 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet90, 0, artSetExtent, false);
  ARTSet90[ARTTB_CHAR_BQ] = true;
  ARTSet90[ARTTB_ID] = true;
  ARTSet90[ARTTB_STRING_BRACE_NEST] = true;
  ARTSet90[ARTTB_STRING_DOLLAR] = true;
  ARTSet90[ARTTB_STRING_DQ] = true;
  ARTSet90[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet90[ARTTS__HASH] = true;
  ARTSet90[ARTTS__AMPERSAND] = true;
  ARTSet90[ARTTS__LPAR] = true;
  ARTSet90[ARTTS__PERIOD] = true;
  ARTSet90[ARTTS__BACKSLASH_BACKSLASH] = true;
  ARTSet90[ARTL_ART_CHAR_BQ] = true;
  ARTSet90[ARTL_ART_ID] = true;
  ARTSet90[ARTL_ART_ID_ATTRIBUTE] = true;
  ARTSet90[ARTL_ART_STRING_BRACE_NEST] = true;
  ARTSet90[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet90[ARTL_ART_STRING_DQ] = true;
  ARTSet90[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet90[ARTL_ART_cfgAbbrev] = true;
  ARTSet90[ARTL_ART_cfgAlt] = true;
  ARTSet90[ARTL_ART_cfgAtom] = true;
  ARTSet90[ARTL_ART_cfgAttributeEquation] = true;
  ARTSet90[ARTL_ART_cfgBuiltinTerminal] = true;
  ARTSet90[ARTL_ART_cfgCaseInsensitiveTerminal] = true;
  ARTSet90[ARTL_ART_cfgCaseSensitiveTerminal] = true;
  ARTSet90[ARTL_ART_cfgCat] = true;
  ARTSet90[ARTL_ART_cfgCatTail] = true;
  ARTSet90[ARTL_ART_cfgCharacterRangeTerminal] = true;
  ARTSet90[ARTL_ART_cfgCharacterTerminal] = true;
  ARTSet90[ARTL_ART_cfgDiff] = true;
  ARTSet90[ARTL_ART_cfgDoFirst] = true;
  ARTSet90[ARTL_ART_cfgElement] = true;
  ARTSet90[ARTL_ART_cfgEpsilon] = true;
  ARTSet90[ARTL_ART_cfgIter] = true;
  ARTSet90[ARTL_ART_cfgNativeAction] = true;
  ARTSet90[ARTL_ART_cfgNonterminal] = true;
  ARTSet90[ARTL_ART_cfgNot] = true;
  ARTSet90[ARTL_ART_cfgSlot] = true;
  ARTSet90[ARTL_ART_cfgSlotSymbol] = true;
  ARTSet90[ARTL_ART_cfgUnion] = true;
}

public void ARTSet21initialise() {
  ARTSet21 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet21, 0, artSetExtent, false);
  ARTSet21[ARTTS__MINUS_GT] = true;
}

public void ARTSet233initialise() {
  ARTSet233 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet233, 0, artSetExtent, false);
  ARTSet233[ARTTS__SHREIKGLLPredictivePops] = true;
}

public void ARTSet226initialise() {
  ARTSet226 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet226, 0, artSetExtent, false);
  ARTSet226[ARTTS__SHREIKgenerateFragment] = true;
}

public void ARTSet214initialise() {
  ARTSet214 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet214, 0, artSetExtent, false);
  ARTSet214[ARTTS__SHREIKtweLongest] = true;
}

public void ARTSet250initialise() {
  ARTSet250 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet250, 0, artSetExtent, false);
  ARTSet250[ARTTS__SHREIKcnp] = true;
}

public void ARTSet63initialise() {
  ARTSet63 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet63, 0, artSetExtent, false);
  ARTSet63[ARTTB_CHAR_BQ] = true;
  ARTSet63[ARTL_ART_CHAR_BQ] = true;
  ARTSet63[ARTL_ART_cfgCharacterRangeTerminal] = true;
}

public void ARTSet197initialise() {
  ARTSet197 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet197, 0, artSetExtent, false);
  ARTSet197[ARTTS__SHREIKcompressWhitespaceJava] = true;
}

public void ARTSet82initialise() {
  ARTSet82 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet82, 0, artSetExtent, false);
  ARTSet82[ARTTS__PERIOD_PERIOD] = true;
}

public void ARTSet99initialise() {
  ARTSet99 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet99, 0, artSetExtent, false);
  ARTSet99[ARTTS__UPARROW_UPARROW] = true;
}

public void ARTSet139initialise() {
  ARTSet139 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet139, 0, artSetExtent, false);
  ARTSet139[ARTTS__GT_GT] = true;
}

public void ARTSet98initialise() {
  ARTSet98 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet98, 0, artSetExtent, false);
  ARTSet98[ARTTS__UPARROW_] = true;
}

public void ARTSet59initialise() {
  ARTSet59 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet59, 0, artSetExtent, false);
  ARTSet59[ARTTS__PERIOD] = true;
  ARTSet59[ARTL_ART_cfgSlotSymbol] = true;
}

public void ARTSet286initialise() {
  ARTSet286 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet286, 0, artSetExtent, false);
  ARTSet286[ARTTB_ID] = true;
  ARTSet286[ARTL_ART_ID] = true;
  ARTSet286[ARTL_ART_idART] = true;
  ARTSet286[ARTL_ART_idRAW] = true;
}

public void ARTSet58initialise() {
  ARTSet58 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet58, 0, artSetExtent, false);
  ARTSet58[ARTTS__HASH] = true;
  ARTSet58[ARTL_ART_cfgEpsilon] = true;
}

public void ARTSet291initialise() {
  ARTSet291 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet291, 0, artSetExtent, false);
  ARTSet291[ARTX_EOS] = true;
}

public void ARTSet335initialise() {
  ARTSet335 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet335, 0, artSetExtent, false);
  ARTSet335[ARTTB_CHAR_BQ] = true;
  ARTSet335[ARTL_ART___char] = true;
}

public void ARTSet234initialise() {
  ARTSet234 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet234, 0, artSetExtent, false);
  ARTSet234[ARTTS__SHREIKGLLFIFODescriptors] = true;
}

public void ARTSet72initialise() {
  ARTSet72 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet72, 0, artSetExtent, false);
  ARTSet72[ARTTB_ID] = true;
  ARTSet72[ARTL_ART_ID] = true;
}

public void ARTSet140initialise() {
  ARTSet140 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet140, 0, artSetExtent, false);
  ARTSet140[ARTTS_anyBuiltinTerminal] = true;
  ARTSet140[ARTTS_anyCaseInsensitiveTerminal] = true;
  ARTSet140[ARTTS_anyCaseSensitiveTerminal] = true;
  ARTSet140[ARTTS_anyCharacterTerminal] = true;
  ARTSet140[ARTTS_anyLiteralTerminal] = true;
  ARTSet140[ARTTS_anyNonterminal] = true;
  ARTSet140[ARTTS_anyParaterminal] = true;
  ARTSet140[ARTTS_anyTerminal] = true;
}

public void ARTSet193initialise() {
  ARTSet193 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet193, 0, artSetExtent, false);
  ARTSet193[ARTTS__SHREIKgrammarWrite] = true;
}

public void ARTSet27initialise() {
  ARTSet27 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet27, 0, artSetExtent, false);
  ARTSet27[ARTTS__MINUS_BACKSLASH] = true;
}

public void ARTSet73initialise() {
  ARTSet73 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet73, 0, artSetExtent, false);
  ARTSet73[ARTTB_STRING_DQ] = true;
  ARTSet73[ARTL_ART_STRING_DQ] = true;
}

public void ARTSet141initialise() {
  ARTSet141 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet141, 0, artSetExtent, false);
  ARTSet141[ARTTS_anyCharacterTerminal] = true;
}

public void ARTSet157initialise() {
  ARTSet157 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet157, 0, artSetExtent, false);
  ARTSet157[ARTTS__LT_LT] = true;
  ARTSet157[ARTL_ART_chooseShorter] = true;
}

public void ARTSet162initialise() {
  ARTSet162 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet162, 0, artSetExtent, false);
  ARTSet162[ARTTS__SHREIKuse] = true;
}

public void ARTSet155initialise() {
  ARTSet155 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet155, 0, artSetExtent, false);
  ARTSet155[ARTTS__LT] = true;
  ARTSet155[ARTL_ART_chooseLower] = true;
}

public void ARTSet138initialise() {
  ARTSet138 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet138, 0, artSetExtent, false);
  ARTSet138[ARTTB_CHAR_BQ] = true;
  ARTSet138[ARTTB_ID] = true;
  ARTSet138[ARTTB_STRING_DOLLAR] = true;
  ARTSet138[ARTTB_STRING_DQ] = true;
  ARTSet138[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet138[ARTTS__AMPERSAND] = true;
  ARTSet138[ARTTS__LPAR] = true;
  ARTSet138[ARTTS_anyBuiltinTerminal] = true;
  ARTSet138[ARTTS_anyCaseInsensitiveTerminal] = true;
  ARTSet138[ARTTS_anyCaseSensitiveTerminal] = true;
  ARTSet138[ARTTS_anyCharacterTerminal] = true;
  ARTSet138[ARTTS_anyLiteralTerminal] = true;
  ARTSet138[ARTTS_anyNonterminal] = true;
  ARTSet138[ARTTS_anyParaterminal] = true;
  ARTSet138[ARTTS_anyTerminal] = true;
  ARTSet138[ARTL_ART_CHAR_BQ] = true;
  ARTSet138[ARTL_ART_ID] = true;
  ARTSet138[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet138[ARTL_ART_STRING_DQ] = true;
  ARTSet138[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet138[ARTL_ART_cfgBuiltinTerminal] = true;
  ARTSet138[ARTL_ART_cfgCaseInsensitiveTerminal] = true;
  ARTSet138[ARTL_ART_cfgCaseSensitiveTerminal] = true;
  ARTSet138[ARTL_ART_cfgCharacterTerminal] = true;
  ARTSet138[ARTL_ART_cfgNonterminal] = true;
  ARTSet138[ARTL_ART_chooseElement] = true;
  ARTSet138[ARTL_ART_choosePredefinedSet] = true;
}

public void ARTSet224initialise() {
  ARTSet224 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet224, 0, artSetExtent, false);
  ARTSet224[ARTTS__SHREIKgenerateStatic] = true;
}

public void ARTSet96initialise() {
  ARTSet96 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet96, 0, artSetExtent, false);
  ARTSet96[ARTTB_CHAR_BQ] = true;
  ARTSet96[ARTTB_ID] = true;
  ARTSet96[ARTTB_STRING_DOLLAR] = true;
  ARTSet96[ARTTB_STRING_DQ] = true;
  ARTSet96[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet96[ARTTS__HASH] = true;
  ARTSet96[ARTTS__AMPERSAND] = true;
  ARTSet96[ARTTS__PERIOD] = true;
  ARTSet96[ARTL_ART_CHAR_BQ] = true;
  ARTSet96[ARTL_ART_ID] = true;
  ARTSet96[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet96[ARTL_ART_STRING_DQ] = true;
  ARTSet96[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet96[ARTL_ART_cfgAtom] = true;
  ARTSet96[ARTL_ART_cfgBuiltinTerminal] = true;
  ARTSet96[ARTL_ART_cfgCaseInsensitiveTerminal] = true;
  ARTSet96[ARTL_ART_cfgCaseSensitiveTerminal] = true;
  ARTSet96[ARTL_ART_cfgCharacterRangeTerminal] = true;
  ARTSet96[ARTL_ART_cfgCharacterTerminal] = true;
  ARTSet96[ARTL_ART_cfgElementDeclaration] = true;
  ARTSet96[ARTL_ART_cfgElementDeclarations] = true;
  ARTSet96[ARTL_ART_cfgEpsilon] = true;
  ARTSet96[ARTL_ART_cfgNonterminal] = true;
  ARTSet96[ARTL_ART_cfgSlotSymbol] = true;
}

public void ARTSet113initialise() {
  ARTSet113 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet113, 0, artSetExtent, false);
  ARTSet113[ARTTB_STRING_BRACE_NEST] = true;
  ARTSet113[ARTL_ART_STRING_BRACE_NEST] = true;
}

public void ARTSet270initialise() {
  ARTSet270 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet270, 0, artSetExtent, false);
  ARTSet270[ARTTS__SHREIKrelation] = true;
}

public void ARTSet304initialise() {
  ARTSet304 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet304, 0, artSetExtent, false);
  ARTSet304[ARTX_EOS] = true;
  ARTSet304[ARTTB_CHAR_BQ] = true;
  ARTSet304[ARTTB_ID] = true;
  ARTSet304[ARTTB_SIGNED_INTEGER] = true;
  ARTSet304[ARTTB_SIGNED_REAL] = true;
  ARTSet304[ARTTB_STRING_DOLLAR] = true;
  ARTSet304[ARTTB_STRING_DQ] = true;
  ARTSet304[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet304[ARTTB_STRING_SQ] = true;
  ARTSet304[ARTTS__SHREIKGLLFIFODescriptors] = true;
  ARTSet304[ARTTS__SHREIKGLLPredictivePops] = true;
  ARTSet304[ARTTS__SHREIKGLLSuppressPopGuard] = true;
  ARTSet304[ARTTS__SHREIKGLLSuppressProductionGuard] = true;
  ARTSet304[ARTTS__SHREIKGLLSuppressSemantics] = true;
  ARTSet304[ARTTS__SHREIKGLLSuppressTestRepeat] = true;
  ARTSet304[ARTTS__SHREIKabsorb] = true;
  ARTSet304[ARTTS__SHREIKalphabet] = true;
  ARTSet304[ARTTS__SHREIKcfgElements] = true;
  ARTSet304[ARTTS__SHREIKcnp] = true;
  ARTSet304[ARTTS__SHREIKcnpGeneratorPool] = true;
  ARTSet304[ARTTS__SHREIKcnpIndexedAPI] = true;
  ARTSet304[ARTTS__SHREIKcnpIndexedPool] = true;
  ARTSet304[ARTTS__SHREIKcnpLinkedAPI] = true;
  ARTSet304[ARTTS__SHREIKcompressWhitespaceJava] = true;
  ARTSet304[ARTTS__SHREIKearley] = true;
  ARTSet304[ARTTS__SHREIKearley2007LinkedAPI] = true;
  ARTSet304[ARTTS__SHREIKearleyIndexedAPI] = true;
  ARTSet304[ARTTS__SHREIKearleyIndexedData] = true;
  ARTSet304[ARTTS__SHREIKearleyIndexedPool] = true;
  ARTSet304[ARTTS__SHREIKearleyLinkedAPI] = true;
  ARTSet304[ARTTS__SHREIKearleyTable] = true;
  ARTSet304[ARTTS__SHREIKearleyTableIndexedAPI] = true;
  ARTSet304[ARTTS__SHREIKearleyTableIndexedData] = true;
  ARTSet304[ARTTS__SHREIKearleyTableIndexedPool] = true;
  ARTSet304[ARTTS__SHREIKearleyTableLinkedAPI] = true;
  ARTSet304[ARTTS__SHREIKextractJLS] = true;
  ARTSet304[ARTTS__SHREIKgenerateC_PLUS_PLUS] = true;
  ARTSet304[ARTTS__SHREIKgenerateDynamic] = true;
  ARTSet304[ARTTS__SHREIKgenerateFragment] = true;
  ARTSet304[ARTTS__SHREIKgenerateJava] = true;
  ARTSet304[ARTTS__SHREIKgenerateML] = true;
  ARTSet304[ARTTS__SHREIKgeneratePool] = true;
  ARTSet304[ARTTS__SHREIKgenerateState] = true;
  ARTSet304[ARTTS__SHREIKgenerateStatic] = true;
  ARTSet304[ARTTS__SHREIKgll] = true;
  ARTSet304[ARTTS__SHREIKgllClusteredGeneratorPool] = true;
  ARTSet304[ARTTS__SHREIKgllGeneratorPool] = true;
  ARTSet304[ARTTS__SHREIKgllTWEGeneratorPool] = true;
  ARTSet304[ARTTS__SHREIKgrammarWrite] = true;
  ARTSet304[ARTTS__SHREIKgssPrint] = true;
  ARTSet304[ARTTS__SHREIKgssShow] = true;
  ARTSet304[ARTTS__SHREIKgssWrite] = true;
  ARTSet304[ARTTS__SHREIKinjectInstance] = true;
  ARTSet304[ARTTS__SHREIKinjectProduction] = true;
  ARTSet304[ARTTS__SHREIKinput] = true;
  ARTSet304[ARTTS__SHREIKinputPrint] = true;
  ARTSet304[ARTTS__SHREIKlatex] = true;
  ARTSet304[ARTTS__SHREIKlcnp] = true;
  ARTSet304[ARTTS__SHREIKlcnpGeneratorPool] = true;
  ARTSet304[ARTTS__SHREIKlcnpIndexedAPI] = true;
  ARTSet304[ARTTS__SHREIKlcnpIndexedPool] = true;
  ARTSet304[ARTTS__SHREIKlcnpLinkedAPI] = true;
  ARTSet304[ARTTS__SHREIKlexDFA] = true;
  ARTSet304[ARTTS__SHREIKlexGLL] = true;
  ARTSet304[ARTTS__SHREIKlexHardCoded] = true;
  ARTSet304[ARTTS__SHREIKlexWSSuffix] = true;
  ARTSet304[ARTTS__SHREIKlexerData] = true;
  ARTSet304[ARTTS__SHREIKlexerName] = true;
  ARTSet304[ARTTS__SHREIKmain] = true;
  ARTSet304[ARTTS__SHREIKmerge] = true;
  ARTSet304[ARTTS__SHREIKmgll] = true;
  ARTSet304[ARTTS__SHREIKmgllGeneratorPool] = true;
  ARTSet304[ARTTS__SHREIKmodule] = true;
  ARTSet304[ARTTS__SHREIKnamespace] = true;
  ARTSet304[ARTTS__SHREIKosbrd] = true;
  ARTSet304[ARTTS__SHREIKosbrdGenerator] = true;
  ARTSet304[ARTTS__SHREIKoutputDirectory] = true;
  ARTSet304[ARTTS__SHREIKparaterminal] = true;
  ARTSet304[ARTTS__SHREIKparseCountsPrint] = true;
  ARTSet304[ARTTS__SHREIKparserName] = true;
  ARTSet304[ARTTS__SHREIKprelude] = true;
  ARTSet304[ARTTS__SHREIKrelation] = true;
  ARTSet304[ARTTS__SHREIKresult] = true;
  ARTSet304[ARTTS__SHREIKsml97Parser] = true;
  ARTSet304[ARTTS__SHREIKsppfLongest] = true;
  ARTSet304[ARTTS__SHREIKsppfPrint] = true;
  ARTSet304[ARTTS__SHREIKsppfPriority] = true;
  ARTSet304[ARTTS__SHREIKsppfShow] = true;
  ARTSet304[ARTTS__SHREIKsppfWrite] = true;
  ARTSet304[ARTTS__SHREIKstart] = true;
  ARTSet304[ARTTS__SHREIKstatistics] = true;
  ARTSet304[ARTTS__SHREIKstrategy] = true;
  ARTSet304[ARTTS__SHREIKsupport] = true;
  ARTSet304[ARTTS__SHREIKtermPrint] = true;
  ARTSet304[ARTTS__SHREIKtermShow] = true;
  ARTSet304[ARTTS__SHREIKtermTool] = true;
  ARTSet304[ARTTS__SHREIKtermWrite] = true;
  ARTSet304[ARTTS__SHREIKtrace] = true;
  ARTSet304[ARTTS__SHREIKtreePrint] = true;
  ARTSet304[ARTTS__SHREIKtreeShow] = true;
  ARTSet304[ARTTS__SHREIKtreeWrite] = true;
  ARTSet304[ARTTS__SHREIKtry] = true;
  ARTSet304[ARTTS__SHREIKtweDead] = true;
  ARTSet304[ARTTS__SHREIKtweExtents] = true;
  ARTSet304[ARTTS__SHREIKtweFromSPPF] = true;
  ARTSet304[ARTTS__SHREIKtweLexicalisations] = true;
  ARTSet304[ARTTS__SHREIKtweLongest] = true;
  ARTSet304[ARTTS__SHREIKtwePrint] = true;
  ARTSet304[ARTTS__SHREIKtwePrintFull] = true;
  ARTSet304[ARTTS__SHREIKtwePrintSummary] = true;
  ARTSet304[ARTTS__SHREIKtwePriority] = true;
  ARTSet304[ARTTS__SHREIKtweRecursive] = true;
  ARTSet304[ARTTS__SHREIKtweSegments] = true;
  ARTSet304[ARTTS__SHREIKtweShow] = true;
  ARTSet304[ARTTS__SHREIKtweTokenWrite] = true;
  ARTSet304[ARTTS__SHREIKtweWrite] = true;
  ARTSet304[ARTTS__SHREIKunicodeAsEscapeSeuences] = true;
  ARTSet304[ARTTS__SHREIKuse] = true;
  ARTSet304[ARTTS__SHREIKverbosity] = true;
  ARTSet304[ARTTS__SHREIKwhitespace] = true;
  ARTSet304[ARTTS__AMPERSAND] = true;
  ARTSet304[ARTTS__LPAR] = true;
  ARTSet304[ARTTS__MINUS] = true;
  ARTSet304[ARTTS__MINUS_MINUS_MINUS] = true;
  ARTSet304[ARTTS__MINUS_SLASH] = true;
  ARTSet304[ARTTS__MINUS_SLASH_STAR] = true;
  ARTSet304[ARTTS__MINUS_SLASH_GT] = true;
  ARTSet304[ARTTS__MINUS_GT] = true;
  ARTSet304[ARTTS__MINUS_GT_STAR] = true;
  ARTSet304[ARTTS__MINUS_GT_GT] = true;
  ARTSet304[ARTTS__MINUS_BACKSLASH] = true;
  ARTSet304[ARTTS__MINUS_BACKSLASH_STAR] = true;
  ARTSet304[ARTTS__MINUS_BACKSLASH_GT] = true;
  ARTSet304[ARTTS__LT] = true;
  ARTSet304[ARTTS__EQUAL] = true;
  ARTSet304[ARTTS__EQUAL_GT] = true;
  ARTSet304[ARTTS__EQUAL_GT_STAR] = true;
  ARTSet304[ARTTS__EQUAL_GT_GT] = true;
  ARTSet304[ARTTS_False] = true;
  ARTSet304[ARTTS_True] = true;
  ARTSet304[ARTTS_anyBuiltinTerminal] = true;
  ARTSet304[ARTTS_anyCaseInsensitiveTerminal] = true;
  ARTSet304[ARTTS_anyCaseSensitiveTerminal] = true;
  ARTSet304[ARTTS_anyCharacterTerminal] = true;
  ARTSet304[ARTTS_anyLiteralTerminal] = true;
  ARTSet304[ARTTS_anyNonterminal] = true;
  ARTSet304[ARTTS_anyParaterminal] = true;
  ARTSet304[ARTTS_anyTerminal] = true;
  ARTSet304[ARTTS__TILDE_GT] = true;
  ARTSet304[ARTTS__TILDE_GT_STAR] = true;
  ARTSet304[ARTTS__TILDE_GT_GT] = true;
  ARTSet304[ARTL_ART_CHAR_BQ] = true;
  ARTSet304[ARTL_ART_False] = true;
  ARTSet304[ARTL_ART_ID] = true;
  ARTSet304[ARTL_ART_ID_ATTRIBUTE] = true;
  ARTSet304[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet304[ARTL_ART_STRING_DQ] = true;
  ARTSet304[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet304[ARTL_ART_TRRELATION] = true;
  ARTSet304[ARTL_ART_True] = true;
  ARTSet304[ARTL_ART___bool] = true;
  ARTSet304[ARTL_ART___char] = true;
  ARTSet304[ARTL_ART___int32] = true;
  ARTSet304[ARTL_ART___real64] = true;
  ARTSet304[ARTL_ART___string] = true;
  ARTSet304[ARTL_ART_cfgAttributeEquation] = true;
  ARTSet304[ARTL_ART_cfgBuiltinTerminal] = true;
  ARTSet304[ARTL_ART_cfgCaseInsensitiveTerminal] = true;
  ARTSet304[ARTL_ART_cfgCaseSensitiveTerminal] = true;
  ARTSet304[ARTL_ART_cfgCharacterTerminal] = true;
  ARTSet304[ARTL_ART_cfgNonterminal] = true;
  ARTSet304[ARTL_ART_cfgRule] = true;
  ARTSet304[ARTL_ART_chooseDiff] = true;
  ARTSet304[ARTL_ART_chooseElement] = true;
  ARTSet304[ARTL_ART_choosePredefinedSet] = true;
  ARTSet304[ARTL_ART_chooseRule] = true;
  ARTSet304[ARTL_ART_chooseUnionIntersection] = true;
  ARTSet304[ARTL_ART_directive] = true;
  ARTSet304[ARTL_ART_text] = true;
  ARTSet304[ARTL_ART_textElement] = true;
  ARTSet304[ARTL_ART_tr] = true;
  ARTSet304[ARTL_ART_trConfiguration] = true;
  ARTSet304[ARTL_ART_trEquations] = true;
  ARTSet304[ARTL_ART_trLabel] = true;
  ARTSet304[ARTL_ART_trMatch] = true;
  ARTSet304[ARTL_ART_trPremises] = true;
  ARTSet304[ARTL_ART_trPrimaryTerm] = true;
  ARTSet304[ARTL_ART_trRule] = true;
  ARTSet304[ARTL_ART_trTerm] = true;
  ARTSet304[ARTL_ART_trTransition] = true;
}

public void ARTSet289initialise() {
  ARTSet289 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet289, 0, artSetExtent, false);
  ARTSet289[ARTTB_ID] = true;
  ARTSet289[ARTTB_STRING_DOLLAR] = true;
  ARTSet289[ARTL_ART_ID] = true;
  ARTSet289[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet289[ARTL_ART_aliasedCFGNonterminal] = true;
  ARTSet289[ARTL_ART_cfgNonterminal] = true;
}

public void ARTSet317initialise() {
  ARTSet317 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet317, 0, artSetExtent, false);
  ARTSet317[ARTTS_untyped] = true;
}

public void ARTSet282initialise() {
  ARTSet282 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet282, 0, artSetExtent, false);
  ARTSet282[ARTTS__SHREIKtry] = true;
}

public void ARTSet69initialise() {
  ARTSet69 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet69, 0, artSetExtent, false);
  ARTSet69[ARTX_EOS] = true;
  ARTSet69[ARTTB_CHAR_BQ] = true;
  ARTSet69[ARTTB_ID] = true;
  ARTSet69[ARTTB_SIGNED_INTEGER] = true;
  ARTSet69[ARTTB_SIGNED_REAL] = true;
  ARTSet69[ARTTB_STRING_DOLLAR] = true;
  ARTSet69[ARTTB_STRING_DQ] = true;
  ARTSet69[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet69[ARTTB_STRING_SQ] = true;
  ARTSet69[ARTTS__SHREIKGLLFIFODescriptors] = true;
  ARTSet69[ARTTS__SHREIKGLLPredictivePops] = true;
  ARTSet69[ARTTS__SHREIKGLLSuppressPopGuard] = true;
  ARTSet69[ARTTS__SHREIKGLLSuppressProductionGuard] = true;
  ARTSet69[ARTTS__SHREIKGLLSuppressSemantics] = true;
  ARTSet69[ARTTS__SHREIKGLLSuppressTestRepeat] = true;
  ARTSet69[ARTTS__SHREIKabsorb] = true;
  ARTSet69[ARTTS__SHREIKalphabet] = true;
  ARTSet69[ARTTS__SHREIKcfgElements] = true;
  ARTSet69[ARTTS__SHREIKcnp] = true;
  ARTSet69[ARTTS__SHREIKcnpGeneratorPool] = true;
  ARTSet69[ARTTS__SHREIKcnpIndexedAPI] = true;
  ARTSet69[ARTTS__SHREIKcnpIndexedPool] = true;
  ARTSet69[ARTTS__SHREIKcnpLinkedAPI] = true;
  ARTSet69[ARTTS__SHREIKcompressWhitespaceJava] = true;
  ARTSet69[ARTTS__SHREIKearley] = true;
  ARTSet69[ARTTS__SHREIKearley2007LinkedAPI] = true;
  ARTSet69[ARTTS__SHREIKearleyIndexedAPI] = true;
  ARTSet69[ARTTS__SHREIKearleyIndexedData] = true;
  ARTSet69[ARTTS__SHREIKearleyIndexedPool] = true;
  ARTSet69[ARTTS__SHREIKearleyLinkedAPI] = true;
  ARTSet69[ARTTS__SHREIKearleyTable] = true;
  ARTSet69[ARTTS__SHREIKearleyTableIndexedAPI] = true;
  ARTSet69[ARTTS__SHREIKearleyTableIndexedData] = true;
  ARTSet69[ARTTS__SHREIKearleyTableIndexedPool] = true;
  ARTSet69[ARTTS__SHREIKearleyTableLinkedAPI] = true;
  ARTSet69[ARTTS__SHREIKextractJLS] = true;
  ARTSet69[ARTTS__SHREIKgenerateC_PLUS_PLUS] = true;
  ARTSet69[ARTTS__SHREIKgenerateDynamic] = true;
  ARTSet69[ARTTS__SHREIKgenerateFragment] = true;
  ARTSet69[ARTTS__SHREIKgenerateJava] = true;
  ARTSet69[ARTTS__SHREIKgenerateML] = true;
  ARTSet69[ARTTS__SHREIKgeneratePool] = true;
  ARTSet69[ARTTS__SHREIKgenerateState] = true;
  ARTSet69[ARTTS__SHREIKgenerateStatic] = true;
  ARTSet69[ARTTS__SHREIKgll] = true;
  ARTSet69[ARTTS__SHREIKgllClusteredGeneratorPool] = true;
  ARTSet69[ARTTS__SHREIKgllGeneratorPool] = true;
  ARTSet69[ARTTS__SHREIKgllTWEGeneratorPool] = true;
  ARTSet69[ARTTS__SHREIKgrammarWrite] = true;
  ARTSet69[ARTTS__SHREIKgssPrint] = true;
  ARTSet69[ARTTS__SHREIKgssShow] = true;
  ARTSet69[ARTTS__SHREIKgssWrite] = true;
  ARTSet69[ARTTS__SHREIKinjectInstance] = true;
  ARTSet69[ARTTS__SHREIKinjectProduction] = true;
  ARTSet69[ARTTS__SHREIKinput] = true;
  ARTSet69[ARTTS__SHREIKinputPrint] = true;
  ARTSet69[ARTTS__SHREIKlatex] = true;
  ARTSet69[ARTTS__SHREIKlcnp] = true;
  ARTSet69[ARTTS__SHREIKlcnpGeneratorPool] = true;
  ARTSet69[ARTTS__SHREIKlcnpIndexedAPI] = true;
  ARTSet69[ARTTS__SHREIKlcnpIndexedPool] = true;
  ARTSet69[ARTTS__SHREIKlcnpLinkedAPI] = true;
  ARTSet69[ARTTS__SHREIKlexDFA] = true;
  ARTSet69[ARTTS__SHREIKlexGLL] = true;
  ARTSet69[ARTTS__SHREIKlexHardCoded] = true;
  ARTSet69[ARTTS__SHREIKlexWSSuffix] = true;
  ARTSet69[ARTTS__SHREIKlexerData] = true;
  ARTSet69[ARTTS__SHREIKlexerName] = true;
  ARTSet69[ARTTS__SHREIKmain] = true;
  ARTSet69[ARTTS__SHREIKmerge] = true;
  ARTSet69[ARTTS__SHREIKmgll] = true;
  ARTSet69[ARTTS__SHREIKmgllGeneratorPool] = true;
  ARTSet69[ARTTS__SHREIKmodule] = true;
  ARTSet69[ARTTS__SHREIKnamespace] = true;
  ARTSet69[ARTTS__SHREIKosbrd] = true;
  ARTSet69[ARTTS__SHREIKosbrdGenerator] = true;
  ARTSet69[ARTTS__SHREIKoutputDirectory] = true;
  ARTSet69[ARTTS__SHREIKparaterminal] = true;
  ARTSet69[ARTTS__SHREIKparseCountsPrint] = true;
  ARTSet69[ARTTS__SHREIKparserName] = true;
  ARTSet69[ARTTS__SHREIKprelude] = true;
  ARTSet69[ARTTS__SHREIKrelation] = true;
  ARTSet69[ARTTS__SHREIKresult] = true;
  ARTSet69[ARTTS__SHREIKsml97Parser] = true;
  ARTSet69[ARTTS__SHREIKsppfLongest] = true;
  ARTSet69[ARTTS__SHREIKsppfPrint] = true;
  ARTSet69[ARTTS__SHREIKsppfPriority] = true;
  ARTSet69[ARTTS__SHREIKsppfShow] = true;
  ARTSet69[ARTTS__SHREIKsppfWrite] = true;
  ARTSet69[ARTTS__SHREIKstart] = true;
  ARTSet69[ARTTS__SHREIKstatistics] = true;
  ARTSet69[ARTTS__SHREIKstrategy] = true;
  ARTSet69[ARTTS__SHREIKsupport] = true;
  ARTSet69[ARTTS__SHREIKtermPrint] = true;
  ARTSet69[ARTTS__SHREIKtermShow] = true;
  ARTSet69[ARTTS__SHREIKtermTool] = true;
  ARTSet69[ARTTS__SHREIKtermWrite] = true;
  ARTSet69[ARTTS__SHREIKtrace] = true;
  ARTSet69[ARTTS__SHREIKtreePrint] = true;
  ARTSet69[ARTTS__SHREIKtreeShow] = true;
  ARTSet69[ARTTS__SHREIKtreeWrite] = true;
  ARTSet69[ARTTS__SHREIKtry] = true;
  ARTSet69[ARTTS__SHREIKtweDead] = true;
  ARTSet69[ARTTS__SHREIKtweExtents] = true;
  ARTSet69[ARTTS__SHREIKtweFromSPPF] = true;
  ARTSet69[ARTTS__SHREIKtweLexicalisations] = true;
  ARTSet69[ARTTS__SHREIKtweLongest] = true;
  ARTSet69[ARTTS__SHREIKtwePrint] = true;
  ARTSet69[ARTTS__SHREIKtwePrintFull] = true;
  ARTSet69[ARTTS__SHREIKtwePrintSummary] = true;
  ARTSet69[ARTTS__SHREIKtwePriority] = true;
  ARTSet69[ARTTS__SHREIKtweRecursive] = true;
  ARTSet69[ARTTS__SHREIKtweSegments] = true;
  ARTSet69[ARTTS__SHREIKtweShow] = true;
  ARTSet69[ARTTS__SHREIKtweTokenWrite] = true;
  ARTSet69[ARTTS__SHREIKtweWrite] = true;
  ARTSet69[ARTTS__SHREIKunicodeAsEscapeSeuences] = true;
  ARTSet69[ARTTS__SHREIKuse] = true;
  ARTSet69[ARTTS__SHREIKverbosity] = true;
  ARTSet69[ARTTS__SHREIKwhitespace] = true;
  ARTSet69[ARTTS__HASH] = true;
  ARTSet69[ARTTS__AMPERSAND] = true;
  ARTSet69[ARTTS__LPAR] = true;
  ARTSet69[ARTTS__RPAR] = true;
  ARTSet69[ARTTS__COMMA] = true;
  ARTSet69[ARTTS__MINUS] = true;
  ARTSet69[ARTTS__MINUS_MINUS_MINUS] = true;
  ARTSet69[ARTTS__PERIOD] = true;
  ARTSet69[ARTTS__LT] = true;
  ARTSet69[ARTTS_False] = true;
  ARTSet69[ARTTS_True] = true;
  ARTSet69[ARTTS__BACKSLASH_BACKSLASH] = true;
  ARTSet69[ARTTS_anyBuiltinTerminal] = true;
  ARTSet69[ARTTS_anyCaseInsensitiveTerminal] = true;
  ARTSet69[ARTTS_anyCaseSensitiveTerminal] = true;
  ARTSet69[ARTTS_anyCharacterTerminal] = true;
  ARTSet69[ARTTS_anyLiteralTerminal] = true;
  ARTSet69[ARTTS_anyNonterminal] = true;
  ARTSet69[ARTTS_anyParaterminal] = true;
  ARTSet69[ARTTS_anyTerminal] = true;
  ARTSet69[ARTTS__BAR] = true;
  ARTSet69[ARTL_ART_CHAR_BQ] = true;
  ARTSet69[ARTL_ART_False] = true;
  ARTSet69[ARTL_ART_ID] = true;
  ARTSet69[ARTL_ART_ID_ATTRIBUTE] = true;
  ARTSet69[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet69[ARTL_ART_STRING_DQ] = true;
  ARTSet69[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet69[ARTL_ART_True] = true;
  ARTSet69[ARTL_ART___bool] = true;
  ARTSet69[ARTL_ART___char] = true;
  ARTSet69[ARTL_ART___int32] = true;
  ARTSet69[ARTL_ART___real64] = true;
  ARTSet69[ARTL_ART___string] = true;
  ARTSet69[ARTL_ART_cfgAbbrev] = true;
  ARTSet69[ARTL_ART_cfgAtom] = true;
  ARTSet69[ARTL_ART_cfgBuiltinTerminal] = true;
  ARTSet69[ARTL_ART_cfgCaseInsensitiveTerminal] = true;
  ARTSet69[ARTL_ART_cfgCaseSensitiveTerminal] = true;
  ARTSet69[ARTL_ART_cfgCatTail] = true;
  ARTSet69[ARTL_ART_cfgCharacterRangeTerminal] = true;
  ARTSet69[ARTL_ART_cfgCharacterTerminal] = true;
  ARTSet69[ARTL_ART_cfgDiff] = true;
  ARTSet69[ARTL_ART_cfgDoFirst] = true;
  ARTSet69[ARTL_ART_cfgElement] = true;
  ARTSet69[ARTL_ART_cfgEpsilon] = true;
  ARTSet69[ARTL_ART_cfgIter] = true;
  ARTSet69[ARTL_ART_cfgNonterminal] = true;
  ARTSet69[ARTL_ART_cfgNot] = true;
  ARTSet69[ARTL_ART_cfgRule] = true;
  ARTSet69[ARTL_ART_cfgSlotSymbol] = true;
  ARTSet69[ARTL_ART_cfgUnion] = true;
  ARTSet69[ARTL_ART_chooseDiff] = true;
  ARTSet69[ARTL_ART_chooseElement] = true;
  ARTSet69[ARTL_ART_choosePredefinedSet] = true;
  ARTSet69[ARTL_ART_chooseRule] = true;
  ARTSet69[ARTL_ART_chooseUnionIntersection] = true;
  ARTSet69[ARTL_ART_directive] = true;
  ARTSet69[ARTL_ART_text] = true;
  ARTSet69[ARTL_ART_textElement] = true;
  ARTSet69[ARTL_ART_tr] = true;
  ARTSet69[ARTL_ART_trConfiguration] = true;
  ARTSet69[ARTL_ART_trLabel] = true;
  ARTSet69[ARTL_ART_trMatch] = true;
  ARTSet69[ARTL_ART_trPremises] = true;
  ARTSet69[ARTL_ART_trPrimaryTerm] = true;
  ARTSet69[ARTL_ART_trRule] = true;
  ARTSet69[ARTL_ART_trTerm] = true;
  ARTSet69[ARTL_ART_trTransition] = true;
}

public void ARTSet332initialise() {
  ARTSet332 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet332, 0, artSetExtent, false);
  ARTSet332[ARTTB_CHAR_BQ] = true;
  ARTSet332[ARTTB_ID] = true;
  ARTSet332[ARTTB_SIGNED_INTEGER] = true;
  ARTSet332[ARTTB_SIGNED_REAL] = true;
  ARTSet332[ARTTB_STRING_DQ] = true;
  ARTSet332[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet332[ARTTB_STRING_SQ] = true;
  ARTSet332[ARTTS_False] = true;
  ARTSet332[ARTTS_True] = true;
  ARTSet332[ARTL_ART_False] = true;
  ARTSet332[ARTL_ART_ID] = true;
  ARTSet332[ARTL_ART_ID_ATTRIBUTE] = true;
  ARTSet332[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet332[ARTL_ART_True] = true;
  ARTSet332[ARTL_ART___bool] = true;
  ARTSet332[ARTL_ART___char] = true;
  ARTSet332[ARTL_ART___int32] = true;
  ARTSet332[ARTL_ART___real64] = true;
  ARTSet332[ARTL_ART___string] = true;
}

public void ARTSet248initialise() {
  ARTSet248 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet248, 0, artSetExtent, false);
  ARTSet248[ARTTS__SHREIKearleyTableIndexedPool] = true;
}

public void ARTSet288initialise() {
  ARTSet288 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet288, 0, artSetExtent, false);
  ARTSet288[ARTTB_STRING_DQ] = true;
  ARTSet288[ARTTB_STRING_SQ] = true;
  ARTSet288[ARTL_ART___string] = true;
  ARTSet288[ARTL_ART_latexDeclaration] = true;
}

public void ARTSet295initialise() {
  ARTSet295 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet295, 0, artSetExtent, false);
  ARTSet295[ARTTB_CHAR_BQ] = true;
  ARTSet295[ARTTB_ID] = true;
  ARTSet295[ARTTB_SIGNED_INTEGER] = true;
  ARTSet295[ARTTB_SIGNED_REAL] = true;
  ARTSet295[ARTTB_STRING_DQ] = true;
  ARTSet295[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet295[ARTTB_STRING_SQ] = true;
  ARTSet295[ARTTS__MINUS] = true;
  ARTSet295[ARTTS__MINUS_MINUS_MINUS] = true;
  ARTSet295[ARTTS__LT] = true;
  ARTSet295[ARTTS_False] = true;
  ARTSet295[ARTTS_True] = true;
  ARTSet295[ARTL_ART_False] = true;
  ARTSet295[ARTL_ART_ID] = true;
  ARTSet295[ARTL_ART_ID_ATTRIBUTE] = true;
  ARTSet295[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet295[ARTL_ART_True] = true;
  ARTSet295[ARTL_ART___bool] = true;
  ARTSet295[ARTL_ART___char] = true;
  ARTSet295[ARTL_ART___int32] = true;
  ARTSet295[ARTL_ART___real64] = true;
  ARTSet295[ARTL_ART___string] = true;
  ARTSet295[ARTL_ART_tr] = true;
  ARTSet295[ARTL_ART_trConfiguration] = true;
  ARTSet295[ARTL_ART_trLabel] = true;
  ARTSet295[ARTL_ART_trMatch] = true;
  ARTSet295[ARTL_ART_trPremises] = true;
  ARTSet295[ARTL_ART_trPrimaryTerm] = true;
  ARTSet295[ARTL_ART_trRule] = true;
  ARTSet295[ARTL_ART_trTerm] = true;
  ARTSet295[ARTL_ART_trTransition] = true;
}

public void ARTSet316initialise() {
  ARTSet316 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet316, 0, artSetExtent, false);
  ARTSet316[ARTTS_singleton] = true;
}

public void ARTSet49initialise() {
  ARTSet49 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet49, 0, artSetExtent, false);
  ARTSet49[ARTTS__STAR] = true;
  ARTSet49[ARTL_ART_cfgKleeneClosure] = true;
}

public void ARTSet37initialise() {
  ARTSet37 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet37, 0, artSetExtent, false);
  ARTSet37[ARTTS_False] = true;
  ARTSet37[ARTTS_True] = true;
  ARTSet37[ARTL_ART_False] = true;
  ARTSet37[ARTL_ART_True] = true;
}

public void ARTSet189initialise() {
  ARTSet189 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet189, 0, artSetExtent, false);
  ARTSet189[ARTTS__SHREIKtermPrint] = true;
}

public void ARTSet278initialise() {
  ARTSet278 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet278, 0, artSetExtent, false);
  ARTSet278[ARTTS__SHREIKstrategy] = true;
}

public void ARTSet329initialise() {
  ARTSet329 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet329, 0, artSetExtent, false);
  ARTSet329[ARTTB_CHAR_BQ] = true;
  ARTSet329[ARTTB_ID] = true;
  ARTSet329[ARTTB_SIGNED_INTEGER] = true;
  ARTSet329[ARTTB_SIGNED_REAL] = true;
  ARTSet329[ARTTB_STRING_DQ] = true;
  ARTSet329[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet329[ARTTB_STRING_SQ] = true;
  ARTSet329[ARTTS__MINUS] = true;
  ARTSet329[ARTTS__MINUS_MINUS_MINUS] = true;
  ARTSet329[ARTTS__LT] = true;
  ARTSet329[ARTTS_False] = true;
  ARTSet329[ARTTS_True] = true;
  ARTSet329[ARTL_ART_False] = true;
  ARTSet329[ARTL_ART_ID] = true;
  ARTSet329[ARTL_ART_ID_ATTRIBUTE] = true;
  ARTSet329[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet329[ARTL_ART_True] = true;
  ARTSet329[ARTL_ART___bool] = true;
  ARTSet329[ARTL_ART___char] = true;
  ARTSet329[ARTL_ART___int32] = true;
  ARTSet329[ARTL_ART___real64] = true;
  ARTSet329[ARTL_ART___string] = true;
  ARTSet329[ARTL_ART_tr] = true;
  ARTSet329[ARTL_ART_trConfiguration] = true;
  ARTSet329[ARTL_ART_trLabel] = true;
  ARTSet329[ARTL_ART_trMatch] = true;
  ARTSet329[ARTL_ART_trPremises] = true;
  ARTSet329[ARTL_ART_trPrimaryTerm] = true;
  ARTSet329[ARTL_ART_trTerm] = true;
  ARTSet329[ARTL_ART_trTransition] = true;
}

public void ARTSet152initialise() {
  ARTSet152 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet152, 0, artSetExtent, false);
  ARTSet152[ARTTS__SLASH] = true;
  ARTSet152[ARTL_ART_chooseIntersection] = true;
}

public void ARTSet209initialise() {
  ARTSet209 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet209, 0, artSetExtent, false);
  ARTSet209[ARTTS__SHREIKtweTokenWrite] = true;
}

public void ARTSet232initialise() {
  ARTSet232 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet232, 0, artSetExtent, false);
  ARTSet232[ARTTS__SHREIKsupport] = true;
}

public void ARTSet330initialise() {
  ARTSet330 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet330, 0, artSetExtent, false);
  ARTSet330[ARTTS__MINUS] = true;
  ARTSet330[ARTL_ART_trLabel] = true;
}

public void ARTSet17initialise() {
  ARTSet17 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet17, 0, artSetExtent, false);
  ARTSet17[ARTTB_STRING_PLAIN_SQ] = true;
}

public void ARTSet160initialise() {
  ARTSet160 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet160, 0, artSetExtent, false);
  ARTSet160[ARTTB_ID] = true;
  ARTSet160[ARTL_ART_ID] = true;
  ARTSet160[ARTL_ART_idART] = true;
}

public void ARTSet130initialise() {
  ARTSet130 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet130, 0, artSetExtent, false);
  ARTSet130[ARTX_EOS] = true;
  ARTSet130[ARTTB_CHAR_BQ] = true;
  ARTSet130[ARTTB_ID] = true;
  ARTSet130[ARTTB_SIGNED_INTEGER] = true;
  ARTSet130[ARTTB_SIGNED_REAL] = true;
  ARTSet130[ARTTB_STRING_DOLLAR] = true;
  ARTSet130[ARTTB_STRING_DQ] = true;
  ARTSet130[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet130[ARTTB_STRING_SQ] = true;
  ARTSet130[ARTTS__SHREIKGLLFIFODescriptors] = true;
  ARTSet130[ARTTS__SHREIKGLLPredictivePops] = true;
  ARTSet130[ARTTS__SHREIKGLLSuppressPopGuard] = true;
  ARTSet130[ARTTS__SHREIKGLLSuppressProductionGuard] = true;
  ARTSet130[ARTTS__SHREIKGLLSuppressSemantics] = true;
  ARTSet130[ARTTS__SHREIKGLLSuppressTestRepeat] = true;
  ARTSet130[ARTTS__SHREIKabsorb] = true;
  ARTSet130[ARTTS__SHREIKalphabet] = true;
  ARTSet130[ARTTS__SHREIKcfgElements] = true;
  ARTSet130[ARTTS__SHREIKcnp] = true;
  ARTSet130[ARTTS__SHREIKcnpGeneratorPool] = true;
  ARTSet130[ARTTS__SHREIKcnpIndexedAPI] = true;
  ARTSet130[ARTTS__SHREIKcnpIndexedPool] = true;
  ARTSet130[ARTTS__SHREIKcnpLinkedAPI] = true;
  ARTSet130[ARTTS__SHREIKcompressWhitespaceJava] = true;
  ARTSet130[ARTTS__SHREIKearley] = true;
  ARTSet130[ARTTS__SHREIKearley2007LinkedAPI] = true;
  ARTSet130[ARTTS__SHREIKearleyIndexedAPI] = true;
  ARTSet130[ARTTS__SHREIKearleyIndexedData] = true;
  ARTSet130[ARTTS__SHREIKearleyIndexedPool] = true;
  ARTSet130[ARTTS__SHREIKearleyLinkedAPI] = true;
  ARTSet130[ARTTS__SHREIKearleyTable] = true;
  ARTSet130[ARTTS__SHREIKearleyTableIndexedAPI] = true;
  ARTSet130[ARTTS__SHREIKearleyTableIndexedData] = true;
  ARTSet130[ARTTS__SHREIKearleyTableIndexedPool] = true;
  ARTSet130[ARTTS__SHREIKearleyTableLinkedAPI] = true;
  ARTSet130[ARTTS__SHREIKextractJLS] = true;
  ARTSet130[ARTTS__SHREIKgenerateC_PLUS_PLUS] = true;
  ARTSet130[ARTTS__SHREIKgenerateDynamic] = true;
  ARTSet130[ARTTS__SHREIKgenerateFragment] = true;
  ARTSet130[ARTTS__SHREIKgenerateJava] = true;
  ARTSet130[ARTTS__SHREIKgenerateML] = true;
  ARTSet130[ARTTS__SHREIKgeneratePool] = true;
  ARTSet130[ARTTS__SHREIKgenerateState] = true;
  ARTSet130[ARTTS__SHREIKgenerateStatic] = true;
  ARTSet130[ARTTS__SHREIKgll] = true;
  ARTSet130[ARTTS__SHREIKgllClusteredGeneratorPool] = true;
  ARTSet130[ARTTS__SHREIKgllGeneratorPool] = true;
  ARTSet130[ARTTS__SHREIKgllTWEGeneratorPool] = true;
  ARTSet130[ARTTS__SHREIKgrammarWrite] = true;
  ARTSet130[ARTTS__SHREIKgssPrint] = true;
  ARTSet130[ARTTS__SHREIKgssShow] = true;
  ARTSet130[ARTTS__SHREIKgssWrite] = true;
  ARTSet130[ARTTS__SHREIKinjectInstance] = true;
  ARTSet130[ARTTS__SHREIKinjectProduction] = true;
  ARTSet130[ARTTS__SHREIKinput] = true;
  ARTSet130[ARTTS__SHREIKinputPrint] = true;
  ARTSet130[ARTTS__SHREIKlatex] = true;
  ARTSet130[ARTTS__SHREIKlcnp] = true;
  ARTSet130[ARTTS__SHREIKlcnpGeneratorPool] = true;
  ARTSet130[ARTTS__SHREIKlcnpIndexedAPI] = true;
  ARTSet130[ARTTS__SHREIKlcnpIndexedPool] = true;
  ARTSet130[ARTTS__SHREIKlcnpLinkedAPI] = true;
  ARTSet130[ARTTS__SHREIKlexDFA] = true;
  ARTSet130[ARTTS__SHREIKlexGLL] = true;
  ARTSet130[ARTTS__SHREIKlexHardCoded] = true;
  ARTSet130[ARTTS__SHREIKlexWSSuffix] = true;
  ARTSet130[ARTTS__SHREIKlexerData] = true;
  ARTSet130[ARTTS__SHREIKlexerName] = true;
  ARTSet130[ARTTS__SHREIKmain] = true;
  ARTSet130[ARTTS__SHREIKmerge] = true;
  ARTSet130[ARTTS__SHREIKmgll] = true;
  ARTSet130[ARTTS__SHREIKmgllGeneratorPool] = true;
  ARTSet130[ARTTS__SHREIKmodule] = true;
  ARTSet130[ARTTS__SHREIKnamespace] = true;
  ARTSet130[ARTTS__SHREIKosbrd] = true;
  ARTSet130[ARTTS__SHREIKosbrdGenerator] = true;
  ARTSet130[ARTTS__SHREIKoutputDirectory] = true;
  ARTSet130[ARTTS__SHREIKparaterminal] = true;
  ARTSet130[ARTTS__SHREIKparseCountsPrint] = true;
  ARTSet130[ARTTS__SHREIKparserName] = true;
  ARTSet130[ARTTS__SHREIKprelude] = true;
  ARTSet130[ARTTS__SHREIKrelation] = true;
  ARTSet130[ARTTS__SHREIKresult] = true;
  ARTSet130[ARTTS__SHREIKsml97Parser] = true;
  ARTSet130[ARTTS__SHREIKsppfLongest] = true;
  ARTSet130[ARTTS__SHREIKsppfPrint] = true;
  ARTSet130[ARTTS__SHREIKsppfPriority] = true;
  ARTSet130[ARTTS__SHREIKsppfShow] = true;
  ARTSet130[ARTTS__SHREIKsppfWrite] = true;
  ARTSet130[ARTTS__SHREIKstart] = true;
  ARTSet130[ARTTS__SHREIKstatistics] = true;
  ARTSet130[ARTTS__SHREIKstrategy] = true;
  ARTSet130[ARTTS__SHREIKsupport] = true;
  ARTSet130[ARTTS__SHREIKtermPrint] = true;
  ARTSet130[ARTTS__SHREIKtermShow] = true;
  ARTSet130[ARTTS__SHREIKtermTool] = true;
  ARTSet130[ARTTS__SHREIKtermWrite] = true;
  ARTSet130[ARTTS__SHREIKtrace] = true;
  ARTSet130[ARTTS__SHREIKtreePrint] = true;
  ARTSet130[ARTTS__SHREIKtreeShow] = true;
  ARTSet130[ARTTS__SHREIKtreeWrite] = true;
  ARTSet130[ARTTS__SHREIKtry] = true;
  ARTSet130[ARTTS__SHREIKtweDead] = true;
  ARTSet130[ARTTS__SHREIKtweExtents] = true;
  ARTSet130[ARTTS__SHREIKtweFromSPPF] = true;
  ARTSet130[ARTTS__SHREIKtweLexicalisations] = true;
  ARTSet130[ARTTS__SHREIKtweLongest] = true;
  ARTSet130[ARTTS__SHREIKtwePrint] = true;
  ARTSet130[ARTTS__SHREIKtwePrintFull] = true;
  ARTSet130[ARTTS__SHREIKtwePrintSummary] = true;
  ARTSet130[ARTTS__SHREIKtwePriority] = true;
  ARTSet130[ARTTS__SHREIKtweRecursive] = true;
  ARTSet130[ARTTS__SHREIKtweSegments] = true;
  ARTSet130[ARTTS__SHREIKtweShow] = true;
  ARTSet130[ARTTS__SHREIKtweTokenWrite] = true;
  ARTSet130[ARTTS__SHREIKtweWrite] = true;
  ARTSet130[ARTTS__SHREIKunicodeAsEscapeSeuences] = true;
  ARTSet130[ARTTS__SHREIKuse] = true;
  ARTSet130[ARTTS__SHREIKverbosity] = true;
  ARTSet130[ARTTS__SHREIKwhitespace] = true;
  ARTSet130[ARTTS__AMPERSAND] = true;
  ARTSet130[ARTTS__LPAR] = true;
  ARTSet130[ARTTS__RPAR] = true;
  ARTSet130[ARTTS__MINUS] = true;
  ARTSet130[ARTTS__MINUS_MINUS_MINUS] = true;
  ARTSet130[ARTTS__LT] = true;
  ARTSet130[ARTTS__LT_LT] = true;
  ARTSet130[ARTTS__GT] = true;
  ARTSet130[ARTTS__GT_GT] = true;
  ARTSet130[ARTTS_False] = true;
  ARTSet130[ARTTS_True] = true;
  ARTSet130[ARTTS__BACKSLASH] = true;
  ARTSet130[ARTTS_anyBuiltinTerminal] = true;
  ARTSet130[ARTTS_anyCaseInsensitiveTerminal] = true;
  ARTSet130[ARTTS_anyCaseSensitiveTerminal] = true;
  ARTSet130[ARTTS_anyCharacterTerminal] = true;
  ARTSet130[ARTTS_anyLiteralTerminal] = true;
  ARTSet130[ARTTS_anyNonterminal] = true;
  ARTSet130[ARTTS_anyParaterminal] = true;
  ARTSet130[ARTTS_anyTerminal] = true;
  ARTSet130[ARTL_ART_CHAR_BQ] = true;
  ARTSet130[ARTL_ART_False] = true;
  ARTSet130[ARTL_ART_ID] = true;
  ARTSet130[ARTL_ART_ID_ATTRIBUTE] = true;
  ARTSet130[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet130[ARTL_ART_STRING_DQ] = true;
  ARTSet130[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet130[ARTL_ART_True] = true;
  ARTSet130[ARTL_ART___bool] = true;
  ARTSet130[ARTL_ART___char] = true;
  ARTSet130[ARTL_ART___int32] = true;
  ARTSet130[ARTL_ART___real64] = true;
  ARTSet130[ARTL_ART___string] = true;
  ARTSet130[ARTL_ART_cfgBuiltinTerminal] = true;
  ARTSet130[ARTL_ART_cfgCaseInsensitiveTerminal] = true;
  ARTSet130[ARTL_ART_cfgCaseSensitiveTerminal] = true;
  ARTSet130[ARTL_ART_cfgCharacterTerminal] = true;
  ARTSet130[ARTL_ART_cfgNonterminal] = true;
  ARTSet130[ARTL_ART_cfgRule] = true;
  ARTSet130[ARTL_ART_chooseDiff] = true;
  ARTSet130[ARTL_ART_chooseElement] = true;
  ARTSet130[ARTL_ART_chooseHigher] = true;
  ARTSet130[ARTL_ART_chooseLonger] = true;
  ARTSet130[ARTL_ART_chooseLower] = true;
  ARTSet130[ARTL_ART_choosePredefinedSet] = true;
  ARTSet130[ARTL_ART_chooseRule] = true;
  ARTSet130[ARTL_ART_chooseShorter] = true;
  ARTSet130[ARTL_ART_chooseUnionIntersection] = true;
  ARTSet130[ARTL_ART_chooserOp] = true;
  ARTSet130[ARTL_ART_directive] = true;
  ARTSet130[ARTL_ART_text] = true;
  ARTSet130[ARTL_ART_textElement] = true;
  ARTSet130[ARTL_ART_tr] = true;
  ARTSet130[ARTL_ART_trConfiguration] = true;
  ARTSet130[ARTL_ART_trLabel] = true;
  ARTSet130[ARTL_ART_trMatch] = true;
  ARTSet130[ARTL_ART_trPremises] = true;
  ARTSet130[ARTL_ART_trPrimaryTerm] = true;
  ARTSet130[ARTL_ART_trRule] = true;
  ARTSet130[ARTL_ART_trTerm] = true;
  ARTSet130[ARTL_ART_trTransition] = true;
}

public void ARTSet67initialise() {
  ARTSet67 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet67, 0, artSetExtent, false);
  ARTSet67[ARTTB_CHAR_BQ] = true;
  ARTSet67[ARTTB_ID] = true;
  ARTSet67[ARTTB_STRING_DOLLAR] = true;
  ARTSet67[ARTTB_STRING_DQ] = true;
  ARTSet67[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet67[ARTTS__HASH] = true;
  ARTSet67[ARTTS__AMPERSAND] = true;
  ARTSet67[ARTTS__PERIOD] = true;
  ARTSet67[ARTL_ART_CHAR_BQ] = true;
  ARTSet67[ARTL_ART_ID] = true;
  ARTSet67[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet67[ARTL_ART_STRING_DQ] = true;
  ARTSet67[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet67[ARTL_ART_cfgAtom] = true;
  ARTSet67[ARTL_ART_cfgAtoms] = true;
  ARTSet67[ARTL_ART_cfgBuiltinTerminal] = true;
  ARTSet67[ARTL_ART_cfgCaseInsensitiveTerminal] = true;
  ARTSet67[ARTL_ART_cfgCaseSensitiveTerminal] = true;
  ARTSet67[ARTL_ART_cfgCharacterRangeTerminal] = true;
  ARTSet67[ARTL_ART_cfgCharacterTerminal] = true;
  ARTSet67[ARTL_ART_cfgEpsilon] = true;
  ARTSet67[ARTL_ART_cfgNonterminal] = true;
  ARTSet67[ARTL_ART_cfgSlotSymbol] = true;
}

public void ARTSet236initialise() {
  ARTSet236 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet236, 0, artSetExtent, false);
  ARTSet236[ARTTS__SHREIKGLLSuppressProductionGuard] = true;
}

public void ARTSet62initialise() {
  ARTSet62 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet62, 0, artSetExtent, false);
  ARTSet62[ARTTB_CHAR_BQ] = true;
  ARTSet62[ARTL_ART_CHAR_BQ] = true;
  ARTSet62[ARTL_ART_cfgCharacterTerminal] = true;
}

public void ARTSet230initialise() {
  ARTSet230 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet230, 0, artSetExtent, false);
  ARTSet230[ARTTS__SHREIKgenerateML] = true;
}

public void ARTSet39initialise() {
  ARTSet39 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet39, 0, artSetExtent, false);
  ARTSet39[ARTTS_False] = true;
  ARTSet39[ARTL_ART_False] = true;
}

public void ARTSet184initialise() {
  ARTSet184 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet184, 0, artSetExtent, false);
  ARTSet184[ARTTS__SHREIKsppfWrite] = true;
}

public void ARTSet269initialise() {
  ARTSet269 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet269, 0, artSetExtent, false);
  ARTSet269[ARTTS__SHREIKlexerData] = true;
}

public void ARTSet211initialise() {
  ARTSet211 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet211, 0, artSetExtent, false);
  ARTSet211[ARTTS__SHREIKtweExtents] = true;
}

public void ARTSet48initialise() {
  ARTSet48 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet48, 0, artSetExtent, false);
  ARTSet48[ARTX_EOS] = true;
  ARTSet48[ARTTB_CHAR_BQ] = true;
  ARTSet48[ARTTB_ID] = true;
  ARTSet48[ARTTB_SIGNED_INTEGER] = true;
  ARTSet48[ARTTB_SIGNED_REAL] = true;
  ARTSet48[ARTTB_STRING_BRACE_NEST] = true;
  ARTSet48[ARTTB_STRING_DOLLAR] = true;
  ARTSet48[ARTTB_STRING_DQ] = true;
  ARTSet48[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet48[ARTTB_STRING_SQ] = true;
  ARTSet48[ARTTS__SHREIKGLLFIFODescriptors] = true;
  ARTSet48[ARTTS__SHREIKGLLPredictivePops] = true;
  ARTSet48[ARTTS__SHREIKGLLSuppressPopGuard] = true;
  ARTSet48[ARTTS__SHREIKGLLSuppressProductionGuard] = true;
  ARTSet48[ARTTS__SHREIKGLLSuppressSemantics] = true;
  ARTSet48[ARTTS__SHREIKGLLSuppressTestRepeat] = true;
  ARTSet48[ARTTS__SHREIKabsorb] = true;
  ARTSet48[ARTTS__SHREIKalphabet] = true;
  ARTSet48[ARTTS__SHREIKcfgElements] = true;
  ARTSet48[ARTTS__SHREIKcnp] = true;
  ARTSet48[ARTTS__SHREIKcnpGeneratorPool] = true;
  ARTSet48[ARTTS__SHREIKcnpIndexedAPI] = true;
  ARTSet48[ARTTS__SHREIKcnpIndexedPool] = true;
  ARTSet48[ARTTS__SHREIKcnpLinkedAPI] = true;
  ARTSet48[ARTTS__SHREIKcompressWhitespaceJava] = true;
  ARTSet48[ARTTS__SHREIKearley] = true;
  ARTSet48[ARTTS__SHREIKearley2007LinkedAPI] = true;
  ARTSet48[ARTTS__SHREIKearleyIndexedAPI] = true;
  ARTSet48[ARTTS__SHREIKearleyIndexedData] = true;
  ARTSet48[ARTTS__SHREIKearleyIndexedPool] = true;
  ARTSet48[ARTTS__SHREIKearleyLinkedAPI] = true;
  ARTSet48[ARTTS__SHREIKearleyTable] = true;
  ARTSet48[ARTTS__SHREIKearleyTableIndexedAPI] = true;
  ARTSet48[ARTTS__SHREIKearleyTableIndexedData] = true;
  ARTSet48[ARTTS__SHREIKearleyTableIndexedPool] = true;
  ARTSet48[ARTTS__SHREIKearleyTableLinkedAPI] = true;
  ARTSet48[ARTTS__SHREIKextractJLS] = true;
  ARTSet48[ARTTS__SHREIKgenerateC_PLUS_PLUS] = true;
  ARTSet48[ARTTS__SHREIKgenerateDynamic] = true;
  ARTSet48[ARTTS__SHREIKgenerateFragment] = true;
  ARTSet48[ARTTS__SHREIKgenerateJava] = true;
  ARTSet48[ARTTS__SHREIKgenerateML] = true;
  ARTSet48[ARTTS__SHREIKgeneratePool] = true;
  ARTSet48[ARTTS__SHREIKgenerateState] = true;
  ARTSet48[ARTTS__SHREIKgenerateStatic] = true;
  ARTSet48[ARTTS__SHREIKgll] = true;
  ARTSet48[ARTTS__SHREIKgllClusteredGeneratorPool] = true;
  ARTSet48[ARTTS__SHREIKgllGeneratorPool] = true;
  ARTSet48[ARTTS__SHREIKgllTWEGeneratorPool] = true;
  ARTSet48[ARTTS__SHREIKgrammarWrite] = true;
  ARTSet48[ARTTS__SHREIKgssPrint] = true;
  ARTSet48[ARTTS__SHREIKgssShow] = true;
  ARTSet48[ARTTS__SHREIKgssWrite] = true;
  ARTSet48[ARTTS__SHREIKinjectInstance] = true;
  ARTSet48[ARTTS__SHREIKinjectProduction] = true;
  ARTSet48[ARTTS__SHREIKinput] = true;
  ARTSet48[ARTTS__SHREIKinputPrint] = true;
  ARTSet48[ARTTS__SHREIKlatex] = true;
  ARTSet48[ARTTS__SHREIKlcnp] = true;
  ARTSet48[ARTTS__SHREIKlcnpGeneratorPool] = true;
  ARTSet48[ARTTS__SHREIKlcnpIndexedAPI] = true;
  ARTSet48[ARTTS__SHREIKlcnpIndexedPool] = true;
  ARTSet48[ARTTS__SHREIKlcnpLinkedAPI] = true;
  ARTSet48[ARTTS__SHREIKlexDFA] = true;
  ARTSet48[ARTTS__SHREIKlexGLL] = true;
  ARTSet48[ARTTS__SHREIKlexHardCoded] = true;
  ARTSet48[ARTTS__SHREIKlexWSSuffix] = true;
  ARTSet48[ARTTS__SHREIKlexerData] = true;
  ARTSet48[ARTTS__SHREIKlexerName] = true;
  ARTSet48[ARTTS__SHREIKmain] = true;
  ARTSet48[ARTTS__SHREIKmerge] = true;
  ARTSet48[ARTTS__SHREIKmgll] = true;
  ARTSet48[ARTTS__SHREIKmgllGeneratorPool] = true;
  ARTSet48[ARTTS__SHREIKmodule] = true;
  ARTSet48[ARTTS__SHREIKnamespace] = true;
  ARTSet48[ARTTS__SHREIKosbrd] = true;
  ARTSet48[ARTTS__SHREIKosbrdGenerator] = true;
  ARTSet48[ARTTS__SHREIKoutputDirectory] = true;
  ARTSet48[ARTTS__SHREIKparaterminal] = true;
  ARTSet48[ARTTS__SHREIKparseCountsPrint] = true;
  ARTSet48[ARTTS__SHREIKparserName] = true;
  ARTSet48[ARTTS__SHREIKprelude] = true;
  ARTSet48[ARTTS__SHREIKrelation] = true;
  ARTSet48[ARTTS__SHREIKresult] = true;
  ARTSet48[ARTTS__SHREIKsml97Parser] = true;
  ARTSet48[ARTTS__SHREIKsppfLongest] = true;
  ARTSet48[ARTTS__SHREIKsppfPrint] = true;
  ARTSet48[ARTTS__SHREIKsppfPriority] = true;
  ARTSet48[ARTTS__SHREIKsppfShow] = true;
  ARTSet48[ARTTS__SHREIKsppfWrite] = true;
  ARTSet48[ARTTS__SHREIKstart] = true;
  ARTSet48[ARTTS__SHREIKstatistics] = true;
  ARTSet48[ARTTS__SHREIKstrategy] = true;
  ARTSet48[ARTTS__SHREIKsupport] = true;
  ARTSet48[ARTTS__SHREIKtermPrint] = true;
  ARTSet48[ARTTS__SHREIKtermShow] = true;
  ARTSet48[ARTTS__SHREIKtermTool] = true;
  ARTSet48[ARTTS__SHREIKtermWrite] = true;
  ARTSet48[ARTTS__SHREIKtrace] = true;
  ARTSet48[ARTTS__SHREIKtreePrint] = true;
  ARTSet48[ARTTS__SHREIKtreeShow] = true;
  ARTSet48[ARTTS__SHREIKtreeWrite] = true;
  ARTSet48[ARTTS__SHREIKtry] = true;
  ARTSet48[ARTTS__SHREIKtweDead] = true;
  ARTSet48[ARTTS__SHREIKtweExtents] = true;
  ARTSet48[ARTTS__SHREIKtweFromSPPF] = true;
  ARTSet48[ARTTS__SHREIKtweLexicalisations] = true;
  ARTSet48[ARTTS__SHREIKtweLongest] = true;
  ARTSet48[ARTTS__SHREIKtwePrint] = true;
  ARTSet48[ARTTS__SHREIKtwePrintFull] = true;
  ARTSet48[ARTTS__SHREIKtwePrintSummary] = true;
  ARTSet48[ARTTS__SHREIKtwePriority] = true;
  ARTSet48[ARTTS__SHREIKtweRecursive] = true;
  ARTSet48[ARTTS__SHREIKtweSegments] = true;
  ARTSet48[ARTTS__SHREIKtweShow] = true;
  ARTSet48[ARTTS__SHREIKtweTokenWrite] = true;
  ARTSet48[ARTTS__SHREIKtweWrite] = true;
  ARTSet48[ARTTS__SHREIKunicodeAsEscapeSeuences] = true;
  ARTSet48[ARTTS__SHREIKuse] = true;
  ARTSet48[ARTTS__SHREIKverbosity] = true;
  ARTSet48[ARTTS__SHREIKwhitespace] = true;
  ARTSet48[ARTTS__HASH] = true;
  ARTSet48[ARTTS__AMPERSAND] = true;
  ARTSet48[ARTTS__LPAR] = true;
  ARTSet48[ARTTS__RPAR] = true;
  ARTSet48[ARTTS__MINUS] = true;
  ARTSet48[ARTTS__MINUS_MINUS_MINUS] = true;
  ARTSet48[ARTTS__PERIOD] = true;
  ARTSet48[ARTTS__LT] = true;
  ARTSet48[ARTTS_False] = true;
  ARTSet48[ARTTS_True] = true;
  ARTSet48[ARTTS__BACKSLASH_BACKSLASH] = true;
  ARTSet48[ARTTS_anyBuiltinTerminal] = true;
  ARTSet48[ARTTS_anyCaseInsensitiveTerminal] = true;
  ARTSet48[ARTTS_anyCaseSensitiveTerminal] = true;
  ARTSet48[ARTTS_anyCharacterTerminal] = true;
  ARTSet48[ARTTS_anyLiteralTerminal] = true;
  ARTSet48[ARTTS_anyNonterminal] = true;
  ARTSet48[ARTTS_anyParaterminal] = true;
  ARTSet48[ARTTS_anyTerminal] = true;
  ARTSet48[ARTTS__BAR] = true;
  ARTSet48[ARTL_ART_CHAR_BQ] = true;
  ARTSet48[ARTL_ART_False] = true;
  ARTSet48[ARTL_ART_ID] = true;
  ARTSet48[ARTL_ART_ID_ATTRIBUTE] = true;
  ARTSet48[ARTL_ART_STRING_BRACE_NEST] = true;
  ARTSet48[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet48[ARTL_ART_STRING_DQ] = true;
  ARTSet48[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet48[ARTL_ART_True] = true;
  ARTSet48[ARTL_ART___bool] = true;
  ARTSet48[ARTL_ART___char] = true;
  ARTSet48[ARTL_ART___int32] = true;
  ARTSet48[ARTL_ART___real64] = true;
  ARTSet48[ARTL_ART___string] = true;
  ARTSet48[ARTL_ART_cfgAbbrev] = true;
  ARTSet48[ARTL_ART_cfgAtom] = true;
  ARTSet48[ARTL_ART_cfgAttributeEquation] = true;
  ARTSet48[ARTL_ART_cfgBuiltinTerminal] = true;
  ARTSet48[ARTL_ART_cfgCaseInsensitiveTerminal] = true;
  ARTSet48[ARTL_ART_cfgCaseSensitiveTerminal] = true;
  ARTSet48[ARTL_ART_cfgCatTail] = true;
  ARTSet48[ARTL_ART_cfgCharacterRangeTerminal] = true;
  ARTSet48[ARTL_ART_cfgCharacterTerminal] = true;
  ARTSet48[ARTL_ART_cfgDiff] = true;
  ARTSet48[ARTL_ART_cfgDoFirst] = true;
  ARTSet48[ARTL_ART_cfgElement] = true;
  ARTSet48[ARTL_ART_cfgEpsilon] = true;
  ARTSet48[ARTL_ART_cfgIter] = true;
  ARTSet48[ARTL_ART_cfgNativeAction] = true;
  ARTSet48[ARTL_ART_cfgNonterminal] = true;
  ARTSet48[ARTL_ART_cfgNot] = true;
  ARTSet48[ARTL_ART_cfgRule] = true;
  ARTSet48[ARTL_ART_cfgSlot] = true;
  ARTSet48[ARTL_ART_cfgSlotSymbol] = true;
  ARTSet48[ARTL_ART_cfgUnion] = true;
  ARTSet48[ARTL_ART_chooseDiff] = true;
  ARTSet48[ARTL_ART_chooseElement] = true;
  ARTSet48[ARTL_ART_choosePredefinedSet] = true;
  ARTSet48[ARTL_ART_chooseRule] = true;
  ARTSet48[ARTL_ART_chooseUnionIntersection] = true;
  ARTSet48[ARTL_ART_directive] = true;
  ARTSet48[ARTL_ART_text] = true;
  ARTSet48[ARTL_ART_textElement] = true;
  ARTSet48[ARTL_ART_tr] = true;
  ARTSet48[ARTL_ART_trConfiguration] = true;
  ARTSet48[ARTL_ART_trLabel] = true;
  ARTSet48[ARTL_ART_trMatch] = true;
  ARTSet48[ARTL_ART_trPremises] = true;
  ARTSet48[ARTL_ART_trPrimaryTerm] = true;
  ARTSet48[ARTL_ART_trRule] = true;
  ARTSet48[ARTL_ART_trTerm] = true;
  ARTSet48[ARTL_ART_trTransition] = true;
}

public void ARTSet339initialise() {
  ARTSet339 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet339, 0, artSetExtent, false);
  ARTSet339[ARTX_EOS] = true;
  ARTSet339[ARTTB_CHAR_BQ] = true;
  ARTSet339[ARTTB_ID] = true;
  ARTSet339[ARTTB_SIGNED_INTEGER] = true;
  ARTSet339[ARTTB_SIGNED_REAL] = true;
  ARTSet339[ARTTB_STRING_DOLLAR] = true;
  ARTSet339[ARTTB_STRING_DQ] = true;
  ARTSet339[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet339[ARTTB_STRING_SQ] = true;
  ARTSet339[ARTTS__SHREIKGLLFIFODescriptors] = true;
  ARTSet339[ARTTS__SHREIKGLLPredictivePops] = true;
  ARTSet339[ARTTS__SHREIKGLLSuppressPopGuard] = true;
  ARTSet339[ARTTS__SHREIKGLLSuppressProductionGuard] = true;
  ARTSet339[ARTTS__SHREIKGLLSuppressSemantics] = true;
  ARTSet339[ARTTS__SHREIKGLLSuppressTestRepeat] = true;
  ARTSet339[ARTTS__SHREIKabsorb] = true;
  ARTSet339[ARTTS__SHREIKalphabet] = true;
  ARTSet339[ARTTS__SHREIKcfgElements] = true;
  ARTSet339[ARTTS__SHREIKcnp] = true;
  ARTSet339[ARTTS__SHREIKcnpGeneratorPool] = true;
  ARTSet339[ARTTS__SHREIKcnpIndexedAPI] = true;
  ARTSet339[ARTTS__SHREIKcnpIndexedPool] = true;
  ARTSet339[ARTTS__SHREIKcnpLinkedAPI] = true;
  ARTSet339[ARTTS__SHREIKcompressWhitespaceJava] = true;
  ARTSet339[ARTTS__SHREIKearley] = true;
  ARTSet339[ARTTS__SHREIKearley2007LinkedAPI] = true;
  ARTSet339[ARTTS__SHREIKearleyIndexedAPI] = true;
  ARTSet339[ARTTS__SHREIKearleyIndexedData] = true;
  ARTSet339[ARTTS__SHREIKearleyIndexedPool] = true;
  ARTSet339[ARTTS__SHREIKearleyLinkedAPI] = true;
  ARTSet339[ARTTS__SHREIKearleyTable] = true;
  ARTSet339[ARTTS__SHREIKearleyTableIndexedAPI] = true;
  ARTSet339[ARTTS__SHREIKearleyTableIndexedData] = true;
  ARTSet339[ARTTS__SHREIKearleyTableIndexedPool] = true;
  ARTSet339[ARTTS__SHREIKearleyTableLinkedAPI] = true;
  ARTSet339[ARTTS__SHREIKextractJLS] = true;
  ARTSet339[ARTTS__SHREIKgenerateC_PLUS_PLUS] = true;
  ARTSet339[ARTTS__SHREIKgenerateDynamic] = true;
  ARTSet339[ARTTS__SHREIKgenerateFragment] = true;
  ARTSet339[ARTTS__SHREIKgenerateJava] = true;
  ARTSet339[ARTTS__SHREIKgenerateML] = true;
  ARTSet339[ARTTS__SHREIKgeneratePool] = true;
  ARTSet339[ARTTS__SHREIKgenerateState] = true;
  ARTSet339[ARTTS__SHREIKgenerateStatic] = true;
  ARTSet339[ARTTS__SHREIKgll] = true;
  ARTSet339[ARTTS__SHREIKgllClusteredGeneratorPool] = true;
  ARTSet339[ARTTS__SHREIKgllGeneratorPool] = true;
  ARTSet339[ARTTS__SHREIKgllTWEGeneratorPool] = true;
  ARTSet339[ARTTS__SHREIKgrammarWrite] = true;
  ARTSet339[ARTTS__SHREIKgssPrint] = true;
  ARTSet339[ARTTS__SHREIKgssShow] = true;
  ARTSet339[ARTTS__SHREIKgssWrite] = true;
  ARTSet339[ARTTS__SHREIKinjectInstance] = true;
  ARTSet339[ARTTS__SHREIKinjectProduction] = true;
  ARTSet339[ARTTS__SHREIKinput] = true;
  ARTSet339[ARTTS__SHREIKinputPrint] = true;
  ARTSet339[ARTTS__SHREIKlatex] = true;
  ARTSet339[ARTTS__SHREIKlcnp] = true;
  ARTSet339[ARTTS__SHREIKlcnpGeneratorPool] = true;
  ARTSet339[ARTTS__SHREIKlcnpIndexedAPI] = true;
  ARTSet339[ARTTS__SHREIKlcnpIndexedPool] = true;
  ARTSet339[ARTTS__SHREIKlcnpLinkedAPI] = true;
  ARTSet339[ARTTS__SHREIKlexDFA] = true;
  ARTSet339[ARTTS__SHREIKlexGLL] = true;
  ARTSet339[ARTTS__SHREIKlexHardCoded] = true;
  ARTSet339[ARTTS__SHREIKlexWSSuffix] = true;
  ARTSet339[ARTTS__SHREIKlexerData] = true;
  ARTSet339[ARTTS__SHREIKlexerName] = true;
  ARTSet339[ARTTS__SHREIKmain] = true;
  ARTSet339[ARTTS__SHREIKmerge] = true;
  ARTSet339[ARTTS__SHREIKmgll] = true;
  ARTSet339[ARTTS__SHREIKmgllGeneratorPool] = true;
  ARTSet339[ARTTS__SHREIKmodule] = true;
  ARTSet339[ARTTS__SHREIKnamespace] = true;
  ARTSet339[ARTTS__SHREIKosbrd] = true;
  ARTSet339[ARTTS__SHREIKosbrdGenerator] = true;
  ARTSet339[ARTTS__SHREIKoutputDirectory] = true;
  ARTSet339[ARTTS__SHREIKparaterminal] = true;
  ARTSet339[ARTTS__SHREIKparseCountsPrint] = true;
  ARTSet339[ARTTS__SHREIKparserName] = true;
  ARTSet339[ARTTS__SHREIKprelude] = true;
  ARTSet339[ARTTS__SHREIKrelation] = true;
  ARTSet339[ARTTS__SHREIKresult] = true;
  ARTSet339[ARTTS__SHREIKsml97Parser] = true;
  ARTSet339[ARTTS__SHREIKsppfLongest] = true;
  ARTSet339[ARTTS__SHREIKsppfPrint] = true;
  ARTSet339[ARTTS__SHREIKsppfPriority] = true;
  ARTSet339[ARTTS__SHREIKsppfShow] = true;
  ARTSet339[ARTTS__SHREIKsppfWrite] = true;
  ARTSet339[ARTTS__SHREIKstart] = true;
  ARTSet339[ARTTS__SHREIKstatistics] = true;
  ARTSet339[ARTTS__SHREIKstrategy] = true;
  ARTSet339[ARTTS__SHREIKsupport] = true;
  ARTSet339[ARTTS__SHREIKtermPrint] = true;
  ARTSet339[ARTTS__SHREIKtermShow] = true;
  ARTSet339[ARTTS__SHREIKtermTool] = true;
  ARTSet339[ARTTS__SHREIKtermWrite] = true;
  ARTSet339[ARTTS__SHREIKtrace] = true;
  ARTSet339[ARTTS__SHREIKtreePrint] = true;
  ARTSet339[ARTTS__SHREIKtreeShow] = true;
  ARTSet339[ARTTS__SHREIKtreeWrite] = true;
  ARTSet339[ARTTS__SHREIKtry] = true;
  ARTSet339[ARTTS__SHREIKtweDead] = true;
  ARTSet339[ARTTS__SHREIKtweExtents] = true;
  ARTSet339[ARTTS__SHREIKtweFromSPPF] = true;
  ARTSet339[ARTTS__SHREIKtweLexicalisations] = true;
  ARTSet339[ARTTS__SHREIKtweLongest] = true;
  ARTSet339[ARTTS__SHREIKtwePrint] = true;
  ARTSet339[ARTTS__SHREIKtwePrintFull] = true;
  ARTSet339[ARTTS__SHREIKtwePrintSummary] = true;
  ARTSet339[ARTTS__SHREIKtwePriority] = true;
  ARTSet339[ARTTS__SHREIKtweRecursive] = true;
  ARTSet339[ARTTS__SHREIKtweSegments] = true;
  ARTSet339[ARTTS__SHREIKtweShow] = true;
  ARTSet339[ARTTS__SHREIKtweTokenWrite] = true;
  ARTSet339[ARTTS__SHREIKtweWrite] = true;
  ARTSet339[ARTTS__SHREIKunicodeAsEscapeSeuences] = true;
  ARTSet339[ARTTS__SHREIKuse] = true;
  ARTSet339[ARTTS__SHREIKverbosity] = true;
  ARTSet339[ARTTS__SHREIKwhitespace] = true;
  ARTSet339[ARTTS__AMPERSAND] = true;
  ARTSet339[ARTTS__LPAR] = true;
  ARTSet339[ARTTS__MINUS] = true;
  ARTSet339[ARTTS__MINUS_MINUS_MINUS] = true;
  ARTSet339[ARTTS__LT] = true;
  ARTSet339[ARTTS__EQUAL] = true;
  ARTSet339[ARTTS_False] = true;
  ARTSet339[ARTTS_True] = true;
  ARTSet339[ARTTS_anyBuiltinTerminal] = true;
  ARTSet339[ARTTS_anyCaseInsensitiveTerminal] = true;
  ARTSet339[ARTTS_anyCaseSensitiveTerminal] = true;
  ARTSet339[ARTTS_anyCharacterTerminal] = true;
  ARTSet339[ARTTS_anyLiteralTerminal] = true;
  ARTSet339[ARTTS_anyNonterminal] = true;
  ARTSet339[ARTTS_anyParaterminal] = true;
  ARTSet339[ARTTS_anyTerminal] = true;
  ARTSet339[ARTL_ART_CHAR_BQ] = true;
  ARTSet339[ARTL_ART_False] = true;
  ARTSet339[ARTL_ART_ID] = true;
  ARTSet339[ARTL_ART_ID_ATTRIBUTE] = true;
  ARTSet339[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet339[ARTL_ART_STRING_DQ] = true;
  ARTSet339[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet339[ARTL_ART_True] = true;
  ARTSet339[ARTL_ART___bool] = true;
  ARTSet339[ARTL_ART___char] = true;
  ARTSet339[ARTL_ART___int32] = true;
  ARTSet339[ARTL_ART___real64] = true;
  ARTSet339[ARTL_ART___string] = true;
  ARTSet339[ARTL_ART_cfgBuiltinTerminal] = true;
  ARTSet339[ARTL_ART_cfgCaseInsensitiveTerminal] = true;
  ARTSet339[ARTL_ART_cfgCaseSensitiveTerminal] = true;
  ARTSet339[ARTL_ART_cfgCharacterTerminal] = true;
  ARTSet339[ARTL_ART_cfgNonterminal] = true;
  ARTSet339[ARTL_ART_cfgRule] = true;
  ARTSet339[ARTL_ART_chooseDiff] = true;
  ARTSet339[ARTL_ART_chooseElement] = true;
  ARTSet339[ARTL_ART_choosePredefinedSet] = true;
  ARTSet339[ARTL_ART_chooseRule] = true;
  ARTSet339[ARTL_ART_chooseUnionIntersection] = true;
  ARTSet339[ARTL_ART_directive] = true;
  ARTSet339[ARTL_ART_text] = true;
  ARTSet339[ARTL_ART_textElement] = true;
  ARTSet339[ARTL_ART_tr] = true;
  ARTSet339[ARTL_ART_trConfiguration] = true;
  ARTSet339[ARTL_ART_trLabel] = true;
  ARTSet339[ARTL_ART_trMatch] = true;
  ARTSet339[ARTL_ART_trPremises] = true;
  ARTSet339[ARTL_ART_trPrimaryTerm] = true;
  ARTSet339[ARTL_ART_trRule] = true;
  ARTSet339[ARTL_ART_trTerm] = true;
  ARTSet339[ARTL_ART_trTransition] = true;
}

public void ARTSet275initialise() {
  ARTSet275 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet275, 0, artSetExtent, false);
  ARTSet275[ARTTS__SHREIKinput] = true;
}

public void ARTSet237initialise() {
  ARTSet237 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet237, 0, artSetExtent, false);
  ARTSet237[ARTTS__SHREIKGLLSuppressTestRepeat] = true;
}

public void ARTSet297initialise() {
  ARTSet297 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet297, 0, artSetExtent, false);
  ARTSet297[ARTTS__SHREIKGLLFIFODescriptors] = true;
  ARTSet297[ARTTS__SHREIKGLLPredictivePops] = true;
  ARTSet297[ARTTS__SHREIKGLLSuppressPopGuard] = true;
  ARTSet297[ARTTS__SHREIKGLLSuppressProductionGuard] = true;
  ARTSet297[ARTTS__SHREIKGLLSuppressSemantics] = true;
  ARTSet297[ARTTS__SHREIKGLLSuppressTestRepeat] = true;
  ARTSet297[ARTTS__SHREIKabsorb] = true;
  ARTSet297[ARTTS__SHREIKalphabet] = true;
  ARTSet297[ARTTS__SHREIKcfgElements] = true;
  ARTSet297[ARTTS__SHREIKcnp] = true;
  ARTSet297[ARTTS__SHREIKcnpGeneratorPool] = true;
  ARTSet297[ARTTS__SHREIKcnpIndexedAPI] = true;
  ARTSet297[ARTTS__SHREIKcnpIndexedPool] = true;
  ARTSet297[ARTTS__SHREIKcnpLinkedAPI] = true;
  ARTSet297[ARTTS__SHREIKcompressWhitespaceJava] = true;
  ARTSet297[ARTTS__SHREIKearley] = true;
  ARTSet297[ARTTS__SHREIKearley2007LinkedAPI] = true;
  ARTSet297[ARTTS__SHREIKearleyIndexedAPI] = true;
  ARTSet297[ARTTS__SHREIKearleyIndexedData] = true;
  ARTSet297[ARTTS__SHREIKearleyIndexedPool] = true;
  ARTSet297[ARTTS__SHREIKearleyLinkedAPI] = true;
  ARTSet297[ARTTS__SHREIKearleyTable] = true;
  ARTSet297[ARTTS__SHREIKearleyTableIndexedAPI] = true;
  ARTSet297[ARTTS__SHREIKearleyTableIndexedData] = true;
  ARTSet297[ARTTS__SHREIKearleyTableIndexedPool] = true;
  ARTSet297[ARTTS__SHREIKearleyTableLinkedAPI] = true;
  ARTSet297[ARTTS__SHREIKextractJLS] = true;
  ARTSet297[ARTTS__SHREIKgenerateC_PLUS_PLUS] = true;
  ARTSet297[ARTTS__SHREIKgenerateDynamic] = true;
  ARTSet297[ARTTS__SHREIKgenerateFragment] = true;
  ARTSet297[ARTTS__SHREIKgenerateJava] = true;
  ARTSet297[ARTTS__SHREIKgenerateML] = true;
  ARTSet297[ARTTS__SHREIKgeneratePool] = true;
  ARTSet297[ARTTS__SHREIKgenerateState] = true;
  ARTSet297[ARTTS__SHREIKgenerateStatic] = true;
  ARTSet297[ARTTS__SHREIKgll] = true;
  ARTSet297[ARTTS__SHREIKgllClusteredGeneratorPool] = true;
  ARTSet297[ARTTS__SHREIKgllGeneratorPool] = true;
  ARTSet297[ARTTS__SHREIKgllTWEGeneratorPool] = true;
  ARTSet297[ARTTS__SHREIKgrammarWrite] = true;
  ARTSet297[ARTTS__SHREIKgssPrint] = true;
  ARTSet297[ARTTS__SHREIKgssShow] = true;
  ARTSet297[ARTTS__SHREIKgssWrite] = true;
  ARTSet297[ARTTS__SHREIKinjectInstance] = true;
  ARTSet297[ARTTS__SHREIKinjectProduction] = true;
  ARTSet297[ARTTS__SHREIKinput] = true;
  ARTSet297[ARTTS__SHREIKinputPrint] = true;
  ARTSet297[ARTTS__SHREIKlatex] = true;
  ARTSet297[ARTTS__SHREIKlcnp] = true;
  ARTSet297[ARTTS__SHREIKlcnpGeneratorPool] = true;
  ARTSet297[ARTTS__SHREIKlcnpIndexedAPI] = true;
  ARTSet297[ARTTS__SHREIKlcnpIndexedPool] = true;
  ARTSet297[ARTTS__SHREIKlcnpLinkedAPI] = true;
  ARTSet297[ARTTS__SHREIKlexDFA] = true;
  ARTSet297[ARTTS__SHREIKlexGLL] = true;
  ARTSet297[ARTTS__SHREIKlexHardCoded] = true;
  ARTSet297[ARTTS__SHREIKlexWSSuffix] = true;
  ARTSet297[ARTTS__SHREIKlexerData] = true;
  ARTSet297[ARTTS__SHREIKlexerName] = true;
  ARTSet297[ARTTS__SHREIKmain] = true;
  ARTSet297[ARTTS__SHREIKmerge] = true;
  ARTSet297[ARTTS__SHREIKmgll] = true;
  ARTSet297[ARTTS__SHREIKmgllGeneratorPool] = true;
  ARTSet297[ARTTS__SHREIKmodule] = true;
  ARTSet297[ARTTS__SHREIKnamespace] = true;
  ARTSet297[ARTTS__SHREIKosbrd] = true;
  ARTSet297[ARTTS__SHREIKosbrdGenerator] = true;
  ARTSet297[ARTTS__SHREIKoutputDirectory] = true;
  ARTSet297[ARTTS__SHREIKparaterminal] = true;
  ARTSet297[ARTTS__SHREIKparseCountsPrint] = true;
  ARTSet297[ARTTS__SHREIKparserName] = true;
  ARTSet297[ARTTS__SHREIKprelude] = true;
  ARTSet297[ARTTS__SHREIKrelation] = true;
  ARTSet297[ARTTS__SHREIKresult] = true;
  ARTSet297[ARTTS__SHREIKsml97Parser] = true;
  ARTSet297[ARTTS__SHREIKsppfLongest] = true;
  ARTSet297[ARTTS__SHREIKsppfPrint] = true;
  ARTSet297[ARTTS__SHREIKsppfPriority] = true;
  ARTSet297[ARTTS__SHREIKsppfShow] = true;
  ARTSet297[ARTTS__SHREIKsppfWrite] = true;
  ARTSet297[ARTTS__SHREIKstart] = true;
  ARTSet297[ARTTS__SHREIKstatistics] = true;
  ARTSet297[ARTTS__SHREIKstrategy] = true;
  ARTSet297[ARTTS__SHREIKsupport] = true;
  ARTSet297[ARTTS__SHREIKtermPrint] = true;
  ARTSet297[ARTTS__SHREIKtermShow] = true;
  ARTSet297[ARTTS__SHREIKtermTool] = true;
  ARTSet297[ARTTS__SHREIKtermWrite] = true;
  ARTSet297[ARTTS__SHREIKtrace] = true;
  ARTSet297[ARTTS__SHREIKtreePrint] = true;
  ARTSet297[ARTTS__SHREIKtreeShow] = true;
  ARTSet297[ARTTS__SHREIKtreeWrite] = true;
  ARTSet297[ARTTS__SHREIKtry] = true;
  ARTSet297[ARTTS__SHREIKtweDead] = true;
  ARTSet297[ARTTS__SHREIKtweExtents] = true;
  ARTSet297[ARTTS__SHREIKtweFromSPPF] = true;
  ARTSet297[ARTTS__SHREIKtweLexicalisations] = true;
  ARTSet297[ARTTS__SHREIKtweLongest] = true;
  ARTSet297[ARTTS__SHREIKtwePrint] = true;
  ARTSet297[ARTTS__SHREIKtwePrintFull] = true;
  ARTSet297[ARTTS__SHREIKtwePrintSummary] = true;
  ARTSet297[ARTTS__SHREIKtwePriority] = true;
  ARTSet297[ARTTS__SHREIKtweRecursive] = true;
  ARTSet297[ARTTS__SHREIKtweSegments] = true;
  ARTSet297[ARTTS__SHREIKtweShow] = true;
  ARTSet297[ARTTS__SHREIKtweTokenWrite] = true;
  ARTSet297[ARTTS__SHREIKtweWrite] = true;
  ARTSet297[ARTTS__SHREIKunicodeAsEscapeSeuences] = true;
  ARTSet297[ARTTS__SHREIKuse] = true;
  ARTSet297[ARTTS__SHREIKverbosity] = true;
  ARTSet297[ARTTS__SHREIKwhitespace] = true;
  ARTSet297[ARTL_ART_directive] = true;
}

public void ARTSet315initialise() {
  ARTSet315 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet315, 0, artSetExtent, false);
  ARTSet315[ARTTS_listOut] = true;
}

public void ARTSet314initialise() {
  ARTSet314 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet314, 0, artSetExtent, false);
  ARTSet314[ARTTS_listIn] = true;
}

public void ARTSet268initialise() {
  ARTSet268 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet268, 0, artSetExtent, false);
  ARTSet268[ARTTS__SHREIKsml97Parser] = true;
}

public void ARTSet281initialise() {
  ARTSet281 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet281, 0, artSetExtent, false);
  ARTSet281[ARTTS_preOrderOneShot] = true;
}

public void ARTSet97initialise() {
  ARTSet97 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet97, 0, artSetExtent, false);
  ARTSet97[ARTTS__HASH] = true;
}

public void ARTSet71initialise() {
  ARTSet71 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet71, 0, artSetExtent, false);
  ARTSet71[ARTTS__AMPERSAND] = true;
}

public void ARTSet333initialise() {
  ARTSet333 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet333, 0, artSetExtent, false);
  ARTSet333[ARTTS_False] = true;
  ARTSet333[ARTTS_True] = true;
  ARTSet333[ARTL_ART_False] = true;
  ARTSet333[ARTL_ART_True] = true;
  ARTSet333[ARTL_ART___bool] = true;
}

public void ARTSet89initialise() {
  ARTSet89 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet89, 0, artSetExtent, false);
  ARTSet89[ARTTS__LPAR] = true;
}

public void ARTSet53initialise() {
  ARTSet53 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet53, 0, artSetExtent, false);
  ARTSet53[ARTTS__RPAR] = true;
}

public void ARTSet222initialise() {
  ARTSet222 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet222, 0, artSetExtent, false);
  ARTSet222[ARTTS__SHREIKparserName] = true;
}

public void ARTSet112initialise() {
  ARTSet112 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet112, 0, artSetExtent, false);
  ARTSet112[ARTTS__STAR] = true;
}

public void ARTSet120initialise() {
  ARTSet120 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet120, 0, artSetExtent, false);
  ARTSet120[ARTTS__PLUS] = true;
}

public void ARTSet173initialise() {
  ARTSet173 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet173, 0, artSetExtent, false);
  ARTSet173[ARTTS__SHREIKtrace] = true;
}

public void ARTSet66initialise() {
  ARTSet66 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet66, 0, artSetExtent, false);
  ARTSet66[ARTTS__COMMA] = true;
}

public void ARTSet325initialise() {
  ARTSet325 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet325, 0, artSetExtent, false);
  ARTSet325[ARTTS__MINUS] = true;
}

public void ARTSet9initialise() {
  ARTSet9 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet9, 0, artSetExtent, false);
  ARTSet9[ARTTS__PERIOD] = true;
}

public void ARTSet137initialise() {
  ARTSet137 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet137, 0, artSetExtent, false);
  ARTSet137[ARTTS__SLASH] = true;
}

public void ARTSet187initialise() {
  ARTSet187 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet187, 0, artSetExtent, false);
  ARTSet187[ARTTS__SHREIKtreeWrite] = true;
}

public void ARTSet337initialise() {
  ARTSet337 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet337, 0, artSetExtent, false);
  ARTSet337[ARTX_EOS] = true;
  ARTSet337[ARTTB_CHAR_BQ] = true;
  ARTSet337[ARTTB_ID] = true;
  ARTSet337[ARTTB_SIGNED_INTEGER] = true;
  ARTSet337[ARTTB_SIGNED_REAL] = true;
  ARTSet337[ARTTB_STRING_DOLLAR] = true;
  ARTSet337[ARTTB_STRING_DQ] = true;
  ARTSet337[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet337[ARTTB_STRING_SQ] = true;
  ARTSet337[ARTTS__SHREIKGLLFIFODescriptors] = true;
  ARTSet337[ARTTS__SHREIKGLLPredictivePops] = true;
  ARTSet337[ARTTS__SHREIKGLLSuppressPopGuard] = true;
  ARTSet337[ARTTS__SHREIKGLLSuppressProductionGuard] = true;
  ARTSet337[ARTTS__SHREIKGLLSuppressSemantics] = true;
  ARTSet337[ARTTS__SHREIKGLLSuppressTestRepeat] = true;
  ARTSet337[ARTTS__SHREIKabsorb] = true;
  ARTSet337[ARTTS__SHREIKalphabet] = true;
  ARTSet337[ARTTS__SHREIKcfgElements] = true;
  ARTSet337[ARTTS__SHREIKcnp] = true;
  ARTSet337[ARTTS__SHREIKcnpGeneratorPool] = true;
  ARTSet337[ARTTS__SHREIKcnpIndexedAPI] = true;
  ARTSet337[ARTTS__SHREIKcnpIndexedPool] = true;
  ARTSet337[ARTTS__SHREIKcnpLinkedAPI] = true;
  ARTSet337[ARTTS__SHREIKcompressWhitespaceJava] = true;
  ARTSet337[ARTTS__SHREIKearley] = true;
  ARTSet337[ARTTS__SHREIKearley2007LinkedAPI] = true;
  ARTSet337[ARTTS__SHREIKearleyIndexedAPI] = true;
  ARTSet337[ARTTS__SHREIKearleyIndexedData] = true;
  ARTSet337[ARTTS__SHREIKearleyIndexedPool] = true;
  ARTSet337[ARTTS__SHREIKearleyLinkedAPI] = true;
  ARTSet337[ARTTS__SHREIKearleyTable] = true;
  ARTSet337[ARTTS__SHREIKearleyTableIndexedAPI] = true;
  ARTSet337[ARTTS__SHREIKearleyTableIndexedData] = true;
  ARTSet337[ARTTS__SHREIKearleyTableIndexedPool] = true;
  ARTSet337[ARTTS__SHREIKearleyTableLinkedAPI] = true;
  ARTSet337[ARTTS__SHREIKextractJLS] = true;
  ARTSet337[ARTTS__SHREIKgenerateC_PLUS_PLUS] = true;
  ARTSet337[ARTTS__SHREIKgenerateDynamic] = true;
  ARTSet337[ARTTS__SHREIKgenerateFragment] = true;
  ARTSet337[ARTTS__SHREIKgenerateJava] = true;
  ARTSet337[ARTTS__SHREIKgenerateML] = true;
  ARTSet337[ARTTS__SHREIKgeneratePool] = true;
  ARTSet337[ARTTS__SHREIKgenerateState] = true;
  ARTSet337[ARTTS__SHREIKgenerateStatic] = true;
  ARTSet337[ARTTS__SHREIKgll] = true;
  ARTSet337[ARTTS__SHREIKgllClusteredGeneratorPool] = true;
  ARTSet337[ARTTS__SHREIKgllGeneratorPool] = true;
  ARTSet337[ARTTS__SHREIKgllTWEGeneratorPool] = true;
  ARTSet337[ARTTS__SHREIKgrammarWrite] = true;
  ARTSet337[ARTTS__SHREIKgssPrint] = true;
  ARTSet337[ARTTS__SHREIKgssShow] = true;
  ARTSet337[ARTTS__SHREIKgssWrite] = true;
  ARTSet337[ARTTS__SHREIKinjectInstance] = true;
  ARTSet337[ARTTS__SHREIKinjectProduction] = true;
  ARTSet337[ARTTS__SHREIKinput] = true;
  ARTSet337[ARTTS__SHREIKinputPrint] = true;
  ARTSet337[ARTTS__SHREIKlatex] = true;
  ARTSet337[ARTTS__SHREIKlcnp] = true;
  ARTSet337[ARTTS__SHREIKlcnpGeneratorPool] = true;
  ARTSet337[ARTTS__SHREIKlcnpIndexedAPI] = true;
  ARTSet337[ARTTS__SHREIKlcnpIndexedPool] = true;
  ARTSet337[ARTTS__SHREIKlcnpLinkedAPI] = true;
  ARTSet337[ARTTS__SHREIKlexDFA] = true;
  ARTSet337[ARTTS__SHREIKlexGLL] = true;
  ARTSet337[ARTTS__SHREIKlexHardCoded] = true;
  ARTSet337[ARTTS__SHREIKlexWSSuffix] = true;
  ARTSet337[ARTTS__SHREIKlexerData] = true;
  ARTSet337[ARTTS__SHREIKlexerName] = true;
  ARTSet337[ARTTS__SHREIKmain] = true;
  ARTSet337[ARTTS__SHREIKmerge] = true;
  ARTSet337[ARTTS__SHREIKmgll] = true;
  ARTSet337[ARTTS__SHREIKmgllGeneratorPool] = true;
  ARTSet337[ARTTS__SHREIKmodule] = true;
  ARTSet337[ARTTS__SHREIKnamespace] = true;
  ARTSet337[ARTTS__SHREIKosbrd] = true;
  ARTSet337[ARTTS__SHREIKosbrdGenerator] = true;
  ARTSet337[ARTTS__SHREIKoutputDirectory] = true;
  ARTSet337[ARTTS__SHREIKparaterminal] = true;
  ARTSet337[ARTTS__SHREIKparseCountsPrint] = true;
  ARTSet337[ARTTS__SHREIKparserName] = true;
  ARTSet337[ARTTS__SHREIKprelude] = true;
  ARTSet337[ARTTS__SHREIKrelation] = true;
  ARTSet337[ARTTS__SHREIKresult] = true;
  ARTSet337[ARTTS__SHREIKsml97Parser] = true;
  ARTSet337[ARTTS__SHREIKsppfLongest] = true;
  ARTSet337[ARTTS__SHREIKsppfPrint] = true;
  ARTSet337[ARTTS__SHREIKsppfPriority] = true;
  ARTSet337[ARTTS__SHREIKsppfShow] = true;
  ARTSet337[ARTTS__SHREIKsppfWrite] = true;
  ARTSet337[ARTTS__SHREIKstart] = true;
  ARTSet337[ARTTS__SHREIKstatistics] = true;
  ARTSet337[ARTTS__SHREIKstrategy] = true;
  ARTSet337[ARTTS__SHREIKsupport] = true;
  ARTSet337[ARTTS__SHREIKtermPrint] = true;
  ARTSet337[ARTTS__SHREIKtermShow] = true;
  ARTSet337[ARTTS__SHREIKtermTool] = true;
  ARTSet337[ARTTS__SHREIKtermWrite] = true;
  ARTSet337[ARTTS__SHREIKtrace] = true;
  ARTSet337[ARTTS__SHREIKtreePrint] = true;
  ARTSet337[ARTTS__SHREIKtreeShow] = true;
  ARTSet337[ARTTS__SHREIKtreeWrite] = true;
  ARTSet337[ARTTS__SHREIKtry] = true;
  ARTSet337[ARTTS__SHREIKtweDead] = true;
  ARTSet337[ARTTS__SHREIKtweExtents] = true;
  ARTSet337[ARTTS__SHREIKtweFromSPPF] = true;
  ARTSet337[ARTTS__SHREIKtweLexicalisations] = true;
  ARTSet337[ARTTS__SHREIKtweLongest] = true;
  ARTSet337[ARTTS__SHREIKtwePrint] = true;
  ARTSet337[ARTTS__SHREIKtwePrintFull] = true;
  ARTSet337[ARTTS__SHREIKtwePrintSummary] = true;
  ARTSet337[ARTTS__SHREIKtwePriority] = true;
  ARTSet337[ARTTS__SHREIKtweRecursive] = true;
  ARTSet337[ARTTS__SHREIKtweSegments] = true;
  ARTSet337[ARTTS__SHREIKtweShow] = true;
  ARTSet337[ARTTS__SHREIKtweTokenWrite] = true;
  ARTSet337[ARTTS__SHREIKtweWrite] = true;
  ARTSet337[ARTTS__SHREIKunicodeAsEscapeSeuences] = true;
  ARTSet337[ARTTS__SHREIKuse] = true;
  ARTSet337[ARTTS__SHREIKverbosity] = true;
  ARTSet337[ARTTS__SHREIKwhitespace] = true;
  ARTSet337[ARTTS__AMPERSAND] = true;
  ARTSet337[ARTTS__LPAR] = true;
  ARTSet337[ARTTS__MINUS] = true;
  ARTSet337[ARTTS__MINUS_MINUS_MINUS] = true;
  ARTSet337[ARTTS__LT] = true;
  ARTSet337[ARTTS_False] = true;
  ARTSet337[ARTTS_True] = true;
  ARTSet337[ARTTS_anyBuiltinTerminal] = true;
  ARTSet337[ARTTS_anyCaseInsensitiveTerminal] = true;
  ARTSet337[ARTTS_anyCaseSensitiveTerminal] = true;
  ARTSet337[ARTTS_anyCharacterTerminal] = true;
  ARTSet337[ARTTS_anyLiteralTerminal] = true;
  ARTSet337[ARTTS_anyNonterminal] = true;
  ARTSet337[ARTTS_anyParaterminal] = true;
  ARTSet337[ARTTS_anyTerminal] = true;
  ARTSet337[ARTL_ART_CHAR_BQ] = true;
  ARTSet337[ARTL_ART_False] = true;
  ARTSet337[ARTL_ART_ID] = true;
  ARTSet337[ARTL_ART_ID_ATTRIBUTE] = true;
  ARTSet337[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet337[ARTL_ART_STRING_DQ] = true;
  ARTSet337[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet337[ARTL_ART_True] = true;
  ARTSet337[ARTL_ART___bool] = true;
  ARTSet337[ARTL_ART___char] = true;
  ARTSet337[ARTL_ART___int32] = true;
  ARTSet337[ARTL_ART___real64] = true;
  ARTSet337[ARTL_ART___string] = true;
  ARTSet337[ARTL_ART_cfgAttributeEquation] = true;
  ARTSet337[ARTL_ART_cfgBuiltinTerminal] = true;
  ARTSet337[ARTL_ART_cfgCaseInsensitiveTerminal] = true;
  ARTSet337[ARTL_ART_cfgCaseSensitiveTerminal] = true;
  ARTSet337[ARTL_ART_cfgCharacterTerminal] = true;
  ARTSet337[ARTL_ART_cfgNonterminal] = true;
  ARTSet337[ARTL_ART_cfgRule] = true;
  ARTSet337[ARTL_ART_chooseDiff] = true;
  ARTSet337[ARTL_ART_chooseElement] = true;
  ARTSet337[ARTL_ART_choosePredefinedSet] = true;
  ARTSet337[ARTL_ART_chooseRule] = true;
  ARTSet337[ARTL_ART_chooseUnionIntersection] = true;
  ARTSet337[ARTL_ART_directive] = true;
  ARTSet337[ARTL_ART_text] = true;
  ARTSet337[ARTL_ART_textElement] = true;
  ARTSet337[ARTL_ART_tr] = true;
  ARTSet337[ARTL_ART_trConfiguration] = true;
  ARTSet337[ARTL_ART_trEquations] = true;
  ARTSet337[ARTL_ART_trLabel] = true;
  ARTSet337[ARTL_ART_trMatch] = true;
  ARTSet337[ARTL_ART_trPremises] = true;
  ARTSet337[ARTL_ART_trPrimaryTerm] = true;
  ARTSet337[ARTL_ART_trRule] = true;
  ARTSet337[ARTL_ART_trTerm] = true;
  ARTSet337[ARTL_ART_trTransition] = true;
}

public void ARTSet264initialise() {
  ARTSet264 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet264, 0, artSetExtent, false);
  ARTSet264[ARTTS__SHREIKmgll] = true;
}

public void ARTSet313initialise() {
  ARTSet313 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet313, 0, artSetExtent, false);
  ARTSet313[ARTTS_mapFixed] = true;
}

public void ARTSet123initialise() {
  ARTSet123 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet123, 0, artSetExtent, false);
  ARTSet123[ARTTB_ID] = true;
  ARTSet123[ARTTB_STRING_BRACE_NEST] = true;
  ARTSet123[ARTL_ART_ID_ATTRIBUTE] = true;
  ARTSet123[ARTL_ART_STRING_BRACE_NEST] = true;
  ARTSet123[ARTL_ART_cfgAttributeEquation] = true;
  ARTSet123[ARTL_ART_cfgNativeAction] = true;
}

public void ARTSet303initialise() {
  ARTSet303 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet303, 0, artSetExtent, false);
  ARTSet303[ARTTB_CHAR_BQ] = true;
  ARTSet303[ARTTB_ID] = true;
  ARTSet303[ARTTB_SIGNED_INTEGER] = true;
  ARTSet303[ARTTB_SIGNED_REAL] = true;
  ARTSet303[ARTTB_STRING_DQ] = true;
  ARTSet303[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet303[ARTTB_STRING_SQ] = true;
  ARTSet303[ARTTS__LT] = true;
  ARTSet303[ARTTS_False] = true;
  ARTSet303[ARTTS_True] = true;
  ARTSet303[ARTL_ART_False] = true;
  ARTSet303[ARTL_ART_ID] = true;
  ARTSet303[ARTL_ART_ID_ATTRIBUTE] = true;
  ARTSet303[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet303[ARTL_ART_True] = true;
  ARTSet303[ARTL_ART___bool] = true;
  ARTSet303[ARTL_ART___char] = true;
  ARTSet303[ARTL_ART___int32] = true;
  ARTSet303[ARTL_ART___real64] = true;
  ARTSet303[ARTL_ART___string] = true;
  ARTSet303[ARTL_ART_trPrimaryTerm] = true;
  ARTSet303[ARTL_ART_trTerm] = true;
}

public void ARTSet309initialise() {
  ARTSet309 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet309, 0, artSetExtent, false);
  ARTSet309[ARTTS__COLON] = true;
}

public void ARTSet28initialise() {
  ARTSet28 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet28, 0, artSetExtent, false);
  ARTSet28[ARTTS__MINUS_BACKSLASH_STAR] = true;
}

public void ARTSet202initialise() {
  ARTSet202 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet202, 0, artSetExtent, false);
  ARTSet202[ARTTS__SHREIKlexHardCoded] = true;
}

public void ARTSet213initialise() {
  ARTSet213 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet213, 0, artSetExtent, false);
  ARTSet213[ARTTS__SHREIKtweRecursive] = true;
}

public void ARTSet20initialise() {
  ARTSet20 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet20, 0, artSetExtent, false);
  ARTSet20[ARTX_EOS] = true;
  ARTSet20[ARTTB_CHAR_BQ] = true;
  ARTSet20[ARTTB_ID] = true;
  ARTSet20[ARTTB_SIGNED_INTEGER] = true;
  ARTSet20[ARTTB_SIGNED_REAL] = true;
  ARTSet20[ARTTB_STRING_DOLLAR] = true;
  ARTSet20[ARTTB_STRING_DQ] = true;
  ARTSet20[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet20[ARTTB_STRING_SQ] = true;
  ARTSet20[ARTTS__SHREIKGLLFIFODescriptors] = true;
  ARTSet20[ARTTS__SHREIKGLLPredictivePops] = true;
  ARTSet20[ARTTS__SHREIKGLLSuppressPopGuard] = true;
  ARTSet20[ARTTS__SHREIKGLLSuppressProductionGuard] = true;
  ARTSet20[ARTTS__SHREIKGLLSuppressSemantics] = true;
  ARTSet20[ARTTS__SHREIKGLLSuppressTestRepeat] = true;
  ARTSet20[ARTTS__SHREIKabsorb] = true;
  ARTSet20[ARTTS__SHREIKalphabet] = true;
  ARTSet20[ARTTS__SHREIKcfgElements] = true;
  ARTSet20[ARTTS__SHREIKcnp] = true;
  ARTSet20[ARTTS__SHREIKcnpGeneratorPool] = true;
  ARTSet20[ARTTS__SHREIKcnpIndexedAPI] = true;
  ARTSet20[ARTTS__SHREIKcnpIndexedPool] = true;
  ARTSet20[ARTTS__SHREIKcnpLinkedAPI] = true;
  ARTSet20[ARTTS__SHREIKcompressWhitespaceJava] = true;
  ARTSet20[ARTTS__SHREIKearley] = true;
  ARTSet20[ARTTS__SHREIKearley2007LinkedAPI] = true;
  ARTSet20[ARTTS__SHREIKearleyIndexedAPI] = true;
  ARTSet20[ARTTS__SHREIKearleyIndexedData] = true;
  ARTSet20[ARTTS__SHREIKearleyIndexedPool] = true;
  ARTSet20[ARTTS__SHREIKearleyLinkedAPI] = true;
  ARTSet20[ARTTS__SHREIKearleyTable] = true;
  ARTSet20[ARTTS__SHREIKearleyTableIndexedAPI] = true;
  ARTSet20[ARTTS__SHREIKearleyTableIndexedData] = true;
  ARTSet20[ARTTS__SHREIKearleyTableIndexedPool] = true;
  ARTSet20[ARTTS__SHREIKearleyTableLinkedAPI] = true;
  ARTSet20[ARTTS__SHREIKextractJLS] = true;
  ARTSet20[ARTTS__SHREIKgenerateC_PLUS_PLUS] = true;
  ARTSet20[ARTTS__SHREIKgenerateDynamic] = true;
  ARTSet20[ARTTS__SHREIKgenerateFragment] = true;
  ARTSet20[ARTTS__SHREIKgenerateJava] = true;
  ARTSet20[ARTTS__SHREIKgenerateML] = true;
  ARTSet20[ARTTS__SHREIKgeneratePool] = true;
  ARTSet20[ARTTS__SHREIKgenerateState] = true;
  ARTSet20[ARTTS__SHREIKgenerateStatic] = true;
  ARTSet20[ARTTS__SHREIKgll] = true;
  ARTSet20[ARTTS__SHREIKgllClusteredGeneratorPool] = true;
  ARTSet20[ARTTS__SHREIKgllGeneratorPool] = true;
  ARTSet20[ARTTS__SHREIKgllTWEGeneratorPool] = true;
  ARTSet20[ARTTS__SHREIKgrammarWrite] = true;
  ARTSet20[ARTTS__SHREIKgssPrint] = true;
  ARTSet20[ARTTS__SHREIKgssShow] = true;
  ARTSet20[ARTTS__SHREIKgssWrite] = true;
  ARTSet20[ARTTS__SHREIKinjectInstance] = true;
  ARTSet20[ARTTS__SHREIKinjectProduction] = true;
  ARTSet20[ARTTS__SHREIKinput] = true;
  ARTSet20[ARTTS__SHREIKinputPrint] = true;
  ARTSet20[ARTTS__SHREIKlatex] = true;
  ARTSet20[ARTTS__SHREIKlcnp] = true;
  ARTSet20[ARTTS__SHREIKlcnpGeneratorPool] = true;
  ARTSet20[ARTTS__SHREIKlcnpIndexedAPI] = true;
  ARTSet20[ARTTS__SHREIKlcnpIndexedPool] = true;
  ARTSet20[ARTTS__SHREIKlcnpLinkedAPI] = true;
  ARTSet20[ARTTS__SHREIKlexDFA] = true;
  ARTSet20[ARTTS__SHREIKlexGLL] = true;
  ARTSet20[ARTTS__SHREIKlexHardCoded] = true;
  ARTSet20[ARTTS__SHREIKlexWSSuffix] = true;
  ARTSet20[ARTTS__SHREIKlexerData] = true;
  ARTSet20[ARTTS__SHREIKlexerName] = true;
  ARTSet20[ARTTS__SHREIKmain] = true;
  ARTSet20[ARTTS__SHREIKmerge] = true;
  ARTSet20[ARTTS__SHREIKmgll] = true;
  ARTSet20[ARTTS__SHREIKmgllGeneratorPool] = true;
  ARTSet20[ARTTS__SHREIKmodule] = true;
  ARTSet20[ARTTS__SHREIKnamespace] = true;
  ARTSet20[ARTTS__SHREIKosbrd] = true;
  ARTSet20[ARTTS__SHREIKosbrdGenerator] = true;
  ARTSet20[ARTTS__SHREIKoutputDirectory] = true;
  ARTSet20[ARTTS__SHREIKparaterminal] = true;
  ARTSet20[ARTTS__SHREIKparseCountsPrint] = true;
  ARTSet20[ARTTS__SHREIKparserName] = true;
  ARTSet20[ARTTS__SHREIKprelude] = true;
  ARTSet20[ARTTS__SHREIKrelation] = true;
  ARTSet20[ARTTS__SHREIKresult] = true;
  ARTSet20[ARTTS__SHREIKsml97Parser] = true;
  ARTSet20[ARTTS__SHREIKsppfLongest] = true;
  ARTSet20[ARTTS__SHREIKsppfPrint] = true;
  ARTSet20[ARTTS__SHREIKsppfPriority] = true;
  ARTSet20[ARTTS__SHREIKsppfShow] = true;
  ARTSet20[ARTTS__SHREIKsppfWrite] = true;
  ARTSet20[ARTTS__SHREIKstart] = true;
  ARTSet20[ARTTS__SHREIKstatistics] = true;
  ARTSet20[ARTTS__SHREIKstrategy] = true;
  ARTSet20[ARTTS__SHREIKsupport] = true;
  ARTSet20[ARTTS__SHREIKtermPrint] = true;
  ARTSet20[ARTTS__SHREIKtermShow] = true;
  ARTSet20[ARTTS__SHREIKtermTool] = true;
  ARTSet20[ARTTS__SHREIKtermWrite] = true;
  ARTSet20[ARTTS__SHREIKtrace] = true;
  ARTSet20[ARTTS__SHREIKtreePrint] = true;
  ARTSet20[ARTTS__SHREIKtreeShow] = true;
  ARTSet20[ARTTS__SHREIKtreeWrite] = true;
  ARTSet20[ARTTS__SHREIKtry] = true;
  ARTSet20[ARTTS__SHREIKtweDead] = true;
  ARTSet20[ARTTS__SHREIKtweExtents] = true;
  ARTSet20[ARTTS__SHREIKtweFromSPPF] = true;
  ARTSet20[ARTTS__SHREIKtweLexicalisations] = true;
  ARTSet20[ARTTS__SHREIKtweLongest] = true;
  ARTSet20[ARTTS__SHREIKtwePrint] = true;
  ARTSet20[ARTTS__SHREIKtwePrintFull] = true;
  ARTSet20[ARTTS__SHREIKtwePrintSummary] = true;
  ARTSet20[ARTTS__SHREIKtwePriority] = true;
  ARTSet20[ARTTS__SHREIKtweRecursive] = true;
  ARTSet20[ARTTS__SHREIKtweSegments] = true;
  ARTSet20[ARTTS__SHREIKtweShow] = true;
  ARTSet20[ARTTS__SHREIKtweTokenWrite] = true;
  ARTSet20[ARTTS__SHREIKtweWrite] = true;
  ARTSet20[ARTTS__SHREIKunicodeAsEscapeSeuences] = true;
  ARTSet20[ARTTS__SHREIKuse] = true;
  ARTSet20[ARTTS__SHREIKverbosity] = true;
  ARTSet20[ARTTS__SHREIKwhitespace] = true;
  ARTSet20[ARTTS__AMPERSAND] = true;
  ARTSet20[ARTTS__LPAR] = true;
  ARTSet20[ARTTS__COMMA] = true;
  ARTSet20[ARTTS__MINUS] = true;
  ARTSet20[ARTTS__MINUS_MINUS_MINUS] = true;
  ARTSet20[ARTTS__LT] = true;
  ARTSet20[ARTTS_False] = true;
  ARTSet20[ARTTS_True] = true;
  ARTSet20[ARTTS_anyBuiltinTerminal] = true;
  ARTSet20[ARTTS_anyCaseInsensitiveTerminal] = true;
  ARTSet20[ARTTS_anyCaseSensitiveTerminal] = true;
  ARTSet20[ARTTS_anyCharacterTerminal] = true;
  ARTSet20[ARTTS_anyLiteralTerminal] = true;
  ARTSet20[ARTTS_anyNonterminal] = true;
  ARTSet20[ARTTS_anyParaterminal] = true;
  ARTSet20[ARTTS_anyTerminal] = true;
  ARTSet20[ARTL_ART_CHAR_BQ] = true;
  ARTSet20[ARTL_ART_False] = true;
  ARTSet20[ARTL_ART_ID] = true;
  ARTSet20[ARTL_ART_ID_ATTRIBUTE] = true;
  ARTSet20[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet20[ARTL_ART_STRING_DQ] = true;
  ARTSet20[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet20[ARTL_ART_True] = true;
  ARTSet20[ARTL_ART___bool] = true;
  ARTSet20[ARTL_ART___char] = true;
  ARTSet20[ARTL_ART___int32] = true;
  ARTSet20[ARTL_ART___real64] = true;
  ARTSet20[ARTL_ART___string] = true;
  ARTSet20[ARTL_ART_cfgBuiltinTerminal] = true;
  ARTSet20[ARTL_ART_cfgCaseInsensitiveTerminal] = true;
  ARTSet20[ARTL_ART_cfgCaseSensitiveTerminal] = true;
  ARTSet20[ARTL_ART_cfgCharacterTerminal] = true;
  ARTSet20[ARTL_ART_cfgNonterminal] = true;
  ARTSet20[ARTL_ART_cfgRule] = true;
  ARTSet20[ARTL_ART_chooseDiff] = true;
  ARTSet20[ARTL_ART_chooseElement] = true;
  ARTSet20[ARTL_ART_choosePredefinedSet] = true;
  ARTSet20[ARTL_ART_chooseRule] = true;
  ARTSet20[ARTL_ART_chooseUnionIntersection] = true;
  ARTSet20[ARTL_ART_directive] = true;
  ARTSet20[ARTL_ART_text] = true;
  ARTSet20[ARTL_ART_textElement] = true;
  ARTSet20[ARTL_ART_tr] = true;
  ARTSet20[ARTL_ART_trConfiguration] = true;
  ARTSet20[ARTL_ART_trLabel] = true;
  ARTSet20[ARTL_ART_trMatch] = true;
  ARTSet20[ARTL_ART_trPremises] = true;
  ARTSet20[ARTL_ART_trPrimaryTerm] = true;
  ARTSet20[ARTL_ART_trRule] = true;
  ARTSet20[ARTL_ART_trTerm] = true;
  ARTSet20[ARTL_ART_trTransition] = true;
}

public void ARTSet83initialise() {
  ARTSet83 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet83, 0, artSetExtent, false);
  ARTSet83[ARTTS__LT] = true;
}

public void ARTSet322initialise() {
  ARTSet322 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet322, 0, artSetExtent, false);
  ARTSet322[ARTTB_ID] = true;
  ARTSet322[ARTL_ART_ID] = true;
  ARTSet322[ARTL_ART_trNamedTerm] = true;
}

public void ARTSet45initialise() {
  ARTSet45 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet45, 0, artSetExtent, false);
  ARTSet45[ARTTS__EQUAL] = true;
}

public void ARTSet94initialise() {
  ARTSet94 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet94, 0, artSetExtent, false);
  ARTSet94[ARTTB_CHAR_BQ] = true;
  ARTSet94[ARTTB_ID] = true;
  ARTSet94[ARTTB_STRING_DOLLAR] = true;
  ARTSet94[ARTTB_STRING_DQ] = true;
  ARTSet94[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet94[ARTTS__HASH] = true;
  ARTSet94[ARTTS__AMPERSAND] = true;
  ARTSet94[ARTTS__PERIOD] = true;
  ARTSet94[ARTL_ART_CHAR_BQ] = true;
  ARTSet94[ARTL_ART_ID] = true;
  ARTSet94[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet94[ARTL_ART_STRING_DQ] = true;
  ARTSet94[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet94[ARTL_ART_cfgAtom] = true;
  ARTSet94[ARTL_ART_cfgBuiltinTerminal] = true;
  ARTSet94[ARTL_ART_cfgCaseInsensitiveTerminal] = true;
  ARTSet94[ARTL_ART_cfgCaseSensitiveTerminal] = true;
  ARTSet94[ARTL_ART_cfgCharacterRangeTerminal] = true;
  ARTSet94[ARTL_ART_cfgCharacterTerminal] = true;
  ARTSet94[ARTL_ART_cfgElementDeclaration] = true;
  ARTSet94[ARTL_ART_cfgEpsilon] = true;
  ARTSet94[ARTL_ART_cfgNonterminal] = true;
  ARTSet94[ARTL_ART_cfgSlotSymbol] = true;
}

public void ARTSet102initialise() {
  ARTSet102 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet102, 0, artSetExtent, false);
  ARTSet102[ARTTS__LT] = true;
  ARTSet102[ARTTS__UPARROW] = true;
  ARTSet102[ARTTS__UPARROW_PLUS] = true;
  ARTSet102[ARTTS__UPARROW_UPARROW] = true;
  ARTSet102[ARTTS__UPARROW_UPARROW_UPARROW] = true;
  ARTSet102[ARTTS__UPARROW_] = true;
  ARTSet102[ARTL_ART_cfgDelay] = true;
  ARTSet102[ARTL_ART_cfgFoldNone] = true;
  ARTSet102[ARTL_ART_cfgFoldOver] = true;
  ARTSet102[ARTL_ART_cfgFoldUnder] = true;
  ARTSet102[ARTL_ART_cfgGather] = true;
  ARTSet102[ARTL_ART_cfgInsert] = true;
}

public void ARTSet4initialise() {
  ARTSet4 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet4, 0, artSetExtent, false);
}

public void ARTSet136initialise() {
  ARTSet136 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet136, 0, artSetExtent, false);
  ARTSet136[ARTTS__GT] = true;
}

public void ARTSet179initialise() {
  ARTSet179 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet179, 0, artSetExtent, false);
  ARTSet179[ARTTS__SHREIKtweShow] = true;
}

public void ARTSet119initialise() {
  ARTSet119 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet119, 0, artSetExtent, false);
  ARTSet119[ARTTS__QUERY] = true;
}

public void ARTSet111initialise() {
  ARTSet111 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet111, 0, artSetExtent, false);
  ARTSet111[ARTTS__AT] = true;
}

public void ARTSet306initialise() {
  ARTSet306 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet306, 0, artSetExtent, false);
  ARTSet306[ARTX_EOS] = true;
  ARTSet306[ARTTB_CHAR_BQ] = true;
  ARTSet306[ARTTB_ID] = true;
  ARTSet306[ARTTB_SIGNED_INTEGER] = true;
  ARTSet306[ARTTB_SIGNED_REAL] = true;
  ARTSet306[ARTTB_STRING_DOLLAR] = true;
  ARTSet306[ARTTB_STRING_DQ] = true;
  ARTSet306[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet306[ARTTB_STRING_SQ] = true;
  ARTSet306[ARTTS__SHREIKGLLFIFODescriptors] = true;
  ARTSet306[ARTTS__SHREIKGLLPredictivePops] = true;
  ARTSet306[ARTTS__SHREIKGLLSuppressPopGuard] = true;
  ARTSet306[ARTTS__SHREIKGLLSuppressProductionGuard] = true;
  ARTSet306[ARTTS__SHREIKGLLSuppressSemantics] = true;
  ARTSet306[ARTTS__SHREIKGLLSuppressTestRepeat] = true;
  ARTSet306[ARTTS__SHREIKabsorb] = true;
  ARTSet306[ARTTS__SHREIKalphabet] = true;
  ARTSet306[ARTTS__SHREIKcfgElements] = true;
  ARTSet306[ARTTS__SHREIKcnp] = true;
  ARTSet306[ARTTS__SHREIKcnpGeneratorPool] = true;
  ARTSet306[ARTTS__SHREIKcnpIndexedAPI] = true;
  ARTSet306[ARTTS__SHREIKcnpIndexedPool] = true;
  ARTSet306[ARTTS__SHREIKcnpLinkedAPI] = true;
  ARTSet306[ARTTS__SHREIKcompressWhitespaceJava] = true;
  ARTSet306[ARTTS__SHREIKearley] = true;
  ARTSet306[ARTTS__SHREIKearley2007LinkedAPI] = true;
  ARTSet306[ARTTS__SHREIKearleyIndexedAPI] = true;
  ARTSet306[ARTTS__SHREIKearleyIndexedData] = true;
  ARTSet306[ARTTS__SHREIKearleyIndexedPool] = true;
  ARTSet306[ARTTS__SHREIKearleyLinkedAPI] = true;
  ARTSet306[ARTTS__SHREIKearleyTable] = true;
  ARTSet306[ARTTS__SHREIKearleyTableIndexedAPI] = true;
  ARTSet306[ARTTS__SHREIKearleyTableIndexedData] = true;
  ARTSet306[ARTTS__SHREIKearleyTableIndexedPool] = true;
  ARTSet306[ARTTS__SHREIKearleyTableLinkedAPI] = true;
  ARTSet306[ARTTS__SHREIKextractJLS] = true;
  ARTSet306[ARTTS__SHREIKgenerateC_PLUS_PLUS] = true;
  ARTSet306[ARTTS__SHREIKgenerateDynamic] = true;
  ARTSet306[ARTTS__SHREIKgenerateFragment] = true;
  ARTSet306[ARTTS__SHREIKgenerateJava] = true;
  ARTSet306[ARTTS__SHREIKgenerateML] = true;
  ARTSet306[ARTTS__SHREIKgeneratePool] = true;
  ARTSet306[ARTTS__SHREIKgenerateState] = true;
  ARTSet306[ARTTS__SHREIKgenerateStatic] = true;
  ARTSet306[ARTTS__SHREIKgll] = true;
  ARTSet306[ARTTS__SHREIKgllClusteredGeneratorPool] = true;
  ARTSet306[ARTTS__SHREIKgllGeneratorPool] = true;
  ARTSet306[ARTTS__SHREIKgllTWEGeneratorPool] = true;
  ARTSet306[ARTTS__SHREIKgrammarWrite] = true;
  ARTSet306[ARTTS__SHREIKgssPrint] = true;
  ARTSet306[ARTTS__SHREIKgssShow] = true;
  ARTSet306[ARTTS__SHREIKgssWrite] = true;
  ARTSet306[ARTTS__SHREIKinjectInstance] = true;
  ARTSet306[ARTTS__SHREIKinjectProduction] = true;
  ARTSet306[ARTTS__SHREIKinput] = true;
  ARTSet306[ARTTS__SHREIKinputPrint] = true;
  ARTSet306[ARTTS__SHREIKlatex] = true;
  ARTSet306[ARTTS__SHREIKlcnp] = true;
  ARTSet306[ARTTS__SHREIKlcnpGeneratorPool] = true;
  ARTSet306[ARTTS__SHREIKlcnpIndexedAPI] = true;
  ARTSet306[ARTTS__SHREIKlcnpIndexedPool] = true;
  ARTSet306[ARTTS__SHREIKlcnpLinkedAPI] = true;
  ARTSet306[ARTTS__SHREIKlexDFA] = true;
  ARTSet306[ARTTS__SHREIKlexGLL] = true;
  ARTSet306[ARTTS__SHREIKlexHardCoded] = true;
  ARTSet306[ARTTS__SHREIKlexWSSuffix] = true;
  ARTSet306[ARTTS__SHREIKlexerData] = true;
  ARTSet306[ARTTS__SHREIKlexerName] = true;
  ARTSet306[ARTTS__SHREIKmain] = true;
  ARTSet306[ARTTS__SHREIKmerge] = true;
  ARTSet306[ARTTS__SHREIKmgll] = true;
  ARTSet306[ARTTS__SHREIKmgllGeneratorPool] = true;
  ARTSet306[ARTTS__SHREIKmodule] = true;
  ARTSet306[ARTTS__SHREIKnamespace] = true;
  ARTSet306[ARTTS__SHREIKosbrd] = true;
  ARTSet306[ARTTS__SHREIKosbrdGenerator] = true;
  ARTSet306[ARTTS__SHREIKoutputDirectory] = true;
  ARTSet306[ARTTS__SHREIKparaterminal] = true;
  ARTSet306[ARTTS__SHREIKparseCountsPrint] = true;
  ARTSet306[ARTTS__SHREIKparserName] = true;
  ARTSet306[ARTTS__SHREIKprelude] = true;
  ARTSet306[ARTTS__SHREIKrelation] = true;
  ARTSet306[ARTTS__SHREIKresult] = true;
  ARTSet306[ARTTS__SHREIKsml97Parser] = true;
  ARTSet306[ARTTS__SHREIKsppfLongest] = true;
  ARTSet306[ARTTS__SHREIKsppfPrint] = true;
  ARTSet306[ARTTS__SHREIKsppfPriority] = true;
  ARTSet306[ARTTS__SHREIKsppfShow] = true;
  ARTSet306[ARTTS__SHREIKsppfWrite] = true;
  ARTSet306[ARTTS__SHREIKstart] = true;
  ARTSet306[ARTTS__SHREIKstatistics] = true;
  ARTSet306[ARTTS__SHREIKstrategy] = true;
  ARTSet306[ARTTS__SHREIKsupport] = true;
  ARTSet306[ARTTS__SHREIKtermPrint] = true;
  ARTSet306[ARTTS__SHREIKtermShow] = true;
  ARTSet306[ARTTS__SHREIKtermTool] = true;
  ARTSet306[ARTTS__SHREIKtermWrite] = true;
  ARTSet306[ARTTS__SHREIKtrace] = true;
  ARTSet306[ARTTS__SHREIKtreePrint] = true;
  ARTSet306[ARTTS__SHREIKtreeShow] = true;
  ARTSet306[ARTTS__SHREIKtreeWrite] = true;
  ARTSet306[ARTTS__SHREIKtry] = true;
  ARTSet306[ARTTS__SHREIKtweDead] = true;
  ARTSet306[ARTTS__SHREIKtweExtents] = true;
  ARTSet306[ARTTS__SHREIKtweFromSPPF] = true;
  ARTSet306[ARTTS__SHREIKtweLexicalisations] = true;
  ARTSet306[ARTTS__SHREIKtweLongest] = true;
  ARTSet306[ARTTS__SHREIKtwePrint] = true;
  ARTSet306[ARTTS__SHREIKtwePrintFull] = true;
  ARTSet306[ARTTS__SHREIKtwePrintSummary] = true;
  ARTSet306[ARTTS__SHREIKtwePriority] = true;
  ARTSet306[ARTTS__SHREIKtweRecursive] = true;
  ARTSet306[ARTTS__SHREIKtweSegments] = true;
  ARTSet306[ARTTS__SHREIKtweShow] = true;
  ARTSet306[ARTTS__SHREIKtweTokenWrite] = true;
  ARTSet306[ARTTS__SHREIKtweWrite] = true;
  ARTSet306[ARTTS__SHREIKunicodeAsEscapeSeuences] = true;
  ARTSet306[ARTTS__SHREIKuse] = true;
  ARTSet306[ARTTS__SHREIKverbosity] = true;
  ARTSet306[ARTTS__SHREIKwhitespace] = true;
  ARTSet306[ARTTS__AMPERSAND] = true;
  ARTSet306[ARTTS__LPAR] = true;
  ARTSet306[ARTTS__COMMA] = true;
  ARTSet306[ARTTS__MINUS] = true;
  ARTSet306[ARTTS__MINUS_MINUS_MINUS] = true;
  ARTSet306[ARTTS__MINUS_SLASH] = true;
  ARTSet306[ARTTS__MINUS_SLASH_STAR] = true;
  ARTSet306[ARTTS__MINUS_SLASH_GT] = true;
  ARTSet306[ARTTS__MINUS_GT] = true;
  ARTSet306[ARTTS__MINUS_GT_STAR] = true;
  ARTSet306[ARTTS__MINUS_GT_GT] = true;
  ARTSet306[ARTTS__MINUS_BACKSLASH] = true;
  ARTSet306[ARTTS__MINUS_BACKSLASH_STAR] = true;
  ARTSet306[ARTTS__MINUS_BACKSLASH_GT] = true;
  ARTSet306[ARTTS__LT] = true;
  ARTSet306[ARTTS__EQUAL] = true;
  ARTSet306[ARTTS__EQUAL_GT] = true;
  ARTSet306[ARTTS__EQUAL_GT_STAR] = true;
  ARTSet306[ARTTS__EQUAL_GT_GT] = true;
  ARTSet306[ARTTS_False] = true;
  ARTSet306[ARTTS_True] = true;
  ARTSet306[ARTTS_anyBuiltinTerminal] = true;
  ARTSet306[ARTTS_anyCaseInsensitiveTerminal] = true;
  ARTSet306[ARTTS_anyCaseSensitiveTerminal] = true;
  ARTSet306[ARTTS_anyCharacterTerminal] = true;
  ARTSet306[ARTTS_anyLiteralTerminal] = true;
  ARTSet306[ARTTS_anyNonterminal] = true;
  ARTSet306[ARTTS_anyParaterminal] = true;
  ARTSet306[ARTTS_anyTerminal] = true;
  ARTSet306[ARTTS__TILDE_GT] = true;
  ARTSet306[ARTTS__TILDE_GT_STAR] = true;
  ARTSet306[ARTTS__TILDE_GT_GT] = true;
  ARTSet306[ARTL_ART_CHAR_BQ] = true;
  ARTSet306[ARTL_ART_False] = true;
  ARTSet306[ARTL_ART_ID] = true;
  ARTSet306[ARTL_ART_ID_ATTRIBUTE] = true;
  ARTSet306[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet306[ARTL_ART_STRING_DQ] = true;
  ARTSet306[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet306[ARTL_ART_TRRELATION] = true;
  ARTSet306[ARTL_ART_True] = true;
  ARTSet306[ARTL_ART___bool] = true;
  ARTSet306[ARTL_ART___char] = true;
  ARTSet306[ARTL_ART___int32] = true;
  ARTSet306[ARTL_ART___real64] = true;
  ARTSet306[ARTL_ART___string] = true;
  ARTSet306[ARTL_ART_cfgAttributeEquation] = true;
  ARTSet306[ARTL_ART_cfgBuiltinTerminal] = true;
  ARTSet306[ARTL_ART_cfgCaseInsensitiveTerminal] = true;
  ARTSet306[ARTL_ART_cfgCaseSensitiveTerminal] = true;
  ARTSet306[ARTL_ART_cfgCharacterTerminal] = true;
  ARTSet306[ARTL_ART_cfgNonterminal] = true;
  ARTSet306[ARTL_ART_cfgRule] = true;
  ARTSet306[ARTL_ART_chooseDiff] = true;
  ARTSet306[ARTL_ART_chooseElement] = true;
  ARTSet306[ARTL_ART_choosePredefinedSet] = true;
  ARTSet306[ARTL_ART_chooseRule] = true;
  ARTSet306[ARTL_ART_chooseUnionIntersection] = true;
  ARTSet306[ARTL_ART_directive] = true;
  ARTSet306[ARTL_ART_text] = true;
  ARTSet306[ARTL_ART_textElement] = true;
  ARTSet306[ARTL_ART_tr] = true;
  ARTSet306[ARTL_ART_trConfiguration] = true;
  ARTSet306[ARTL_ART_trEntityReferences] = true;
  ARTSet306[ARTL_ART_trEquations] = true;
  ARTSet306[ARTL_ART_trLabel] = true;
  ARTSet306[ARTL_ART_trMatch] = true;
  ARTSet306[ARTL_ART_trPremises] = true;
  ARTSet306[ARTL_ART_trPrimaryTerm] = true;
  ARTSet306[ARTL_ART_trRule] = true;
  ARTSet306[ARTL_ART_trTerm] = true;
  ARTSet306[ARTL_ART_trTransition] = true;
}

public void ARTSet47initialise() {
  ARTSet47 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet47, 0, artSetExtent, false);
  ARTSet47[ARTTB_CHAR_BQ] = true;
  ARTSet47[ARTTB_ID] = true;
  ARTSet47[ARTTB_STRING_DOLLAR] = true;
  ARTSet47[ARTTB_STRING_DQ] = true;
  ARTSet47[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet47[ARTTS__HASH] = true;
  ARTSet47[ARTTS__AMPERSAND] = true;
  ARTSet47[ARTTS__LPAR] = true;
  ARTSet47[ARTTS__PERIOD] = true;
  ARTSet47[ARTTS__BACKSLASH_BACKSLASH] = true;
  ARTSet47[ARTL_ART_CHAR_BQ] = true;
  ARTSet47[ARTL_ART_ID] = true;
  ARTSet47[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet47[ARTL_ART_STRING_DQ] = true;
  ARTSet47[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet47[ARTL_ART_cfgAtom] = true;
  ARTSet47[ARTL_ART_cfgBuiltinTerminal] = true;
  ARTSet47[ARTL_ART_cfgCaseInsensitiveTerminal] = true;
  ARTSet47[ARTL_ART_cfgCaseSensitiveTerminal] = true;
  ARTSet47[ARTL_ART_cfgCharacterRangeTerminal] = true;
  ARTSet47[ARTL_ART_cfgCharacterTerminal] = true;
  ARTSet47[ARTL_ART_cfgDiff] = true;
  ARTSet47[ARTL_ART_cfgDoFirst] = true;
  ARTSet47[ARTL_ART_cfgElement] = true;
  ARTSet47[ARTL_ART_cfgEpsilon] = true;
  ARTSet47[ARTL_ART_cfgIter] = true;
  ARTSet47[ARTL_ART_cfgNonterminal] = true;
  ARTSet47[ARTL_ART_cfgNot] = true;
  ARTSet47[ARTL_ART_cfgSlotSymbol] = true;
  ARTSet47[ARTL_ART_cfgUnion] = true;
}

public void ARTSet182initialise() {
  ARTSet182 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet182, 0, artSetExtent, false);
  ARTSet182[ARTTS__SHREIKgssShow] = true;
}

public void ARTSet143initialise() {
  ARTSet143 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet143, 0, artSetExtent, false);
  ARTSet143[ARTTS_anyCaseSensitiveTerminal] = true;
}

public void ARTSet142initialise() {
  ARTSet142 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet142, 0, artSetExtent, false);
  ARTSet142[ARTTS_anyBuiltinTerminal] = true;
}

public void ARTSet81initialise() {
  ARTSet81 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet81, 0, artSetExtent, false);
  ARTSet81[ARTTB_CHAR_BQ] = true;
  ARTSet81[ARTL_ART_CHAR_BQ] = true;
}

public void ARTSet192initialise() {
  ARTSet192 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet192, 0, artSetExtent, false);
  ARTSet192[ARTTS__SHREIKparseCountsPrint] = true;
}

public void ARTSet212initialise() {
  ARTSet212 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet212, 0, artSetExtent, false);
  ARTSet212[ARTTS__SHREIKtweSegments] = true;
}

public void ARTSet169initialise() {
  ARTSet169 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet169, 0, artSetExtent, false);
  ARTSet169[ARTTB_STRING_DQ] = true;
  ARTSet169[ARTTB_STRING_SQ] = true;
  ARTSet169[ARTL_ART___string] = true;
  ARTSet169[ARTL_ART_latexDeclaration] = true;
  ARTSet169[ARTL_ART_latexDeclarations] = true;
}

public void ARTSet29initialise() {
  ARTSet29 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet29, 0, artSetExtent, false);
  ARTSet29[ARTTS__MINUS_BACKSLASH_GT] = true;
}

public void ARTSet183initialise() {
  ARTSet183 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet183, 0, artSetExtent, false);
  ARTSet183[ARTTS__SHREIKsppfPrint] = true;
}

public void ARTSet198initialise() {
  ARTSet198 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet198, 0, artSetExtent, false);
  ARTSet198[ARTTS__SHREIKextractJLS] = true;
}

public void ARTSet215initialise() {
  ARTSet215 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet215, 0, artSetExtent, false);
  ARTSet215[ARTTS__SHREIKtwePriority] = true;
}

public void ARTSet220initialise() {
  ARTSet220 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet220, 0, artSetExtent, false);
  ARTSet220[ARTTS__SHREIKnamespace] = true;
}

public void ARTSet75initialise() {
  ARTSet75 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet75, 0, artSetExtent, false);
  ARTSet75[ARTTB_CHAR_BQ] = true;
  ARTSet75[ARTTB_ID] = true;
  ARTSet75[ARTTB_STRING_BRACE_NEST] = true;
  ARTSet75[ARTTB_STRING_DOLLAR] = true;
  ARTSet75[ARTTB_STRING_DQ] = true;
  ARTSet75[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet75[ARTTS__HASH] = true;
  ARTSet75[ARTTS__AMPERSAND] = true;
  ARTSet75[ARTTS__LPAR] = true;
  ARTSet75[ARTTS__PERIOD] = true;
  ARTSet75[ARTTS__BACKSLASH_BACKSLASH] = true;
  ARTSet75[ARTL_ART_CHAR_BQ] = true;
  ARTSet75[ARTL_ART_ID] = true;
  ARTSet75[ARTL_ART_ID_ATTRIBUTE] = true;
  ARTSet75[ARTL_ART_STRING_BRACE_NEST] = true;
  ARTSet75[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet75[ARTL_ART_STRING_DQ] = true;
  ARTSet75[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet75[ARTL_ART_cfgAbbrev] = true;
  ARTSet75[ARTL_ART_cfgAtom] = true;
  ARTSet75[ARTL_ART_cfgAttributeEquation] = true;
  ARTSet75[ARTL_ART_cfgBuiltinTerminal] = true;
  ARTSet75[ARTL_ART_cfgCaseInsensitiveTerminal] = true;
  ARTSet75[ARTL_ART_cfgCaseSensitiveTerminal] = true;
  ARTSet75[ARTL_ART_cfgCatTail] = true;
  ARTSet75[ARTL_ART_cfgCharacterRangeTerminal] = true;
  ARTSet75[ARTL_ART_cfgCharacterTerminal] = true;
  ARTSet75[ARTL_ART_cfgDiff] = true;
  ARTSet75[ARTL_ART_cfgDoFirst] = true;
  ARTSet75[ARTL_ART_cfgElement] = true;
  ARTSet75[ARTL_ART_cfgEpsilon] = true;
  ARTSet75[ARTL_ART_cfgIter] = true;
  ARTSet75[ARTL_ART_cfgNativeAction] = true;
  ARTSet75[ARTL_ART_cfgNonterminal] = true;
  ARTSet75[ARTL_ART_cfgNot] = true;
  ARTSet75[ARTL_ART_cfgSlot] = true;
  ARTSet75[ARTL_ART_cfgSlotSymbol] = true;
  ARTSet75[ARTL_ART_cfgUnion] = true;
}

public void ARTSet2initialise() {
  ARTSet2 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet2, 0, artSetExtent, false);
  ARTSet2[ARTTB_CHAR_BQ] = true;
}

public void ARTSet118initialise() {
  ARTSet118 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet118, 0, artSetExtent, false);
  ARTSet118[ARTTB_CHAR_BQ] = true;
  ARTSet118[ARTTB_ID] = true;
  ARTSet118[ARTTB_STRING_DOLLAR] = true;
  ARTSet118[ARTTB_STRING_DQ] = true;
  ARTSet118[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet118[ARTTS__HASH] = true;
  ARTSet118[ARTTS__AMPERSAND] = true;
  ARTSet118[ARTTS__LPAR] = true;
  ARTSet118[ARTTS__PERIOD] = true;
  ARTSet118[ARTL_ART_CHAR_BQ] = true;
  ARTSet118[ARTL_ART_ID] = true;
  ARTSet118[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet118[ARTL_ART_STRING_DQ] = true;
  ARTSet118[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet118[ARTL_ART_cfgAtom] = true;
  ARTSet118[ARTL_ART_cfgBuiltinTerminal] = true;
  ARTSet118[ARTL_ART_cfgCaseInsensitiveTerminal] = true;
  ARTSet118[ARTL_ART_cfgCaseSensitiveTerminal] = true;
  ARTSet118[ARTL_ART_cfgCharacterRangeTerminal] = true;
  ARTSet118[ARTL_ART_cfgCharacterTerminal] = true;
  ARTSet118[ARTL_ART_cfgDoFirst] = true;
  ARTSet118[ARTL_ART_cfgElement] = true;
  ARTSet118[ARTL_ART_cfgEpsilon] = true;
  ARTSet118[ARTL_ART_cfgNonterminal] = true;
  ARTSet118[ARTL_ART_cfgSlotSymbol] = true;
}

public void ARTSet104initialise() {
  ARTSet104 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet104, 0, artSetExtent, false);
  ARTSet104[ARTTS__UPARROW_] = true;
  ARTSet104[ARTL_ART_cfgFoldNone] = true;
}

public void ARTSet132initialise() {
  ARTSet132 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet132, 0, artSetExtent, false);
  ARTSet132[ARTTS__BACKSLASH] = true;
}

public void ARTSet91initialise() {
  ARTSet91 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet91, 0, artSetExtent, false);
  ARTSet91[ARTTB_CHAR_BQ] = true;
  ARTSet91[ARTTB_ID] = true;
  ARTSet91[ARTTB_STRING_DOLLAR] = true;
  ARTSet91[ARTTB_STRING_DQ] = true;
  ARTSet91[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet91[ARTTS__HASH] = true;
  ARTSet91[ARTTS__AMPERSAND] = true;
  ARTSet91[ARTTS__LPAR] = true;
  ARTSet91[ARTTS__PERIOD] = true;
  ARTSet91[ARTL_ART_CHAR_BQ] = true;
  ARTSet91[ARTL_ART_ID] = true;
  ARTSet91[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet91[ARTL_ART_STRING_DQ] = true;
  ARTSet91[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet91[ARTL_ART_cfgAtom] = true;
  ARTSet91[ARTL_ART_cfgBuiltinTerminal] = true;
  ARTSet91[ARTL_ART_cfgCaseInsensitiveTerminal] = true;
  ARTSet91[ARTL_ART_cfgCaseSensitiveTerminal] = true;
  ARTSet91[ARTL_ART_cfgCharacterRangeTerminal] = true;
  ARTSet91[ARTL_ART_cfgCharacterTerminal] = true;
  ARTSet91[ARTL_ART_cfgDoFirst] = true;
  ARTSet91[ARTL_ART_cfgEpsilon] = true;
  ARTSet91[ARTL_ART_cfgNonterminal] = true;
  ARTSet91[ARTL_ART_cfgSlotSymbol] = true;
}

public void ARTSet100initialise() {
  ARTSet100 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet100, 0, artSetExtent, false);
  ARTSet100[ARTTS__UPARROW] = true;
}

public void ARTSet110initialise() {
  ARTSet110 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet110, 0, artSetExtent, false);
  ARTSet110[ARTX_EOS] = true;
  ARTSet110[ARTTB_CHAR_BQ] = true;
  ARTSet110[ARTTB_ID] = true;
  ARTSet110[ARTTB_SIGNED_INTEGER] = true;
  ARTSet110[ARTTB_SIGNED_REAL] = true;
  ARTSet110[ARTTB_STRING_BRACE_NEST] = true;
  ARTSet110[ARTTB_STRING_DOLLAR] = true;
  ARTSet110[ARTTB_STRING_DQ] = true;
  ARTSet110[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet110[ARTTB_STRING_SQ] = true;
  ARTSet110[ARTTS__SHREIKGLLFIFODescriptors] = true;
  ARTSet110[ARTTS__SHREIKGLLPredictivePops] = true;
  ARTSet110[ARTTS__SHREIKGLLSuppressPopGuard] = true;
  ARTSet110[ARTTS__SHREIKGLLSuppressProductionGuard] = true;
  ARTSet110[ARTTS__SHREIKGLLSuppressSemantics] = true;
  ARTSet110[ARTTS__SHREIKGLLSuppressTestRepeat] = true;
  ARTSet110[ARTTS__SHREIKabsorb] = true;
  ARTSet110[ARTTS__SHREIKalphabet] = true;
  ARTSet110[ARTTS__SHREIKcfgElements] = true;
  ARTSet110[ARTTS__SHREIKcnp] = true;
  ARTSet110[ARTTS__SHREIKcnpGeneratorPool] = true;
  ARTSet110[ARTTS__SHREIKcnpIndexedAPI] = true;
  ARTSet110[ARTTS__SHREIKcnpIndexedPool] = true;
  ARTSet110[ARTTS__SHREIKcnpLinkedAPI] = true;
  ARTSet110[ARTTS__SHREIKcompressWhitespaceJava] = true;
  ARTSet110[ARTTS__SHREIKearley] = true;
  ARTSet110[ARTTS__SHREIKearley2007LinkedAPI] = true;
  ARTSet110[ARTTS__SHREIKearleyIndexedAPI] = true;
  ARTSet110[ARTTS__SHREIKearleyIndexedData] = true;
  ARTSet110[ARTTS__SHREIKearleyIndexedPool] = true;
  ARTSet110[ARTTS__SHREIKearleyLinkedAPI] = true;
  ARTSet110[ARTTS__SHREIKearleyTable] = true;
  ARTSet110[ARTTS__SHREIKearleyTableIndexedAPI] = true;
  ARTSet110[ARTTS__SHREIKearleyTableIndexedData] = true;
  ARTSet110[ARTTS__SHREIKearleyTableIndexedPool] = true;
  ARTSet110[ARTTS__SHREIKearleyTableLinkedAPI] = true;
  ARTSet110[ARTTS__SHREIKextractJLS] = true;
  ARTSet110[ARTTS__SHREIKgenerateC_PLUS_PLUS] = true;
  ARTSet110[ARTTS__SHREIKgenerateDynamic] = true;
  ARTSet110[ARTTS__SHREIKgenerateFragment] = true;
  ARTSet110[ARTTS__SHREIKgenerateJava] = true;
  ARTSet110[ARTTS__SHREIKgenerateML] = true;
  ARTSet110[ARTTS__SHREIKgeneratePool] = true;
  ARTSet110[ARTTS__SHREIKgenerateState] = true;
  ARTSet110[ARTTS__SHREIKgenerateStatic] = true;
  ARTSet110[ARTTS__SHREIKgll] = true;
  ARTSet110[ARTTS__SHREIKgllClusteredGeneratorPool] = true;
  ARTSet110[ARTTS__SHREIKgllGeneratorPool] = true;
  ARTSet110[ARTTS__SHREIKgllTWEGeneratorPool] = true;
  ARTSet110[ARTTS__SHREIKgrammarWrite] = true;
  ARTSet110[ARTTS__SHREIKgssPrint] = true;
  ARTSet110[ARTTS__SHREIKgssShow] = true;
  ARTSet110[ARTTS__SHREIKgssWrite] = true;
  ARTSet110[ARTTS__SHREIKinjectInstance] = true;
  ARTSet110[ARTTS__SHREIKinjectProduction] = true;
  ARTSet110[ARTTS__SHREIKinput] = true;
  ARTSet110[ARTTS__SHREIKinputPrint] = true;
  ARTSet110[ARTTS__SHREIKlatex] = true;
  ARTSet110[ARTTS__SHREIKlcnp] = true;
  ARTSet110[ARTTS__SHREIKlcnpGeneratorPool] = true;
  ARTSet110[ARTTS__SHREIKlcnpIndexedAPI] = true;
  ARTSet110[ARTTS__SHREIKlcnpIndexedPool] = true;
  ARTSet110[ARTTS__SHREIKlcnpLinkedAPI] = true;
  ARTSet110[ARTTS__SHREIKlexDFA] = true;
  ARTSet110[ARTTS__SHREIKlexGLL] = true;
  ARTSet110[ARTTS__SHREIKlexHardCoded] = true;
  ARTSet110[ARTTS__SHREIKlexWSSuffix] = true;
  ARTSet110[ARTTS__SHREIKlexerData] = true;
  ARTSet110[ARTTS__SHREIKlexerName] = true;
  ARTSet110[ARTTS__SHREIKmain] = true;
  ARTSet110[ARTTS__SHREIKmerge] = true;
  ARTSet110[ARTTS__SHREIKmgll] = true;
  ARTSet110[ARTTS__SHREIKmgllGeneratorPool] = true;
  ARTSet110[ARTTS__SHREIKmodule] = true;
  ARTSet110[ARTTS__SHREIKnamespace] = true;
  ARTSet110[ARTTS__SHREIKosbrd] = true;
  ARTSet110[ARTTS__SHREIKosbrdGenerator] = true;
  ARTSet110[ARTTS__SHREIKoutputDirectory] = true;
  ARTSet110[ARTTS__SHREIKparaterminal] = true;
  ARTSet110[ARTTS__SHREIKparseCountsPrint] = true;
  ARTSet110[ARTTS__SHREIKparserName] = true;
  ARTSet110[ARTTS__SHREIKprelude] = true;
  ARTSet110[ARTTS__SHREIKrelation] = true;
  ARTSet110[ARTTS__SHREIKresult] = true;
  ARTSet110[ARTTS__SHREIKsml97Parser] = true;
  ARTSet110[ARTTS__SHREIKsppfLongest] = true;
  ARTSet110[ARTTS__SHREIKsppfPrint] = true;
  ARTSet110[ARTTS__SHREIKsppfPriority] = true;
  ARTSet110[ARTTS__SHREIKsppfShow] = true;
  ARTSet110[ARTTS__SHREIKsppfWrite] = true;
  ARTSet110[ARTTS__SHREIKstart] = true;
  ARTSet110[ARTTS__SHREIKstatistics] = true;
  ARTSet110[ARTTS__SHREIKstrategy] = true;
  ARTSet110[ARTTS__SHREIKsupport] = true;
  ARTSet110[ARTTS__SHREIKtermPrint] = true;
  ARTSet110[ARTTS__SHREIKtermShow] = true;
  ARTSet110[ARTTS__SHREIKtermTool] = true;
  ARTSet110[ARTTS__SHREIKtermWrite] = true;
  ARTSet110[ARTTS__SHREIKtrace] = true;
  ARTSet110[ARTTS__SHREIKtreePrint] = true;
  ARTSet110[ARTTS__SHREIKtreeShow] = true;
  ARTSet110[ARTTS__SHREIKtreeWrite] = true;
  ARTSet110[ARTTS__SHREIKtry] = true;
  ARTSet110[ARTTS__SHREIKtweDead] = true;
  ARTSet110[ARTTS__SHREIKtweExtents] = true;
  ARTSet110[ARTTS__SHREIKtweFromSPPF] = true;
  ARTSet110[ARTTS__SHREIKtweLexicalisations] = true;
  ARTSet110[ARTTS__SHREIKtweLongest] = true;
  ARTSet110[ARTTS__SHREIKtwePrint] = true;
  ARTSet110[ARTTS__SHREIKtwePrintFull] = true;
  ARTSet110[ARTTS__SHREIKtwePrintSummary] = true;
  ARTSet110[ARTTS__SHREIKtwePriority] = true;
  ARTSet110[ARTTS__SHREIKtweRecursive] = true;
  ARTSet110[ARTTS__SHREIKtweSegments] = true;
  ARTSet110[ARTTS__SHREIKtweShow] = true;
  ARTSet110[ARTTS__SHREIKtweTokenWrite] = true;
  ARTSet110[ARTTS__SHREIKtweWrite] = true;
  ARTSet110[ARTTS__SHREIKunicodeAsEscapeSeuences] = true;
  ARTSet110[ARTTS__SHREIKuse] = true;
  ARTSet110[ARTTS__SHREIKverbosity] = true;
  ARTSet110[ARTTS__SHREIKwhitespace] = true;
  ARTSet110[ARTTS__HASH] = true;
  ARTSet110[ARTTS__AMPERSAND] = true;
  ARTSet110[ARTTS__LPAR] = true;
  ARTSet110[ARTTS__RPAR] = true;
  ARTSet110[ARTTS__STAR] = true;
  ARTSet110[ARTTS__PLUS] = true;
  ARTSet110[ARTTS__MINUS] = true;
  ARTSet110[ARTTS__MINUS_MINUS_MINUS] = true;
  ARTSet110[ARTTS__PERIOD] = true;
  ARTSet110[ARTTS__LT] = true;
  ARTSet110[ARTTS__QUERY] = true;
  ARTSet110[ARTTS_False] = true;
  ARTSet110[ARTTS_True] = true;
  ARTSet110[ARTTS__BACKSLASH_BACKSLASH] = true;
  ARTSet110[ARTTS_anyBuiltinTerminal] = true;
  ARTSet110[ARTTS_anyCaseInsensitiveTerminal] = true;
  ARTSet110[ARTTS_anyCaseSensitiveTerminal] = true;
  ARTSet110[ARTTS_anyCharacterTerminal] = true;
  ARTSet110[ARTTS_anyLiteralTerminal] = true;
  ARTSet110[ARTTS_anyNonterminal] = true;
  ARTSet110[ARTTS_anyParaterminal] = true;
  ARTSet110[ARTTS_anyTerminal] = true;
  ARTSet110[ARTTS__BAR] = true;
  ARTSet110[ARTL_ART_CHAR_BQ] = true;
  ARTSet110[ARTL_ART_False] = true;
  ARTSet110[ARTL_ART_ID] = true;
  ARTSet110[ARTL_ART_ID_ATTRIBUTE] = true;
  ARTSet110[ARTL_ART_STRING_BRACE_NEST] = true;
  ARTSet110[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet110[ARTL_ART_STRING_DQ] = true;
  ARTSet110[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet110[ARTL_ART_True] = true;
  ARTSet110[ARTL_ART___bool] = true;
  ARTSet110[ARTL_ART___char] = true;
  ARTSet110[ARTL_ART___int32] = true;
  ARTSet110[ARTL_ART___real64] = true;
  ARTSet110[ARTL_ART___string] = true;
  ARTSet110[ARTL_ART_cfgAbbrev] = true;
  ARTSet110[ARTL_ART_cfgAtom] = true;
  ARTSet110[ARTL_ART_cfgAttributeEquation] = true;
  ARTSet110[ARTL_ART_cfgBuiltinTerminal] = true;
  ARTSet110[ARTL_ART_cfgCaseInsensitiveTerminal] = true;
  ARTSet110[ARTL_ART_cfgCaseSensitiveTerminal] = true;
  ARTSet110[ARTL_ART_cfgCatTail] = true;
  ARTSet110[ARTL_ART_cfgCharacterRangeTerminal] = true;
  ARTSet110[ARTL_ART_cfgCharacterTerminal] = true;
  ARTSet110[ARTL_ART_cfgDiff] = true;
  ARTSet110[ARTL_ART_cfgDoFirst] = true;
  ARTSet110[ARTL_ART_cfgElement] = true;
  ARTSet110[ARTL_ART_cfgEpsilon] = true;
  ARTSet110[ARTL_ART_cfgIter] = true;
  ARTSet110[ARTL_ART_cfgKleeneClosure] = true;
  ARTSet110[ARTL_ART_cfgNativeAction] = true;
  ARTSet110[ARTL_ART_cfgNonterminal] = true;
  ARTSet110[ARTL_ART_cfgNot] = true;
  ARTSet110[ARTL_ART_cfgOptional] = true;
  ARTSet110[ARTL_ART_cfgPositiveClosure] = true;
  ARTSet110[ARTL_ART_cfgRule] = true;
  ARTSet110[ARTL_ART_cfgSlot] = true;
  ARTSet110[ARTL_ART_cfgSlotSymbol] = true;
  ARTSet110[ARTL_ART_cfgUnion] = true;
  ARTSet110[ARTL_ART_chooseDiff] = true;
  ARTSet110[ARTL_ART_chooseElement] = true;
  ARTSet110[ARTL_ART_choosePredefinedSet] = true;
  ARTSet110[ARTL_ART_chooseRule] = true;
  ARTSet110[ARTL_ART_chooseUnionIntersection] = true;
  ARTSet110[ARTL_ART_directive] = true;
  ARTSet110[ARTL_ART_text] = true;
  ARTSet110[ARTL_ART_textElement] = true;
  ARTSet110[ARTL_ART_tr] = true;
  ARTSet110[ARTL_ART_trConfiguration] = true;
  ARTSet110[ARTL_ART_trLabel] = true;
  ARTSet110[ARTL_ART_trMatch] = true;
  ARTSet110[ARTL_ART_trPremises] = true;
  ARTSet110[ARTL_ART_trPrimaryTerm] = true;
  ARTSet110[ARTL_ART_trRule] = true;
  ARTSet110[ARTL_ART_trTerm] = true;
  ARTSet110[ARTL_ART_trTransition] = true;
}

public void ARTSet201initialise() {
  ARTSet201 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet201, 0, artSetExtent, false);
  ARTSet201[ARTTS__SHREIKlexGLL] = true;
}

public void ARTSet10initialise() {
  ARTSet10 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet10, 0, artSetExtent, false);
  ARTSet10[ARTTB_STRING_BRACE_NEST] = true;
}

public void ARTSet185initialise() {
  ARTSet185 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet185, 0, artSetExtent, false);
  ARTSet185[ARTTS__SHREIKsppfShow] = true;
}

public void ARTSet217initialise() {
  ARTSet217 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet217, 0, artSetExtent, false);
  ARTSet217[ARTTS__SHREIKsppfLongest] = true;
}

public void ARTSet117initialise() {
  ARTSet117 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet117, 0, artSetExtent, false);
  ARTSet117[ARTTB_CHAR_BQ] = true;
  ARTSet117[ARTTB_ID] = true;
  ARTSet117[ARTTB_STRING_DOLLAR] = true;
  ARTSet117[ARTTB_STRING_DQ] = true;
  ARTSet117[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet117[ARTTS__HASH] = true;
  ARTSet117[ARTTS__AMPERSAND] = true;
  ARTSet117[ARTTS__LPAR] = true;
  ARTSet117[ARTTS__PERIOD] = true;
  ARTSet117[ARTTS__BACKSLASH_BACKSLASH] = true;
  ARTSet117[ARTL_ART_CHAR_BQ] = true;
  ARTSet117[ARTL_ART_ID] = true;
  ARTSet117[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet117[ARTL_ART_STRING_DQ] = true;
  ARTSet117[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet117[ARTL_ART_cfgAtom] = true;
  ARTSet117[ARTL_ART_cfgBuiltinTerminal] = true;
  ARTSet117[ARTL_ART_cfgCaseInsensitiveTerminal] = true;
  ARTSet117[ARTL_ART_cfgCaseSensitiveTerminal] = true;
  ARTSet117[ARTL_ART_cfgCharacterRangeTerminal] = true;
  ARTSet117[ARTL_ART_cfgCharacterTerminal] = true;
  ARTSet117[ARTL_ART_cfgDoFirst] = true;
  ARTSet117[ARTL_ART_cfgElement] = true;
  ARTSet117[ARTL_ART_cfgEpsilon] = true;
  ARTSet117[ARTL_ART_cfgNonterminal] = true;
  ARTSet117[ARTL_ART_cfgSlotSymbol] = true;
}

public void ARTSet200initialise() {
  ARTSet200 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet200, 0, artSetExtent, false);
  ARTSet200[ARTTS__SHREIKlexDFA] = true;
}

public void ARTSet42initialise() {
  ARTSet42 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet42, 0, artSetExtent, false);
  ARTSet42[ARTTB_STRING_DQ] = true;
  ARTSet42[ARTTB_STRING_SQ] = true;
}

public void ARTSet252initialise() {
  ARTSet252 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet252, 0, artSetExtent, false);
  ARTSet252[ARTTS__SHREIKcnpIndexedAPI] = true;
}

public void ARTSet44initialise() {
  ARTSet44 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet44, 0, artSetExtent, false);
  ARTSet44[ARTTB_ID] = true;
  ARTSet44[ARTTB_STRING_DOLLAR] = true;
  ARTSet44[ARTL_ART_ID] = true;
  ARTSet44[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet44[ARTL_ART_cfgNonterminal] = true;
}

public void ARTSet170initialise() {
  ARTSet170 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet170, 0, artSetExtent, false);
  ARTSet170[ARTTS__SHREIKverbosity] = true;
}

public void ARTSet207initialise() {
  ARTSet207 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet207, 0, artSetExtent, false);
  ARTSet207[ARTTS__SHREIKinjectProduction] = true;
}

public void ARTSet79initialise() {
  ARTSet79 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet79, 0, artSetExtent, false);
  ARTSet79[ARTTB_CHAR_BQ] = true;
  ARTSet79[ARTTB_ID] = true;
  ARTSet79[ARTTB_STRING_DOLLAR] = true;
  ARTSet79[ARTTB_STRING_DQ] = true;
  ARTSet79[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet79[ARTTS__HASH] = true;
  ARTSet79[ARTTS__AMPERSAND] = true;
  ARTSet79[ARTTS__LPAR] = true;
  ARTSet79[ARTTS__PERIOD] = true;
  ARTSet79[ARTTS__BACKSLASH_BACKSLASH] = true;
  ARTSet79[ARTL_ART_CHAR_BQ] = true;
  ARTSet79[ARTL_ART_ID] = true;
  ARTSet79[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet79[ARTL_ART_STRING_DQ] = true;
  ARTSet79[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet79[ARTL_ART_cfgAbbrev] = true;
  ARTSet79[ARTL_ART_cfgAtom] = true;
  ARTSet79[ARTL_ART_cfgBuiltinTerminal] = true;
  ARTSet79[ARTL_ART_cfgCaseInsensitiveTerminal] = true;
  ARTSet79[ARTL_ART_cfgCaseSensitiveTerminal] = true;
  ARTSet79[ARTL_ART_cfgCharacterRangeTerminal] = true;
  ARTSet79[ARTL_ART_cfgCharacterTerminal] = true;
  ARTSet79[ARTL_ART_cfgDiff] = true;
  ARTSet79[ARTL_ART_cfgDoFirst] = true;
  ARTSet79[ARTL_ART_cfgElement] = true;
  ARTSet79[ARTL_ART_cfgEpsilon] = true;
  ARTSet79[ARTL_ART_cfgIter] = true;
  ARTSet79[ARTL_ART_cfgNonterminal] = true;
  ARTSet79[ARTL_ART_cfgNot] = true;
  ARTSet79[ARTL_ART_cfgSlotSymbol] = true;
  ARTSet79[ARTL_ART_cfgUnion] = true;
}

public void ARTSet158initialise() {
  ARTSet158 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet158, 0, artSetExtent, false);
  ARTSet158[ARTTS__SHREIKGLLFIFODescriptors] = true;
  ARTSet158[ARTTS__SHREIKGLLPredictivePops] = true;
  ARTSet158[ARTTS__SHREIKGLLSuppressPopGuard] = true;
  ARTSet158[ARTTS__SHREIKGLLSuppressProductionGuard] = true;
  ARTSet158[ARTTS__SHREIKGLLSuppressSemantics] = true;
  ARTSet158[ARTTS__SHREIKGLLSuppressTestRepeat] = true;
  ARTSet158[ARTTS__SHREIKabsorb] = true;
  ARTSet158[ARTTS__SHREIKalphabet] = true;
  ARTSet158[ARTTS__SHREIKcfgElements] = true;
  ARTSet158[ARTTS__SHREIKcnp] = true;
  ARTSet158[ARTTS__SHREIKcnpGeneratorPool] = true;
  ARTSet158[ARTTS__SHREIKcnpIndexedAPI] = true;
  ARTSet158[ARTTS__SHREIKcnpIndexedPool] = true;
  ARTSet158[ARTTS__SHREIKcnpLinkedAPI] = true;
  ARTSet158[ARTTS__SHREIKcompressWhitespaceJava] = true;
  ARTSet158[ARTTS__SHREIKearley] = true;
  ARTSet158[ARTTS__SHREIKearley2007LinkedAPI] = true;
  ARTSet158[ARTTS__SHREIKearleyIndexedAPI] = true;
  ARTSet158[ARTTS__SHREIKearleyIndexedData] = true;
  ARTSet158[ARTTS__SHREIKearleyIndexedPool] = true;
  ARTSet158[ARTTS__SHREIKearleyLinkedAPI] = true;
  ARTSet158[ARTTS__SHREIKearleyTable] = true;
  ARTSet158[ARTTS__SHREIKearleyTableIndexedAPI] = true;
  ARTSet158[ARTTS__SHREIKearleyTableIndexedData] = true;
  ARTSet158[ARTTS__SHREIKearleyTableIndexedPool] = true;
  ARTSet158[ARTTS__SHREIKearleyTableLinkedAPI] = true;
  ARTSet158[ARTTS__SHREIKextractJLS] = true;
  ARTSet158[ARTTS__SHREIKgenerateC_PLUS_PLUS] = true;
  ARTSet158[ARTTS__SHREIKgenerateDynamic] = true;
  ARTSet158[ARTTS__SHREIKgenerateFragment] = true;
  ARTSet158[ARTTS__SHREIKgenerateJava] = true;
  ARTSet158[ARTTS__SHREIKgenerateML] = true;
  ARTSet158[ARTTS__SHREIKgeneratePool] = true;
  ARTSet158[ARTTS__SHREIKgenerateState] = true;
  ARTSet158[ARTTS__SHREIKgenerateStatic] = true;
  ARTSet158[ARTTS__SHREIKgll] = true;
  ARTSet158[ARTTS__SHREIKgllClusteredGeneratorPool] = true;
  ARTSet158[ARTTS__SHREIKgllGeneratorPool] = true;
  ARTSet158[ARTTS__SHREIKgllTWEGeneratorPool] = true;
  ARTSet158[ARTTS__SHREIKgrammarWrite] = true;
  ARTSet158[ARTTS__SHREIKgssPrint] = true;
  ARTSet158[ARTTS__SHREIKgssShow] = true;
  ARTSet158[ARTTS__SHREIKgssWrite] = true;
  ARTSet158[ARTTS__SHREIKinjectInstance] = true;
  ARTSet158[ARTTS__SHREIKinjectProduction] = true;
  ARTSet158[ARTTS__SHREIKinput] = true;
  ARTSet158[ARTTS__SHREIKinputPrint] = true;
  ARTSet158[ARTTS__SHREIKlatex] = true;
  ARTSet158[ARTTS__SHREIKlcnp] = true;
  ARTSet158[ARTTS__SHREIKlcnpGeneratorPool] = true;
  ARTSet158[ARTTS__SHREIKlcnpIndexedAPI] = true;
  ARTSet158[ARTTS__SHREIKlcnpIndexedPool] = true;
  ARTSet158[ARTTS__SHREIKlcnpLinkedAPI] = true;
  ARTSet158[ARTTS__SHREIKlexDFA] = true;
  ARTSet158[ARTTS__SHREIKlexGLL] = true;
  ARTSet158[ARTTS__SHREIKlexHardCoded] = true;
  ARTSet158[ARTTS__SHREIKlexWSSuffix] = true;
  ARTSet158[ARTTS__SHREIKlexerData] = true;
  ARTSet158[ARTTS__SHREIKlexerName] = true;
  ARTSet158[ARTTS__SHREIKmain] = true;
  ARTSet158[ARTTS__SHREIKmerge] = true;
  ARTSet158[ARTTS__SHREIKmgll] = true;
  ARTSet158[ARTTS__SHREIKmgllGeneratorPool] = true;
  ARTSet158[ARTTS__SHREIKmodule] = true;
  ARTSet158[ARTTS__SHREIKnamespace] = true;
  ARTSet158[ARTTS__SHREIKosbrd] = true;
  ARTSet158[ARTTS__SHREIKosbrdGenerator] = true;
  ARTSet158[ARTTS__SHREIKoutputDirectory] = true;
  ARTSet158[ARTTS__SHREIKparaterminal] = true;
  ARTSet158[ARTTS__SHREIKparseCountsPrint] = true;
  ARTSet158[ARTTS__SHREIKparserName] = true;
  ARTSet158[ARTTS__SHREIKprelude] = true;
  ARTSet158[ARTTS__SHREIKrelation] = true;
  ARTSet158[ARTTS__SHREIKresult] = true;
  ARTSet158[ARTTS__SHREIKsml97Parser] = true;
  ARTSet158[ARTTS__SHREIKsppfLongest] = true;
  ARTSet158[ARTTS__SHREIKsppfPrint] = true;
  ARTSet158[ARTTS__SHREIKsppfPriority] = true;
  ARTSet158[ARTTS__SHREIKsppfShow] = true;
  ARTSet158[ARTTS__SHREIKsppfWrite] = true;
  ARTSet158[ARTTS__SHREIKstart] = true;
  ARTSet158[ARTTS__SHREIKstatistics] = true;
  ARTSet158[ARTTS__SHREIKstrategy] = true;
  ARTSet158[ARTTS__SHREIKsupport] = true;
  ARTSet158[ARTTS__SHREIKtermPrint] = true;
  ARTSet158[ARTTS__SHREIKtermShow] = true;
  ARTSet158[ARTTS__SHREIKtermTool] = true;
  ARTSet158[ARTTS__SHREIKtermWrite] = true;
  ARTSet158[ARTTS__SHREIKtrace] = true;
  ARTSet158[ARTTS__SHREIKtreePrint] = true;
  ARTSet158[ARTTS__SHREIKtreeShow] = true;
  ARTSet158[ARTTS__SHREIKtreeWrite] = true;
  ARTSet158[ARTTS__SHREIKtry] = true;
  ARTSet158[ARTTS__SHREIKtweDead] = true;
  ARTSet158[ARTTS__SHREIKtweExtents] = true;
  ARTSet158[ARTTS__SHREIKtweFromSPPF] = true;
  ARTSet158[ARTTS__SHREIKtweLexicalisations] = true;
  ARTSet158[ARTTS__SHREIKtweLongest] = true;
  ARTSet158[ARTTS__SHREIKtwePrint] = true;
  ARTSet158[ARTTS__SHREIKtwePrintFull] = true;
  ARTSet158[ARTTS__SHREIKtwePrintSummary] = true;
  ARTSet158[ARTTS__SHREIKtwePriority] = true;
  ARTSet158[ARTTS__SHREIKtweRecursive] = true;
  ARTSet158[ARTTS__SHREIKtweSegments] = true;
  ARTSet158[ARTTS__SHREIKtweShow] = true;
  ARTSet158[ARTTS__SHREIKtweTokenWrite] = true;
  ARTSet158[ARTTS__SHREIKtweWrite] = true;
  ARTSet158[ARTTS__SHREIKunicodeAsEscapeSeuences] = true;
  ARTSet158[ARTTS__SHREIKuse] = true;
  ARTSet158[ARTTS__SHREIKverbosity] = true;
  ARTSet158[ARTTS__SHREIKwhitespace] = true;
}

public void ARTSet116initialise() {
  ARTSet116 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet116, 0, artSetExtent, false);
  ARTSet116[ARTTB_ID] = true;
  ARTSet116[ARTTB_STRING_DOLLAR] = true;
  ARTSet116[ARTL_ART_ID] = true;
  ARTSet116[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet116[ARTL_ART_cfgNonterminal] = true;
  ARTSet116[ARTL_ART_cfgNonterminals] = true;
}

public void ARTSet8initialise() {
  ARTSet8 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet8, 0, artSetExtent, false);
  ARTSet8[ARTX_EOS] = true;
  ARTSet8[ARTTB_CHAR_BQ] = true;
  ARTSet8[ARTTB_ID] = true;
  ARTSet8[ARTTB_SIGNED_INTEGER] = true;
  ARTSet8[ARTTB_SIGNED_REAL] = true;
  ARTSet8[ARTTB_STRING_BRACE_NEST] = true;
  ARTSet8[ARTTB_STRING_DOLLAR] = true;
  ARTSet8[ARTTB_STRING_DQ] = true;
  ARTSet8[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet8[ARTTB_STRING_SQ] = true;
  ARTSet8[ARTTS__SHREIKGLLFIFODescriptors] = true;
  ARTSet8[ARTTS__SHREIKGLLPredictivePops] = true;
  ARTSet8[ARTTS__SHREIKGLLSuppressPopGuard] = true;
  ARTSet8[ARTTS__SHREIKGLLSuppressProductionGuard] = true;
  ARTSet8[ARTTS__SHREIKGLLSuppressSemantics] = true;
  ARTSet8[ARTTS__SHREIKGLLSuppressTestRepeat] = true;
  ARTSet8[ARTTS__SHREIKabsorb] = true;
  ARTSet8[ARTTS__SHREIKalphabet] = true;
  ARTSet8[ARTTS__SHREIKcfgElements] = true;
  ARTSet8[ARTTS__SHREIKcnp] = true;
  ARTSet8[ARTTS__SHREIKcnpGeneratorPool] = true;
  ARTSet8[ARTTS__SHREIKcnpIndexedAPI] = true;
  ARTSet8[ARTTS__SHREIKcnpIndexedPool] = true;
  ARTSet8[ARTTS__SHREIKcnpLinkedAPI] = true;
  ARTSet8[ARTTS__SHREIKcompressWhitespaceJava] = true;
  ARTSet8[ARTTS__SHREIKearley] = true;
  ARTSet8[ARTTS__SHREIKearley2007LinkedAPI] = true;
  ARTSet8[ARTTS__SHREIKearleyIndexedAPI] = true;
  ARTSet8[ARTTS__SHREIKearleyIndexedData] = true;
  ARTSet8[ARTTS__SHREIKearleyIndexedPool] = true;
  ARTSet8[ARTTS__SHREIKearleyLinkedAPI] = true;
  ARTSet8[ARTTS__SHREIKearleyTable] = true;
  ARTSet8[ARTTS__SHREIKearleyTableIndexedAPI] = true;
  ARTSet8[ARTTS__SHREIKearleyTableIndexedData] = true;
  ARTSet8[ARTTS__SHREIKearleyTableIndexedPool] = true;
  ARTSet8[ARTTS__SHREIKearleyTableLinkedAPI] = true;
  ARTSet8[ARTTS__SHREIKextractJLS] = true;
  ARTSet8[ARTTS__SHREIKgenerateC_PLUS_PLUS] = true;
  ARTSet8[ARTTS__SHREIKgenerateDynamic] = true;
  ARTSet8[ARTTS__SHREIKgenerateFragment] = true;
  ARTSet8[ARTTS__SHREIKgenerateJava] = true;
  ARTSet8[ARTTS__SHREIKgenerateML] = true;
  ARTSet8[ARTTS__SHREIKgeneratePool] = true;
  ARTSet8[ARTTS__SHREIKgenerateState] = true;
  ARTSet8[ARTTS__SHREIKgenerateStatic] = true;
  ARTSet8[ARTTS__SHREIKgll] = true;
  ARTSet8[ARTTS__SHREIKgllClusteredGeneratorPool] = true;
  ARTSet8[ARTTS__SHREIKgllGeneratorPool] = true;
  ARTSet8[ARTTS__SHREIKgllTWEGeneratorPool] = true;
  ARTSet8[ARTTS__SHREIKgrammarWrite] = true;
  ARTSet8[ARTTS__SHREIKgssPrint] = true;
  ARTSet8[ARTTS__SHREIKgssShow] = true;
  ARTSet8[ARTTS__SHREIKgssWrite] = true;
  ARTSet8[ARTTS__SHREIKinjectInstance] = true;
  ARTSet8[ARTTS__SHREIKinjectProduction] = true;
  ARTSet8[ARTTS__SHREIKinput] = true;
  ARTSet8[ARTTS__SHREIKinputPrint] = true;
  ARTSet8[ARTTS__SHREIKlatex] = true;
  ARTSet8[ARTTS__SHREIKlcnp] = true;
  ARTSet8[ARTTS__SHREIKlcnpGeneratorPool] = true;
  ARTSet8[ARTTS__SHREIKlcnpIndexedAPI] = true;
  ARTSet8[ARTTS__SHREIKlcnpIndexedPool] = true;
  ARTSet8[ARTTS__SHREIKlcnpLinkedAPI] = true;
  ARTSet8[ARTTS__SHREIKlexDFA] = true;
  ARTSet8[ARTTS__SHREIKlexGLL] = true;
  ARTSet8[ARTTS__SHREIKlexHardCoded] = true;
  ARTSet8[ARTTS__SHREIKlexWSSuffix] = true;
  ARTSet8[ARTTS__SHREIKlexerData] = true;
  ARTSet8[ARTTS__SHREIKlexerName] = true;
  ARTSet8[ARTTS__SHREIKmain] = true;
  ARTSet8[ARTTS__SHREIKmerge] = true;
  ARTSet8[ARTTS__SHREIKmgll] = true;
  ARTSet8[ARTTS__SHREIKmgllGeneratorPool] = true;
  ARTSet8[ARTTS__SHREIKmodule] = true;
  ARTSet8[ARTTS__SHREIKnamespace] = true;
  ARTSet8[ARTTS__SHREIKosbrd] = true;
  ARTSet8[ARTTS__SHREIKosbrdGenerator] = true;
  ARTSet8[ARTTS__SHREIKoutputDirectory] = true;
  ARTSet8[ARTTS__SHREIKparaterminal] = true;
  ARTSet8[ARTTS__SHREIKparseCountsPrint] = true;
  ARTSet8[ARTTS__SHREIKparserName] = true;
  ARTSet8[ARTTS__SHREIKprelude] = true;
  ARTSet8[ARTTS__SHREIKrelation] = true;
  ARTSet8[ARTTS__SHREIKresult] = true;
  ARTSet8[ARTTS__SHREIKsml97Parser] = true;
  ARTSet8[ARTTS__SHREIKsppfLongest] = true;
  ARTSet8[ARTTS__SHREIKsppfPrint] = true;
  ARTSet8[ARTTS__SHREIKsppfPriority] = true;
  ARTSet8[ARTTS__SHREIKsppfShow] = true;
  ARTSet8[ARTTS__SHREIKsppfWrite] = true;
  ARTSet8[ARTTS__SHREIKstart] = true;
  ARTSet8[ARTTS__SHREIKstatistics] = true;
  ARTSet8[ARTTS__SHREIKstrategy] = true;
  ARTSet8[ARTTS__SHREIKsupport] = true;
  ARTSet8[ARTTS__SHREIKtermPrint] = true;
  ARTSet8[ARTTS__SHREIKtermShow] = true;
  ARTSet8[ARTTS__SHREIKtermTool] = true;
  ARTSet8[ARTTS__SHREIKtermWrite] = true;
  ARTSet8[ARTTS__SHREIKtrace] = true;
  ARTSet8[ARTTS__SHREIKtreePrint] = true;
  ARTSet8[ARTTS__SHREIKtreeShow] = true;
  ARTSet8[ARTTS__SHREIKtreeWrite] = true;
  ARTSet8[ARTTS__SHREIKtry] = true;
  ARTSet8[ARTTS__SHREIKtweDead] = true;
  ARTSet8[ARTTS__SHREIKtweExtents] = true;
  ARTSet8[ARTTS__SHREIKtweFromSPPF] = true;
  ARTSet8[ARTTS__SHREIKtweLexicalisations] = true;
  ARTSet8[ARTTS__SHREIKtweLongest] = true;
  ARTSet8[ARTTS__SHREIKtwePrint] = true;
  ARTSet8[ARTTS__SHREIKtwePrintFull] = true;
  ARTSet8[ARTTS__SHREIKtwePrintSummary] = true;
  ARTSet8[ARTTS__SHREIKtwePriority] = true;
  ARTSet8[ARTTS__SHREIKtweRecursive] = true;
  ARTSet8[ARTTS__SHREIKtweSegments] = true;
  ARTSet8[ARTTS__SHREIKtweShow] = true;
  ARTSet8[ARTTS__SHREIKtweTokenWrite] = true;
  ARTSet8[ARTTS__SHREIKtweWrite] = true;
  ARTSet8[ARTTS__SHREIKunicodeAsEscapeSeuences] = true;
  ARTSet8[ARTTS__SHREIKuse] = true;
  ARTSet8[ARTTS__SHREIKverbosity] = true;
  ARTSet8[ARTTS__SHREIKwhitespace] = true;
  ARTSet8[ARTTS__HASH] = true;
  ARTSet8[ARTTS__AMPERSAND] = true;
  ARTSet8[ARTTS__LPAR] = true;
  ARTSet8[ARTTS__RPAR] = true;
  ARTSet8[ARTTS__STAR] = true;
  ARTSet8[ARTTS__PLUS] = true;
  ARTSet8[ARTTS__COMMA] = true;
  ARTSet8[ARTTS__MINUS] = true;
  ARTSet8[ARTTS__MINUS_MINUS_MINUS] = true;
  ARTSet8[ARTTS__MINUS_SLASH] = true;
  ARTSet8[ARTTS__MINUS_SLASH_STAR] = true;
  ARTSet8[ARTTS__MINUS_SLASH_GT] = true;
  ARTSet8[ARTTS__MINUS_GT] = true;
  ARTSet8[ARTTS__MINUS_GT_STAR] = true;
  ARTSet8[ARTTS__MINUS_GT_GT] = true;
  ARTSet8[ARTTS__MINUS_BACKSLASH] = true;
  ARTSet8[ARTTS__MINUS_BACKSLASH_STAR] = true;
  ARTSet8[ARTTS__MINUS_BACKSLASH_GT] = true;
  ARTSet8[ARTTS__PERIOD] = true;
  ARTSet8[ARTTS__PERIODart] = true;
  ARTSet8[ARTTS__PERIODjava] = true;
  ARTSet8[ARTTS__PERIODraw] = true;
  ARTSet8[ARTTS__SLASH] = true;
  ARTSet8[ARTTS__COLON] = true;
  ARTSet8[ARTTS__COLON_COLON_EQUAL] = true;
  ARTSet8[ARTTS__LT] = true;
  ARTSet8[ARTTS__LT_LT] = true;
  ARTSet8[ARTTS__EQUAL] = true;
  ARTSet8[ARTTS__EQUAL_GT] = true;
  ARTSet8[ARTTS__EQUAL_GT_STAR] = true;
  ARTSet8[ARTTS__EQUAL_GT_GT] = true;
  ARTSet8[ARTTS__GT] = true;
  ARTSet8[ARTTS__GT_GT] = true;
  ARTSet8[ARTTS__QUERY] = true;
  ARTSet8[ARTTS__AT] = true;
  ARTSet8[ARTTS_False] = true;
  ARTSet8[ARTTS_True] = true;
  ARTSet8[ARTTS__BACKSLASH] = true;
  ARTSet8[ARTTS__BACKSLASH_BACKSLASH] = true;
  ARTSet8[ARTTS__UPARROW] = true;
  ARTSet8[ARTTS__UPARROW_PLUS] = true;
  ARTSet8[ARTTS__UPARROW_UPARROW] = true;
  ARTSet8[ARTTS__UPARROW_UPARROW_UPARROW] = true;
  ARTSet8[ARTTS__UPARROW_] = true;
  ARTSet8[ARTTS_anyBuiltinTerminal] = true;
  ARTSet8[ARTTS_anyCaseInsensitiveTerminal] = true;
  ARTSet8[ARTTS_anyCaseSensitiveTerminal] = true;
  ARTSet8[ARTTS_anyCharacterTerminal] = true;
  ARTSet8[ARTTS_anyLiteralTerminal] = true;
  ARTSet8[ARTTS_anyNonterminal] = true;
  ARTSet8[ARTTS_anyParaterminal] = true;
  ARTSet8[ARTTS_anyTerminal] = true;
  ARTSet8[ARTTS__BAR] = true;
  ARTSet8[ARTTS__BAR_GT] = true;
  ARTSet8[ARTTS__BAR_BAR] = true;
  ARTSet8[ARTTS__TILDE_GT] = true;
  ARTSet8[ARTTS__TILDE_GT_STAR] = true;
  ARTSet8[ARTTS__TILDE_GT_GT] = true;
  ARTSet8[ARTL_ART_CHAR_BQ] = true;
  ARTSet8[ARTL_ART_False] = true;
  ARTSet8[ARTL_ART_ID] = true;
  ARTSet8[ARTL_ART_ID_ATTRIBUTE] = true;
  ARTSet8[ARTL_ART_STRING_BRACE_NEST] = true;
  ARTSet8[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet8[ARTL_ART_STRING_DQ] = true;
  ARTSet8[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet8[ARTL_ART_TRRELATION] = true;
  ARTSet8[ARTL_ART_True] = true;
  ARTSet8[ARTL_ART___bool] = true;
  ARTSet8[ARTL_ART___char] = true;
  ARTSet8[ARTL_ART___int32] = true;
  ARTSet8[ARTL_ART___real64] = true;
  ARTSet8[ARTL_ART___string] = true;
  ARTSet8[ARTL_ART_cfgAbbrev] = true;
  ARTSet8[ARTL_ART_cfgAtom] = true;
  ARTSet8[ARTL_ART_cfgAttributeEquation] = true;
  ARTSet8[ARTL_ART_cfgBuiltinTerminal] = true;
  ARTSet8[ARTL_ART_cfgCaseInsensitiveTerminal] = true;
  ARTSet8[ARTL_ART_cfgCaseSensitiveTerminal] = true;
  ARTSet8[ARTL_ART_cfgCatTail] = true;
  ARTSet8[ARTL_ART_cfgCharacterRangeTerminal] = true;
  ARTSet8[ARTL_ART_cfgCharacterTerminal] = true;
  ARTSet8[ARTL_ART_cfgDelay] = true;
  ARTSet8[ARTL_ART_cfgDiff] = true;
  ARTSet8[ARTL_ART_cfgDoFirst] = true;
  ARTSet8[ARTL_ART_cfgElement] = true;
  ARTSet8[ARTL_ART_cfgEpsilon] = true;
  ARTSet8[ARTL_ART_cfgFoldNone] = true;
  ARTSet8[ARTL_ART_cfgFoldOver] = true;
  ARTSet8[ARTL_ART_cfgFoldUnder] = true;
  ARTSet8[ARTL_ART_cfgGather] = true;
  ARTSet8[ARTL_ART_cfgGrammarAnnotations] = true;
  ARTSet8[ARTL_ART_cfgInsert] = true;
  ARTSet8[ARTL_ART_cfgIter] = true;
  ARTSet8[ARTL_ART_cfgKleeneClosure] = true;
  ARTSet8[ARTL_ART_cfgNativeAction] = true;
  ARTSet8[ARTL_ART_cfgNonterminal] = true;
  ARTSet8[ARTL_ART_cfgNot] = true;
  ARTSet8[ARTL_ART_cfgOptional] = true;
  ARTSet8[ARTL_ART_cfgPositiveClosure] = true;
  ARTSet8[ARTL_ART_cfgRule] = true;
  ARTSet8[ARTL_ART_cfgSlot] = true;
  ARTSet8[ARTL_ART_cfgSlotSymbol] = true;
  ARTSet8[ARTL_ART_cfgUnion] = true;
  ARTSet8[ARTL_ART_chooseDiff] = true;
  ARTSet8[ARTL_ART_chooseElement] = true;
  ARTSet8[ARTL_ART_chooseHigher] = true;
  ARTSet8[ARTL_ART_chooseIntersection] = true;
  ARTSet8[ARTL_ART_chooseLonger] = true;
  ARTSet8[ARTL_ART_chooseLower] = true;
  ARTSet8[ARTL_ART_choosePredefinedSet] = true;
  ARTSet8[ARTL_ART_chooseRule] = true;
  ARTSet8[ARTL_ART_chooseShorter] = true;
  ARTSet8[ARTL_ART_chooseUnion] = true;
  ARTSet8[ARTL_ART_chooseUnionIntersection] = true;
  ARTSet8[ARTL_ART_chooserOp] = true;
  ARTSet8[ARTL_ART_directive] = true;
  ARTSet8[ARTL_ART_idART] = true;
  ARTSet8[ARTL_ART_idJAVA] = true;
  ARTSet8[ARTL_ART_idRAW] = true;
  ARTSet8[ARTL_ART_text] = true;
  ARTSet8[ARTL_ART_textElement] = true;
  ARTSet8[ARTL_ART_tr] = true;
  ARTSet8[ARTL_ART_trConfiguration] = true;
  ARTSet8[ARTL_ART_trEntityReferences] = true;
  ARTSet8[ARTL_ART_trEquations] = true;
  ARTSet8[ARTL_ART_trLabel] = true;
  ARTSet8[ARTL_ART_trMatch] = true;
  ARTSet8[ARTL_ART_trPremises] = true;
  ARTSet8[ARTL_ART_trPrimaryTerm] = true;
  ARTSet8[ARTL_ART_trRule] = true;
  ARTSet8[ARTL_ART_trSubterms] = true;
  ARTSet8[ARTL_ART_trTerm] = true;
  ARTSet8[ARTL_ART_trTransition] = true;
}

public void ARTSet260initialise() {
  ARTSet260 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet260, 0, artSetExtent, false);
  ARTSet260[ARTTS__SHREIKgll] = true;
}

public void ARTSet225initialise() {
  ARTSet225 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet225, 0, artSetExtent, false);
  ARTSet225[ARTTS__SHREIKgenerateState] = true;
}

public void ARTSet243initialise() {
  ARTSet243 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet243, 0, artSetExtent, false);
  ARTSet243[ARTTS__SHREIKearleyIndexedPool] = true;
}

public void ARTSet54initialise() {
  ARTSet54 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet54, 0, artSetExtent, false);
  ARTSet54[ARTTS__BAR] = true;
}

public void ARTSet147initialise() {
  ARTSet147 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet147, 0, artSetExtent, false);
  ARTSet147[ARTTS_anyLiteralTerminal] = true;
}

public void ARTSet254initialise() {
  ARTSet254 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet254, 0, artSetExtent, false);
  ARTSet254[ARTTS__SHREIKcnpGeneratorPool] = true;
}

public void ARTSet65initialise() {
  ARTSet65 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet65, 0, artSetExtent, false);
  ARTSet65[ARTTB_CHAR_BQ] = true;
  ARTSet65[ARTTB_ID] = true;
  ARTSet65[ARTTB_STRING_DOLLAR] = true;
  ARTSet65[ARTTB_STRING_DQ] = true;
  ARTSet65[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet65[ARTTS__HASH] = true;
  ARTSet65[ARTTS__AMPERSAND] = true;
  ARTSet65[ARTTS__PERIOD] = true;
  ARTSet65[ARTL_ART_CHAR_BQ] = true;
  ARTSet65[ARTL_ART_ID] = true;
  ARTSet65[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet65[ARTL_ART_STRING_DQ] = true;
  ARTSet65[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet65[ARTL_ART_cfgAtom] = true;
  ARTSet65[ARTL_ART_cfgBuiltinTerminal] = true;
  ARTSet65[ARTL_ART_cfgCaseInsensitiveTerminal] = true;
  ARTSet65[ARTL_ART_cfgCaseSensitiveTerminal] = true;
  ARTSet65[ARTL_ART_cfgCharacterRangeTerminal] = true;
  ARTSet65[ARTL_ART_cfgCharacterTerminal] = true;
  ARTSet65[ARTL_ART_cfgEpsilon] = true;
  ARTSet65[ARTL_ART_cfgNonterminal] = true;
  ARTSet65[ARTL_ART_cfgSlotSymbol] = true;
}

public void ARTSet106initialise() {
  ARTSet106 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet106, 0, artSetExtent, false);
  ARTSet106[ARTTS__UPARROW_UPARROW] = true;
  ARTSet106[ARTL_ART_cfgFoldOver] = true;
}

public void ARTSet148initialise() {
  ARTSet148 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet148, 0, artSetExtent, false);
  ARTSet148[ARTTS_anyTerminal] = true;
}

public void ARTSet265initialise() {
  ARTSet265 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet265, 0, artSetExtent, false);
  ARTSet265[ARTTS__SHREIKmgllGeneratorPool] = true;
}

public void ARTSet271initialise() {
  ARTSet271 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet271, 0, artSetExtent, false);
  ARTSet271[ARTTS__MINUS_SLASH] = true;
  ARTSet271[ARTTS__MINUS_SLASH_STAR] = true;
  ARTSet271[ARTTS__MINUS_SLASH_GT] = true;
  ARTSet271[ARTTS__MINUS_GT] = true;
  ARTSet271[ARTTS__MINUS_GT_STAR] = true;
  ARTSet271[ARTTS__MINUS_GT_GT] = true;
  ARTSet271[ARTTS__MINUS_BACKSLASH] = true;
  ARTSet271[ARTTS__MINUS_BACKSLASH_STAR] = true;
  ARTSet271[ARTTS__MINUS_BACKSLASH_GT] = true;
  ARTSet271[ARTTS__EQUAL_GT] = true;
  ARTSet271[ARTTS__EQUAL_GT_STAR] = true;
  ARTSet271[ARTTS__EQUAL_GT_GT] = true;
  ARTSet271[ARTTS__TILDE_GT] = true;
  ARTSet271[ARTTS__TILDE_GT_STAR] = true;
  ARTSet271[ARTTS__TILDE_GT_GT] = true;
  ARTSet271[ARTL_ART_TRRELATION] = true;
}

public void ARTSet324initialise() {
  ARTSet324 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet324, 0, artSetExtent, false);
  ARTSet324[ARTTB_CHAR_BQ] = true;
  ARTSet324[ARTTB_ID] = true;
  ARTSet324[ARTTB_SIGNED_INTEGER] = true;
  ARTSet324[ARTTB_SIGNED_REAL] = true;
  ARTSet324[ARTTB_STRING_DQ] = true;
  ARTSet324[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet324[ARTTB_STRING_SQ] = true;
  ARTSet324[ARTTS__MINUS_MINUS_MINUS] = true;
  ARTSet324[ARTTS__LT] = true;
  ARTSet324[ARTTS_False] = true;
  ARTSet324[ARTTS_True] = true;
  ARTSet324[ARTL_ART_False] = true;
  ARTSet324[ARTL_ART_ID] = true;
  ARTSet324[ARTL_ART_ID_ATTRIBUTE] = true;
  ARTSet324[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet324[ARTL_ART_True] = true;
  ARTSet324[ARTL_ART___bool] = true;
  ARTSet324[ARTL_ART___char] = true;
  ARTSet324[ARTL_ART___int32] = true;
  ARTSet324[ARTL_ART___real64] = true;
  ARTSet324[ARTL_ART___string] = true;
  ARTSet324[ARTL_ART_tr] = true;
  ARTSet324[ARTL_ART_trConfiguration] = true;
  ARTSet324[ARTL_ART_trMatch] = true;
  ARTSet324[ARTL_ART_trPremises] = true;
  ARTSet324[ARTL_ART_trPrimaryTerm] = true;
  ARTSet324[ARTL_ART_trTerm] = true;
  ARTSet324[ARTL_ART_trTransition] = true;
}

public void ARTSet300initialise() {
  ARTSet300 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet300, 0, artSetExtent, false);
  ARTSet300[ARTTS__MINUS_MINUS_MINUS] = true;
}

public void ARTSet57initialise() {
  ARTSet57 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet57, 0, artSetExtent, false);
  ARTSet57[ARTX_EOS] = true;
  ARTSet57[ARTTB_CHAR_BQ] = true;
  ARTSet57[ARTTB_ID] = true;
  ARTSet57[ARTTB_SIGNED_INTEGER] = true;
  ARTSet57[ARTTB_SIGNED_REAL] = true;
  ARTSet57[ARTTB_STRING_BRACE_NEST] = true;
  ARTSet57[ARTTB_STRING_DOLLAR] = true;
  ARTSet57[ARTTB_STRING_DQ] = true;
  ARTSet57[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet57[ARTTB_STRING_SQ] = true;
  ARTSet57[ARTTS__SHREIKGLLFIFODescriptors] = true;
  ARTSet57[ARTTS__SHREIKGLLPredictivePops] = true;
  ARTSet57[ARTTS__SHREIKGLLSuppressPopGuard] = true;
  ARTSet57[ARTTS__SHREIKGLLSuppressProductionGuard] = true;
  ARTSet57[ARTTS__SHREIKGLLSuppressSemantics] = true;
  ARTSet57[ARTTS__SHREIKGLLSuppressTestRepeat] = true;
  ARTSet57[ARTTS__SHREIKabsorb] = true;
  ARTSet57[ARTTS__SHREIKalphabet] = true;
  ARTSet57[ARTTS__SHREIKcfgElements] = true;
  ARTSet57[ARTTS__SHREIKcnp] = true;
  ARTSet57[ARTTS__SHREIKcnpGeneratorPool] = true;
  ARTSet57[ARTTS__SHREIKcnpIndexedAPI] = true;
  ARTSet57[ARTTS__SHREIKcnpIndexedPool] = true;
  ARTSet57[ARTTS__SHREIKcnpLinkedAPI] = true;
  ARTSet57[ARTTS__SHREIKcompressWhitespaceJava] = true;
  ARTSet57[ARTTS__SHREIKearley] = true;
  ARTSet57[ARTTS__SHREIKearley2007LinkedAPI] = true;
  ARTSet57[ARTTS__SHREIKearleyIndexedAPI] = true;
  ARTSet57[ARTTS__SHREIKearleyIndexedData] = true;
  ARTSet57[ARTTS__SHREIKearleyIndexedPool] = true;
  ARTSet57[ARTTS__SHREIKearleyLinkedAPI] = true;
  ARTSet57[ARTTS__SHREIKearleyTable] = true;
  ARTSet57[ARTTS__SHREIKearleyTableIndexedAPI] = true;
  ARTSet57[ARTTS__SHREIKearleyTableIndexedData] = true;
  ARTSet57[ARTTS__SHREIKearleyTableIndexedPool] = true;
  ARTSet57[ARTTS__SHREIKearleyTableLinkedAPI] = true;
  ARTSet57[ARTTS__SHREIKextractJLS] = true;
  ARTSet57[ARTTS__SHREIKgenerateC_PLUS_PLUS] = true;
  ARTSet57[ARTTS__SHREIKgenerateDynamic] = true;
  ARTSet57[ARTTS__SHREIKgenerateFragment] = true;
  ARTSet57[ARTTS__SHREIKgenerateJava] = true;
  ARTSet57[ARTTS__SHREIKgenerateML] = true;
  ARTSet57[ARTTS__SHREIKgeneratePool] = true;
  ARTSet57[ARTTS__SHREIKgenerateState] = true;
  ARTSet57[ARTTS__SHREIKgenerateStatic] = true;
  ARTSet57[ARTTS__SHREIKgll] = true;
  ARTSet57[ARTTS__SHREIKgllClusteredGeneratorPool] = true;
  ARTSet57[ARTTS__SHREIKgllGeneratorPool] = true;
  ARTSet57[ARTTS__SHREIKgllTWEGeneratorPool] = true;
  ARTSet57[ARTTS__SHREIKgrammarWrite] = true;
  ARTSet57[ARTTS__SHREIKgssPrint] = true;
  ARTSet57[ARTTS__SHREIKgssShow] = true;
  ARTSet57[ARTTS__SHREIKgssWrite] = true;
  ARTSet57[ARTTS__SHREIKinjectInstance] = true;
  ARTSet57[ARTTS__SHREIKinjectProduction] = true;
  ARTSet57[ARTTS__SHREIKinput] = true;
  ARTSet57[ARTTS__SHREIKinputPrint] = true;
  ARTSet57[ARTTS__SHREIKlatex] = true;
  ARTSet57[ARTTS__SHREIKlcnp] = true;
  ARTSet57[ARTTS__SHREIKlcnpGeneratorPool] = true;
  ARTSet57[ARTTS__SHREIKlcnpIndexedAPI] = true;
  ARTSet57[ARTTS__SHREIKlcnpIndexedPool] = true;
  ARTSet57[ARTTS__SHREIKlcnpLinkedAPI] = true;
  ARTSet57[ARTTS__SHREIKlexDFA] = true;
  ARTSet57[ARTTS__SHREIKlexGLL] = true;
  ARTSet57[ARTTS__SHREIKlexHardCoded] = true;
  ARTSet57[ARTTS__SHREIKlexWSSuffix] = true;
  ARTSet57[ARTTS__SHREIKlexerData] = true;
  ARTSet57[ARTTS__SHREIKlexerName] = true;
  ARTSet57[ARTTS__SHREIKmain] = true;
  ARTSet57[ARTTS__SHREIKmerge] = true;
  ARTSet57[ARTTS__SHREIKmgll] = true;
  ARTSet57[ARTTS__SHREIKmgllGeneratorPool] = true;
  ARTSet57[ARTTS__SHREIKmodule] = true;
  ARTSet57[ARTTS__SHREIKnamespace] = true;
  ARTSet57[ARTTS__SHREIKosbrd] = true;
  ARTSet57[ARTTS__SHREIKosbrdGenerator] = true;
  ARTSet57[ARTTS__SHREIKoutputDirectory] = true;
  ARTSet57[ARTTS__SHREIKparaterminal] = true;
  ARTSet57[ARTTS__SHREIKparseCountsPrint] = true;
  ARTSet57[ARTTS__SHREIKparserName] = true;
  ARTSet57[ARTTS__SHREIKprelude] = true;
  ARTSet57[ARTTS__SHREIKrelation] = true;
  ARTSet57[ARTTS__SHREIKresult] = true;
  ARTSet57[ARTTS__SHREIKsml97Parser] = true;
  ARTSet57[ARTTS__SHREIKsppfLongest] = true;
  ARTSet57[ARTTS__SHREIKsppfPrint] = true;
  ARTSet57[ARTTS__SHREIKsppfPriority] = true;
  ARTSet57[ARTTS__SHREIKsppfShow] = true;
  ARTSet57[ARTTS__SHREIKsppfWrite] = true;
  ARTSet57[ARTTS__SHREIKstart] = true;
  ARTSet57[ARTTS__SHREIKstatistics] = true;
  ARTSet57[ARTTS__SHREIKstrategy] = true;
  ARTSet57[ARTTS__SHREIKsupport] = true;
  ARTSet57[ARTTS__SHREIKtermPrint] = true;
  ARTSet57[ARTTS__SHREIKtermShow] = true;
  ARTSet57[ARTTS__SHREIKtermTool] = true;
  ARTSet57[ARTTS__SHREIKtermWrite] = true;
  ARTSet57[ARTTS__SHREIKtrace] = true;
  ARTSet57[ARTTS__SHREIKtreePrint] = true;
  ARTSet57[ARTTS__SHREIKtreeShow] = true;
  ARTSet57[ARTTS__SHREIKtreeWrite] = true;
  ARTSet57[ARTTS__SHREIKtry] = true;
  ARTSet57[ARTTS__SHREIKtweDead] = true;
  ARTSet57[ARTTS__SHREIKtweExtents] = true;
  ARTSet57[ARTTS__SHREIKtweFromSPPF] = true;
  ARTSet57[ARTTS__SHREIKtweLexicalisations] = true;
  ARTSet57[ARTTS__SHREIKtweLongest] = true;
  ARTSet57[ARTTS__SHREIKtwePrint] = true;
  ARTSet57[ARTTS__SHREIKtwePrintFull] = true;
  ARTSet57[ARTTS__SHREIKtwePrintSummary] = true;
  ARTSet57[ARTTS__SHREIKtwePriority] = true;
  ARTSet57[ARTTS__SHREIKtweRecursive] = true;
  ARTSet57[ARTTS__SHREIKtweSegments] = true;
  ARTSet57[ARTTS__SHREIKtweShow] = true;
  ARTSet57[ARTTS__SHREIKtweTokenWrite] = true;
  ARTSet57[ARTTS__SHREIKtweWrite] = true;
  ARTSet57[ARTTS__SHREIKunicodeAsEscapeSeuences] = true;
  ARTSet57[ARTTS__SHREIKuse] = true;
  ARTSet57[ARTTS__SHREIKverbosity] = true;
  ARTSet57[ARTTS__SHREIKwhitespace] = true;
  ARTSet57[ARTTS__HASH] = true;
  ARTSet57[ARTTS__AMPERSAND] = true;
  ARTSet57[ARTTS__LPAR] = true;
  ARTSet57[ARTTS__RPAR] = true;
  ARTSet57[ARTTS__STAR] = true;
  ARTSet57[ARTTS__PLUS] = true;
  ARTSet57[ARTTS__COMMA] = true;
  ARTSet57[ARTTS__MINUS] = true;
  ARTSet57[ARTTS__MINUS_MINUS_MINUS] = true;
  ARTSet57[ARTTS__PERIOD] = true;
  ARTSet57[ARTTS__LT] = true;
  ARTSet57[ARTTS__EQUAL] = true;
  ARTSet57[ARTTS__QUERY] = true;
  ARTSet57[ARTTS__AT] = true;
  ARTSet57[ARTTS_False] = true;
  ARTSet57[ARTTS_True] = true;
  ARTSet57[ARTTS__BACKSLASH_BACKSLASH] = true;
  ARTSet57[ARTTS__UPARROW] = true;
  ARTSet57[ARTTS__UPARROW_PLUS] = true;
  ARTSet57[ARTTS__UPARROW_UPARROW] = true;
  ARTSet57[ARTTS__UPARROW_UPARROW_UPARROW] = true;
  ARTSet57[ARTTS__UPARROW_] = true;
  ARTSet57[ARTTS_anyBuiltinTerminal] = true;
  ARTSet57[ARTTS_anyCaseInsensitiveTerminal] = true;
  ARTSet57[ARTTS_anyCaseSensitiveTerminal] = true;
  ARTSet57[ARTTS_anyCharacterTerminal] = true;
  ARTSet57[ARTTS_anyLiteralTerminal] = true;
  ARTSet57[ARTTS_anyNonterminal] = true;
  ARTSet57[ARTTS_anyParaterminal] = true;
  ARTSet57[ARTTS_anyTerminal] = true;
  ARTSet57[ARTTS__BAR] = true;
  ARTSet57[ARTTS__BAR_BAR] = true;
  ARTSet57[ARTL_ART_CHAR_BQ] = true;
  ARTSet57[ARTL_ART_False] = true;
  ARTSet57[ARTL_ART_ID] = true;
  ARTSet57[ARTL_ART_ID_ATTRIBUTE] = true;
  ARTSet57[ARTL_ART_STRING_BRACE_NEST] = true;
  ARTSet57[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet57[ARTL_ART_STRING_DQ] = true;
  ARTSet57[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet57[ARTL_ART_True] = true;
  ARTSet57[ARTL_ART___bool] = true;
  ARTSet57[ARTL_ART___char] = true;
  ARTSet57[ARTL_ART___int32] = true;
  ARTSet57[ARTL_ART___real64] = true;
  ARTSet57[ARTL_ART___string] = true;
  ARTSet57[ARTL_ART_cfgAbbrev] = true;
  ARTSet57[ARTL_ART_cfgAtom] = true;
  ARTSet57[ARTL_ART_cfgAttributeEquation] = true;
  ARTSet57[ARTL_ART_cfgBuiltinTerminal] = true;
  ARTSet57[ARTL_ART_cfgCaseInsensitiveTerminal] = true;
  ARTSet57[ARTL_ART_cfgCaseSensitiveTerminal] = true;
  ARTSet57[ARTL_ART_cfgCatTail] = true;
  ARTSet57[ARTL_ART_cfgCharacterRangeTerminal] = true;
  ARTSet57[ARTL_ART_cfgCharacterTerminal] = true;
  ARTSet57[ARTL_ART_cfgDelay] = true;
  ARTSet57[ARTL_ART_cfgDiff] = true;
  ARTSet57[ARTL_ART_cfgDoFirst] = true;
  ARTSet57[ARTL_ART_cfgElement] = true;
  ARTSet57[ARTL_ART_cfgEpsilon] = true;
  ARTSet57[ARTL_ART_cfgFoldNone] = true;
  ARTSet57[ARTL_ART_cfgFoldOver] = true;
  ARTSet57[ARTL_ART_cfgFoldUnder] = true;
  ARTSet57[ARTL_ART_cfgGather] = true;
  ARTSet57[ARTL_ART_cfgGrammarAnnotations] = true;
  ARTSet57[ARTL_ART_cfgInsert] = true;
  ARTSet57[ARTL_ART_cfgIter] = true;
  ARTSet57[ARTL_ART_cfgKleeneClosure] = true;
  ARTSet57[ARTL_ART_cfgNativeAction] = true;
  ARTSet57[ARTL_ART_cfgNonterminal] = true;
  ARTSet57[ARTL_ART_cfgNot] = true;
  ARTSet57[ARTL_ART_cfgOptional] = true;
  ARTSet57[ARTL_ART_cfgPositiveClosure] = true;
  ARTSet57[ARTL_ART_cfgRule] = true;
  ARTSet57[ARTL_ART_cfgSlot] = true;
  ARTSet57[ARTL_ART_cfgSlotSymbol] = true;
  ARTSet57[ARTL_ART_cfgUnion] = true;
  ARTSet57[ARTL_ART_chooseDiff] = true;
  ARTSet57[ARTL_ART_chooseElement] = true;
  ARTSet57[ARTL_ART_choosePredefinedSet] = true;
  ARTSet57[ARTL_ART_chooseRule] = true;
  ARTSet57[ARTL_ART_chooseUnionIntersection] = true;
  ARTSet57[ARTL_ART_directive] = true;
  ARTSet57[ARTL_ART_text] = true;
  ARTSet57[ARTL_ART_textElement] = true;
  ARTSet57[ARTL_ART_tr] = true;
  ARTSet57[ARTL_ART_trConfiguration] = true;
  ARTSet57[ARTL_ART_trLabel] = true;
  ARTSet57[ARTL_ART_trMatch] = true;
  ARTSet57[ARTL_ART_trPremises] = true;
  ARTSet57[ARTL_ART_trPrimaryTerm] = true;
  ARTSet57[ARTL_ART_trRule] = true;
  ARTSet57[ARTL_ART_trTerm] = true;
  ARTSet57[ARTL_ART_trTransition] = true;
}

public void ARTSet153initialise() {
  ARTSet153 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet153, 0, artSetExtent, false);
  ARTSet153[ARTTS__LT] = true;
  ARTSet153[ARTTS__LT_LT] = true;
  ARTSet153[ARTTS__GT] = true;
  ARTSet153[ARTTS__GT_GT] = true;
  ARTSet153[ARTL_ART_chooseHigher] = true;
  ARTSet153[ARTL_ART_chooseLonger] = true;
  ARTSet153[ARTL_ART_chooseLower] = true;
  ARTSet153[ARTL_ART_chooseShorter] = true;
}

public void ARTSet307initialise() {
  ARTSet307 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet307, 0, artSetExtent, false);
  ARTSet307[ARTTS__COMMA] = true;
  ARTSet307[ARTL_ART_trEntityReferences] = true;
}

public void ARTSet308initialise() {
  ARTSet308 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet308, 0, artSetExtent, false);
  ARTSet308[ARTTS__COMMA] = true;
  ARTSet308[ARTTS__GT] = true;
  ARTSet308[ARTL_ART_trEntityReferences] = true;
}

public void ARTSet11initialise() {
  ARTSet11 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet11, 0, artSetExtent, false);
  ARTSet11[ARTX_EOS] = true;
  ARTSet11[ARTTB_CHAR_BQ] = true;
  ARTSet11[ARTTB_ID] = true;
  ARTSet11[ARTTB_SIGNED_INTEGER] = true;
  ARTSet11[ARTTB_SIGNED_REAL] = true;
  ARTSet11[ARTTB_STRING_DOLLAR] = true;
  ARTSet11[ARTTB_STRING_DQ] = true;
  ARTSet11[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet11[ARTTB_STRING_SQ] = true;
  ARTSet11[ARTTS__SHREIKGLLFIFODescriptors] = true;
  ARTSet11[ARTTS__SHREIKGLLPredictivePops] = true;
  ARTSet11[ARTTS__SHREIKGLLSuppressPopGuard] = true;
  ARTSet11[ARTTS__SHREIKGLLSuppressProductionGuard] = true;
  ARTSet11[ARTTS__SHREIKGLLSuppressSemantics] = true;
  ARTSet11[ARTTS__SHREIKGLLSuppressTestRepeat] = true;
  ARTSet11[ARTTS__SHREIKabsorb] = true;
  ARTSet11[ARTTS__SHREIKalphabet] = true;
  ARTSet11[ARTTS__SHREIKcfgElements] = true;
  ARTSet11[ARTTS__SHREIKcnp] = true;
  ARTSet11[ARTTS__SHREIKcnpGeneratorPool] = true;
  ARTSet11[ARTTS__SHREIKcnpIndexedAPI] = true;
  ARTSet11[ARTTS__SHREIKcnpIndexedPool] = true;
  ARTSet11[ARTTS__SHREIKcnpLinkedAPI] = true;
  ARTSet11[ARTTS__SHREIKcompressWhitespaceJava] = true;
  ARTSet11[ARTTS__SHREIKearley] = true;
  ARTSet11[ARTTS__SHREIKearley2007LinkedAPI] = true;
  ARTSet11[ARTTS__SHREIKearleyIndexedAPI] = true;
  ARTSet11[ARTTS__SHREIKearleyIndexedData] = true;
  ARTSet11[ARTTS__SHREIKearleyIndexedPool] = true;
  ARTSet11[ARTTS__SHREIKearleyLinkedAPI] = true;
  ARTSet11[ARTTS__SHREIKearleyTable] = true;
  ARTSet11[ARTTS__SHREIKearleyTableIndexedAPI] = true;
  ARTSet11[ARTTS__SHREIKearleyTableIndexedData] = true;
  ARTSet11[ARTTS__SHREIKearleyTableIndexedPool] = true;
  ARTSet11[ARTTS__SHREIKearleyTableLinkedAPI] = true;
  ARTSet11[ARTTS__SHREIKextractJLS] = true;
  ARTSet11[ARTTS__SHREIKgenerateC_PLUS_PLUS] = true;
  ARTSet11[ARTTS__SHREIKgenerateDynamic] = true;
  ARTSet11[ARTTS__SHREIKgenerateFragment] = true;
  ARTSet11[ARTTS__SHREIKgenerateJava] = true;
  ARTSet11[ARTTS__SHREIKgenerateML] = true;
  ARTSet11[ARTTS__SHREIKgeneratePool] = true;
  ARTSet11[ARTTS__SHREIKgenerateState] = true;
  ARTSet11[ARTTS__SHREIKgenerateStatic] = true;
  ARTSet11[ARTTS__SHREIKgll] = true;
  ARTSet11[ARTTS__SHREIKgllClusteredGeneratorPool] = true;
  ARTSet11[ARTTS__SHREIKgllGeneratorPool] = true;
  ARTSet11[ARTTS__SHREIKgllTWEGeneratorPool] = true;
  ARTSet11[ARTTS__SHREIKgrammarWrite] = true;
  ARTSet11[ARTTS__SHREIKgssPrint] = true;
  ARTSet11[ARTTS__SHREIKgssShow] = true;
  ARTSet11[ARTTS__SHREIKgssWrite] = true;
  ARTSet11[ARTTS__SHREIKinjectInstance] = true;
  ARTSet11[ARTTS__SHREIKinjectProduction] = true;
  ARTSet11[ARTTS__SHREIKinput] = true;
  ARTSet11[ARTTS__SHREIKinputPrint] = true;
  ARTSet11[ARTTS__SHREIKlatex] = true;
  ARTSet11[ARTTS__SHREIKlcnp] = true;
  ARTSet11[ARTTS__SHREIKlcnpGeneratorPool] = true;
  ARTSet11[ARTTS__SHREIKlcnpIndexedAPI] = true;
  ARTSet11[ARTTS__SHREIKlcnpIndexedPool] = true;
  ARTSet11[ARTTS__SHREIKlcnpLinkedAPI] = true;
  ARTSet11[ARTTS__SHREIKlexDFA] = true;
  ARTSet11[ARTTS__SHREIKlexGLL] = true;
  ARTSet11[ARTTS__SHREIKlexHardCoded] = true;
  ARTSet11[ARTTS__SHREIKlexWSSuffix] = true;
  ARTSet11[ARTTS__SHREIKlexerData] = true;
  ARTSet11[ARTTS__SHREIKlexerName] = true;
  ARTSet11[ARTTS__SHREIKmain] = true;
  ARTSet11[ARTTS__SHREIKmerge] = true;
  ARTSet11[ARTTS__SHREIKmgll] = true;
  ARTSet11[ARTTS__SHREIKmgllGeneratorPool] = true;
  ARTSet11[ARTTS__SHREIKmodule] = true;
  ARTSet11[ARTTS__SHREIKnamespace] = true;
  ARTSet11[ARTTS__SHREIKosbrd] = true;
  ARTSet11[ARTTS__SHREIKosbrdGenerator] = true;
  ARTSet11[ARTTS__SHREIKoutputDirectory] = true;
  ARTSet11[ARTTS__SHREIKparaterminal] = true;
  ARTSet11[ARTTS__SHREIKparseCountsPrint] = true;
  ARTSet11[ARTTS__SHREIKparserName] = true;
  ARTSet11[ARTTS__SHREIKprelude] = true;
  ARTSet11[ARTTS__SHREIKrelation] = true;
  ARTSet11[ARTTS__SHREIKresult] = true;
  ARTSet11[ARTTS__SHREIKsml97Parser] = true;
  ARTSet11[ARTTS__SHREIKsppfLongest] = true;
  ARTSet11[ARTTS__SHREIKsppfPrint] = true;
  ARTSet11[ARTTS__SHREIKsppfPriority] = true;
  ARTSet11[ARTTS__SHREIKsppfShow] = true;
  ARTSet11[ARTTS__SHREIKsppfWrite] = true;
  ARTSet11[ARTTS__SHREIKstart] = true;
  ARTSet11[ARTTS__SHREIKstatistics] = true;
  ARTSet11[ARTTS__SHREIKstrategy] = true;
  ARTSet11[ARTTS__SHREIKsupport] = true;
  ARTSet11[ARTTS__SHREIKtermPrint] = true;
  ARTSet11[ARTTS__SHREIKtermShow] = true;
  ARTSet11[ARTTS__SHREIKtermTool] = true;
  ARTSet11[ARTTS__SHREIKtermWrite] = true;
  ARTSet11[ARTTS__SHREIKtrace] = true;
  ARTSet11[ARTTS__SHREIKtreePrint] = true;
  ARTSet11[ARTTS__SHREIKtreeShow] = true;
  ARTSet11[ARTTS__SHREIKtreeWrite] = true;
  ARTSet11[ARTTS__SHREIKtry] = true;
  ARTSet11[ARTTS__SHREIKtweDead] = true;
  ARTSet11[ARTTS__SHREIKtweExtents] = true;
  ARTSet11[ARTTS__SHREIKtweFromSPPF] = true;
  ARTSet11[ARTTS__SHREIKtweLexicalisations] = true;
  ARTSet11[ARTTS__SHREIKtweLongest] = true;
  ARTSet11[ARTTS__SHREIKtwePrint] = true;
  ARTSet11[ARTTS__SHREIKtwePrintFull] = true;
  ARTSet11[ARTTS__SHREIKtwePrintSummary] = true;
  ARTSet11[ARTTS__SHREIKtwePriority] = true;
  ARTSet11[ARTTS__SHREIKtweRecursive] = true;
  ARTSet11[ARTTS__SHREIKtweSegments] = true;
  ARTSet11[ARTTS__SHREIKtweShow] = true;
  ARTSet11[ARTTS__SHREIKtweTokenWrite] = true;
  ARTSet11[ARTTS__SHREIKtweWrite] = true;
  ARTSet11[ARTTS__SHREIKunicodeAsEscapeSeuences] = true;
  ARTSet11[ARTTS__SHREIKuse] = true;
  ARTSet11[ARTTS__SHREIKverbosity] = true;
  ARTSet11[ARTTS__SHREIKwhitespace] = true;
  ARTSet11[ARTTS__HASH] = true;
  ARTSet11[ARTTS__AMPERSAND] = true;
  ARTSet11[ARTTS__LPAR] = true;
  ARTSet11[ARTTS__RPAR] = true;
  ARTSet11[ARTTS__MINUS] = true;
  ARTSet11[ARTTS__MINUS_MINUS_MINUS] = true;
  ARTSet11[ARTTS__PERIOD] = true;
  ARTSet11[ARTTS__LT] = true;
  ARTSet11[ARTTS_False] = true;
  ARTSet11[ARTTS_True] = true;
  ARTSet11[ARTTS__BACKSLASH_BACKSLASH] = true;
  ARTSet11[ARTTS_anyBuiltinTerminal] = true;
  ARTSet11[ARTTS_anyCaseInsensitiveTerminal] = true;
  ARTSet11[ARTTS_anyCaseSensitiveTerminal] = true;
  ARTSet11[ARTTS_anyCharacterTerminal] = true;
  ARTSet11[ARTTS_anyLiteralTerminal] = true;
  ARTSet11[ARTTS_anyNonterminal] = true;
  ARTSet11[ARTTS_anyParaterminal] = true;
  ARTSet11[ARTTS_anyTerminal] = true;
  ARTSet11[ARTTS__BAR] = true;
  ARTSet11[ARTL_ART_CHAR_BQ] = true;
  ARTSet11[ARTL_ART_False] = true;
  ARTSet11[ARTL_ART_ID] = true;
  ARTSet11[ARTL_ART_ID_ATTRIBUTE] = true;
  ARTSet11[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet11[ARTL_ART_STRING_DQ] = true;
  ARTSet11[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet11[ARTL_ART_True] = true;
  ARTSet11[ARTL_ART___bool] = true;
  ARTSet11[ARTL_ART___char] = true;
  ARTSet11[ARTL_ART___int32] = true;
  ARTSet11[ARTL_ART___real64] = true;
  ARTSet11[ARTL_ART___string] = true;
  ARTSet11[ARTL_ART_cfgAbbrev] = true;
  ARTSet11[ARTL_ART_cfgAtom] = true;
  ARTSet11[ARTL_ART_cfgBuiltinTerminal] = true;
  ARTSet11[ARTL_ART_cfgCaseInsensitiveTerminal] = true;
  ARTSet11[ARTL_ART_cfgCaseSensitiveTerminal] = true;
  ARTSet11[ARTL_ART_cfgCatTail] = true;
  ARTSet11[ARTL_ART_cfgCharacterRangeTerminal] = true;
  ARTSet11[ARTL_ART_cfgCharacterTerminal] = true;
  ARTSet11[ARTL_ART_cfgDiff] = true;
  ARTSet11[ARTL_ART_cfgDoFirst] = true;
  ARTSet11[ARTL_ART_cfgElement] = true;
  ARTSet11[ARTL_ART_cfgEpsilon] = true;
  ARTSet11[ARTL_ART_cfgIter] = true;
  ARTSet11[ARTL_ART_cfgNonterminal] = true;
  ARTSet11[ARTL_ART_cfgNot] = true;
  ARTSet11[ARTL_ART_cfgRule] = true;
  ARTSet11[ARTL_ART_cfgSlotSymbol] = true;
  ARTSet11[ARTL_ART_cfgUnion] = true;
  ARTSet11[ARTL_ART_chooseDiff] = true;
  ARTSet11[ARTL_ART_chooseElement] = true;
  ARTSet11[ARTL_ART_choosePredefinedSet] = true;
  ARTSet11[ARTL_ART_chooseRule] = true;
  ARTSet11[ARTL_ART_chooseUnionIntersection] = true;
  ARTSet11[ARTL_ART_directive] = true;
  ARTSet11[ARTL_ART_text] = true;
  ARTSet11[ARTL_ART_textElement] = true;
  ARTSet11[ARTL_ART_tr] = true;
  ARTSet11[ARTL_ART_trConfiguration] = true;
  ARTSet11[ARTL_ART_trLabel] = true;
  ARTSet11[ARTL_ART_trMatch] = true;
  ARTSet11[ARTL_ART_trPremises] = true;
  ARTSet11[ARTL_ART_trPrimaryTerm] = true;
  ARTSet11[ARTL_ART_trRule] = true;
  ARTSet11[ARTL_ART_trTerm] = true;
  ARTSet11[ARTL_ART_trTransition] = true;
}

public void ARTSet257initialise() {
  ARTSet257 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet257, 0, artSetExtent, false);
  ARTSet257[ARTTS__SHREIKlcnpIndexedAPI] = true;
}

public void ARTSet298initialise() {
  ARTSet298 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet298, 0, artSetExtent, false);
  ARTSet298[ARTTB_CHAR_BQ] = true;
  ARTSet298[ARTTB_ID] = true;
  ARTSet298[ARTTB_SIGNED_INTEGER] = true;
  ARTSet298[ARTTB_SIGNED_REAL] = true;
  ARTSet298[ARTTB_STRING_DQ] = true;
  ARTSet298[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet298[ARTTB_STRING_SQ] = true;
  ARTSet298[ARTTS__MINUS_MINUS_MINUS] = true;
  ARTSet298[ARTTS__LT] = true;
  ARTSet298[ARTTS_False] = true;
  ARTSet298[ARTTS_True] = true;
  ARTSet298[ARTL_ART_False] = true;
  ARTSet298[ARTL_ART_ID] = true;
  ARTSet298[ARTL_ART_ID_ATTRIBUTE] = true;
  ARTSet298[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet298[ARTL_ART_True] = true;
  ARTSet298[ARTL_ART___bool] = true;
  ARTSet298[ARTL_ART___char] = true;
  ARTSet298[ARTL_ART___int32] = true;
  ARTSet298[ARTL_ART___real64] = true;
  ARTSet298[ARTL_ART___string] = true;
  ARTSet298[ARTL_ART_trConfiguration] = true;
  ARTSet298[ARTL_ART_trMatch] = true;
  ARTSet298[ARTL_ART_trPremises] = true;
  ARTSet298[ARTL_ART_trPrimaryTerm] = true;
  ARTSet298[ARTL_ART_trTerm] = true;
  ARTSet298[ARTL_ART_trTransition] = true;
}

public void ARTSet22initialise() {
  ARTSet22 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet22, 0, artSetExtent, false);
  ARTSet22[ARTTS__MINUS_GT_STAR] = true;
}

public void ARTSet245initialise() {
  ARTSet245 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet245, 0, artSetExtent, false);
  ARTSet245[ARTTS__SHREIKearleyTable] = true;
}

public void ARTSet331initialise() {
  ARTSet331 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet331, 0, artSetExtent, false);
  ARTSet331[ARTTB_CHAR_BQ] = true;
  ARTSet331[ARTTB_ID] = true;
  ARTSet331[ARTTB_SIGNED_INTEGER] = true;
  ARTSet331[ARTTB_SIGNED_REAL] = true;
  ARTSet331[ARTTB_STRING_DQ] = true;
  ARTSet331[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet331[ARTTB_STRING_SQ] = true;
  ARTSet331[ARTTS_False] = true;
  ARTSet331[ARTTS_True] = true;
  ARTSet331[ARTL_ART_False] = true;
  ARTSet331[ARTL_ART_ID] = true;
  ARTSet331[ARTL_ART_ID_ATTRIBUTE] = true;
  ARTSet331[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet331[ARTL_ART_True] = true;
  ARTSet331[ARTL_ART___bool] = true;
  ARTSet331[ARTL_ART___char] = true;
  ARTSet331[ARTL_ART___int32] = true;
  ARTSet331[ARTL_ART___real64] = true;
  ARTSet331[ARTL_ART___string] = true;
  ARTSet331[ARTL_ART_trSubterms] = true;
  ARTSet331[ARTL_ART_trTerm] = true;
}

public void ARTSet55initialise() {
  ARTSet55 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet55, 0, artSetExtent, false);
  ARTSet55[ARTTB_CHAR_BQ] = true;
  ARTSet55[ARTTB_ID] = true;
  ARTSet55[ARTTB_STRING_BRACE_NEST] = true;
  ARTSet55[ARTTB_STRING_DOLLAR] = true;
  ARTSet55[ARTTB_STRING_DQ] = true;
  ARTSet55[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet55[ARTTS__HASH] = true;
  ARTSet55[ARTTS__AMPERSAND] = true;
  ARTSet55[ARTTS__LPAR] = true;
  ARTSet55[ARTTS__PERIOD] = true;
  ARTSet55[ARTTS__BACKSLASH_BACKSLASH] = true;
  ARTSet55[ARTL_ART_CHAR_BQ] = true;
  ARTSet55[ARTL_ART_ID] = true;
  ARTSet55[ARTL_ART_ID_ATTRIBUTE] = true;
  ARTSet55[ARTL_ART_STRING_BRACE_NEST] = true;
  ARTSet55[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet55[ARTL_ART_STRING_DQ] = true;
  ARTSet55[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet55[ARTL_ART_cfgAbbrev] = true;
  ARTSet55[ARTL_ART_cfgAlt1] = true;
  ARTSet55[ARTL_ART_cfgAtom] = true;
  ARTSet55[ARTL_ART_cfgAttributeEquation] = true;
  ARTSet55[ARTL_ART_cfgBuiltinTerminal] = true;
  ARTSet55[ARTL_ART_cfgCaseInsensitiveTerminal] = true;
  ARTSet55[ARTL_ART_cfgCaseSensitiveTerminal] = true;
  ARTSet55[ARTL_ART_cfgCat] = true;
  ARTSet55[ARTL_ART_cfgCatTail] = true;
  ARTSet55[ARTL_ART_cfgCharacterRangeTerminal] = true;
  ARTSet55[ARTL_ART_cfgCharacterTerminal] = true;
  ARTSet55[ARTL_ART_cfgDiff] = true;
  ARTSet55[ARTL_ART_cfgDoFirst] = true;
  ARTSet55[ARTL_ART_cfgElement] = true;
  ARTSet55[ARTL_ART_cfgEpsilon] = true;
  ARTSet55[ARTL_ART_cfgIter] = true;
  ARTSet55[ARTL_ART_cfgNativeAction] = true;
  ARTSet55[ARTL_ART_cfgNonterminal] = true;
  ARTSet55[ARTL_ART_cfgNot] = true;
  ARTSet55[ARTL_ART_cfgSlot] = true;
  ARTSet55[ARTL_ART_cfgSlotSymbol] = true;
  ARTSet55[ARTL_ART_cfgUnion] = true;
}

public void ARTSet114initialise() {
  ARTSet114 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet114, 0, artSetExtent, false);
  ARTSet114[ARTTB_ID] = true;
  ARTSet114[ARTTB_STRING_DOLLAR] = true;
  ARTSet114[ARTL_ART_ID] = true;
  ARTSet114[ARTL_ART_STRING_DOLLAR] = true;
}

public void ARTSet228initialise() {
  ARTSet228 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet228, 0, artSetExtent, false);
  ARTSet228[ARTTS__SHREIKgenerateJava] = true;
}

public void ARTSet101initialise() {
  ARTSet101 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet101, 0, artSetExtent, false);
  ARTSet101[ARTTS__UPARROW_UPARROW_UPARROW] = true;
}

public void ARTSet262initialise() {
  ARTSet262 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet262, 0, artSetExtent, false);
  ARTSet262[ARTTS__SHREIKgllTWEGeneratorPool] = true;
}

public void ARTSet78initialise() {
  ARTSet78 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet78, 0, artSetExtent, false);
  ARTSet78[ARTTB_CHAR_BQ] = true;
  ARTSet78[ARTTB_ID] = true;
  ARTSet78[ARTTB_STRING_DOLLAR] = true;
  ARTSet78[ARTTB_STRING_DQ] = true;
  ARTSet78[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet78[ARTTS__HASH] = true;
  ARTSet78[ARTTS__AMPERSAND] = true;
  ARTSet78[ARTTS__LPAR] = true;
  ARTSet78[ARTTS__PERIOD] = true;
  ARTSet78[ARTTS__BACKSLASH_BACKSLASH] = true;
  ARTSet78[ARTL_ART_CHAR_BQ] = true;
  ARTSet78[ARTL_ART_ID] = true;
  ARTSet78[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet78[ARTL_ART_STRING_DQ] = true;
  ARTSet78[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet78[ARTL_ART_cfgAbbrev] = true;
  ARTSet78[ARTL_ART_cfgAtom] = true;
  ARTSet78[ARTL_ART_cfgBuiltinTerminal] = true;
  ARTSet78[ARTL_ART_cfgCaseInsensitiveTerminal] = true;
  ARTSet78[ARTL_ART_cfgCaseSensitiveTerminal] = true;
  ARTSet78[ARTL_ART_cfgCatTail] = true;
  ARTSet78[ARTL_ART_cfgCharacterRangeTerminal] = true;
  ARTSet78[ARTL_ART_cfgCharacterTerminal] = true;
  ARTSet78[ARTL_ART_cfgDiff] = true;
  ARTSet78[ARTL_ART_cfgDoFirst] = true;
  ARTSet78[ARTL_ART_cfgElement] = true;
  ARTSet78[ARTL_ART_cfgEpsilon] = true;
  ARTSet78[ARTL_ART_cfgIter] = true;
  ARTSet78[ARTL_ART_cfgNonterminal] = true;
  ARTSet78[ARTL_ART_cfgNot] = true;
  ARTSet78[ARTL_ART_cfgSlotSymbol] = true;
  ARTSet78[ARTL_ART_cfgUnion] = true;
}

public void ARTSet107initialise() {
  ARTSet107 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet107, 0, artSetExtent, false);
  ARTSet107[ARTTS__UPARROW_UPARROW_UPARROW] = true;
  ARTSet107[ARTL_ART_cfgGather] = true;
}

public void ARTSet227initialise() {
  ARTSet227 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet227, 0, artSetExtent, false);
  ARTSet227[ARTTS__SHREIKgeneratePool] = true;
}

public void ARTSet127initialise() {
  ARTSet127 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet127, 0, artSetExtent, false);
  ARTSet127[ARTTB_CHAR_BQ] = true;
  ARTSet127[ARTTB_ID] = true;
  ARTSet127[ARTTB_STRING_DOLLAR] = true;
  ARTSet127[ARTTB_STRING_DQ] = true;
  ARTSet127[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet127[ARTTS__HASH] = true;
  ARTSet127[ARTTS__AMPERSAND] = true;
  ARTSet127[ARTTS__LPAR] = true;
  ARTSet127[ARTTS__PERIOD] = true;
  ARTSet127[ARTTS__BACKSLASH_BACKSLASH] = true;
  ARTSet127[ARTL_ART_CHAR_BQ] = true;
  ARTSet127[ARTL_ART_ID] = true;
  ARTSet127[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet127[ARTL_ART_STRING_DQ] = true;
  ARTSet127[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet127[ARTL_ART_cfgAtom] = true;
  ARTSet127[ARTL_ART_cfgBuiltinTerminal] = true;
  ARTSet127[ARTL_ART_cfgCaseInsensitiveTerminal] = true;
  ARTSet127[ARTL_ART_cfgCaseSensitiveTerminal] = true;
  ARTSet127[ARTL_ART_cfgCharacterRangeTerminal] = true;
  ARTSet127[ARTL_ART_cfgCharacterTerminal] = true;
  ARTSet127[ARTL_ART_cfgDoFirst] = true;
  ARTSet127[ARTL_ART_cfgElement] = true;
  ARTSet127[ARTL_ART_cfgEpsilon] = true;
  ARTSet127[ARTL_ART_cfgNonterminal] = true;
  ARTSet127[ARTL_ART_cfgNot] = true;
  ARTSet127[ARTL_ART_cfgSlotSymbol] = true;
}

public void ARTSet231initialise() {
  ARTSet231 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet231, 0, artSetExtent, false);
  ARTSet231[ARTTS__SHREIKprelude] = true;
}

public void ARTSet25initialise() {
  ARTSet25 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet25, 0, artSetExtent, false);
  ARTSet25[ARTTS__EQUAL_GT_STAR] = true;
}

public void ARTSet319initialise() {
  ARTSet319 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet319, 0, artSetExtent, false);
  ARTSet319[ARTX_EOS] = true;
  ARTSet319[ARTTB_CHAR_BQ] = true;
  ARTSet319[ARTTB_ID] = true;
  ARTSet319[ARTTB_SIGNED_INTEGER] = true;
  ARTSet319[ARTTB_SIGNED_REAL] = true;
  ARTSet319[ARTTB_STRING_DOLLAR] = true;
  ARTSet319[ARTTB_STRING_DQ] = true;
  ARTSet319[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet319[ARTTB_STRING_SQ] = true;
  ARTSet319[ARTTS__SHREIKGLLFIFODescriptors] = true;
  ARTSet319[ARTTS__SHREIKGLLPredictivePops] = true;
  ARTSet319[ARTTS__SHREIKGLLSuppressPopGuard] = true;
  ARTSet319[ARTTS__SHREIKGLLSuppressProductionGuard] = true;
  ARTSet319[ARTTS__SHREIKGLLSuppressSemantics] = true;
  ARTSet319[ARTTS__SHREIKGLLSuppressTestRepeat] = true;
  ARTSet319[ARTTS__SHREIKabsorb] = true;
  ARTSet319[ARTTS__SHREIKalphabet] = true;
  ARTSet319[ARTTS__SHREIKcfgElements] = true;
  ARTSet319[ARTTS__SHREIKcnp] = true;
  ARTSet319[ARTTS__SHREIKcnpGeneratorPool] = true;
  ARTSet319[ARTTS__SHREIKcnpIndexedAPI] = true;
  ARTSet319[ARTTS__SHREIKcnpIndexedPool] = true;
  ARTSet319[ARTTS__SHREIKcnpLinkedAPI] = true;
  ARTSet319[ARTTS__SHREIKcompressWhitespaceJava] = true;
  ARTSet319[ARTTS__SHREIKearley] = true;
  ARTSet319[ARTTS__SHREIKearley2007LinkedAPI] = true;
  ARTSet319[ARTTS__SHREIKearleyIndexedAPI] = true;
  ARTSet319[ARTTS__SHREIKearleyIndexedData] = true;
  ARTSet319[ARTTS__SHREIKearleyIndexedPool] = true;
  ARTSet319[ARTTS__SHREIKearleyLinkedAPI] = true;
  ARTSet319[ARTTS__SHREIKearleyTable] = true;
  ARTSet319[ARTTS__SHREIKearleyTableIndexedAPI] = true;
  ARTSet319[ARTTS__SHREIKearleyTableIndexedData] = true;
  ARTSet319[ARTTS__SHREIKearleyTableIndexedPool] = true;
  ARTSet319[ARTTS__SHREIKearleyTableLinkedAPI] = true;
  ARTSet319[ARTTS__SHREIKextractJLS] = true;
  ARTSet319[ARTTS__SHREIKgenerateC_PLUS_PLUS] = true;
  ARTSet319[ARTTS__SHREIKgenerateDynamic] = true;
  ARTSet319[ARTTS__SHREIKgenerateFragment] = true;
  ARTSet319[ARTTS__SHREIKgenerateJava] = true;
  ARTSet319[ARTTS__SHREIKgenerateML] = true;
  ARTSet319[ARTTS__SHREIKgeneratePool] = true;
  ARTSet319[ARTTS__SHREIKgenerateState] = true;
  ARTSet319[ARTTS__SHREIKgenerateStatic] = true;
  ARTSet319[ARTTS__SHREIKgll] = true;
  ARTSet319[ARTTS__SHREIKgllClusteredGeneratorPool] = true;
  ARTSet319[ARTTS__SHREIKgllGeneratorPool] = true;
  ARTSet319[ARTTS__SHREIKgllTWEGeneratorPool] = true;
  ARTSet319[ARTTS__SHREIKgrammarWrite] = true;
  ARTSet319[ARTTS__SHREIKgssPrint] = true;
  ARTSet319[ARTTS__SHREIKgssShow] = true;
  ARTSet319[ARTTS__SHREIKgssWrite] = true;
  ARTSet319[ARTTS__SHREIKinjectInstance] = true;
  ARTSet319[ARTTS__SHREIKinjectProduction] = true;
  ARTSet319[ARTTS__SHREIKinput] = true;
  ARTSet319[ARTTS__SHREIKinputPrint] = true;
  ARTSet319[ARTTS__SHREIKlatex] = true;
  ARTSet319[ARTTS__SHREIKlcnp] = true;
  ARTSet319[ARTTS__SHREIKlcnpGeneratorPool] = true;
  ARTSet319[ARTTS__SHREIKlcnpIndexedAPI] = true;
  ARTSet319[ARTTS__SHREIKlcnpIndexedPool] = true;
  ARTSet319[ARTTS__SHREIKlcnpLinkedAPI] = true;
  ARTSet319[ARTTS__SHREIKlexDFA] = true;
  ARTSet319[ARTTS__SHREIKlexGLL] = true;
  ARTSet319[ARTTS__SHREIKlexHardCoded] = true;
  ARTSet319[ARTTS__SHREIKlexWSSuffix] = true;
  ARTSet319[ARTTS__SHREIKlexerData] = true;
  ARTSet319[ARTTS__SHREIKlexerName] = true;
  ARTSet319[ARTTS__SHREIKmain] = true;
  ARTSet319[ARTTS__SHREIKmerge] = true;
  ARTSet319[ARTTS__SHREIKmgll] = true;
  ARTSet319[ARTTS__SHREIKmgllGeneratorPool] = true;
  ARTSet319[ARTTS__SHREIKmodule] = true;
  ARTSet319[ARTTS__SHREIKnamespace] = true;
  ARTSet319[ARTTS__SHREIKosbrd] = true;
  ARTSet319[ARTTS__SHREIKosbrdGenerator] = true;
  ARTSet319[ARTTS__SHREIKoutputDirectory] = true;
  ARTSet319[ARTTS__SHREIKparaterminal] = true;
  ARTSet319[ARTTS__SHREIKparseCountsPrint] = true;
  ARTSet319[ARTTS__SHREIKparserName] = true;
  ARTSet319[ARTTS__SHREIKprelude] = true;
  ARTSet319[ARTTS__SHREIKrelation] = true;
  ARTSet319[ARTTS__SHREIKresult] = true;
  ARTSet319[ARTTS__SHREIKsml97Parser] = true;
  ARTSet319[ARTTS__SHREIKsppfLongest] = true;
  ARTSet319[ARTTS__SHREIKsppfPrint] = true;
  ARTSet319[ARTTS__SHREIKsppfPriority] = true;
  ARTSet319[ARTTS__SHREIKsppfShow] = true;
  ARTSet319[ARTTS__SHREIKsppfWrite] = true;
  ARTSet319[ARTTS__SHREIKstart] = true;
  ARTSet319[ARTTS__SHREIKstatistics] = true;
  ARTSet319[ARTTS__SHREIKstrategy] = true;
  ARTSet319[ARTTS__SHREIKsupport] = true;
  ARTSet319[ARTTS__SHREIKtermPrint] = true;
  ARTSet319[ARTTS__SHREIKtermShow] = true;
  ARTSet319[ARTTS__SHREIKtermTool] = true;
  ARTSet319[ARTTS__SHREIKtermWrite] = true;
  ARTSet319[ARTTS__SHREIKtrace] = true;
  ARTSet319[ARTTS__SHREIKtreePrint] = true;
  ARTSet319[ARTTS__SHREIKtreeShow] = true;
  ARTSet319[ARTTS__SHREIKtreeWrite] = true;
  ARTSet319[ARTTS__SHREIKtry] = true;
  ARTSet319[ARTTS__SHREIKtweDead] = true;
  ARTSet319[ARTTS__SHREIKtweExtents] = true;
  ARTSet319[ARTTS__SHREIKtweFromSPPF] = true;
  ARTSet319[ARTTS__SHREIKtweLexicalisations] = true;
  ARTSet319[ARTTS__SHREIKtweLongest] = true;
  ARTSet319[ARTTS__SHREIKtwePrint] = true;
  ARTSet319[ARTTS__SHREIKtwePrintFull] = true;
  ARTSet319[ARTTS__SHREIKtwePrintSummary] = true;
  ARTSet319[ARTTS__SHREIKtwePriority] = true;
  ARTSet319[ARTTS__SHREIKtweRecursive] = true;
  ARTSet319[ARTTS__SHREIKtweSegments] = true;
  ARTSet319[ARTTS__SHREIKtweShow] = true;
  ARTSet319[ARTTS__SHREIKtweTokenWrite] = true;
  ARTSet319[ARTTS__SHREIKtweWrite] = true;
  ARTSet319[ARTTS__SHREIKunicodeAsEscapeSeuences] = true;
  ARTSet319[ARTTS__SHREIKuse] = true;
  ARTSet319[ARTTS__SHREIKverbosity] = true;
  ARTSet319[ARTTS__SHREIKwhitespace] = true;
  ARTSet319[ARTTS__AMPERSAND] = true;
  ARTSet319[ARTTS__LPAR] = true;
  ARTSet319[ARTTS__MINUS] = true;
  ARTSet319[ARTTS__MINUS_MINUS_MINUS] = true;
  ARTSet319[ARTTS__MINUS_SLASH] = true;
  ARTSet319[ARTTS__MINUS_SLASH_STAR] = true;
  ARTSet319[ARTTS__MINUS_SLASH_GT] = true;
  ARTSet319[ARTTS__MINUS_GT] = true;
  ARTSet319[ARTTS__MINUS_GT_STAR] = true;
  ARTSet319[ARTTS__MINUS_GT_GT] = true;
  ARTSet319[ARTTS__MINUS_BACKSLASH] = true;
  ARTSet319[ARTTS__MINUS_BACKSLASH_STAR] = true;
  ARTSet319[ARTTS__MINUS_BACKSLASH_GT] = true;
  ARTSet319[ARTTS__LT] = true;
  ARTSet319[ARTTS__EQUAL] = true;
  ARTSet319[ARTTS__EQUAL_GT] = true;
  ARTSet319[ARTTS__EQUAL_GT_STAR] = true;
  ARTSet319[ARTTS__EQUAL_GT_GT] = true;
  ARTSet319[ARTTS__GT] = true;
  ARTSet319[ARTTS_False] = true;
  ARTSet319[ARTTS_True] = true;
  ARTSet319[ARTTS_anyBuiltinTerminal] = true;
  ARTSet319[ARTTS_anyCaseInsensitiveTerminal] = true;
  ARTSet319[ARTTS_anyCaseSensitiveTerminal] = true;
  ARTSet319[ARTTS_anyCharacterTerminal] = true;
  ARTSet319[ARTTS_anyLiteralTerminal] = true;
  ARTSet319[ARTTS_anyNonterminal] = true;
  ARTSet319[ARTTS_anyParaterminal] = true;
  ARTSet319[ARTTS_anyTerminal] = true;
  ARTSet319[ARTTS__TILDE_GT] = true;
  ARTSet319[ARTTS__TILDE_GT_STAR] = true;
  ARTSet319[ARTTS__TILDE_GT_GT] = true;
  ARTSet319[ARTL_ART_CHAR_BQ] = true;
  ARTSet319[ARTL_ART_False] = true;
  ARTSet319[ARTL_ART_ID] = true;
  ARTSet319[ARTL_ART_ID_ATTRIBUTE] = true;
  ARTSet319[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet319[ARTL_ART_STRING_DQ] = true;
  ARTSet319[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet319[ARTL_ART_TRRELATION] = true;
  ARTSet319[ARTL_ART_True] = true;
  ARTSet319[ARTL_ART___bool] = true;
  ARTSet319[ARTL_ART___char] = true;
  ARTSet319[ARTL_ART___int32] = true;
  ARTSet319[ARTL_ART___real64] = true;
  ARTSet319[ARTL_ART___string] = true;
  ARTSet319[ARTL_ART_cfgAttributeEquation] = true;
  ARTSet319[ARTL_ART_cfgBuiltinTerminal] = true;
  ARTSet319[ARTL_ART_cfgCaseInsensitiveTerminal] = true;
  ARTSet319[ARTL_ART_cfgCaseSensitiveTerminal] = true;
  ARTSet319[ARTL_ART_cfgCharacterTerminal] = true;
  ARTSet319[ARTL_ART_cfgNonterminal] = true;
  ARTSet319[ARTL_ART_cfgRule] = true;
  ARTSet319[ARTL_ART_chooseDiff] = true;
  ARTSet319[ARTL_ART_chooseElement] = true;
  ARTSet319[ARTL_ART_choosePredefinedSet] = true;
  ARTSet319[ARTL_ART_chooseRule] = true;
  ARTSet319[ARTL_ART_chooseUnionIntersection] = true;
  ARTSet319[ARTL_ART_directive] = true;
  ARTSet319[ARTL_ART_text] = true;
  ARTSet319[ARTL_ART_textElement] = true;
  ARTSet319[ARTL_ART_tr] = true;
  ARTSet319[ARTL_ART_trConfiguration] = true;
  ARTSet319[ARTL_ART_trEquations] = true;
  ARTSet319[ARTL_ART_trLabel] = true;
  ARTSet319[ARTL_ART_trMatch] = true;
  ARTSet319[ARTL_ART_trPremises] = true;
  ARTSet319[ARTL_ART_trPrimaryTerm] = true;
  ARTSet319[ARTL_ART_trRule] = true;
  ARTSet319[ARTL_ART_trTerm] = true;
  ARTSet319[ARTL_ART_trTransition] = true;
}

public void ARTSet34initialise() {
  ARTSet34 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet34, 0, artSetExtent, false);
  ARTSet34[ARTTS__TILDE_GT_STAR] = true;
}

public void ARTSet146initialise() {
  ARTSet146 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet146, 0, artSetExtent, false);
  ARTSet146[ARTTS_anyParaterminal] = true;
}

public void ARTSet12initialise() {
  ARTSet12 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet12, 0, artSetExtent, false);
  ARTSet12[ARTTB_STRING_BRACKET_NEST] = true;
}

public void ARTSet131initialise() {
  ARTSet131 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet131, 0, artSetExtent, false);
  ARTSet131[ARTTB_CHAR_BQ] = true;
  ARTSet131[ARTTB_ID] = true;
  ARTSet131[ARTTB_STRING_DOLLAR] = true;
  ARTSet131[ARTTB_STRING_DQ] = true;
  ARTSet131[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet131[ARTTS__AMPERSAND] = true;
  ARTSet131[ARTTS__LPAR] = true;
  ARTSet131[ARTTS_anyBuiltinTerminal] = true;
  ARTSet131[ARTTS_anyCaseInsensitiveTerminal] = true;
  ARTSet131[ARTTS_anyCaseSensitiveTerminal] = true;
  ARTSet131[ARTTS_anyCharacterTerminal] = true;
  ARTSet131[ARTTS_anyLiteralTerminal] = true;
  ARTSet131[ARTTS_anyNonterminal] = true;
  ARTSet131[ARTTS_anyParaterminal] = true;
  ARTSet131[ARTTS_anyTerminal] = true;
  ARTSet131[ARTL_ART_CHAR_BQ] = true;
  ARTSet131[ARTL_ART_ID] = true;
  ARTSet131[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet131[ARTL_ART_STRING_DQ] = true;
  ARTSet131[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet131[ARTL_ART_cfgBuiltinTerminal] = true;
  ARTSet131[ARTL_ART_cfgCaseInsensitiveTerminal] = true;
  ARTSet131[ARTL_ART_cfgCaseSensitiveTerminal] = true;
  ARTSet131[ARTL_ART_cfgCharacterTerminal] = true;
  ARTSet131[ARTL_ART_cfgNonterminal] = true;
  ARTSet131[ARTL_ART_chooseElement] = true;
  ARTSet131[ARTL_ART_choosePredefinedSet] = true;
  ARTSet131[ARTL_ART_chooseUnionIntersection] = true;
}

public void ARTSet23initialise() {
  ARTSet23 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet23, 0, artSetExtent, false);
  ARTSet23[ARTTS__MINUS_GT_GT] = true;
}

public void ARTSet56initialise() {
  ARTSet56 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet56, 0, artSetExtent, false);
  ARTSet56[ARTTB_CHAR_BQ] = true;
  ARTSet56[ARTTB_ID] = true;
  ARTSet56[ARTTB_STRING_DOLLAR] = true;
  ARTSet56[ARTTB_STRING_DQ] = true;
  ARTSet56[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet56[ARTTS__HASH] = true;
  ARTSet56[ARTTS__AMPERSAND] = true;
  ARTSet56[ARTTS__PERIOD] = true;
  ARTSet56[ARTL_ART_CHAR_BQ] = true;
  ARTSet56[ARTL_ART_ID] = true;
  ARTSet56[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet56[ARTL_ART_STRING_DQ] = true;
  ARTSet56[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet56[ARTL_ART_cfgBuiltinTerminal] = true;
  ARTSet56[ARTL_ART_cfgCaseInsensitiveTerminal] = true;
  ARTSet56[ARTL_ART_cfgCaseSensitiveTerminal] = true;
  ARTSet56[ARTL_ART_cfgCharacterRangeTerminal] = true;
  ARTSet56[ARTL_ART_cfgCharacterTerminal] = true;
  ARTSet56[ARTL_ART_cfgEpsilon] = true;
  ARTSet56[ARTL_ART_cfgNonterminal] = true;
  ARTSet56[ARTL_ART_cfgSlotSymbol] = true;
}

public void ARTSet175initialise() {
  ARTSet175 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet175, 0, artSetExtent, false);
  ARTSet175[ARTTS__SHREIKtwePrintFull] = true;
}

public void ARTSet174initialise() {
  ARTSet174 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet174, 0, artSetExtent, false);
  ARTSet174[ARTTS__SHREIKinputPrint] = true;
}

public void ARTSet276initialise() {
  ARTSet276 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet276, 0, artSetExtent, false);
  ARTSet276[ARTTB_CHAR_BQ] = true;
  ARTSet276[ARTTB_ID] = true;
  ARTSet276[ARTTB_SIGNED_INTEGER] = true;
  ARTSet276[ARTTB_SIGNED_REAL] = true;
  ARTSet276[ARTTB_STRING_DQ] = true;
  ARTSet276[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet276[ARTTB_STRING_SQ] = true;
  ARTSet276[ARTTS__LT] = true;
  ARTSet276[ARTTS_False] = true;
  ARTSet276[ARTTS_True] = true;
  ARTSet276[ARTL_ART_False] = true;
  ARTSet276[ARTL_ART_ID] = true;
  ARTSet276[ARTL_ART_ID_ATTRIBUTE] = true;
  ARTSet276[ARTL_ART_STRING_DQ] = true;
  ARTSet276[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet276[ARTL_ART_True] = true;
  ARTSet276[ARTL_ART___bool] = true;
  ARTSet276[ARTL_ART___char] = true;
  ARTSet276[ARTL_ART___int32] = true;
  ARTSet276[ARTL_ART___real64] = true;
  ARTSet276[ARTL_ART___string] = true;
  ARTSet276[ARTL_ART_trConfiguration] = true;
  ARTSet276[ARTL_ART_trPrimaryTerm] = true;
  ARTSet276[ARTL_ART_trTerm] = true;
  ARTSet276[ARTL_ART_tryArgument] = true;
}

public void ARTSet108initialise() {
  ARTSet108 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet108, 0, artSetExtent, false);
  ARTSet108[ARTTS__UPARROW_PLUS] = true;
  ARTSet108[ARTL_ART_cfgInsert] = true;
}

public void ARTSet180initialise() {
  ARTSet180 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet180, 0, artSetExtent, false);
  ARTSet180[ARTTS__SHREIKgssPrint] = true;
}

public void ARTSet26initialise() {
  ARTSet26 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet26, 0, artSetExtent, false);
  ARTSet26[ARTTS__EQUAL_GT_GT] = true;
}

public void ARTSet41initialise() {
  ARTSet41 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet41, 0, artSetExtent, false);
  ARTSet41[ARTTB_SIGNED_REAL] = true;
}

public void ARTSet35initialise() {
  ARTSet35 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet35, 0, artSetExtent, false);
  ARTSet35[ARTTS__TILDE_GT_GT] = true;
}

public void ARTSet31initialise() {
  ARTSet31 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet31, 0, artSetExtent, false);
  ARTSet31[ARTTS__MINUS_SLASH_STAR] = true;
}

public void ARTSet171initialise() {
  ARTSet171 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet171, 0, artSetExtent, false);
  ARTSet171[ARTTB_SIGNED_INTEGER] = true;
  ARTSet171[ARTL_ART___int32] = true;
}

public void ARTSet164initialise() {
  ARTSet164 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet164, 0, artSetExtent, false);
  ARTSet164[ARTTS__SHREIKcfgElements] = true;
}

public void ARTSet238initialise() {
  ARTSet238 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet238, 0, artSetExtent, false);
  ARTSet238[ARTTS__SHREIKGLLSuppressSemantics] = true;
}

public void ARTSet159initialise() {
  ARTSet159 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet159, 0, artSetExtent, false);
  ARTSet159[ARTTS__SHREIKmerge] = true;
}

public void ARTSet299initialise() {
  ARTSet299 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet299, 0, artSetExtent, false);
  ARTSet299[ARTTB_CHAR_BQ] = true;
  ARTSet299[ARTTB_ID] = true;
  ARTSet299[ARTTB_SIGNED_INTEGER] = true;
  ARTSet299[ARTTB_SIGNED_REAL] = true;
  ARTSet299[ARTTB_STRING_DQ] = true;
  ARTSet299[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet299[ARTTB_STRING_SQ] = true;
  ARTSet299[ARTTS__LT] = true;
  ARTSet299[ARTTS_False] = true;
  ARTSet299[ARTTS_True] = true;
  ARTSet299[ARTL_ART_False] = true;
  ARTSet299[ARTL_ART_ID] = true;
  ARTSet299[ARTL_ART_ID_ATTRIBUTE] = true;
  ARTSet299[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet299[ARTL_ART_True] = true;
  ARTSet299[ARTL_ART___bool] = true;
  ARTSet299[ARTL_ART___char] = true;
  ARTSet299[ARTL_ART___int32] = true;
  ARTSet299[ARTL_ART___real64] = true;
  ARTSet299[ARTL_ART___string] = true;
  ARTSet299[ARTL_ART_trConfiguration] = true;
  ARTSet299[ARTL_ART_trMatch] = true;
  ARTSet299[ARTL_ART_trPremises] = true;
  ARTSet299[ARTL_ART_trPrimaryTerm] = true;
  ARTSet299[ARTL_ART_trTerm] = true;
  ARTSet299[ARTL_ART_trTransition] = true;
}

public void ARTSet95initialise() {
  ARTSet95 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet95, 0, artSetExtent, false);
  ARTSet95[ARTX_EOS] = true;
  ARTSet95[ARTTB_CHAR_BQ] = true;
  ARTSet95[ARTTB_ID] = true;
  ARTSet95[ARTTB_SIGNED_INTEGER] = true;
  ARTSet95[ARTTB_SIGNED_REAL] = true;
  ARTSet95[ARTTB_STRING_DOLLAR] = true;
  ARTSet95[ARTTB_STRING_DQ] = true;
  ARTSet95[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet95[ARTTB_STRING_SQ] = true;
  ARTSet95[ARTTS__SHREIKGLLFIFODescriptors] = true;
  ARTSet95[ARTTS__SHREIKGLLPredictivePops] = true;
  ARTSet95[ARTTS__SHREIKGLLSuppressPopGuard] = true;
  ARTSet95[ARTTS__SHREIKGLLSuppressProductionGuard] = true;
  ARTSet95[ARTTS__SHREIKGLLSuppressSemantics] = true;
  ARTSet95[ARTTS__SHREIKGLLSuppressTestRepeat] = true;
  ARTSet95[ARTTS__SHREIKabsorb] = true;
  ARTSet95[ARTTS__SHREIKalphabet] = true;
  ARTSet95[ARTTS__SHREIKcfgElements] = true;
  ARTSet95[ARTTS__SHREIKcnp] = true;
  ARTSet95[ARTTS__SHREIKcnpGeneratorPool] = true;
  ARTSet95[ARTTS__SHREIKcnpIndexedAPI] = true;
  ARTSet95[ARTTS__SHREIKcnpIndexedPool] = true;
  ARTSet95[ARTTS__SHREIKcnpLinkedAPI] = true;
  ARTSet95[ARTTS__SHREIKcompressWhitespaceJava] = true;
  ARTSet95[ARTTS__SHREIKearley] = true;
  ARTSet95[ARTTS__SHREIKearley2007LinkedAPI] = true;
  ARTSet95[ARTTS__SHREIKearleyIndexedAPI] = true;
  ARTSet95[ARTTS__SHREIKearleyIndexedData] = true;
  ARTSet95[ARTTS__SHREIKearleyIndexedPool] = true;
  ARTSet95[ARTTS__SHREIKearleyLinkedAPI] = true;
  ARTSet95[ARTTS__SHREIKearleyTable] = true;
  ARTSet95[ARTTS__SHREIKearleyTableIndexedAPI] = true;
  ARTSet95[ARTTS__SHREIKearleyTableIndexedData] = true;
  ARTSet95[ARTTS__SHREIKearleyTableIndexedPool] = true;
  ARTSet95[ARTTS__SHREIKearleyTableLinkedAPI] = true;
  ARTSet95[ARTTS__SHREIKextractJLS] = true;
  ARTSet95[ARTTS__SHREIKgenerateC_PLUS_PLUS] = true;
  ARTSet95[ARTTS__SHREIKgenerateDynamic] = true;
  ARTSet95[ARTTS__SHREIKgenerateFragment] = true;
  ARTSet95[ARTTS__SHREIKgenerateJava] = true;
  ARTSet95[ARTTS__SHREIKgenerateML] = true;
  ARTSet95[ARTTS__SHREIKgeneratePool] = true;
  ARTSet95[ARTTS__SHREIKgenerateState] = true;
  ARTSet95[ARTTS__SHREIKgenerateStatic] = true;
  ARTSet95[ARTTS__SHREIKgll] = true;
  ARTSet95[ARTTS__SHREIKgllClusteredGeneratorPool] = true;
  ARTSet95[ARTTS__SHREIKgllGeneratorPool] = true;
  ARTSet95[ARTTS__SHREIKgllTWEGeneratorPool] = true;
  ARTSet95[ARTTS__SHREIKgrammarWrite] = true;
  ARTSet95[ARTTS__SHREIKgssPrint] = true;
  ARTSet95[ARTTS__SHREIKgssShow] = true;
  ARTSet95[ARTTS__SHREIKgssWrite] = true;
  ARTSet95[ARTTS__SHREIKinjectInstance] = true;
  ARTSet95[ARTTS__SHREIKinjectProduction] = true;
  ARTSet95[ARTTS__SHREIKinput] = true;
  ARTSet95[ARTTS__SHREIKinputPrint] = true;
  ARTSet95[ARTTS__SHREIKlatex] = true;
  ARTSet95[ARTTS__SHREIKlcnp] = true;
  ARTSet95[ARTTS__SHREIKlcnpGeneratorPool] = true;
  ARTSet95[ARTTS__SHREIKlcnpIndexedAPI] = true;
  ARTSet95[ARTTS__SHREIKlcnpIndexedPool] = true;
  ARTSet95[ARTTS__SHREIKlcnpLinkedAPI] = true;
  ARTSet95[ARTTS__SHREIKlexDFA] = true;
  ARTSet95[ARTTS__SHREIKlexGLL] = true;
  ARTSet95[ARTTS__SHREIKlexHardCoded] = true;
  ARTSet95[ARTTS__SHREIKlexWSSuffix] = true;
  ARTSet95[ARTTS__SHREIKlexerData] = true;
  ARTSet95[ARTTS__SHREIKlexerName] = true;
  ARTSet95[ARTTS__SHREIKmain] = true;
  ARTSet95[ARTTS__SHREIKmerge] = true;
  ARTSet95[ARTTS__SHREIKmgll] = true;
  ARTSet95[ARTTS__SHREIKmgllGeneratorPool] = true;
  ARTSet95[ARTTS__SHREIKmodule] = true;
  ARTSet95[ARTTS__SHREIKnamespace] = true;
  ARTSet95[ARTTS__SHREIKosbrd] = true;
  ARTSet95[ARTTS__SHREIKosbrdGenerator] = true;
  ARTSet95[ARTTS__SHREIKoutputDirectory] = true;
  ARTSet95[ARTTS__SHREIKparaterminal] = true;
  ARTSet95[ARTTS__SHREIKparseCountsPrint] = true;
  ARTSet95[ARTTS__SHREIKparserName] = true;
  ARTSet95[ARTTS__SHREIKprelude] = true;
  ARTSet95[ARTTS__SHREIKrelation] = true;
  ARTSet95[ARTTS__SHREIKresult] = true;
  ARTSet95[ARTTS__SHREIKsml97Parser] = true;
  ARTSet95[ARTTS__SHREIKsppfLongest] = true;
  ARTSet95[ARTTS__SHREIKsppfPrint] = true;
  ARTSet95[ARTTS__SHREIKsppfPriority] = true;
  ARTSet95[ARTTS__SHREIKsppfShow] = true;
  ARTSet95[ARTTS__SHREIKsppfWrite] = true;
  ARTSet95[ARTTS__SHREIKstart] = true;
  ARTSet95[ARTTS__SHREIKstatistics] = true;
  ARTSet95[ARTTS__SHREIKstrategy] = true;
  ARTSet95[ARTTS__SHREIKsupport] = true;
  ARTSet95[ARTTS__SHREIKtermPrint] = true;
  ARTSet95[ARTTS__SHREIKtermShow] = true;
  ARTSet95[ARTTS__SHREIKtermTool] = true;
  ARTSet95[ARTTS__SHREIKtermWrite] = true;
  ARTSet95[ARTTS__SHREIKtrace] = true;
  ARTSet95[ARTTS__SHREIKtreePrint] = true;
  ARTSet95[ARTTS__SHREIKtreeShow] = true;
  ARTSet95[ARTTS__SHREIKtreeWrite] = true;
  ARTSet95[ARTTS__SHREIKtry] = true;
  ARTSet95[ARTTS__SHREIKtweDead] = true;
  ARTSet95[ARTTS__SHREIKtweExtents] = true;
  ARTSet95[ARTTS__SHREIKtweFromSPPF] = true;
  ARTSet95[ARTTS__SHREIKtweLexicalisations] = true;
  ARTSet95[ARTTS__SHREIKtweLongest] = true;
  ARTSet95[ARTTS__SHREIKtwePrint] = true;
  ARTSet95[ARTTS__SHREIKtwePrintFull] = true;
  ARTSet95[ARTTS__SHREIKtwePrintSummary] = true;
  ARTSet95[ARTTS__SHREIKtwePriority] = true;
  ARTSet95[ARTTS__SHREIKtweRecursive] = true;
  ARTSet95[ARTTS__SHREIKtweSegments] = true;
  ARTSet95[ARTTS__SHREIKtweShow] = true;
  ARTSet95[ARTTS__SHREIKtweTokenWrite] = true;
  ARTSet95[ARTTS__SHREIKtweWrite] = true;
  ARTSet95[ARTTS__SHREIKunicodeAsEscapeSeuences] = true;
  ARTSet95[ARTTS__SHREIKuse] = true;
  ARTSet95[ARTTS__SHREIKverbosity] = true;
  ARTSet95[ARTTS__SHREIKwhitespace] = true;
  ARTSet95[ARTTS__AMPERSAND] = true;
  ARTSet95[ARTTS__LPAR] = true;
  ARTSet95[ARTTS__MINUS] = true;
  ARTSet95[ARTTS__MINUS_MINUS_MINUS] = true;
  ARTSet95[ARTTS__LT] = true;
  ARTSet95[ARTTS_False] = true;
  ARTSet95[ARTTS_True] = true;
  ARTSet95[ARTTS_anyBuiltinTerminal] = true;
  ARTSet95[ARTTS_anyCaseInsensitiveTerminal] = true;
  ARTSet95[ARTTS_anyCaseSensitiveTerminal] = true;
  ARTSet95[ARTTS_anyCharacterTerminal] = true;
  ARTSet95[ARTTS_anyLiteralTerminal] = true;
  ARTSet95[ARTTS_anyNonterminal] = true;
  ARTSet95[ARTTS_anyParaterminal] = true;
  ARTSet95[ARTTS_anyTerminal] = true;
  ARTSet95[ARTL_ART_CHAR_BQ] = true;
  ARTSet95[ARTL_ART_False] = true;
  ARTSet95[ARTL_ART_ID] = true;
  ARTSet95[ARTL_ART_ID_ATTRIBUTE] = true;
  ARTSet95[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet95[ARTL_ART_STRING_DQ] = true;
  ARTSet95[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet95[ARTL_ART_True] = true;
  ARTSet95[ARTL_ART___bool] = true;
  ARTSet95[ARTL_ART___char] = true;
  ARTSet95[ARTL_ART___int32] = true;
  ARTSet95[ARTL_ART___real64] = true;
  ARTSet95[ARTL_ART___string] = true;
  ARTSet95[ARTL_ART_cfgBuiltinTerminal] = true;
  ARTSet95[ARTL_ART_cfgCaseInsensitiveTerminal] = true;
  ARTSet95[ARTL_ART_cfgCaseSensitiveTerminal] = true;
  ARTSet95[ARTL_ART_cfgCharacterTerminal] = true;
  ARTSet95[ARTL_ART_cfgNonterminal] = true;
  ARTSet95[ARTL_ART_cfgRule] = true;
  ARTSet95[ARTL_ART_chooseDiff] = true;
  ARTSet95[ARTL_ART_chooseElement] = true;
  ARTSet95[ARTL_ART_choosePredefinedSet] = true;
  ARTSet95[ARTL_ART_chooseRule] = true;
  ARTSet95[ARTL_ART_chooseUnionIntersection] = true;
  ARTSet95[ARTL_ART_directive] = true;
  ARTSet95[ARTL_ART_text] = true;
  ARTSet95[ARTL_ART_textElement] = true;
  ARTSet95[ARTL_ART_tr] = true;
  ARTSet95[ARTL_ART_trConfiguration] = true;
  ARTSet95[ARTL_ART_trLabel] = true;
  ARTSet95[ARTL_ART_trMatch] = true;
  ARTSet95[ARTL_ART_trPremises] = true;
  ARTSet95[ARTL_ART_trPrimaryTerm] = true;
  ARTSet95[ARTL_ART_trRule] = true;
  ARTSet95[ARTL_ART_trTerm] = true;
  ARTSet95[ARTL_ART_trTransition] = true;
}

public void ARTSet301initialise() {
  ARTSet301 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet301, 0, artSetExtent, false);
  ARTSet301[ARTTB_CHAR_BQ] = true;
  ARTSet301[ARTTB_ID] = true;
  ARTSet301[ARTTB_SIGNED_INTEGER] = true;
  ARTSet301[ARTTB_SIGNED_REAL] = true;
  ARTSet301[ARTTB_STRING_DQ] = true;
  ARTSet301[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet301[ARTTB_STRING_SQ] = true;
  ARTSet301[ARTTS__LT] = true;
  ARTSet301[ARTTS_False] = true;
  ARTSet301[ARTTS_True] = true;
  ARTSet301[ARTL_ART_False] = true;
  ARTSet301[ARTL_ART_ID] = true;
  ARTSet301[ARTL_ART_ID_ATTRIBUTE] = true;
  ARTSet301[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet301[ARTL_ART_True] = true;
  ARTSet301[ARTL_ART___bool] = true;
  ARTSet301[ARTL_ART___char] = true;
  ARTSet301[ARTL_ART___int32] = true;
  ARTSet301[ARTL_ART___real64] = true;
  ARTSet301[ARTL_ART___string] = true;
  ARTSet301[ARTL_ART_trConfiguration] = true;
  ARTSet301[ARTL_ART_trPrimaryTerm] = true;
  ARTSet301[ARTL_ART_trTerm] = true;
  ARTSet301[ARTL_ART_trTransition] = true;
}

public void ARTSet115initialise() {
  ARTSet115 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet115, 0, artSetExtent, false);
  ARTSet115[ARTTB_STRING_DOLLAR] = true;
  ARTSet115[ARTL_ART_STRING_DOLLAR] = true;
}

public void ARTSet199initialise() {
  ARTSet199 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet199, 0, artSetExtent, false);
  ARTSet199[ARTTB_ID] = true;
  ARTSet199[ARTL_ART_ID] = true;
  ARTSet199[ARTL_ART_idRAW] = true;
}

public void ARTSet124initialise() {
  ARTSet124 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet124, 0, artSetExtent, false);
  ARTSet124[ARTTB_ID] = true;
  ARTSet124[ARTL_ART_ID_ATTRIBUTE] = true;
  ARTSet124[ARTL_ART_cfgAttributeEquation] = true;
}

public void ARTSet172initialise() {
  ARTSet172 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet172, 0, artSetExtent, false);
  ARTSet172[ARTTS__SHREIKstatistics] = true;
}

public void ARTSet336initialise() {
  ARTSet336 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet336, 0, artSetExtent, false);
  ARTSet336[ARTTB_CHAR_BQ] = true;
  ARTSet336[ARTTB_ID] = true;
  ARTSet336[ARTTB_SIGNED_INTEGER] = true;
  ARTSet336[ARTTB_SIGNED_REAL] = true;
  ARTSet336[ARTTB_STRING_DQ] = true;
  ARTSet336[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet336[ARTTB_STRING_SQ] = true;
  ARTSet336[ARTTS__LT] = true;
  ARTSet336[ARTTS_False] = true;
  ARTSet336[ARTTS_True] = true;
  ARTSet336[ARTL_ART_False] = true;
  ARTSet336[ARTL_ART_ID] = true;
  ARTSet336[ARTL_ART_ID_ATTRIBUTE] = true;
  ARTSet336[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet336[ARTL_ART_True] = true;
  ARTSet336[ARTL_ART___bool] = true;
  ARTSet336[ARTL_ART___char] = true;
  ARTSet336[ARTL_ART___int32] = true;
  ARTSet336[ARTL_ART___real64] = true;
  ARTSet336[ARTL_ART___string] = true;
  ARTSet336[ARTL_ART_trConfiguration] = true;
  ARTSet336[ARTL_ART_trPrimaryTerm] = true;
  ARTSet336[ARTL_ART_trTerm] = true;
}

public void ARTSet32initialise() {
  ARTSet32 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet32, 0, artSetExtent, false);
  ARTSet32[ARTTS__MINUS_SLASH_GT] = true;
}

public void ARTSet7initialise() {
  ARTSet7 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet7, 0, artSetExtent, false);
  ARTSet7[ARTTB_ID] = true;
}

public void ARTSet43initialise() {
  ARTSet43 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet43, 0, artSetExtent, false);
  ARTSet43[ARTTB_STRING_SQ] = true;
}

public void ARTSet167initialise() {
  ARTSet167 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet167, 0, artSetExtent, false);
  ARTSet167[ARTTS__SHREIKalphabet] = true;
}

public void ARTSet103initialise() {
  ARTSet103 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet103, 0, artSetExtent, false);
  ARTSet103[ARTTS__LT] = true;
  ARTSet103[ARTL_ART_cfgDelay] = true;
}

public void ARTSet210initialise() {
  ARTSet210 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet210, 0, artSetExtent, false);
  ARTSet210[ARTTS__SHREIKtweLexicalisations] = true;
}

public void ARTSet318initialise() {
  ARTSet318 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet318, 0, artSetExtent, false);
  ARTSet318[ARTTS__COMMA] = true;
}

public void ARTSet178initialise() {
  ARTSet178 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet178, 0, artSetExtent, false);
  ARTSet178[ARTTS__SHREIKtweWrite] = true;
}

public void ARTSet323initialise() {
  ARTSet323 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet323, 0, artSetExtent, false);
  ARTSet323[ARTTS__MINUS] = true;
}

public void ARTSet15initialise() {
  ARTSet15 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet15, 0, artSetExtent, false);
  ARTSet15[ARTTB_STRING_DQ] = true;
}

public void ARTSet154initialise() {
  ARTSet154 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet154, 0, artSetExtent, false);
  ARTSet154[ARTTS__GT] = true;
  ARTSet154[ARTL_ART_chooseHigher] = true;
}

public void ARTSet279initialise() {
  ARTSet279 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet279, 0, artSetExtent, false);
  ARTSet279[ARTTS_root] = true;
}

public void ARTSet14initialise() {
  ARTSet14 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet14, 0, artSetExtent, false);
  ARTSet14[ARTX_EOS] = true;
  ARTSet14[ARTTB_CHAR_BQ] = true;
  ARTSet14[ARTTB_ID] = true;
  ARTSet14[ARTTB_SIGNED_INTEGER] = true;
  ARTSet14[ARTTB_SIGNED_REAL] = true;
  ARTSet14[ARTTB_STRING_BRACE_NEST] = true;
  ARTSet14[ARTTB_STRING_DOLLAR] = true;
  ARTSet14[ARTTB_STRING_DQ] = true;
  ARTSet14[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet14[ARTTB_STRING_SQ] = true;
  ARTSet14[ARTTS__SHREIKGLLFIFODescriptors] = true;
  ARTSet14[ARTTS__SHREIKGLLPredictivePops] = true;
  ARTSet14[ARTTS__SHREIKGLLSuppressPopGuard] = true;
  ARTSet14[ARTTS__SHREIKGLLSuppressProductionGuard] = true;
  ARTSet14[ARTTS__SHREIKGLLSuppressSemantics] = true;
  ARTSet14[ARTTS__SHREIKGLLSuppressTestRepeat] = true;
  ARTSet14[ARTTS__SHREIKabsorb] = true;
  ARTSet14[ARTTS__SHREIKalphabet] = true;
  ARTSet14[ARTTS__SHREIKcfgElements] = true;
  ARTSet14[ARTTS__SHREIKcnp] = true;
  ARTSet14[ARTTS__SHREIKcnpGeneratorPool] = true;
  ARTSet14[ARTTS__SHREIKcnpIndexedAPI] = true;
  ARTSet14[ARTTS__SHREIKcnpIndexedPool] = true;
  ARTSet14[ARTTS__SHREIKcnpLinkedAPI] = true;
  ARTSet14[ARTTS__SHREIKcompressWhitespaceJava] = true;
  ARTSet14[ARTTS__SHREIKearley] = true;
  ARTSet14[ARTTS__SHREIKearley2007LinkedAPI] = true;
  ARTSet14[ARTTS__SHREIKearleyIndexedAPI] = true;
  ARTSet14[ARTTS__SHREIKearleyIndexedData] = true;
  ARTSet14[ARTTS__SHREIKearleyIndexedPool] = true;
  ARTSet14[ARTTS__SHREIKearleyLinkedAPI] = true;
  ARTSet14[ARTTS__SHREIKearleyTable] = true;
  ARTSet14[ARTTS__SHREIKearleyTableIndexedAPI] = true;
  ARTSet14[ARTTS__SHREIKearleyTableIndexedData] = true;
  ARTSet14[ARTTS__SHREIKearleyTableIndexedPool] = true;
  ARTSet14[ARTTS__SHREIKearleyTableLinkedAPI] = true;
  ARTSet14[ARTTS__SHREIKextractJLS] = true;
  ARTSet14[ARTTS__SHREIKgenerateC_PLUS_PLUS] = true;
  ARTSet14[ARTTS__SHREIKgenerateDynamic] = true;
  ARTSet14[ARTTS__SHREIKgenerateFragment] = true;
  ARTSet14[ARTTS__SHREIKgenerateJava] = true;
  ARTSet14[ARTTS__SHREIKgenerateML] = true;
  ARTSet14[ARTTS__SHREIKgeneratePool] = true;
  ARTSet14[ARTTS__SHREIKgenerateState] = true;
  ARTSet14[ARTTS__SHREIKgenerateStatic] = true;
  ARTSet14[ARTTS__SHREIKgll] = true;
  ARTSet14[ARTTS__SHREIKgllClusteredGeneratorPool] = true;
  ARTSet14[ARTTS__SHREIKgllGeneratorPool] = true;
  ARTSet14[ARTTS__SHREIKgllTWEGeneratorPool] = true;
  ARTSet14[ARTTS__SHREIKgrammarWrite] = true;
  ARTSet14[ARTTS__SHREIKgssPrint] = true;
  ARTSet14[ARTTS__SHREIKgssShow] = true;
  ARTSet14[ARTTS__SHREIKgssWrite] = true;
  ARTSet14[ARTTS__SHREIKinjectInstance] = true;
  ARTSet14[ARTTS__SHREIKinjectProduction] = true;
  ARTSet14[ARTTS__SHREIKinput] = true;
  ARTSet14[ARTTS__SHREIKinputPrint] = true;
  ARTSet14[ARTTS__SHREIKlatex] = true;
  ARTSet14[ARTTS__SHREIKlcnp] = true;
  ARTSet14[ARTTS__SHREIKlcnpGeneratorPool] = true;
  ARTSet14[ARTTS__SHREIKlcnpIndexedAPI] = true;
  ARTSet14[ARTTS__SHREIKlcnpIndexedPool] = true;
  ARTSet14[ARTTS__SHREIKlcnpLinkedAPI] = true;
  ARTSet14[ARTTS__SHREIKlexDFA] = true;
  ARTSet14[ARTTS__SHREIKlexGLL] = true;
  ARTSet14[ARTTS__SHREIKlexHardCoded] = true;
  ARTSet14[ARTTS__SHREIKlexWSSuffix] = true;
  ARTSet14[ARTTS__SHREIKlexerData] = true;
  ARTSet14[ARTTS__SHREIKlexerName] = true;
  ARTSet14[ARTTS__SHREIKmain] = true;
  ARTSet14[ARTTS__SHREIKmerge] = true;
  ARTSet14[ARTTS__SHREIKmgll] = true;
  ARTSet14[ARTTS__SHREIKmgllGeneratorPool] = true;
  ARTSet14[ARTTS__SHREIKmodule] = true;
  ARTSet14[ARTTS__SHREIKnamespace] = true;
  ARTSet14[ARTTS__SHREIKosbrd] = true;
  ARTSet14[ARTTS__SHREIKosbrdGenerator] = true;
  ARTSet14[ARTTS__SHREIKoutputDirectory] = true;
  ARTSet14[ARTTS__SHREIKparaterminal] = true;
  ARTSet14[ARTTS__SHREIKparseCountsPrint] = true;
  ARTSet14[ARTTS__SHREIKparserName] = true;
  ARTSet14[ARTTS__SHREIKprelude] = true;
  ARTSet14[ARTTS__SHREIKrelation] = true;
  ARTSet14[ARTTS__SHREIKresult] = true;
  ARTSet14[ARTTS__SHREIKsml97Parser] = true;
  ARTSet14[ARTTS__SHREIKsppfLongest] = true;
  ARTSet14[ARTTS__SHREIKsppfPrint] = true;
  ARTSet14[ARTTS__SHREIKsppfPriority] = true;
  ARTSet14[ARTTS__SHREIKsppfShow] = true;
  ARTSet14[ARTTS__SHREIKsppfWrite] = true;
  ARTSet14[ARTTS__SHREIKstart] = true;
  ARTSet14[ARTTS__SHREIKstatistics] = true;
  ARTSet14[ARTTS__SHREIKstrategy] = true;
  ARTSet14[ARTTS__SHREIKsupport] = true;
  ARTSet14[ARTTS__SHREIKtermPrint] = true;
  ARTSet14[ARTTS__SHREIKtermShow] = true;
  ARTSet14[ARTTS__SHREIKtermTool] = true;
  ARTSet14[ARTTS__SHREIKtermWrite] = true;
  ARTSet14[ARTTS__SHREIKtrace] = true;
  ARTSet14[ARTTS__SHREIKtreePrint] = true;
  ARTSet14[ARTTS__SHREIKtreeShow] = true;
  ARTSet14[ARTTS__SHREIKtreeWrite] = true;
  ARTSet14[ARTTS__SHREIKtry] = true;
  ARTSet14[ARTTS__SHREIKtweDead] = true;
  ARTSet14[ARTTS__SHREIKtweExtents] = true;
  ARTSet14[ARTTS__SHREIKtweFromSPPF] = true;
  ARTSet14[ARTTS__SHREIKtweLexicalisations] = true;
  ARTSet14[ARTTS__SHREIKtweLongest] = true;
  ARTSet14[ARTTS__SHREIKtwePrint] = true;
  ARTSet14[ARTTS__SHREIKtwePrintFull] = true;
  ARTSet14[ARTTS__SHREIKtwePrintSummary] = true;
  ARTSet14[ARTTS__SHREIKtwePriority] = true;
  ARTSet14[ARTTS__SHREIKtweRecursive] = true;
  ARTSet14[ARTTS__SHREIKtweSegments] = true;
  ARTSet14[ARTTS__SHREIKtweShow] = true;
  ARTSet14[ARTTS__SHREIKtweTokenWrite] = true;
  ARTSet14[ARTTS__SHREIKtweWrite] = true;
  ARTSet14[ARTTS__SHREIKunicodeAsEscapeSeuences] = true;
  ARTSet14[ARTTS__SHREIKuse] = true;
  ARTSet14[ARTTS__SHREIKverbosity] = true;
  ARTSet14[ARTTS__SHREIKwhitespace] = true;
  ARTSet14[ARTTS__HASH] = true;
  ARTSet14[ARTTS__AMPERSAND] = true;
  ARTSet14[ARTTS__LPAR] = true;
  ARTSet14[ARTTS__RPAR] = true;
  ARTSet14[ARTTS__STAR] = true;
  ARTSet14[ARTTS__PLUS] = true;
  ARTSet14[ARTTS__COMMA] = true;
  ARTSet14[ARTTS__MINUS] = true;
  ARTSet14[ARTTS__MINUS_MINUS_MINUS] = true;
  ARTSet14[ARTTS__PERIOD] = true;
  ARTSet14[ARTTS__SLASH] = true;
  ARTSet14[ARTTS__COLON_COLON_EQUAL] = true;
  ARTSet14[ARTTS__LT] = true;
  ARTSet14[ARTTS__LT_LT] = true;
  ARTSet14[ARTTS__EQUAL] = true;
  ARTSet14[ARTTS__GT] = true;
  ARTSet14[ARTTS__GT_GT] = true;
  ARTSet14[ARTTS__QUERY] = true;
  ARTSet14[ARTTS__AT] = true;
  ARTSet14[ARTTS_False] = true;
  ARTSet14[ARTTS_True] = true;
  ARTSet14[ARTTS__BACKSLASH] = true;
  ARTSet14[ARTTS__BACKSLASH_BACKSLASH] = true;
  ARTSet14[ARTTS__UPARROW] = true;
  ARTSet14[ARTTS__UPARROW_PLUS] = true;
  ARTSet14[ARTTS__UPARROW_UPARROW] = true;
  ARTSet14[ARTTS__UPARROW_UPARROW_UPARROW] = true;
  ARTSet14[ARTTS__UPARROW_] = true;
  ARTSet14[ARTTS_anyBuiltinTerminal] = true;
  ARTSet14[ARTTS_anyCaseInsensitiveTerminal] = true;
  ARTSet14[ARTTS_anyCaseSensitiveTerminal] = true;
  ARTSet14[ARTTS_anyCharacterTerminal] = true;
  ARTSet14[ARTTS_anyLiteralTerminal] = true;
  ARTSet14[ARTTS_anyNonterminal] = true;
  ARTSet14[ARTTS_anyParaterminal] = true;
  ARTSet14[ARTTS_anyTerminal] = true;
  ARTSet14[ARTTS__BAR] = true;
  ARTSet14[ARTTS__BAR_BAR] = true;
  ARTSet14[ARTL_ART_CHAR_BQ] = true;
  ARTSet14[ARTL_ART_False] = true;
  ARTSet14[ARTL_ART_ID] = true;
  ARTSet14[ARTL_ART_ID_ATTRIBUTE] = true;
  ARTSet14[ARTL_ART_STRING_BRACE_NEST] = true;
  ARTSet14[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet14[ARTL_ART_STRING_DQ] = true;
  ARTSet14[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet14[ARTL_ART_True] = true;
  ARTSet14[ARTL_ART___bool] = true;
  ARTSet14[ARTL_ART___char] = true;
  ARTSet14[ARTL_ART___int32] = true;
  ARTSet14[ARTL_ART___real64] = true;
  ARTSet14[ARTL_ART___string] = true;
  ARTSet14[ARTL_ART_cfgAbbrev] = true;
  ARTSet14[ARTL_ART_cfgAtom] = true;
  ARTSet14[ARTL_ART_cfgAttributeEquation] = true;
  ARTSet14[ARTL_ART_cfgBuiltinTerminal] = true;
  ARTSet14[ARTL_ART_cfgCaseInsensitiveTerminal] = true;
  ARTSet14[ARTL_ART_cfgCaseSensitiveTerminal] = true;
  ARTSet14[ARTL_ART_cfgCatTail] = true;
  ARTSet14[ARTL_ART_cfgCharacterRangeTerminal] = true;
  ARTSet14[ARTL_ART_cfgCharacterTerminal] = true;
  ARTSet14[ARTL_ART_cfgDelay] = true;
  ARTSet14[ARTL_ART_cfgDiff] = true;
  ARTSet14[ARTL_ART_cfgDoFirst] = true;
  ARTSet14[ARTL_ART_cfgElement] = true;
  ARTSet14[ARTL_ART_cfgEpsilon] = true;
  ARTSet14[ARTL_ART_cfgFoldNone] = true;
  ARTSet14[ARTL_ART_cfgFoldOver] = true;
  ARTSet14[ARTL_ART_cfgFoldUnder] = true;
  ARTSet14[ARTL_ART_cfgGather] = true;
  ARTSet14[ARTL_ART_cfgGrammarAnnotations] = true;
  ARTSet14[ARTL_ART_cfgInsert] = true;
  ARTSet14[ARTL_ART_cfgIter] = true;
  ARTSet14[ARTL_ART_cfgKleeneClosure] = true;
  ARTSet14[ARTL_ART_cfgNativeAction] = true;
  ARTSet14[ARTL_ART_cfgNonterminal] = true;
  ARTSet14[ARTL_ART_cfgNot] = true;
  ARTSet14[ARTL_ART_cfgOptional] = true;
  ARTSet14[ARTL_ART_cfgPositiveClosure] = true;
  ARTSet14[ARTL_ART_cfgRule] = true;
  ARTSet14[ARTL_ART_cfgSlot] = true;
  ARTSet14[ARTL_ART_cfgSlotSymbol] = true;
  ARTSet14[ARTL_ART_cfgUnion] = true;
  ARTSet14[ARTL_ART_chooseDiff] = true;
  ARTSet14[ARTL_ART_chooseElement] = true;
  ARTSet14[ARTL_ART_chooseHigher] = true;
  ARTSet14[ARTL_ART_chooseIntersection] = true;
  ARTSet14[ARTL_ART_chooseLonger] = true;
  ARTSet14[ARTL_ART_chooseLower] = true;
  ARTSet14[ARTL_ART_choosePredefinedSet] = true;
  ARTSet14[ARTL_ART_chooseRule] = true;
  ARTSet14[ARTL_ART_chooseShorter] = true;
  ARTSet14[ARTL_ART_chooseUnion] = true;
  ARTSet14[ARTL_ART_chooseUnionIntersection] = true;
  ARTSet14[ARTL_ART_chooserOp] = true;
  ARTSet14[ARTL_ART_directive] = true;
  ARTSet14[ARTL_ART_text] = true;
  ARTSet14[ARTL_ART_textElement] = true;
  ARTSet14[ARTL_ART_tr] = true;
  ARTSet14[ARTL_ART_trConfiguration] = true;
  ARTSet14[ARTL_ART_trLabel] = true;
  ARTSet14[ARTL_ART_trMatch] = true;
  ARTSet14[ARTL_ART_trPremises] = true;
  ARTSet14[ARTL_ART_trPrimaryTerm] = true;
  ARTSet14[ARTL_ART_trRule] = true;
  ARTSet14[ARTL_ART_trTerm] = true;
  ARTSet14[ARTL_ART_trTransition] = true;
}

public void ARTSet294initialise() {
  ARTSet294 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet294, 0, artSetExtent, false);
  ARTSet294[ARTTB_ID] = true;
  ARTSet294[ARTTB_STRING_DOLLAR] = true;
  ARTSet294[ARTL_ART_ID] = true;
  ARTSet294[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet294[ARTL_ART_cfgNonterminal] = true;
  ARTSet294[ARTL_ART_cfgRule] = true;
}

public void ARTSet6initialise() {
  ARTSet6 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet6, 0, artSetExtent, false);
  ARTSet6[ARTX_EOS] = true;
  ARTSet6[ARTTB_CHAR_BQ] = true;
  ARTSet6[ARTTB_ID] = true;
  ARTSet6[ARTTB_SIGNED_INTEGER] = true;
  ARTSet6[ARTTB_SIGNED_REAL] = true;
  ARTSet6[ARTTB_STRING_DOLLAR] = true;
  ARTSet6[ARTTB_STRING_DQ] = true;
  ARTSet6[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet6[ARTTB_STRING_SQ] = true;
  ARTSet6[ARTTS__SHREIKGLLFIFODescriptors] = true;
  ARTSet6[ARTTS__SHREIKGLLPredictivePops] = true;
  ARTSet6[ARTTS__SHREIKGLLSuppressPopGuard] = true;
  ARTSet6[ARTTS__SHREIKGLLSuppressProductionGuard] = true;
  ARTSet6[ARTTS__SHREIKGLLSuppressSemantics] = true;
  ARTSet6[ARTTS__SHREIKGLLSuppressTestRepeat] = true;
  ARTSet6[ARTTS__SHREIKabsorb] = true;
  ARTSet6[ARTTS__SHREIKalphabet] = true;
  ARTSet6[ARTTS__SHREIKcfgElements] = true;
  ARTSet6[ARTTS__SHREIKcnp] = true;
  ARTSet6[ARTTS__SHREIKcnpGeneratorPool] = true;
  ARTSet6[ARTTS__SHREIKcnpIndexedAPI] = true;
  ARTSet6[ARTTS__SHREIKcnpIndexedPool] = true;
  ARTSet6[ARTTS__SHREIKcnpLinkedAPI] = true;
  ARTSet6[ARTTS__SHREIKcompressWhitespaceJava] = true;
  ARTSet6[ARTTS__SHREIKearley] = true;
  ARTSet6[ARTTS__SHREIKearley2007LinkedAPI] = true;
  ARTSet6[ARTTS__SHREIKearleyIndexedAPI] = true;
  ARTSet6[ARTTS__SHREIKearleyIndexedData] = true;
  ARTSet6[ARTTS__SHREIKearleyIndexedPool] = true;
  ARTSet6[ARTTS__SHREIKearleyLinkedAPI] = true;
  ARTSet6[ARTTS__SHREIKearleyTable] = true;
  ARTSet6[ARTTS__SHREIKearleyTableIndexedAPI] = true;
  ARTSet6[ARTTS__SHREIKearleyTableIndexedData] = true;
  ARTSet6[ARTTS__SHREIKearleyTableIndexedPool] = true;
  ARTSet6[ARTTS__SHREIKearleyTableLinkedAPI] = true;
  ARTSet6[ARTTS__SHREIKextractJLS] = true;
  ARTSet6[ARTTS__SHREIKgenerateC_PLUS_PLUS] = true;
  ARTSet6[ARTTS__SHREIKgenerateDynamic] = true;
  ARTSet6[ARTTS__SHREIKgenerateFragment] = true;
  ARTSet6[ARTTS__SHREIKgenerateJava] = true;
  ARTSet6[ARTTS__SHREIKgenerateML] = true;
  ARTSet6[ARTTS__SHREIKgeneratePool] = true;
  ARTSet6[ARTTS__SHREIKgenerateState] = true;
  ARTSet6[ARTTS__SHREIKgenerateStatic] = true;
  ARTSet6[ARTTS__SHREIKgll] = true;
  ARTSet6[ARTTS__SHREIKgllClusteredGeneratorPool] = true;
  ARTSet6[ARTTS__SHREIKgllGeneratorPool] = true;
  ARTSet6[ARTTS__SHREIKgllTWEGeneratorPool] = true;
  ARTSet6[ARTTS__SHREIKgrammarWrite] = true;
  ARTSet6[ARTTS__SHREIKgssPrint] = true;
  ARTSet6[ARTTS__SHREIKgssShow] = true;
  ARTSet6[ARTTS__SHREIKgssWrite] = true;
  ARTSet6[ARTTS__SHREIKinjectInstance] = true;
  ARTSet6[ARTTS__SHREIKinjectProduction] = true;
  ARTSet6[ARTTS__SHREIKinput] = true;
  ARTSet6[ARTTS__SHREIKinputPrint] = true;
  ARTSet6[ARTTS__SHREIKlatex] = true;
  ARTSet6[ARTTS__SHREIKlcnp] = true;
  ARTSet6[ARTTS__SHREIKlcnpGeneratorPool] = true;
  ARTSet6[ARTTS__SHREIKlcnpIndexedAPI] = true;
  ARTSet6[ARTTS__SHREIKlcnpIndexedPool] = true;
  ARTSet6[ARTTS__SHREIKlcnpLinkedAPI] = true;
  ARTSet6[ARTTS__SHREIKlexDFA] = true;
  ARTSet6[ARTTS__SHREIKlexGLL] = true;
  ARTSet6[ARTTS__SHREIKlexHardCoded] = true;
  ARTSet6[ARTTS__SHREIKlexWSSuffix] = true;
  ARTSet6[ARTTS__SHREIKlexerData] = true;
  ARTSet6[ARTTS__SHREIKlexerName] = true;
  ARTSet6[ARTTS__SHREIKmain] = true;
  ARTSet6[ARTTS__SHREIKmerge] = true;
  ARTSet6[ARTTS__SHREIKmgll] = true;
  ARTSet6[ARTTS__SHREIKmgllGeneratorPool] = true;
  ARTSet6[ARTTS__SHREIKmodule] = true;
  ARTSet6[ARTTS__SHREIKnamespace] = true;
  ARTSet6[ARTTS__SHREIKosbrd] = true;
  ARTSet6[ARTTS__SHREIKosbrdGenerator] = true;
  ARTSet6[ARTTS__SHREIKoutputDirectory] = true;
  ARTSet6[ARTTS__SHREIKparaterminal] = true;
  ARTSet6[ARTTS__SHREIKparseCountsPrint] = true;
  ARTSet6[ARTTS__SHREIKparserName] = true;
  ARTSet6[ARTTS__SHREIKprelude] = true;
  ARTSet6[ARTTS__SHREIKrelation] = true;
  ARTSet6[ARTTS__SHREIKresult] = true;
  ARTSet6[ARTTS__SHREIKsml97Parser] = true;
  ARTSet6[ARTTS__SHREIKsppfLongest] = true;
  ARTSet6[ARTTS__SHREIKsppfPrint] = true;
  ARTSet6[ARTTS__SHREIKsppfPriority] = true;
  ARTSet6[ARTTS__SHREIKsppfShow] = true;
  ARTSet6[ARTTS__SHREIKsppfWrite] = true;
  ARTSet6[ARTTS__SHREIKstart] = true;
  ARTSet6[ARTTS__SHREIKstatistics] = true;
  ARTSet6[ARTTS__SHREIKstrategy] = true;
  ARTSet6[ARTTS__SHREIKsupport] = true;
  ARTSet6[ARTTS__SHREIKtermPrint] = true;
  ARTSet6[ARTTS__SHREIKtermShow] = true;
  ARTSet6[ARTTS__SHREIKtermTool] = true;
  ARTSet6[ARTTS__SHREIKtermWrite] = true;
  ARTSet6[ARTTS__SHREIKtrace] = true;
  ARTSet6[ARTTS__SHREIKtreePrint] = true;
  ARTSet6[ARTTS__SHREIKtreeShow] = true;
  ARTSet6[ARTTS__SHREIKtreeWrite] = true;
  ARTSet6[ARTTS__SHREIKtry] = true;
  ARTSet6[ARTTS__SHREIKtweDead] = true;
  ARTSet6[ARTTS__SHREIKtweExtents] = true;
  ARTSet6[ARTTS__SHREIKtweFromSPPF] = true;
  ARTSet6[ARTTS__SHREIKtweLexicalisations] = true;
  ARTSet6[ARTTS__SHREIKtweLongest] = true;
  ARTSet6[ARTTS__SHREIKtwePrint] = true;
  ARTSet6[ARTTS__SHREIKtwePrintFull] = true;
  ARTSet6[ARTTS__SHREIKtwePrintSummary] = true;
  ARTSet6[ARTTS__SHREIKtwePriority] = true;
  ARTSet6[ARTTS__SHREIKtweRecursive] = true;
  ARTSet6[ARTTS__SHREIKtweSegments] = true;
  ARTSet6[ARTTS__SHREIKtweShow] = true;
  ARTSet6[ARTTS__SHREIKtweTokenWrite] = true;
  ARTSet6[ARTTS__SHREIKtweWrite] = true;
  ARTSet6[ARTTS__SHREIKunicodeAsEscapeSeuences] = true;
  ARTSet6[ARTTS__SHREIKuse] = true;
  ARTSet6[ARTTS__SHREIKverbosity] = true;
  ARTSet6[ARTTS__SHREIKwhitespace] = true;
  ARTSet6[ARTTS__HASH] = true;
  ARTSet6[ARTTS__AMPERSAND] = true;
  ARTSet6[ARTTS__LPAR] = true;
  ARTSet6[ARTTS__RPAR] = true;
  ARTSet6[ARTTS__COMMA] = true;
  ARTSet6[ARTTS__MINUS] = true;
  ARTSet6[ARTTS__MINUS_MINUS_MINUS] = true;
  ARTSet6[ARTTS__MINUS_SLASH] = true;
  ARTSet6[ARTTS__MINUS_SLASH_STAR] = true;
  ARTSet6[ARTTS__MINUS_SLASH_GT] = true;
  ARTSet6[ARTTS__MINUS_GT] = true;
  ARTSet6[ARTTS__MINUS_GT_STAR] = true;
  ARTSet6[ARTTS__MINUS_GT_GT] = true;
  ARTSet6[ARTTS__MINUS_BACKSLASH] = true;
  ARTSet6[ARTTS__MINUS_BACKSLASH_STAR] = true;
  ARTSet6[ARTTS__MINUS_BACKSLASH_GT] = true;
  ARTSet6[ARTTS__PERIOD] = true;
  ARTSet6[ARTTS__COLON] = true;
  ARTSet6[ARTTS__LT] = true;
  ARTSet6[ARTTS__EQUAL] = true;
  ARTSet6[ARTTS__EQUAL_GT] = true;
  ARTSet6[ARTTS__EQUAL_GT_STAR] = true;
  ARTSet6[ARTTS__EQUAL_GT_GT] = true;
  ARTSet6[ARTTS__GT] = true;
  ARTSet6[ARTTS_False] = true;
  ARTSet6[ARTTS_True] = true;
  ARTSet6[ARTTS__BACKSLASH_BACKSLASH] = true;
  ARTSet6[ARTTS_anyBuiltinTerminal] = true;
  ARTSet6[ARTTS_anyCaseInsensitiveTerminal] = true;
  ARTSet6[ARTTS_anyCaseSensitiveTerminal] = true;
  ARTSet6[ARTTS_anyCharacterTerminal] = true;
  ARTSet6[ARTTS_anyLiteralTerminal] = true;
  ARTSet6[ARTTS_anyNonterminal] = true;
  ARTSet6[ARTTS_anyParaterminal] = true;
  ARTSet6[ARTTS_anyTerminal] = true;
  ARTSet6[ARTTS__BAR] = true;
  ARTSet6[ARTTS__BAR_GT] = true;
  ARTSet6[ARTTS__TILDE_GT] = true;
  ARTSet6[ARTTS__TILDE_GT_STAR] = true;
  ARTSet6[ARTTS__TILDE_GT_GT] = true;
  ARTSet6[ARTL_ART_CHAR_BQ] = true;
  ARTSet6[ARTL_ART_False] = true;
  ARTSet6[ARTL_ART_ID] = true;
  ARTSet6[ARTL_ART_ID_ATTRIBUTE] = true;
  ARTSet6[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet6[ARTL_ART_STRING_DQ] = true;
  ARTSet6[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet6[ARTL_ART_TRRELATION] = true;
  ARTSet6[ARTL_ART_True] = true;
  ARTSet6[ARTL_ART___bool] = true;
  ARTSet6[ARTL_ART___char] = true;
  ARTSet6[ARTL_ART___int32] = true;
  ARTSet6[ARTL_ART___real64] = true;
  ARTSet6[ARTL_ART___string] = true;
  ARTSet6[ARTL_ART_cfgAbbrev] = true;
  ARTSet6[ARTL_ART_cfgAtom] = true;
  ARTSet6[ARTL_ART_cfgAttributeEquation] = true;
  ARTSet6[ARTL_ART_cfgBuiltinTerminal] = true;
  ARTSet6[ARTL_ART_cfgCaseInsensitiveTerminal] = true;
  ARTSet6[ARTL_ART_cfgCaseSensitiveTerminal] = true;
  ARTSet6[ARTL_ART_cfgCatTail] = true;
  ARTSet6[ARTL_ART_cfgCharacterRangeTerminal] = true;
  ARTSet6[ARTL_ART_cfgCharacterTerminal] = true;
  ARTSet6[ARTL_ART_cfgDiff] = true;
  ARTSet6[ARTL_ART_cfgDoFirst] = true;
  ARTSet6[ARTL_ART_cfgElement] = true;
  ARTSet6[ARTL_ART_cfgEpsilon] = true;
  ARTSet6[ARTL_ART_cfgIter] = true;
  ARTSet6[ARTL_ART_cfgNonterminal] = true;
  ARTSet6[ARTL_ART_cfgNot] = true;
  ARTSet6[ARTL_ART_cfgRule] = true;
  ARTSet6[ARTL_ART_cfgSlotSymbol] = true;
  ARTSet6[ARTL_ART_cfgUnion] = true;
  ARTSet6[ARTL_ART_chooseDiff] = true;
  ARTSet6[ARTL_ART_chooseElement] = true;
  ARTSet6[ARTL_ART_choosePredefinedSet] = true;
  ARTSet6[ARTL_ART_chooseRule] = true;
  ARTSet6[ARTL_ART_chooseUnionIntersection] = true;
  ARTSet6[ARTL_ART_directive] = true;
  ARTSet6[ARTL_ART_text] = true;
  ARTSet6[ARTL_ART_textElement] = true;
  ARTSet6[ARTL_ART_tr] = true;
  ARTSet6[ARTL_ART_trConfiguration] = true;
  ARTSet6[ARTL_ART_trEntityReferences] = true;
  ARTSet6[ARTL_ART_trEquations] = true;
  ARTSet6[ARTL_ART_trLabel] = true;
  ARTSet6[ARTL_ART_trMatch] = true;
  ARTSet6[ARTL_ART_trPremises] = true;
  ARTSet6[ARTL_ART_trPrimaryTerm] = true;
  ARTSet6[ARTL_ART_trRule] = true;
  ARTSet6[ARTL_ART_trSubterms] = true;
  ARTSet6[ARTL_ART_trTerm] = true;
  ARTSet6[ARTL_ART_trTransition] = true;
}

public void ARTSet218initialise() {
  ARTSet218 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet218, 0, artSetExtent, false);
  ARTSet218[ARTTS__SHREIKsppfPriority] = true;
}

public void ARTSet121initialise() {
  ARTSet121 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet121, 0, artSetExtent, false);
  ARTSet121[ARTTB_CHAR_BQ] = true;
  ARTSet121[ARTTB_ID] = true;
  ARTSet121[ARTTB_STRING_BRACE_NEST] = true;
  ARTSet121[ARTTB_STRING_DOLLAR] = true;
  ARTSet121[ARTTB_STRING_DQ] = true;
  ARTSet121[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet121[ARTTS__HASH] = true;
  ARTSet121[ARTTS__AMPERSAND] = true;
  ARTSet121[ARTTS__LPAR] = true;
  ARTSet121[ARTTS__PERIOD] = true;
  ARTSet121[ARTTS__BACKSLASH_BACKSLASH] = true;
  ARTSet121[ARTL_ART_CHAR_BQ] = true;
  ARTSet121[ARTL_ART_ID] = true;
  ARTSet121[ARTL_ART_ID_ATTRIBUTE] = true;
  ARTSet121[ARTL_ART_STRING_BRACE_NEST] = true;
  ARTSet121[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet121[ARTL_ART_STRING_DQ] = true;
  ARTSet121[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet121[ARTL_ART_cfgAbbrev] = true;
  ARTSet121[ARTL_ART_cfgAtom] = true;
  ARTSet121[ARTL_ART_cfgAttributeEquation] = true;
  ARTSet121[ARTL_ART_cfgBuiltinTerminal] = true;
  ARTSet121[ARTL_ART_cfgCaseInsensitiveTerminal] = true;
  ARTSet121[ARTL_ART_cfgCaseSensitiveTerminal] = true;
  ARTSet121[ARTL_ART_cfgCat] = true;
  ARTSet121[ARTL_ART_cfgCatTail] = true;
  ARTSet121[ARTL_ART_cfgCharacterRangeTerminal] = true;
  ARTSet121[ARTL_ART_cfgCharacterTerminal] = true;
  ARTSet121[ARTL_ART_cfgDiff] = true;
  ARTSet121[ARTL_ART_cfgDoFirst] = true;
  ARTSet121[ARTL_ART_cfgElement] = true;
  ARTSet121[ARTL_ART_cfgEpsilon] = true;
  ARTSet121[ARTL_ART_cfgIter] = true;
  ARTSet121[ARTL_ART_cfgNativeAction] = true;
  ARTSet121[ARTL_ART_cfgNonterminal] = true;
  ARTSet121[ARTL_ART_cfgNot] = true;
  ARTSet121[ARTL_ART_cfgRHS] = true;
  ARTSet121[ARTL_ART_cfgSlot] = true;
  ARTSet121[ARTL_ART_cfgSlotSymbol] = true;
  ARTSet121[ARTL_ART_cfgUnion] = true;
}

public void ARTSet240initialise() {
  ARTSet240 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet240, 0, artSetExtent, false);
  ARTSet240[ARTTS__SHREIKearley] = true;
}

public void ARTSet310initialise() {
  ARTSet310 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet310, 0, artSetExtent, false);
  ARTSet310[ARTTS_listIn] = true;
  ARTSet310[ARTTS_listOut] = true;
  ARTSet310[ARTTS_map] = true;
  ARTSet310[ARTTS_mapFixed] = true;
  ARTSet310[ARTTS_singleton] = true;
  ARTSet310[ARTTS_untyped] = true;
  ARTSet310[ARTL_ART_trEntityKind] = true;
}

public void ARTSet285initialise() {
  ARTSet285 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet285, 0, artSetExtent, false);
  ARTSet285[ARTTS__PERIODjava] = true;
}

public void ARTSet46initialise() {
  ARTSet46 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet46, 0, artSetExtent, false);
  ARTSet46[ARTTB_STRING_DQ] = true;
  ARTSet46[ARTTB_STRING_SQ] = true;
  ARTSet46[ARTL_ART___string] = true;
}

public void ARTSet5initialise() {
  ARTSet5 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet5, 0, artSetExtent, false);
  ARTSet5[ARTTS_False] = true;
}

public void ARTSet122initialise() {
  ARTSet122 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet122, 0, artSetExtent, false);
  ARTSet122[ARTTS__COLON_COLON_EQUAL] = true;
}

public void ARTSet191initialise() {
  ARTSet191 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet191, 0, artSetExtent, false);
  ARTSet191[ARTTS__SHREIKtermShow] = true;
}

public void ARTSet40initialise() {
  ARTSet40 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet40, 0, artSetExtent, false);
  ARTSet40[ARTTB_SIGNED_INTEGER] = true;
}

public void ARTSet239initialise() {
  ARTSet239 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet239, 0, artSetExtent, false);
  ARTSet239[ARTTS__SHREIKearley2007LinkedAPI] = true;
}

public void ARTSet267initialise() {
  ARTSet267 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet267, 0, artSetExtent, false);
  ARTSet267[ARTTS__SHREIKosbrdGenerator] = true;
}

public void ARTSet92initialise() {
  ARTSet92 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet92, 0, artSetExtent, false);
  ARTSet92[ARTTS__LT] = true;
  ARTSet92[ARTTS__UPARROW] = true;
  ARTSet92[ARTTS__UPARROW_PLUS] = true;
  ARTSet92[ARTTS__UPARROW_UPARROW] = true;
  ARTSet92[ARTTS__UPARROW_UPARROW_UPARROW] = true;
  ARTSet92[ARTTS__UPARROW_] = true;
  ARTSet92[ARTL_ART_cfgDelay] = true;
  ARTSet92[ARTL_ART_cfgFoldNone] = true;
  ARTSet92[ARTL_ART_cfgFoldOver] = true;
  ARTSet92[ARTL_ART_cfgFoldUnder] = true;
  ARTSet92[ARTL_ART_cfgGather] = true;
  ARTSet92[ARTL_ART_cfgGrammarAnnotations] = true;
  ARTSet92[ARTL_ART_cfgInsert] = true;
}

public void ARTSet135initialise() {
  ARTSet135 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet135, 0, artSetExtent, false);
  ARTSet135[ARTTS_anyBuiltinTerminal] = true;
  ARTSet135[ARTTS_anyCaseInsensitiveTerminal] = true;
  ARTSet135[ARTTS_anyCaseSensitiveTerminal] = true;
  ARTSet135[ARTTS_anyCharacterTerminal] = true;
  ARTSet135[ARTTS_anyLiteralTerminal] = true;
  ARTSet135[ARTTS_anyNonterminal] = true;
  ARTSet135[ARTTS_anyParaterminal] = true;
  ARTSet135[ARTTS_anyTerminal] = true;
  ARTSet135[ARTL_ART_choosePredefinedSet] = true;
}

public void ARTSet274initialise() {
  ARTSet274 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet274, 0, artSetExtent, false);
  ARTSet274[ARTTS__SHREIKstart] = true;
}

public void ARTSet60initialise() {
  ARTSet60 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet60, 0, artSetExtent, false);
  ARTSet60[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet60[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet60[ARTL_ART_cfgCaseSensitiveTerminal] = true;
}

public void ARTSet134initialise() {
  ARTSet134 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet134, 0, artSetExtent, false);
  ARTSet134[ARTX_EOS] = true;
  ARTSet134[ARTTB_CHAR_BQ] = true;
  ARTSet134[ARTTB_ID] = true;
  ARTSet134[ARTTB_SIGNED_INTEGER] = true;
  ARTSet134[ARTTB_SIGNED_REAL] = true;
  ARTSet134[ARTTB_STRING_DOLLAR] = true;
  ARTSet134[ARTTB_STRING_DQ] = true;
  ARTSet134[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet134[ARTTB_STRING_SQ] = true;
  ARTSet134[ARTTS__SHREIKGLLFIFODescriptors] = true;
  ARTSet134[ARTTS__SHREIKGLLPredictivePops] = true;
  ARTSet134[ARTTS__SHREIKGLLSuppressPopGuard] = true;
  ARTSet134[ARTTS__SHREIKGLLSuppressProductionGuard] = true;
  ARTSet134[ARTTS__SHREIKGLLSuppressSemantics] = true;
  ARTSet134[ARTTS__SHREIKGLLSuppressTestRepeat] = true;
  ARTSet134[ARTTS__SHREIKabsorb] = true;
  ARTSet134[ARTTS__SHREIKalphabet] = true;
  ARTSet134[ARTTS__SHREIKcfgElements] = true;
  ARTSet134[ARTTS__SHREIKcnp] = true;
  ARTSet134[ARTTS__SHREIKcnpGeneratorPool] = true;
  ARTSet134[ARTTS__SHREIKcnpIndexedAPI] = true;
  ARTSet134[ARTTS__SHREIKcnpIndexedPool] = true;
  ARTSet134[ARTTS__SHREIKcnpLinkedAPI] = true;
  ARTSet134[ARTTS__SHREIKcompressWhitespaceJava] = true;
  ARTSet134[ARTTS__SHREIKearley] = true;
  ARTSet134[ARTTS__SHREIKearley2007LinkedAPI] = true;
  ARTSet134[ARTTS__SHREIKearleyIndexedAPI] = true;
  ARTSet134[ARTTS__SHREIKearleyIndexedData] = true;
  ARTSet134[ARTTS__SHREIKearleyIndexedPool] = true;
  ARTSet134[ARTTS__SHREIKearleyLinkedAPI] = true;
  ARTSet134[ARTTS__SHREIKearleyTable] = true;
  ARTSet134[ARTTS__SHREIKearleyTableIndexedAPI] = true;
  ARTSet134[ARTTS__SHREIKearleyTableIndexedData] = true;
  ARTSet134[ARTTS__SHREIKearleyTableIndexedPool] = true;
  ARTSet134[ARTTS__SHREIKearleyTableLinkedAPI] = true;
  ARTSet134[ARTTS__SHREIKextractJLS] = true;
  ARTSet134[ARTTS__SHREIKgenerateC_PLUS_PLUS] = true;
  ARTSet134[ARTTS__SHREIKgenerateDynamic] = true;
  ARTSet134[ARTTS__SHREIKgenerateFragment] = true;
  ARTSet134[ARTTS__SHREIKgenerateJava] = true;
  ARTSet134[ARTTS__SHREIKgenerateML] = true;
  ARTSet134[ARTTS__SHREIKgeneratePool] = true;
  ARTSet134[ARTTS__SHREIKgenerateState] = true;
  ARTSet134[ARTTS__SHREIKgenerateStatic] = true;
  ARTSet134[ARTTS__SHREIKgll] = true;
  ARTSet134[ARTTS__SHREIKgllClusteredGeneratorPool] = true;
  ARTSet134[ARTTS__SHREIKgllGeneratorPool] = true;
  ARTSet134[ARTTS__SHREIKgllTWEGeneratorPool] = true;
  ARTSet134[ARTTS__SHREIKgrammarWrite] = true;
  ARTSet134[ARTTS__SHREIKgssPrint] = true;
  ARTSet134[ARTTS__SHREIKgssShow] = true;
  ARTSet134[ARTTS__SHREIKgssWrite] = true;
  ARTSet134[ARTTS__SHREIKinjectInstance] = true;
  ARTSet134[ARTTS__SHREIKinjectProduction] = true;
  ARTSet134[ARTTS__SHREIKinput] = true;
  ARTSet134[ARTTS__SHREIKinputPrint] = true;
  ARTSet134[ARTTS__SHREIKlatex] = true;
  ARTSet134[ARTTS__SHREIKlcnp] = true;
  ARTSet134[ARTTS__SHREIKlcnpGeneratorPool] = true;
  ARTSet134[ARTTS__SHREIKlcnpIndexedAPI] = true;
  ARTSet134[ARTTS__SHREIKlcnpIndexedPool] = true;
  ARTSet134[ARTTS__SHREIKlcnpLinkedAPI] = true;
  ARTSet134[ARTTS__SHREIKlexDFA] = true;
  ARTSet134[ARTTS__SHREIKlexGLL] = true;
  ARTSet134[ARTTS__SHREIKlexHardCoded] = true;
  ARTSet134[ARTTS__SHREIKlexWSSuffix] = true;
  ARTSet134[ARTTS__SHREIKlexerData] = true;
  ARTSet134[ARTTS__SHREIKlexerName] = true;
  ARTSet134[ARTTS__SHREIKmain] = true;
  ARTSet134[ARTTS__SHREIKmerge] = true;
  ARTSet134[ARTTS__SHREIKmgll] = true;
  ARTSet134[ARTTS__SHREIKmgllGeneratorPool] = true;
  ARTSet134[ARTTS__SHREIKmodule] = true;
  ARTSet134[ARTTS__SHREIKnamespace] = true;
  ARTSet134[ARTTS__SHREIKosbrd] = true;
  ARTSet134[ARTTS__SHREIKosbrdGenerator] = true;
  ARTSet134[ARTTS__SHREIKoutputDirectory] = true;
  ARTSet134[ARTTS__SHREIKparaterminal] = true;
  ARTSet134[ARTTS__SHREIKparseCountsPrint] = true;
  ARTSet134[ARTTS__SHREIKparserName] = true;
  ARTSet134[ARTTS__SHREIKprelude] = true;
  ARTSet134[ARTTS__SHREIKrelation] = true;
  ARTSet134[ARTTS__SHREIKresult] = true;
  ARTSet134[ARTTS__SHREIKsml97Parser] = true;
  ARTSet134[ARTTS__SHREIKsppfLongest] = true;
  ARTSet134[ARTTS__SHREIKsppfPrint] = true;
  ARTSet134[ARTTS__SHREIKsppfPriority] = true;
  ARTSet134[ARTTS__SHREIKsppfShow] = true;
  ARTSet134[ARTTS__SHREIKsppfWrite] = true;
  ARTSet134[ARTTS__SHREIKstart] = true;
  ARTSet134[ARTTS__SHREIKstatistics] = true;
  ARTSet134[ARTTS__SHREIKstrategy] = true;
  ARTSet134[ARTTS__SHREIKsupport] = true;
  ARTSet134[ARTTS__SHREIKtermPrint] = true;
  ARTSet134[ARTTS__SHREIKtermShow] = true;
  ARTSet134[ARTTS__SHREIKtermTool] = true;
  ARTSet134[ARTTS__SHREIKtermWrite] = true;
  ARTSet134[ARTTS__SHREIKtrace] = true;
  ARTSet134[ARTTS__SHREIKtreePrint] = true;
  ARTSet134[ARTTS__SHREIKtreeShow] = true;
  ARTSet134[ARTTS__SHREIKtreeWrite] = true;
  ARTSet134[ARTTS__SHREIKtry] = true;
  ARTSet134[ARTTS__SHREIKtweDead] = true;
  ARTSet134[ARTTS__SHREIKtweExtents] = true;
  ARTSet134[ARTTS__SHREIKtweFromSPPF] = true;
  ARTSet134[ARTTS__SHREIKtweLexicalisations] = true;
  ARTSet134[ARTTS__SHREIKtweLongest] = true;
  ARTSet134[ARTTS__SHREIKtwePrint] = true;
  ARTSet134[ARTTS__SHREIKtwePrintFull] = true;
  ARTSet134[ARTTS__SHREIKtwePrintSummary] = true;
  ARTSet134[ARTTS__SHREIKtwePriority] = true;
  ARTSet134[ARTTS__SHREIKtweRecursive] = true;
  ARTSet134[ARTTS__SHREIKtweSegments] = true;
  ARTSet134[ARTTS__SHREIKtweShow] = true;
  ARTSet134[ARTTS__SHREIKtweTokenWrite] = true;
  ARTSet134[ARTTS__SHREIKtweWrite] = true;
  ARTSet134[ARTTS__SHREIKunicodeAsEscapeSeuences] = true;
  ARTSet134[ARTTS__SHREIKuse] = true;
  ARTSet134[ARTTS__SHREIKverbosity] = true;
  ARTSet134[ARTTS__SHREIKwhitespace] = true;
  ARTSet134[ARTTS__AMPERSAND] = true;
  ARTSet134[ARTTS__LPAR] = true;
  ARTSet134[ARTTS__RPAR] = true;
  ARTSet134[ARTTS__MINUS] = true;
  ARTSet134[ARTTS__MINUS_MINUS_MINUS] = true;
  ARTSet134[ARTTS__SLASH] = true;
  ARTSet134[ARTTS__LT] = true;
  ARTSet134[ARTTS__LT_LT] = true;
  ARTSet134[ARTTS__GT] = true;
  ARTSet134[ARTTS__GT_GT] = true;
  ARTSet134[ARTTS_False] = true;
  ARTSet134[ARTTS_True] = true;
  ARTSet134[ARTTS__BACKSLASH] = true;
  ARTSet134[ARTTS_anyBuiltinTerminal] = true;
  ARTSet134[ARTTS_anyCaseInsensitiveTerminal] = true;
  ARTSet134[ARTTS_anyCaseSensitiveTerminal] = true;
  ARTSet134[ARTTS_anyCharacterTerminal] = true;
  ARTSet134[ARTTS_anyLiteralTerminal] = true;
  ARTSet134[ARTTS_anyNonterminal] = true;
  ARTSet134[ARTTS_anyParaterminal] = true;
  ARTSet134[ARTTS_anyTerminal] = true;
  ARTSet134[ARTTS__BAR] = true;
  ARTSet134[ARTL_ART_CHAR_BQ] = true;
  ARTSet134[ARTL_ART_False] = true;
  ARTSet134[ARTL_ART_ID] = true;
  ARTSet134[ARTL_ART_ID_ATTRIBUTE] = true;
  ARTSet134[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet134[ARTL_ART_STRING_DQ] = true;
  ARTSet134[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet134[ARTL_ART_True] = true;
  ARTSet134[ARTL_ART___bool] = true;
  ARTSet134[ARTL_ART___char] = true;
  ARTSet134[ARTL_ART___int32] = true;
  ARTSet134[ARTL_ART___real64] = true;
  ARTSet134[ARTL_ART___string] = true;
  ARTSet134[ARTL_ART_cfgBuiltinTerminal] = true;
  ARTSet134[ARTL_ART_cfgCaseInsensitiveTerminal] = true;
  ARTSet134[ARTL_ART_cfgCaseSensitiveTerminal] = true;
  ARTSet134[ARTL_ART_cfgCharacterTerminal] = true;
  ARTSet134[ARTL_ART_cfgNonterminal] = true;
  ARTSet134[ARTL_ART_cfgRule] = true;
  ARTSet134[ARTL_ART_chooseDiff] = true;
  ARTSet134[ARTL_ART_chooseElement] = true;
  ARTSet134[ARTL_ART_chooseHigher] = true;
  ARTSet134[ARTL_ART_chooseIntersection] = true;
  ARTSet134[ARTL_ART_chooseLonger] = true;
  ARTSet134[ARTL_ART_chooseLower] = true;
  ARTSet134[ARTL_ART_choosePredefinedSet] = true;
  ARTSet134[ARTL_ART_chooseRule] = true;
  ARTSet134[ARTL_ART_chooseShorter] = true;
  ARTSet134[ARTL_ART_chooseUnion] = true;
  ARTSet134[ARTL_ART_chooseUnionIntersection] = true;
  ARTSet134[ARTL_ART_chooserOp] = true;
  ARTSet134[ARTL_ART_directive] = true;
  ARTSet134[ARTL_ART_text] = true;
  ARTSet134[ARTL_ART_textElement] = true;
  ARTSet134[ARTL_ART_tr] = true;
  ARTSet134[ARTL_ART_trConfiguration] = true;
  ARTSet134[ARTL_ART_trLabel] = true;
  ARTSet134[ARTL_ART_trMatch] = true;
  ARTSet134[ARTL_ART_trPremises] = true;
  ARTSet134[ARTL_ART_trPrimaryTerm] = true;
  ARTSet134[ARTL_ART_trRule] = true;
  ARTSet134[ARTL_ART_trTerm] = true;
  ARTSet134[ARTL_ART_trTransition] = true;
}

public void ARTSet280initialise() {
  ARTSet280 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet280, 0, artSetExtent, false);
  ARTSet280[ARTTS_postOrder] = true;
}

public void ARTSet208initialise() {
  ARTSet208 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet208, 0, artSetExtent, false);
  ARTSet208[ARTTS__SHREIKtweFromSPPF] = true;
}

public void ARTSet263initialise() {
  ARTSet263 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet263, 0, artSetExtent, false);
  ARTSet263[ARTTS__SHREIKgllClusteredGeneratorPool] = true;
}

public void ARTSet292initialise() {
  ARTSet292 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet292, 0, artSetExtent, false);
  ARTSet292[ARTTB_CHAR_BQ] = true;
  ARTSet292[ARTTB_ID] = true;
  ARTSet292[ARTTB_SIGNED_INTEGER] = true;
  ARTSet292[ARTTB_SIGNED_REAL] = true;
  ARTSet292[ARTTB_STRING_DOLLAR] = true;
  ARTSet292[ARTTB_STRING_DQ] = true;
  ARTSet292[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet292[ARTTB_STRING_SQ] = true;
  ARTSet292[ARTTS__SHREIKGLLFIFODescriptors] = true;
  ARTSet292[ARTTS__SHREIKGLLPredictivePops] = true;
  ARTSet292[ARTTS__SHREIKGLLSuppressPopGuard] = true;
  ARTSet292[ARTTS__SHREIKGLLSuppressProductionGuard] = true;
  ARTSet292[ARTTS__SHREIKGLLSuppressSemantics] = true;
  ARTSet292[ARTTS__SHREIKGLLSuppressTestRepeat] = true;
  ARTSet292[ARTTS__SHREIKabsorb] = true;
  ARTSet292[ARTTS__SHREIKalphabet] = true;
  ARTSet292[ARTTS__SHREIKcfgElements] = true;
  ARTSet292[ARTTS__SHREIKcnp] = true;
  ARTSet292[ARTTS__SHREIKcnpGeneratorPool] = true;
  ARTSet292[ARTTS__SHREIKcnpIndexedAPI] = true;
  ARTSet292[ARTTS__SHREIKcnpIndexedPool] = true;
  ARTSet292[ARTTS__SHREIKcnpLinkedAPI] = true;
  ARTSet292[ARTTS__SHREIKcompressWhitespaceJava] = true;
  ARTSet292[ARTTS__SHREIKearley] = true;
  ARTSet292[ARTTS__SHREIKearley2007LinkedAPI] = true;
  ARTSet292[ARTTS__SHREIKearleyIndexedAPI] = true;
  ARTSet292[ARTTS__SHREIKearleyIndexedData] = true;
  ARTSet292[ARTTS__SHREIKearleyIndexedPool] = true;
  ARTSet292[ARTTS__SHREIKearleyLinkedAPI] = true;
  ARTSet292[ARTTS__SHREIKearleyTable] = true;
  ARTSet292[ARTTS__SHREIKearleyTableIndexedAPI] = true;
  ARTSet292[ARTTS__SHREIKearleyTableIndexedData] = true;
  ARTSet292[ARTTS__SHREIKearleyTableIndexedPool] = true;
  ARTSet292[ARTTS__SHREIKearleyTableLinkedAPI] = true;
  ARTSet292[ARTTS__SHREIKextractJLS] = true;
  ARTSet292[ARTTS__SHREIKgenerateC_PLUS_PLUS] = true;
  ARTSet292[ARTTS__SHREIKgenerateDynamic] = true;
  ARTSet292[ARTTS__SHREIKgenerateFragment] = true;
  ARTSet292[ARTTS__SHREIKgenerateJava] = true;
  ARTSet292[ARTTS__SHREIKgenerateML] = true;
  ARTSet292[ARTTS__SHREIKgeneratePool] = true;
  ARTSet292[ARTTS__SHREIKgenerateState] = true;
  ARTSet292[ARTTS__SHREIKgenerateStatic] = true;
  ARTSet292[ARTTS__SHREIKgll] = true;
  ARTSet292[ARTTS__SHREIKgllClusteredGeneratorPool] = true;
  ARTSet292[ARTTS__SHREIKgllGeneratorPool] = true;
  ARTSet292[ARTTS__SHREIKgllTWEGeneratorPool] = true;
  ARTSet292[ARTTS__SHREIKgrammarWrite] = true;
  ARTSet292[ARTTS__SHREIKgssPrint] = true;
  ARTSet292[ARTTS__SHREIKgssShow] = true;
  ARTSet292[ARTTS__SHREIKgssWrite] = true;
  ARTSet292[ARTTS__SHREIKinjectInstance] = true;
  ARTSet292[ARTTS__SHREIKinjectProduction] = true;
  ARTSet292[ARTTS__SHREIKinput] = true;
  ARTSet292[ARTTS__SHREIKinputPrint] = true;
  ARTSet292[ARTTS__SHREIKlatex] = true;
  ARTSet292[ARTTS__SHREIKlcnp] = true;
  ARTSet292[ARTTS__SHREIKlcnpGeneratorPool] = true;
  ARTSet292[ARTTS__SHREIKlcnpIndexedAPI] = true;
  ARTSet292[ARTTS__SHREIKlcnpIndexedPool] = true;
  ARTSet292[ARTTS__SHREIKlcnpLinkedAPI] = true;
  ARTSet292[ARTTS__SHREIKlexDFA] = true;
  ARTSet292[ARTTS__SHREIKlexGLL] = true;
  ARTSet292[ARTTS__SHREIKlexHardCoded] = true;
  ARTSet292[ARTTS__SHREIKlexWSSuffix] = true;
  ARTSet292[ARTTS__SHREIKlexerData] = true;
  ARTSet292[ARTTS__SHREIKlexerName] = true;
  ARTSet292[ARTTS__SHREIKmain] = true;
  ARTSet292[ARTTS__SHREIKmerge] = true;
  ARTSet292[ARTTS__SHREIKmgll] = true;
  ARTSet292[ARTTS__SHREIKmgllGeneratorPool] = true;
  ARTSet292[ARTTS__SHREIKmodule] = true;
  ARTSet292[ARTTS__SHREIKnamespace] = true;
  ARTSet292[ARTTS__SHREIKosbrd] = true;
  ARTSet292[ARTTS__SHREIKosbrdGenerator] = true;
  ARTSet292[ARTTS__SHREIKoutputDirectory] = true;
  ARTSet292[ARTTS__SHREIKparaterminal] = true;
  ARTSet292[ARTTS__SHREIKparseCountsPrint] = true;
  ARTSet292[ARTTS__SHREIKparserName] = true;
  ARTSet292[ARTTS__SHREIKprelude] = true;
  ARTSet292[ARTTS__SHREIKrelation] = true;
  ARTSet292[ARTTS__SHREIKresult] = true;
  ARTSet292[ARTTS__SHREIKsml97Parser] = true;
  ARTSet292[ARTTS__SHREIKsppfLongest] = true;
  ARTSet292[ARTTS__SHREIKsppfPrint] = true;
  ARTSet292[ARTTS__SHREIKsppfPriority] = true;
  ARTSet292[ARTTS__SHREIKsppfShow] = true;
  ARTSet292[ARTTS__SHREIKsppfWrite] = true;
  ARTSet292[ARTTS__SHREIKstart] = true;
  ARTSet292[ARTTS__SHREIKstatistics] = true;
  ARTSet292[ARTTS__SHREIKstrategy] = true;
  ARTSet292[ARTTS__SHREIKsupport] = true;
  ARTSet292[ARTTS__SHREIKtermPrint] = true;
  ARTSet292[ARTTS__SHREIKtermShow] = true;
  ARTSet292[ARTTS__SHREIKtermTool] = true;
  ARTSet292[ARTTS__SHREIKtermWrite] = true;
  ARTSet292[ARTTS__SHREIKtrace] = true;
  ARTSet292[ARTTS__SHREIKtreePrint] = true;
  ARTSet292[ARTTS__SHREIKtreeShow] = true;
  ARTSet292[ARTTS__SHREIKtreeWrite] = true;
  ARTSet292[ARTTS__SHREIKtry] = true;
  ARTSet292[ARTTS__SHREIKtweDead] = true;
  ARTSet292[ARTTS__SHREIKtweExtents] = true;
  ARTSet292[ARTTS__SHREIKtweFromSPPF] = true;
  ARTSet292[ARTTS__SHREIKtweLexicalisations] = true;
  ARTSet292[ARTTS__SHREIKtweLongest] = true;
  ARTSet292[ARTTS__SHREIKtwePrint] = true;
  ARTSet292[ARTTS__SHREIKtwePrintFull] = true;
  ARTSet292[ARTTS__SHREIKtwePrintSummary] = true;
  ARTSet292[ARTTS__SHREIKtwePriority] = true;
  ARTSet292[ARTTS__SHREIKtweRecursive] = true;
  ARTSet292[ARTTS__SHREIKtweSegments] = true;
  ARTSet292[ARTTS__SHREIKtweShow] = true;
  ARTSet292[ARTTS__SHREIKtweTokenWrite] = true;
  ARTSet292[ARTTS__SHREIKtweWrite] = true;
  ARTSet292[ARTTS__SHREIKunicodeAsEscapeSeuences] = true;
  ARTSet292[ARTTS__SHREIKuse] = true;
  ARTSet292[ARTTS__SHREIKverbosity] = true;
  ARTSet292[ARTTS__SHREIKwhitespace] = true;
  ARTSet292[ARTTS__AMPERSAND] = true;
  ARTSet292[ARTTS__LPAR] = true;
  ARTSet292[ARTTS__MINUS] = true;
  ARTSet292[ARTTS__MINUS_MINUS_MINUS] = true;
  ARTSet292[ARTTS__LT] = true;
  ARTSet292[ARTTS_False] = true;
  ARTSet292[ARTTS_True] = true;
  ARTSet292[ARTTS_anyBuiltinTerminal] = true;
  ARTSet292[ARTTS_anyCaseInsensitiveTerminal] = true;
  ARTSet292[ARTTS_anyCaseSensitiveTerminal] = true;
  ARTSet292[ARTTS_anyCharacterTerminal] = true;
  ARTSet292[ARTTS_anyLiteralTerminal] = true;
  ARTSet292[ARTTS_anyNonterminal] = true;
  ARTSet292[ARTTS_anyParaterminal] = true;
  ARTSet292[ARTTS_anyTerminal] = true;
  ARTSet292[ARTL_ART_CHAR_BQ] = true;
  ARTSet292[ARTL_ART_False] = true;
  ARTSet292[ARTL_ART_ID] = true;
  ARTSet292[ARTL_ART_ID_ATTRIBUTE] = true;
  ARTSet292[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet292[ARTL_ART_STRING_DQ] = true;
  ARTSet292[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet292[ARTL_ART_True] = true;
  ARTSet292[ARTL_ART___bool] = true;
  ARTSet292[ARTL_ART___char] = true;
  ARTSet292[ARTL_ART___int32] = true;
  ARTSet292[ARTL_ART___real64] = true;
  ARTSet292[ARTL_ART___string] = true;
  ARTSet292[ARTL_ART_cfgBuiltinTerminal] = true;
  ARTSet292[ARTL_ART_cfgCaseInsensitiveTerminal] = true;
  ARTSet292[ARTL_ART_cfgCaseSensitiveTerminal] = true;
  ARTSet292[ARTL_ART_cfgCharacterTerminal] = true;
  ARTSet292[ARTL_ART_cfgNonterminal] = true;
  ARTSet292[ARTL_ART_cfgRule] = true;
  ARTSet292[ARTL_ART_chooseDiff] = true;
  ARTSet292[ARTL_ART_chooseElement] = true;
  ARTSet292[ARTL_ART_choosePredefinedSet] = true;
  ARTSet292[ARTL_ART_chooseRule] = true;
  ARTSet292[ARTL_ART_chooseUnionIntersection] = true;
  ARTSet292[ARTL_ART_directive] = true;
  ARTSet292[ARTL_ART_text] = true;
  ARTSet292[ARTL_ART_textElement] = true;
  ARTSet292[ARTL_ART_tr] = true;
  ARTSet292[ARTL_ART_trConfiguration] = true;
  ARTSet292[ARTL_ART_trLabel] = true;
  ARTSet292[ARTL_ART_trMatch] = true;
  ARTSet292[ARTL_ART_trPremises] = true;
  ARTSet292[ARTL_ART_trPrimaryTerm] = true;
  ARTSet292[ARTL_ART_trRule] = true;
  ARTSet292[ARTL_ART_trTerm] = true;
  ARTSet292[ARTL_ART_trTransition] = true;
}

public void ARTSet251initialise() {
  ARTSet251 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet251, 0, artSetExtent, false);
  ARTSet251[ARTTS__SHREIKcnpLinkedAPI] = true;
}

public void ARTSet206initialise() {
  ARTSet206 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet206, 0, artSetExtent, false);
  ARTSet206[ARTTS__SHREIKinjectInstance] = true;
}

public void ARTSet166initialise() {
  ARTSet166 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet166, 0, artSetExtent, false);
  ARTSet166[ARTTB_ID] = true;
  ARTSet166[ARTTB_STRING_DOLLAR] = true;
  ARTSet166[ARTL_ART_ID] = true;
  ARTSet166[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet166[ARTL_ART_aliasedCFGNonterminal] = true;
  ARTSet166[ARTL_ART_cfgNonterminal] = true;
  ARTSet166[ARTL_ART_paraterminalisers] = true;
}

public void ARTSet196initialise() {
  ARTSet196 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet196, 0, artSetExtent, false);
  ARTSet196[ARTTB_ID] = true;
  ARTSet196[ARTL_ART_ID] = true;
  ARTSet196[ARTL_ART_idJAVA] = true;
}

public void ARTSet255initialise() {
  ARTSet255 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet255, 0, artSetExtent, false);
  ARTSet255[ARTTS__SHREIKlcnp] = true;
}

public void ARTSet190initialise() {
  ARTSet190 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet190, 0, artSetExtent, false);
  ARTSet190[ARTTS__SHREIKtermWrite] = true;
}

public void ARTSet287initialise() {
  ARTSet287 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet287, 0, artSetExtent, false);
  ARTSet287[ARTTS__PERIODraw] = true;
}

public void ARTSet181initialise() {
  ARTSet181 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet181, 0, artSetExtent, false);
  ARTSet181[ARTTS__SHREIKgssWrite] = true;
}

public void ARTSet186initialise() {
  ARTSet186 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet186, 0, artSetExtent, false);
  ARTSet186[ARTTS__SHREIKtreePrint] = true;
}

public void ARTSet194initialise() {
  ARTSet194 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet194, 0, artSetExtent, false);
  ARTSet194[ARTTS__SHREIKtermTool] = true;
}

public void ARTSet52initialise() {
  ARTSet52 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet52, 0, artSetExtent, false);
  ARTSet52[ARTTB_CHAR_BQ] = true;
  ARTSet52[ARTTB_ID] = true;
  ARTSet52[ARTTB_STRING_BRACE_NEST] = true;
  ARTSet52[ARTTB_STRING_DOLLAR] = true;
  ARTSet52[ARTTB_STRING_DQ] = true;
  ARTSet52[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet52[ARTTS__HASH] = true;
  ARTSet52[ARTTS__AMPERSAND] = true;
  ARTSet52[ARTTS__LPAR] = true;
  ARTSet52[ARTTS__PERIOD] = true;
  ARTSet52[ARTTS__BACKSLASH_BACKSLASH] = true;
  ARTSet52[ARTL_ART_CHAR_BQ] = true;
  ARTSet52[ARTL_ART_ID] = true;
  ARTSet52[ARTL_ART_ID_ATTRIBUTE] = true;
  ARTSet52[ARTL_ART_STRING_BRACE_NEST] = true;
  ARTSet52[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet52[ARTL_ART_STRING_DQ] = true;
  ARTSet52[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet52[ARTL_ART_cfgAbbrev] = true;
  ARTSet52[ARTL_ART_cfgAtom] = true;
  ARTSet52[ARTL_ART_cfgAttributeEquation] = true;
  ARTSet52[ARTL_ART_cfgBuiltinTerminal] = true;
  ARTSet52[ARTL_ART_cfgCaseInsensitiveTerminal] = true;
  ARTSet52[ARTL_ART_cfgCaseSensitiveTerminal] = true;
  ARTSet52[ARTL_ART_cfgCat] = true;
  ARTSet52[ARTL_ART_cfgCatTail] = true;
  ARTSet52[ARTL_ART_cfgCharacterRangeTerminal] = true;
  ARTSet52[ARTL_ART_cfgCharacterTerminal] = true;
  ARTSet52[ARTL_ART_cfgDiff] = true;
  ARTSet52[ARTL_ART_cfgDoFirst] = true;
  ARTSet52[ARTL_ART_cfgElement] = true;
  ARTSet52[ARTL_ART_cfgEpsilon] = true;
  ARTSet52[ARTL_ART_cfgIter] = true;
  ARTSet52[ARTL_ART_cfgNativeAction] = true;
  ARTSet52[ARTL_ART_cfgNonterminal] = true;
  ARTSet52[ARTL_ART_cfgNot] = true;
  ARTSet52[ARTL_ART_cfgSlot] = true;
  ARTSet52[ARTL_ART_cfgSlotSymbol] = true;
  ARTSet52[ARTL_ART_cfgUnion] = true;
}

public void ARTSet156initialise() {
  ARTSet156 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet156, 0, artSetExtent, false);
  ARTSet156[ARTTS__GT_GT] = true;
  ARTSet156[ARTL_ART_chooseLonger] = true;
}

public void ARTSet3initialise() {
  ARTSet3 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet3, 0, artSetExtent, false);
  ARTSet3[ARTX_EOS] = true;
  ARTSet3[ARTTB_CHAR_BQ] = true;
  ARTSet3[ARTTB_ID] = true;
  ARTSet3[ARTTB_SIGNED_INTEGER] = true;
  ARTSet3[ARTTB_SIGNED_REAL] = true;
  ARTSet3[ARTTB_STRING_BRACE_NEST] = true;
  ARTSet3[ARTTB_STRING_DOLLAR] = true;
  ARTSet3[ARTTB_STRING_DQ] = true;
  ARTSet3[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet3[ARTTB_STRING_SQ] = true;
  ARTSet3[ARTTS__SHREIKGLLFIFODescriptors] = true;
  ARTSet3[ARTTS__SHREIKGLLPredictivePops] = true;
  ARTSet3[ARTTS__SHREIKGLLSuppressPopGuard] = true;
  ARTSet3[ARTTS__SHREIKGLLSuppressProductionGuard] = true;
  ARTSet3[ARTTS__SHREIKGLLSuppressSemantics] = true;
  ARTSet3[ARTTS__SHREIKGLLSuppressTestRepeat] = true;
  ARTSet3[ARTTS__SHREIKabsorb] = true;
  ARTSet3[ARTTS__SHREIKalphabet] = true;
  ARTSet3[ARTTS__SHREIKcfgElements] = true;
  ARTSet3[ARTTS__SHREIKcnp] = true;
  ARTSet3[ARTTS__SHREIKcnpGeneratorPool] = true;
  ARTSet3[ARTTS__SHREIKcnpIndexedAPI] = true;
  ARTSet3[ARTTS__SHREIKcnpIndexedPool] = true;
  ARTSet3[ARTTS__SHREIKcnpLinkedAPI] = true;
  ARTSet3[ARTTS__SHREIKcompressWhitespaceJava] = true;
  ARTSet3[ARTTS__SHREIKearley] = true;
  ARTSet3[ARTTS__SHREIKearley2007LinkedAPI] = true;
  ARTSet3[ARTTS__SHREIKearleyIndexedAPI] = true;
  ARTSet3[ARTTS__SHREIKearleyIndexedData] = true;
  ARTSet3[ARTTS__SHREIKearleyIndexedPool] = true;
  ARTSet3[ARTTS__SHREIKearleyLinkedAPI] = true;
  ARTSet3[ARTTS__SHREIKearleyTable] = true;
  ARTSet3[ARTTS__SHREIKearleyTableIndexedAPI] = true;
  ARTSet3[ARTTS__SHREIKearleyTableIndexedData] = true;
  ARTSet3[ARTTS__SHREIKearleyTableIndexedPool] = true;
  ARTSet3[ARTTS__SHREIKearleyTableLinkedAPI] = true;
  ARTSet3[ARTTS__SHREIKextractJLS] = true;
  ARTSet3[ARTTS__SHREIKgenerateC_PLUS_PLUS] = true;
  ARTSet3[ARTTS__SHREIKgenerateDynamic] = true;
  ARTSet3[ARTTS__SHREIKgenerateFragment] = true;
  ARTSet3[ARTTS__SHREIKgenerateJava] = true;
  ARTSet3[ARTTS__SHREIKgenerateML] = true;
  ARTSet3[ARTTS__SHREIKgeneratePool] = true;
  ARTSet3[ARTTS__SHREIKgenerateState] = true;
  ARTSet3[ARTTS__SHREIKgenerateStatic] = true;
  ARTSet3[ARTTS__SHREIKgll] = true;
  ARTSet3[ARTTS__SHREIKgllClusteredGeneratorPool] = true;
  ARTSet3[ARTTS__SHREIKgllGeneratorPool] = true;
  ARTSet3[ARTTS__SHREIKgllTWEGeneratorPool] = true;
  ARTSet3[ARTTS__SHREIKgrammarWrite] = true;
  ARTSet3[ARTTS__SHREIKgssPrint] = true;
  ARTSet3[ARTTS__SHREIKgssShow] = true;
  ARTSet3[ARTTS__SHREIKgssWrite] = true;
  ARTSet3[ARTTS__SHREIKinjectInstance] = true;
  ARTSet3[ARTTS__SHREIKinjectProduction] = true;
  ARTSet3[ARTTS__SHREIKinput] = true;
  ARTSet3[ARTTS__SHREIKinputPrint] = true;
  ARTSet3[ARTTS__SHREIKlatex] = true;
  ARTSet3[ARTTS__SHREIKlcnp] = true;
  ARTSet3[ARTTS__SHREIKlcnpGeneratorPool] = true;
  ARTSet3[ARTTS__SHREIKlcnpIndexedAPI] = true;
  ARTSet3[ARTTS__SHREIKlcnpIndexedPool] = true;
  ARTSet3[ARTTS__SHREIKlcnpLinkedAPI] = true;
  ARTSet3[ARTTS__SHREIKlexDFA] = true;
  ARTSet3[ARTTS__SHREIKlexGLL] = true;
  ARTSet3[ARTTS__SHREIKlexHardCoded] = true;
  ARTSet3[ARTTS__SHREIKlexWSSuffix] = true;
  ARTSet3[ARTTS__SHREIKlexerData] = true;
  ARTSet3[ARTTS__SHREIKlexerName] = true;
  ARTSet3[ARTTS__SHREIKmain] = true;
  ARTSet3[ARTTS__SHREIKmerge] = true;
  ARTSet3[ARTTS__SHREIKmgll] = true;
  ARTSet3[ARTTS__SHREIKmgllGeneratorPool] = true;
  ARTSet3[ARTTS__SHREIKmodule] = true;
  ARTSet3[ARTTS__SHREIKnamespace] = true;
  ARTSet3[ARTTS__SHREIKosbrd] = true;
  ARTSet3[ARTTS__SHREIKosbrdGenerator] = true;
  ARTSet3[ARTTS__SHREIKoutputDirectory] = true;
  ARTSet3[ARTTS__SHREIKparaterminal] = true;
  ARTSet3[ARTTS__SHREIKparseCountsPrint] = true;
  ARTSet3[ARTTS__SHREIKparserName] = true;
  ARTSet3[ARTTS__SHREIKprelude] = true;
  ARTSet3[ARTTS__SHREIKrelation] = true;
  ARTSet3[ARTTS__SHREIKresult] = true;
  ARTSet3[ARTTS__SHREIKsml97Parser] = true;
  ARTSet3[ARTTS__SHREIKsppfLongest] = true;
  ARTSet3[ARTTS__SHREIKsppfPrint] = true;
  ARTSet3[ARTTS__SHREIKsppfPriority] = true;
  ARTSet3[ARTTS__SHREIKsppfShow] = true;
  ARTSet3[ARTTS__SHREIKsppfWrite] = true;
  ARTSet3[ARTTS__SHREIKstart] = true;
  ARTSet3[ARTTS__SHREIKstatistics] = true;
  ARTSet3[ARTTS__SHREIKstrategy] = true;
  ARTSet3[ARTTS__SHREIKsupport] = true;
  ARTSet3[ARTTS__SHREIKtermPrint] = true;
  ARTSet3[ARTTS__SHREIKtermShow] = true;
  ARTSet3[ARTTS__SHREIKtermTool] = true;
  ARTSet3[ARTTS__SHREIKtermWrite] = true;
  ARTSet3[ARTTS__SHREIKtrace] = true;
  ARTSet3[ARTTS__SHREIKtreePrint] = true;
  ARTSet3[ARTTS__SHREIKtreeShow] = true;
  ARTSet3[ARTTS__SHREIKtreeWrite] = true;
  ARTSet3[ARTTS__SHREIKtry] = true;
  ARTSet3[ARTTS__SHREIKtweDead] = true;
  ARTSet3[ARTTS__SHREIKtweExtents] = true;
  ARTSet3[ARTTS__SHREIKtweFromSPPF] = true;
  ARTSet3[ARTTS__SHREIKtweLexicalisations] = true;
  ARTSet3[ARTTS__SHREIKtweLongest] = true;
  ARTSet3[ARTTS__SHREIKtwePrint] = true;
  ARTSet3[ARTTS__SHREIKtwePrintFull] = true;
  ARTSet3[ARTTS__SHREIKtwePrintSummary] = true;
  ARTSet3[ARTTS__SHREIKtwePriority] = true;
  ARTSet3[ARTTS__SHREIKtweRecursive] = true;
  ARTSet3[ARTTS__SHREIKtweSegments] = true;
  ARTSet3[ARTTS__SHREIKtweShow] = true;
  ARTSet3[ARTTS__SHREIKtweTokenWrite] = true;
  ARTSet3[ARTTS__SHREIKtweWrite] = true;
  ARTSet3[ARTTS__SHREIKunicodeAsEscapeSeuences] = true;
  ARTSet3[ARTTS__SHREIKuse] = true;
  ARTSet3[ARTTS__SHREIKverbosity] = true;
  ARTSet3[ARTTS__SHREIKwhitespace] = true;
  ARTSet3[ARTTS__HASH] = true;
  ARTSet3[ARTTS__AMPERSAND] = true;
  ARTSet3[ARTTS__LPAR] = true;
  ARTSet3[ARTTS__RPAR] = true;
  ARTSet3[ARTTS__STAR] = true;
  ARTSet3[ARTTS__PLUS] = true;
  ARTSet3[ARTTS__COMMA] = true;
  ARTSet3[ARTTS__MINUS] = true;
  ARTSet3[ARTTS__MINUS_MINUS_MINUS] = true;
  ARTSet3[ARTTS__PERIOD] = true;
  ARTSet3[ARTTS__PERIOD_PERIOD] = true;
  ARTSet3[ARTTS__SLASH] = true;
  ARTSet3[ARTTS__LT] = true;
  ARTSet3[ARTTS__LT_LT] = true;
  ARTSet3[ARTTS__EQUAL] = true;
  ARTSet3[ARTTS__GT] = true;
  ARTSet3[ARTTS__GT_GT] = true;
  ARTSet3[ARTTS__QUERY] = true;
  ARTSet3[ARTTS__AT] = true;
  ARTSet3[ARTTS_False] = true;
  ARTSet3[ARTTS_True] = true;
  ARTSet3[ARTTS__BACKSLASH] = true;
  ARTSet3[ARTTS__BACKSLASH_BACKSLASH] = true;
  ARTSet3[ARTTS__UPARROW] = true;
  ARTSet3[ARTTS__UPARROW_PLUS] = true;
  ARTSet3[ARTTS__UPARROW_UPARROW] = true;
  ARTSet3[ARTTS__UPARROW_UPARROW_UPARROW] = true;
  ARTSet3[ARTTS__UPARROW_] = true;
  ARTSet3[ARTTS_anyBuiltinTerminal] = true;
  ARTSet3[ARTTS_anyCaseInsensitiveTerminal] = true;
  ARTSet3[ARTTS_anyCaseSensitiveTerminal] = true;
  ARTSet3[ARTTS_anyCharacterTerminal] = true;
  ARTSet3[ARTTS_anyLiteralTerminal] = true;
  ARTSet3[ARTTS_anyNonterminal] = true;
  ARTSet3[ARTTS_anyParaterminal] = true;
  ARTSet3[ARTTS_anyTerminal] = true;
  ARTSet3[ARTTS__BAR] = true;
  ARTSet3[ARTTS__BAR_BAR] = true;
  ARTSet3[ARTL_ART_CHAR_BQ] = true;
  ARTSet3[ARTL_ART_False] = true;
  ARTSet3[ARTL_ART_ID] = true;
  ARTSet3[ARTL_ART_ID_ATTRIBUTE] = true;
  ARTSet3[ARTL_ART_STRING_BRACE_NEST] = true;
  ARTSet3[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet3[ARTL_ART_STRING_DQ] = true;
  ARTSet3[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet3[ARTL_ART_True] = true;
  ARTSet3[ARTL_ART___bool] = true;
  ARTSet3[ARTL_ART___char] = true;
  ARTSet3[ARTL_ART___int32] = true;
  ARTSet3[ARTL_ART___real64] = true;
  ARTSet3[ARTL_ART___string] = true;
  ARTSet3[ARTL_ART_cfgAbbrev] = true;
  ARTSet3[ARTL_ART_cfgAtom] = true;
  ARTSet3[ARTL_ART_cfgAttributeEquation] = true;
  ARTSet3[ARTL_ART_cfgBuiltinTerminal] = true;
  ARTSet3[ARTL_ART_cfgCaseInsensitiveTerminal] = true;
  ARTSet3[ARTL_ART_cfgCaseSensitiveTerminal] = true;
  ARTSet3[ARTL_ART_cfgCatTail] = true;
  ARTSet3[ARTL_ART_cfgCharacterRangeTerminal] = true;
  ARTSet3[ARTL_ART_cfgCharacterTerminal] = true;
  ARTSet3[ARTL_ART_cfgDelay] = true;
  ARTSet3[ARTL_ART_cfgDiff] = true;
  ARTSet3[ARTL_ART_cfgDoFirst] = true;
  ARTSet3[ARTL_ART_cfgElement] = true;
  ARTSet3[ARTL_ART_cfgEpsilon] = true;
  ARTSet3[ARTL_ART_cfgFoldNone] = true;
  ARTSet3[ARTL_ART_cfgFoldOver] = true;
  ARTSet3[ARTL_ART_cfgFoldUnder] = true;
  ARTSet3[ARTL_ART_cfgGather] = true;
  ARTSet3[ARTL_ART_cfgGrammarAnnotations] = true;
  ARTSet3[ARTL_ART_cfgInsert] = true;
  ARTSet3[ARTL_ART_cfgIter] = true;
  ARTSet3[ARTL_ART_cfgKleeneClosure] = true;
  ARTSet3[ARTL_ART_cfgNativeAction] = true;
  ARTSet3[ARTL_ART_cfgNonterminal] = true;
  ARTSet3[ARTL_ART_cfgNot] = true;
  ARTSet3[ARTL_ART_cfgOptional] = true;
  ARTSet3[ARTL_ART_cfgPositiveClosure] = true;
  ARTSet3[ARTL_ART_cfgRule] = true;
  ARTSet3[ARTL_ART_cfgSlot] = true;
  ARTSet3[ARTL_ART_cfgSlotSymbol] = true;
  ARTSet3[ARTL_ART_cfgUnion] = true;
  ARTSet3[ARTL_ART_chooseDiff] = true;
  ARTSet3[ARTL_ART_chooseElement] = true;
  ARTSet3[ARTL_ART_chooseHigher] = true;
  ARTSet3[ARTL_ART_chooseIntersection] = true;
  ARTSet3[ARTL_ART_chooseLonger] = true;
  ARTSet3[ARTL_ART_chooseLower] = true;
  ARTSet3[ARTL_ART_choosePredefinedSet] = true;
  ARTSet3[ARTL_ART_chooseRule] = true;
  ARTSet3[ARTL_ART_chooseShorter] = true;
  ARTSet3[ARTL_ART_chooseUnion] = true;
  ARTSet3[ARTL_ART_chooseUnionIntersection] = true;
  ARTSet3[ARTL_ART_chooserOp] = true;
  ARTSet3[ARTL_ART_directive] = true;
  ARTSet3[ARTL_ART_text] = true;
  ARTSet3[ARTL_ART_textElement] = true;
  ARTSet3[ARTL_ART_tr] = true;
  ARTSet3[ARTL_ART_trConfiguration] = true;
  ARTSet3[ARTL_ART_trLabel] = true;
  ARTSet3[ARTL_ART_trMatch] = true;
  ARTSet3[ARTL_ART_trPremises] = true;
  ARTSet3[ARTL_ART_trPrimaryTerm] = true;
  ARTSet3[ARTL_ART_trRule] = true;
  ARTSet3[ARTL_ART_trTerm] = true;
  ARTSet3[ARTL_ART_trTransition] = true;
}

public void ARTSet76initialise() {
  ARTSet76 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet76, 0, artSetExtent, false);
  ARTSet76[ARTX_EOS] = true;
  ARTSet76[ARTTB_CHAR_BQ] = true;
  ARTSet76[ARTTB_ID] = true;
  ARTSet76[ARTTB_SIGNED_INTEGER] = true;
  ARTSet76[ARTTB_SIGNED_REAL] = true;
  ARTSet76[ARTTB_STRING_DOLLAR] = true;
  ARTSet76[ARTTB_STRING_DQ] = true;
  ARTSet76[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet76[ARTTB_STRING_SQ] = true;
  ARTSet76[ARTTS__SHREIKGLLFIFODescriptors] = true;
  ARTSet76[ARTTS__SHREIKGLLPredictivePops] = true;
  ARTSet76[ARTTS__SHREIKGLLSuppressPopGuard] = true;
  ARTSet76[ARTTS__SHREIKGLLSuppressProductionGuard] = true;
  ARTSet76[ARTTS__SHREIKGLLSuppressSemantics] = true;
  ARTSet76[ARTTS__SHREIKGLLSuppressTestRepeat] = true;
  ARTSet76[ARTTS__SHREIKabsorb] = true;
  ARTSet76[ARTTS__SHREIKalphabet] = true;
  ARTSet76[ARTTS__SHREIKcfgElements] = true;
  ARTSet76[ARTTS__SHREIKcnp] = true;
  ARTSet76[ARTTS__SHREIKcnpGeneratorPool] = true;
  ARTSet76[ARTTS__SHREIKcnpIndexedAPI] = true;
  ARTSet76[ARTTS__SHREIKcnpIndexedPool] = true;
  ARTSet76[ARTTS__SHREIKcnpLinkedAPI] = true;
  ARTSet76[ARTTS__SHREIKcompressWhitespaceJava] = true;
  ARTSet76[ARTTS__SHREIKearley] = true;
  ARTSet76[ARTTS__SHREIKearley2007LinkedAPI] = true;
  ARTSet76[ARTTS__SHREIKearleyIndexedAPI] = true;
  ARTSet76[ARTTS__SHREIKearleyIndexedData] = true;
  ARTSet76[ARTTS__SHREIKearleyIndexedPool] = true;
  ARTSet76[ARTTS__SHREIKearleyLinkedAPI] = true;
  ARTSet76[ARTTS__SHREIKearleyTable] = true;
  ARTSet76[ARTTS__SHREIKearleyTableIndexedAPI] = true;
  ARTSet76[ARTTS__SHREIKearleyTableIndexedData] = true;
  ARTSet76[ARTTS__SHREIKearleyTableIndexedPool] = true;
  ARTSet76[ARTTS__SHREIKearleyTableLinkedAPI] = true;
  ARTSet76[ARTTS__SHREIKextractJLS] = true;
  ARTSet76[ARTTS__SHREIKgenerateC_PLUS_PLUS] = true;
  ARTSet76[ARTTS__SHREIKgenerateDynamic] = true;
  ARTSet76[ARTTS__SHREIKgenerateFragment] = true;
  ARTSet76[ARTTS__SHREIKgenerateJava] = true;
  ARTSet76[ARTTS__SHREIKgenerateML] = true;
  ARTSet76[ARTTS__SHREIKgeneratePool] = true;
  ARTSet76[ARTTS__SHREIKgenerateState] = true;
  ARTSet76[ARTTS__SHREIKgenerateStatic] = true;
  ARTSet76[ARTTS__SHREIKgll] = true;
  ARTSet76[ARTTS__SHREIKgllClusteredGeneratorPool] = true;
  ARTSet76[ARTTS__SHREIKgllGeneratorPool] = true;
  ARTSet76[ARTTS__SHREIKgllTWEGeneratorPool] = true;
  ARTSet76[ARTTS__SHREIKgrammarWrite] = true;
  ARTSet76[ARTTS__SHREIKgssPrint] = true;
  ARTSet76[ARTTS__SHREIKgssShow] = true;
  ARTSet76[ARTTS__SHREIKgssWrite] = true;
  ARTSet76[ARTTS__SHREIKinjectInstance] = true;
  ARTSet76[ARTTS__SHREIKinjectProduction] = true;
  ARTSet76[ARTTS__SHREIKinput] = true;
  ARTSet76[ARTTS__SHREIKinputPrint] = true;
  ARTSet76[ARTTS__SHREIKlatex] = true;
  ARTSet76[ARTTS__SHREIKlcnp] = true;
  ARTSet76[ARTTS__SHREIKlcnpGeneratorPool] = true;
  ARTSet76[ARTTS__SHREIKlcnpIndexedAPI] = true;
  ARTSet76[ARTTS__SHREIKlcnpIndexedPool] = true;
  ARTSet76[ARTTS__SHREIKlcnpLinkedAPI] = true;
  ARTSet76[ARTTS__SHREIKlexDFA] = true;
  ARTSet76[ARTTS__SHREIKlexGLL] = true;
  ARTSet76[ARTTS__SHREIKlexHardCoded] = true;
  ARTSet76[ARTTS__SHREIKlexWSSuffix] = true;
  ARTSet76[ARTTS__SHREIKlexerData] = true;
  ARTSet76[ARTTS__SHREIKlexerName] = true;
  ARTSet76[ARTTS__SHREIKmain] = true;
  ARTSet76[ARTTS__SHREIKmerge] = true;
  ARTSet76[ARTTS__SHREIKmgll] = true;
  ARTSet76[ARTTS__SHREIKmgllGeneratorPool] = true;
  ARTSet76[ARTTS__SHREIKmodule] = true;
  ARTSet76[ARTTS__SHREIKnamespace] = true;
  ARTSet76[ARTTS__SHREIKosbrd] = true;
  ARTSet76[ARTTS__SHREIKosbrdGenerator] = true;
  ARTSet76[ARTTS__SHREIKoutputDirectory] = true;
  ARTSet76[ARTTS__SHREIKparaterminal] = true;
  ARTSet76[ARTTS__SHREIKparseCountsPrint] = true;
  ARTSet76[ARTTS__SHREIKparserName] = true;
  ARTSet76[ARTTS__SHREIKprelude] = true;
  ARTSet76[ARTTS__SHREIKrelation] = true;
  ARTSet76[ARTTS__SHREIKresult] = true;
  ARTSet76[ARTTS__SHREIKsml97Parser] = true;
  ARTSet76[ARTTS__SHREIKsppfLongest] = true;
  ARTSet76[ARTTS__SHREIKsppfPrint] = true;
  ARTSet76[ARTTS__SHREIKsppfPriority] = true;
  ARTSet76[ARTTS__SHREIKsppfShow] = true;
  ARTSet76[ARTTS__SHREIKsppfWrite] = true;
  ARTSet76[ARTTS__SHREIKstart] = true;
  ARTSet76[ARTTS__SHREIKstatistics] = true;
  ARTSet76[ARTTS__SHREIKstrategy] = true;
  ARTSet76[ARTTS__SHREIKsupport] = true;
  ARTSet76[ARTTS__SHREIKtermPrint] = true;
  ARTSet76[ARTTS__SHREIKtermShow] = true;
  ARTSet76[ARTTS__SHREIKtermTool] = true;
  ARTSet76[ARTTS__SHREIKtermWrite] = true;
  ARTSet76[ARTTS__SHREIKtrace] = true;
  ARTSet76[ARTTS__SHREIKtreePrint] = true;
  ARTSet76[ARTTS__SHREIKtreeShow] = true;
  ARTSet76[ARTTS__SHREIKtreeWrite] = true;
  ARTSet76[ARTTS__SHREIKtry] = true;
  ARTSet76[ARTTS__SHREIKtweDead] = true;
  ARTSet76[ARTTS__SHREIKtweExtents] = true;
  ARTSet76[ARTTS__SHREIKtweFromSPPF] = true;
  ARTSet76[ARTTS__SHREIKtweLexicalisations] = true;
  ARTSet76[ARTTS__SHREIKtweLongest] = true;
  ARTSet76[ARTTS__SHREIKtwePrint] = true;
  ARTSet76[ARTTS__SHREIKtwePrintFull] = true;
  ARTSet76[ARTTS__SHREIKtwePrintSummary] = true;
  ARTSet76[ARTTS__SHREIKtwePriority] = true;
  ARTSet76[ARTTS__SHREIKtweRecursive] = true;
  ARTSet76[ARTTS__SHREIKtweSegments] = true;
  ARTSet76[ARTTS__SHREIKtweShow] = true;
  ARTSet76[ARTTS__SHREIKtweTokenWrite] = true;
  ARTSet76[ARTTS__SHREIKtweWrite] = true;
  ARTSet76[ARTTS__SHREIKunicodeAsEscapeSeuences] = true;
  ARTSet76[ARTTS__SHREIKuse] = true;
  ARTSet76[ARTTS__SHREIKverbosity] = true;
  ARTSet76[ARTTS__SHREIKwhitespace] = true;
  ARTSet76[ARTTS__AMPERSAND] = true;
  ARTSet76[ARTTS__LPAR] = true;
  ARTSet76[ARTTS__RPAR] = true;
  ARTSet76[ARTTS__MINUS] = true;
  ARTSet76[ARTTS__MINUS_MINUS_MINUS] = true;
  ARTSet76[ARTTS__LT] = true;
  ARTSet76[ARTTS_False] = true;
  ARTSet76[ARTTS_True] = true;
  ARTSet76[ARTTS_anyBuiltinTerminal] = true;
  ARTSet76[ARTTS_anyCaseInsensitiveTerminal] = true;
  ARTSet76[ARTTS_anyCaseSensitiveTerminal] = true;
  ARTSet76[ARTTS_anyCharacterTerminal] = true;
  ARTSet76[ARTTS_anyLiteralTerminal] = true;
  ARTSet76[ARTTS_anyNonterminal] = true;
  ARTSet76[ARTTS_anyParaterminal] = true;
  ARTSet76[ARTTS_anyTerminal] = true;
  ARTSet76[ARTTS__BAR] = true;
  ARTSet76[ARTL_ART_CHAR_BQ] = true;
  ARTSet76[ARTL_ART_False] = true;
  ARTSet76[ARTL_ART_ID] = true;
  ARTSet76[ARTL_ART_ID_ATTRIBUTE] = true;
  ARTSet76[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet76[ARTL_ART_STRING_DQ] = true;
  ARTSet76[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet76[ARTL_ART_True] = true;
  ARTSet76[ARTL_ART___bool] = true;
  ARTSet76[ARTL_ART___char] = true;
  ARTSet76[ARTL_ART___int32] = true;
  ARTSet76[ARTL_ART___real64] = true;
  ARTSet76[ARTL_ART___string] = true;
  ARTSet76[ARTL_ART_cfgBuiltinTerminal] = true;
  ARTSet76[ARTL_ART_cfgCaseInsensitiveTerminal] = true;
  ARTSet76[ARTL_ART_cfgCaseSensitiveTerminal] = true;
  ARTSet76[ARTL_ART_cfgCharacterTerminal] = true;
  ARTSet76[ARTL_ART_cfgNonterminal] = true;
  ARTSet76[ARTL_ART_cfgRule] = true;
  ARTSet76[ARTL_ART_chooseDiff] = true;
  ARTSet76[ARTL_ART_chooseElement] = true;
  ARTSet76[ARTL_ART_choosePredefinedSet] = true;
  ARTSet76[ARTL_ART_chooseRule] = true;
  ARTSet76[ARTL_ART_chooseUnionIntersection] = true;
  ARTSet76[ARTL_ART_directive] = true;
  ARTSet76[ARTL_ART_text] = true;
  ARTSet76[ARTL_ART_textElement] = true;
  ARTSet76[ARTL_ART_tr] = true;
  ARTSet76[ARTL_ART_trConfiguration] = true;
  ARTSet76[ARTL_ART_trLabel] = true;
  ARTSet76[ARTL_ART_trMatch] = true;
  ARTSet76[ARTL_ART_trPremises] = true;
  ARTSet76[ARTL_ART_trPrimaryTerm] = true;
  ARTSet76[ARTL_ART_trRule] = true;
  ARTSet76[ARTL_ART_trTerm] = true;
  ARTSet76[ARTL_ART_trTransition] = true;
}

public void ARTSet161initialise() {
  ARTSet161 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet161, 0, artSetExtent, false);
  ARTSet161[ARTTS__SHREIKmodule] = true;
}

public void ARTSet50initialise() {
  ARTSet50 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet50, 0, artSetExtent, false);
  ARTSet50[ARTTS__PLUS] = true;
  ARTSet50[ARTL_ART_cfgPositiveClosure] = true;
}

public void ARTSet163initialise() {
  ARTSet163 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet163, 0, artSetExtent, false);
  ARTSet163[ARTTB_ID] = true;
  ARTSet163[ARTL_ART_ID] = true;
  ARTSet163[ARTL_ART_idART] = true;
  ARTSet163[ARTL_ART_useElements] = true;
}

public void ARTSet195initialise() {
  ARTSet195 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet195, 0, artSetExtent, false);
  ARTSet195[ARTTS__SHREIKunicodeAsEscapeSeuences] = true;
}

public void ARTSet253initialise() {
  ARTSet253 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet253, 0, artSetExtent, false);
  ARTSet253[ARTTS__SHREIKcnpIndexedPool] = true;
}

public void ARTSet311initialise() {
  ARTSet311 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet311, 0, artSetExtent, false);
  ARTSet311[ARTTS_listIn] = true;
  ARTSet311[ARTTS_listOut] = true;
  ARTSet311[ARTTS_map] = true;
  ARTSet311[ARTTS_mapFixed] = true;
  ARTSet311[ARTTS_singleton] = true;
  ARTSet311[ARTTS_untyped] = true;
}

public void ARTSet272initialise() {
  ARTSet272 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet272, 0, artSetExtent, false);
  ARTSet272[ARTTB_CHAR_BQ] = true;
  ARTSet272[ARTTB_ID] = true;
  ARTSet272[ARTTB_SIGNED_INTEGER] = true;
  ARTSet272[ARTTB_SIGNED_REAL] = true;
  ARTSet272[ARTTB_STRING_DQ] = true;
  ARTSet272[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet272[ARTTB_STRING_SQ] = true;
  ARTSet272[ARTTS_False] = true;
  ARTSet272[ARTTS_True] = true;
  ARTSet272[ARTL_ART_False] = true;
  ARTSet272[ARTL_ART_ID] = true;
  ARTSet272[ARTL_ART_ID_ATTRIBUTE] = true;
  ARTSet272[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet272[ARTL_ART_True] = true;
  ARTSet272[ARTL_ART___bool] = true;
  ARTSet272[ARTL_ART___char] = true;
  ARTSet272[ARTL_ART___int32] = true;
  ARTSet272[ARTL_ART___real64] = true;
  ARTSet272[ARTL_ART___string] = true;
  ARTSet272[ARTL_ART_trEntities] = true;
  ARTSet272[ARTL_ART_trTerm] = true;
}

public void ARTSet176initialise() {
  ARTSet176 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet176, 0, artSetExtent, false);
  ARTSet176[ARTTS__SHREIKtwePrintSummary] = true;
}

public void ARTSet326initialise() {
  ARTSet326 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet326, 0, artSetExtent, false);
  ARTSet326[ARTTS__BAR_GT] = true;
}

public void ARTSet19initialise() {
  ARTSet19 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet19, 0, artSetExtent, false);
  ARTSet19[ARTTS__MINUS_SLASH] = true;
  ARTSet19[ARTTS__MINUS_SLASH_STAR] = true;
  ARTSet19[ARTTS__MINUS_SLASH_GT] = true;
  ARTSet19[ARTTS__MINUS_GT] = true;
  ARTSet19[ARTTS__MINUS_GT_STAR] = true;
  ARTSet19[ARTTS__MINUS_GT_GT] = true;
  ARTSet19[ARTTS__MINUS_BACKSLASH] = true;
  ARTSet19[ARTTS__MINUS_BACKSLASH_STAR] = true;
  ARTSet19[ARTTS__MINUS_BACKSLASH_GT] = true;
  ARTSet19[ARTTS__EQUAL_GT] = true;
  ARTSet19[ARTTS__EQUAL_GT_STAR] = true;
  ARTSet19[ARTTS__EQUAL_GT_GT] = true;
  ARTSet19[ARTTS__TILDE_GT] = true;
  ARTSet19[ARTTS__TILDE_GT_STAR] = true;
  ARTSet19[ARTTS__TILDE_GT_GT] = true;
}

public void ARTSet87initialise() {
  ARTSet87 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet87, 0, artSetExtent, false);
  ARTSet87[ARTTB_CHAR_BQ] = true;
  ARTSet87[ARTTB_ID] = true;
  ARTSet87[ARTTB_STRING_DOLLAR] = true;
  ARTSet87[ARTTB_STRING_DQ] = true;
  ARTSet87[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet87[ARTTS__HASH] = true;
  ARTSet87[ARTTS__AMPERSAND] = true;
  ARTSet87[ARTTS__LPAR] = true;
  ARTSet87[ARTTS__PERIOD] = true;
  ARTSet87[ARTTS__BACKSLASH_BACKSLASH] = true;
  ARTSet87[ARTL_ART_CHAR_BQ] = true;
  ARTSet87[ARTL_ART_ID] = true;
  ARTSet87[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet87[ARTL_ART_STRING_DQ] = true;
  ARTSet87[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet87[ARTL_ART_cfgAtom] = true;
  ARTSet87[ARTL_ART_cfgBuiltinTerminal] = true;
  ARTSet87[ARTL_ART_cfgCaseInsensitiveTerminal] = true;
  ARTSet87[ARTL_ART_cfgCaseSensitiveTerminal] = true;
  ARTSet87[ARTL_ART_cfgCharacterRangeTerminal] = true;
  ARTSet87[ARTL_ART_cfgCharacterTerminal] = true;
  ARTSet87[ARTL_ART_cfgDoFirst] = true;
  ARTSet87[ARTL_ART_cfgElement] = true;
  ARTSet87[ARTL_ART_cfgEpsilon] = true;
  ARTSet87[ARTL_ART_cfgNonterminal] = true;
  ARTSet87[ARTL_ART_cfgNot] = true;
  ARTSet87[ARTL_ART_cfgSlotSymbol] = true;
  ARTSet87[ARTL_ART_cfgUnion] = true;
}

public void ARTSet151initialise() {
  ARTSet151 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet151, 0, artSetExtent, false);
  ARTSet151[ARTTS__BAR] = true;
  ARTSet151[ARTL_ART_chooseUnion] = true;
}

public void ARTSet259initialise() {
  ARTSet259 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet259, 0, artSetExtent, false);
  ARTSet259[ARTTS__SHREIKlcnpGeneratorPool] = true;
}

public void ARTSet235initialise() {
  ARTSet235 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet235, 0, artSetExtent, false);
  ARTSet235[ARTTS__SHREIKGLLSuppressPopGuard] = true;
}

public void ARTSet258initialise() {
  ARTSet258 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet258, 0, artSetExtent, false);
  ARTSet258[ARTTS__SHREIKlcnpIndexedPool] = true;
}

public void ARTSet205initialise() {
  ARTSet205 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet205, 0, artSetExtent, false);
  ARTSet205[ARTTS__SHREIKabsorb] = true;
}

public void ARTSet242initialise() {
  ARTSet242 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet242, 0, artSetExtent, false);
  ARTSet242[ARTTS__SHREIKearleyIndexedAPI] = true;
}

public void ARTSet229initialise() {
  ARTSet229 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet229, 0, artSetExtent, false);
  ARTSet229[ARTTS__SHREIKgenerateC_PLUS_PLUS] = true;
}

public void ARTSet302initialise() {
  ARTSet302 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet302, 0, artSetExtent, false);
  ARTSet302[ARTTB_ID] = true;
  ARTSet302[ARTL_ART_ID_ATTRIBUTE] = true;
  ARTSet302[ARTL_ART_cfgAttributeEquation] = true;
  ARTSet302[ARTL_ART_trEquations] = true;
}

public void ARTSet305initialise() {
  ARTSet305 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet305, 0, artSetExtent, false);
  ARTSet305[ARTTB_CHAR_BQ] = true;
  ARTSet305[ARTTB_ID] = true;
  ARTSet305[ARTTB_SIGNED_INTEGER] = true;
  ARTSet305[ARTTB_SIGNED_REAL] = true;
  ARTSet305[ARTTB_STRING_DQ] = true;
  ARTSet305[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet305[ARTTB_STRING_SQ] = true;
  ARTSet305[ARTTS_False] = true;
  ARTSet305[ARTTS_True] = true;
  ARTSet305[ARTL_ART_False] = true;
  ARTSet305[ARTL_ART_ID] = true;
  ARTSet305[ARTL_ART_ID_ATTRIBUTE] = true;
  ARTSet305[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet305[ARTL_ART_True] = true;
  ARTSet305[ARTL_ART___bool] = true;
  ARTSet305[ARTL_ART___char] = true;
  ARTSet305[ARTL_ART___int32] = true;
  ARTSet305[ARTL_ART___real64] = true;
  ARTSet305[ARTL_ART___string] = true;
  ARTSet305[ARTL_ART_trPrimaryTerm] = true;
  ARTSet305[ARTL_ART_trTerm] = true;
}

public void ARTSet51initialise() {
  ARTSet51 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet51, 0, artSetExtent, false);
  ARTSet51[ARTTS__QUERY] = true;
  ARTSet51[ARTL_ART_cfgOptional] = true;
}

public void ARTSet273initialise() {
  ARTSet273 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet273, 0, artSetExtent, false);
  ARTSet273[ARTTS__SHREIKmain] = true;
}

public void ARTSet13initialise() {
  ARTSet13 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet13, 0, artSetExtent, false);
  ARTSet13[ARTTB_STRING_DOLLAR] = true;
}

public void ARTSet18initialise() {
  ARTSet18 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet18, 0, artSetExtent, false);
  ARTSet18[ARTX_EOS] = true;
  ARTSet18[ARTTB_CHAR_BQ] = true;
  ARTSet18[ARTTB_ID] = true;
  ARTSet18[ARTTB_SIGNED_INTEGER] = true;
  ARTSet18[ARTTB_SIGNED_REAL] = true;
  ARTSet18[ARTTB_STRING_BRACE_NEST] = true;
  ARTSet18[ARTTB_STRING_DOLLAR] = true;
  ARTSet18[ARTTB_STRING_DQ] = true;
  ARTSet18[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet18[ARTTB_STRING_SQ] = true;
  ARTSet18[ARTTS__SHREIKGLLFIFODescriptors] = true;
  ARTSet18[ARTTS__SHREIKGLLPredictivePops] = true;
  ARTSet18[ARTTS__SHREIKGLLSuppressPopGuard] = true;
  ARTSet18[ARTTS__SHREIKGLLSuppressProductionGuard] = true;
  ARTSet18[ARTTS__SHREIKGLLSuppressSemantics] = true;
  ARTSet18[ARTTS__SHREIKGLLSuppressTestRepeat] = true;
  ARTSet18[ARTTS__SHREIKabsorb] = true;
  ARTSet18[ARTTS__SHREIKalphabet] = true;
  ARTSet18[ARTTS__SHREIKcfgElements] = true;
  ARTSet18[ARTTS__SHREIKcnp] = true;
  ARTSet18[ARTTS__SHREIKcnpGeneratorPool] = true;
  ARTSet18[ARTTS__SHREIKcnpIndexedAPI] = true;
  ARTSet18[ARTTS__SHREIKcnpIndexedPool] = true;
  ARTSet18[ARTTS__SHREIKcnpLinkedAPI] = true;
  ARTSet18[ARTTS__SHREIKcompressWhitespaceJava] = true;
  ARTSet18[ARTTS__SHREIKearley] = true;
  ARTSet18[ARTTS__SHREIKearley2007LinkedAPI] = true;
  ARTSet18[ARTTS__SHREIKearleyIndexedAPI] = true;
  ARTSet18[ARTTS__SHREIKearleyIndexedData] = true;
  ARTSet18[ARTTS__SHREIKearleyIndexedPool] = true;
  ARTSet18[ARTTS__SHREIKearleyLinkedAPI] = true;
  ARTSet18[ARTTS__SHREIKearleyTable] = true;
  ARTSet18[ARTTS__SHREIKearleyTableIndexedAPI] = true;
  ARTSet18[ARTTS__SHREIKearleyTableIndexedData] = true;
  ARTSet18[ARTTS__SHREIKearleyTableIndexedPool] = true;
  ARTSet18[ARTTS__SHREIKearleyTableLinkedAPI] = true;
  ARTSet18[ARTTS__SHREIKextractJLS] = true;
  ARTSet18[ARTTS__SHREIKgenerateC_PLUS_PLUS] = true;
  ARTSet18[ARTTS__SHREIKgenerateDynamic] = true;
  ARTSet18[ARTTS__SHREIKgenerateFragment] = true;
  ARTSet18[ARTTS__SHREIKgenerateJava] = true;
  ARTSet18[ARTTS__SHREIKgenerateML] = true;
  ARTSet18[ARTTS__SHREIKgeneratePool] = true;
  ARTSet18[ARTTS__SHREIKgenerateState] = true;
  ARTSet18[ARTTS__SHREIKgenerateStatic] = true;
  ARTSet18[ARTTS__SHREIKgll] = true;
  ARTSet18[ARTTS__SHREIKgllClusteredGeneratorPool] = true;
  ARTSet18[ARTTS__SHREIKgllGeneratorPool] = true;
  ARTSet18[ARTTS__SHREIKgllTWEGeneratorPool] = true;
  ARTSet18[ARTTS__SHREIKgrammarWrite] = true;
  ARTSet18[ARTTS__SHREIKgssPrint] = true;
  ARTSet18[ARTTS__SHREIKgssShow] = true;
  ARTSet18[ARTTS__SHREIKgssWrite] = true;
  ARTSet18[ARTTS__SHREIKinjectInstance] = true;
  ARTSet18[ARTTS__SHREIKinjectProduction] = true;
  ARTSet18[ARTTS__SHREIKinput] = true;
  ARTSet18[ARTTS__SHREIKinputPrint] = true;
  ARTSet18[ARTTS__SHREIKlatex] = true;
  ARTSet18[ARTTS__SHREIKlcnp] = true;
  ARTSet18[ARTTS__SHREIKlcnpGeneratorPool] = true;
  ARTSet18[ARTTS__SHREIKlcnpIndexedAPI] = true;
  ARTSet18[ARTTS__SHREIKlcnpIndexedPool] = true;
  ARTSet18[ARTTS__SHREIKlcnpLinkedAPI] = true;
  ARTSet18[ARTTS__SHREIKlexDFA] = true;
  ARTSet18[ARTTS__SHREIKlexGLL] = true;
  ARTSet18[ARTTS__SHREIKlexHardCoded] = true;
  ARTSet18[ARTTS__SHREIKlexWSSuffix] = true;
  ARTSet18[ARTTS__SHREIKlexerData] = true;
  ARTSet18[ARTTS__SHREIKlexerName] = true;
  ARTSet18[ARTTS__SHREIKmain] = true;
  ARTSet18[ARTTS__SHREIKmerge] = true;
  ARTSet18[ARTTS__SHREIKmgll] = true;
  ARTSet18[ARTTS__SHREIKmgllGeneratorPool] = true;
  ARTSet18[ARTTS__SHREIKmodule] = true;
  ARTSet18[ARTTS__SHREIKnamespace] = true;
  ARTSet18[ARTTS__SHREIKosbrd] = true;
  ARTSet18[ARTTS__SHREIKosbrdGenerator] = true;
  ARTSet18[ARTTS__SHREIKoutputDirectory] = true;
  ARTSet18[ARTTS__SHREIKparaterminal] = true;
  ARTSet18[ARTTS__SHREIKparseCountsPrint] = true;
  ARTSet18[ARTTS__SHREIKparserName] = true;
  ARTSet18[ARTTS__SHREIKprelude] = true;
  ARTSet18[ARTTS__SHREIKrelation] = true;
  ARTSet18[ARTTS__SHREIKresult] = true;
  ARTSet18[ARTTS__SHREIKsml97Parser] = true;
  ARTSet18[ARTTS__SHREIKsppfLongest] = true;
  ARTSet18[ARTTS__SHREIKsppfPrint] = true;
  ARTSet18[ARTTS__SHREIKsppfPriority] = true;
  ARTSet18[ARTTS__SHREIKsppfShow] = true;
  ARTSet18[ARTTS__SHREIKsppfWrite] = true;
  ARTSet18[ARTTS__SHREIKstart] = true;
  ARTSet18[ARTTS__SHREIKstatistics] = true;
  ARTSet18[ARTTS__SHREIKstrategy] = true;
  ARTSet18[ARTTS__SHREIKsupport] = true;
  ARTSet18[ARTTS__SHREIKtermPrint] = true;
  ARTSet18[ARTTS__SHREIKtermShow] = true;
  ARTSet18[ARTTS__SHREIKtermTool] = true;
  ARTSet18[ARTTS__SHREIKtermWrite] = true;
  ARTSet18[ARTTS__SHREIKtrace] = true;
  ARTSet18[ARTTS__SHREIKtreePrint] = true;
  ARTSet18[ARTTS__SHREIKtreeShow] = true;
  ARTSet18[ARTTS__SHREIKtreeWrite] = true;
  ARTSet18[ARTTS__SHREIKtry] = true;
  ARTSet18[ARTTS__SHREIKtweDead] = true;
  ARTSet18[ARTTS__SHREIKtweExtents] = true;
  ARTSet18[ARTTS__SHREIKtweFromSPPF] = true;
  ARTSet18[ARTTS__SHREIKtweLexicalisations] = true;
  ARTSet18[ARTTS__SHREIKtweLongest] = true;
  ARTSet18[ARTTS__SHREIKtwePrint] = true;
  ARTSet18[ARTTS__SHREIKtwePrintFull] = true;
  ARTSet18[ARTTS__SHREIKtwePrintSummary] = true;
  ARTSet18[ARTTS__SHREIKtwePriority] = true;
  ARTSet18[ARTTS__SHREIKtweRecursive] = true;
  ARTSet18[ARTTS__SHREIKtweSegments] = true;
  ARTSet18[ARTTS__SHREIKtweShow] = true;
  ARTSet18[ARTTS__SHREIKtweTokenWrite] = true;
  ARTSet18[ARTTS__SHREIKtweWrite] = true;
  ARTSet18[ARTTS__SHREIKunicodeAsEscapeSeuences] = true;
  ARTSet18[ARTTS__SHREIKuse] = true;
  ARTSet18[ARTTS__SHREIKverbosity] = true;
  ARTSet18[ARTTS__SHREIKwhitespace] = true;
  ARTSet18[ARTTS__HASH] = true;
  ARTSet18[ARTTS__AMPERSAND] = true;
  ARTSet18[ARTTS__LPAR] = true;
  ARTSet18[ARTTS__RPAR] = true;
  ARTSet18[ARTTS__STAR] = true;
  ARTSet18[ARTTS__PLUS] = true;
  ARTSet18[ARTTS__COMMA] = true;
  ARTSet18[ARTTS__MINUS] = true;
  ARTSet18[ARTTS__MINUS_MINUS_MINUS] = true;
  ARTSet18[ARTTS__MINUS_SLASH] = true;
  ARTSet18[ARTTS__MINUS_SLASH_STAR] = true;
  ARTSet18[ARTTS__MINUS_SLASH_GT] = true;
  ARTSet18[ARTTS__MINUS_GT] = true;
  ARTSet18[ARTTS__MINUS_GT_STAR] = true;
  ARTSet18[ARTTS__MINUS_GT_GT] = true;
  ARTSet18[ARTTS__MINUS_BACKSLASH] = true;
  ARTSet18[ARTTS__MINUS_BACKSLASH_STAR] = true;
  ARTSet18[ARTTS__MINUS_BACKSLASH_GT] = true;
  ARTSet18[ARTTS__PERIOD] = true;
  ARTSet18[ARTTS__SLASH] = true;
  ARTSet18[ARTTS__COLON] = true;
  ARTSet18[ARTTS__LT] = true;
  ARTSet18[ARTTS__LT_LT] = true;
  ARTSet18[ARTTS__EQUAL] = true;
  ARTSet18[ARTTS__EQUAL_GT] = true;
  ARTSet18[ARTTS__EQUAL_GT_STAR] = true;
  ARTSet18[ARTTS__EQUAL_GT_GT] = true;
  ARTSet18[ARTTS__GT] = true;
  ARTSet18[ARTTS__GT_GT] = true;
  ARTSet18[ARTTS__QUERY] = true;
  ARTSet18[ARTTS__AT] = true;
  ARTSet18[ARTTS_False] = true;
  ARTSet18[ARTTS_True] = true;
  ARTSet18[ARTTS__BACKSLASH] = true;
  ARTSet18[ARTTS__BACKSLASH_BACKSLASH] = true;
  ARTSet18[ARTTS__UPARROW] = true;
  ARTSet18[ARTTS__UPARROW_PLUS] = true;
  ARTSet18[ARTTS__UPARROW_UPARROW] = true;
  ARTSet18[ARTTS__UPARROW_UPARROW_UPARROW] = true;
  ARTSet18[ARTTS__UPARROW_] = true;
  ARTSet18[ARTTS_anyBuiltinTerminal] = true;
  ARTSet18[ARTTS_anyCaseInsensitiveTerminal] = true;
  ARTSet18[ARTTS_anyCaseSensitiveTerminal] = true;
  ARTSet18[ARTTS_anyCharacterTerminal] = true;
  ARTSet18[ARTTS_anyLiteralTerminal] = true;
  ARTSet18[ARTTS_anyNonterminal] = true;
  ARTSet18[ARTTS_anyParaterminal] = true;
  ARTSet18[ARTTS_anyTerminal] = true;
  ARTSet18[ARTTS__BAR] = true;
  ARTSet18[ARTTS__BAR_GT] = true;
  ARTSet18[ARTTS__BAR_BAR] = true;
  ARTSet18[ARTTS__TILDE_GT] = true;
  ARTSet18[ARTTS__TILDE_GT_STAR] = true;
  ARTSet18[ARTTS__TILDE_GT_GT] = true;
  ARTSet18[ARTL_ART_CHAR_BQ] = true;
  ARTSet18[ARTL_ART_False] = true;
  ARTSet18[ARTL_ART_ID] = true;
  ARTSet18[ARTL_ART_ID_ATTRIBUTE] = true;
  ARTSet18[ARTL_ART_STRING_BRACE_NEST] = true;
  ARTSet18[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet18[ARTL_ART_STRING_DQ] = true;
  ARTSet18[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet18[ARTL_ART_TRRELATION] = true;
  ARTSet18[ARTL_ART_True] = true;
  ARTSet18[ARTL_ART___bool] = true;
  ARTSet18[ARTL_ART___char] = true;
  ARTSet18[ARTL_ART___int32] = true;
  ARTSet18[ARTL_ART___real64] = true;
  ARTSet18[ARTL_ART___string] = true;
  ARTSet18[ARTL_ART_cfgAbbrev] = true;
  ARTSet18[ARTL_ART_cfgAtom] = true;
  ARTSet18[ARTL_ART_cfgAttributeEquation] = true;
  ARTSet18[ARTL_ART_cfgBuiltinTerminal] = true;
  ARTSet18[ARTL_ART_cfgCaseInsensitiveTerminal] = true;
  ARTSet18[ARTL_ART_cfgCaseSensitiveTerminal] = true;
  ARTSet18[ARTL_ART_cfgCatTail] = true;
  ARTSet18[ARTL_ART_cfgCharacterRangeTerminal] = true;
  ARTSet18[ARTL_ART_cfgCharacterTerminal] = true;
  ARTSet18[ARTL_ART_cfgDelay] = true;
  ARTSet18[ARTL_ART_cfgDiff] = true;
  ARTSet18[ARTL_ART_cfgDoFirst] = true;
  ARTSet18[ARTL_ART_cfgElement] = true;
  ARTSet18[ARTL_ART_cfgEpsilon] = true;
  ARTSet18[ARTL_ART_cfgFoldNone] = true;
  ARTSet18[ARTL_ART_cfgFoldOver] = true;
  ARTSet18[ARTL_ART_cfgFoldUnder] = true;
  ARTSet18[ARTL_ART_cfgGather] = true;
  ARTSet18[ARTL_ART_cfgGrammarAnnotations] = true;
  ARTSet18[ARTL_ART_cfgInsert] = true;
  ARTSet18[ARTL_ART_cfgIter] = true;
  ARTSet18[ARTL_ART_cfgKleeneClosure] = true;
  ARTSet18[ARTL_ART_cfgNativeAction] = true;
  ARTSet18[ARTL_ART_cfgNonterminal] = true;
  ARTSet18[ARTL_ART_cfgNot] = true;
  ARTSet18[ARTL_ART_cfgOptional] = true;
  ARTSet18[ARTL_ART_cfgPositiveClosure] = true;
  ARTSet18[ARTL_ART_cfgRule] = true;
  ARTSet18[ARTL_ART_cfgSlot] = true;
  ARTSet18[ARTL_ART_cfgSlotSymbol] = true;
  ARTSet18[ARTL_ART_cfgUnion] = true;
  ARTSet18[ARTL_ART_chooseDiff] = true;
  ARTSet18[ARTL_ART_chooseElement] = true;
  ARTSet18[ARTL_ART_chooseHigher] = true;
  ARTSet18[ARTL_ART_chooseIntersection] = true;
  ARTSet18[ARTL_ART_chooseLonger] = true;
  ARTSet18[ARTL_ART_chooseLower] = true;
  ARTSet18[ARTL_ART_choosePredefinedSet] = true;
  ARTSet18[ARTL_ART_chooseRule] = true;
  ARTSet18[ARTL_ART_chooseShorter] = true;
  ARTSet18[ARTL_ART_chooseUnion] = true;
  ARTSet18[ARTL_ART_chooseUnionIntersection] = true;
  ARTSet18[ARTL_ART_chooserOp] = true;
  ARTSet18[ARTL_ART_directive] = true;
  ARTSet18[ARTL_ART_text] = true;
  ARTSet18[ARTL_ART_textElement] = true;
  ARTSet18[ARTL_ART_tr] = true;
  ARTSet18[ARTL_ART_trConfiguration] = true;
  ARTSet18[ARTL_ART_trEntityReferences] = true;
  ARTSet18[ARTL_ART_trEquations] = true;
  ARTSet18[ARTL_ART_trLabel] = true;
  ARTSet18[ARTL_ART_trMatch] = true;
  ARTSet18[ARTL_ART_trPremises] = true;
  ARTSet18[ARTL_ART_trPrimaryTerm] = true;
  ARTSet18[ARTL_ART_trRule] = true;
  ARTSet18[ARTL_ART_trSubterms] = true;
  ARTSet18[ARTL_ART_trTerm] = true;
  ARTSet18[ARTL_ART_trTransition] = true;
}

public void ARTSet64initialise() {
  ARTSet64 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet64, 0, artSetExtent, false);
  ARTSet64[ARTTS__AMPERSAND] = true;
  ARTSet64[ARTL_ART_cfgBuiltinTerminal] = true;
}

public void ARTSet296initialise() {
  ARTSet296 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet296, 0, artSetExtent, false);
  ARTSet296[ARTTB_CHAR_BQ] = true;
  ARTSet296[ARTTB_ID] = true;
  ARTSet296[ARTTB_STRING_DOLLAR] = true;
  ARTSet296[ARTTB_STRING_DQ] = true;
  ARTSet296[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet296[ARTTS__AMPERSAND] = true;
  ARTSet296[ARTTS__LPAR] = true;
  ARTSet296[ARTTS_anyBuiltinTerminal] = true;
  ARTSet296[ARTTS_anyCaseInsensitiveTerminal] = true;
  ARTSet296[ARTTS_anyCaseSensitiveTerminal] = true;
  ARTSet296[ARTTS_anyCharacterTerminal] = true;
  ARTSet296[ARTTS_anyLiteralTerminal] = true;
  ARTSet296[ARTTS_anyNonterminal] = true;
  ARTSet296[ARTTS_anyParaterminal] = true;
  ARTSet296[ARTTS_anyTerminal] = true;
  ARTSet296[ARTL_ART_CHAR_BQ] = true;
  ARTSet296[ARTL_ART_ID] = true;
  ARTSet296[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet296[ARTL_ART_STRING_DQ] = true;
  ARTSet296[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet296[ARTL_ART_cfgBuiltinTerminal] = true;
  ARTSet296[ARTL_ART_cfgCaseInsensitiveTerminal] = true;
  ARTSet296[ARTL_ART_cfgCaseSensitiveTerminal] = true;
  ARTSet296[ARTL_ART_cfgCharacterTerminal] = true;
  ARTSet296[ARTL_ART_cfgNonterminal] = true;
  ARTSet296[ARTL_ART_chooseDiff] = true;
  ARTSet296[ARTL_ART_chooseElement] = true;
  ARTSet296[ARTL_ART_choosePredefinedSet] = true;
  ARTSet296[ARTL_ART_chooseRule] = true;
  ARTSet296[ARTL_ART_chooseUnionIntersection] = true;
}

public void ARTSet312initialise() {
  ARTSet312 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet312, 0, artSetExtent, false);
  ARTSet312[ARTTS_map] = true;
}

public void ARTSet93initialise() {
  ARTSet93 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet93, 0, artSetExtent, false);
  ARTSet93[ARTTS__LPAR] = true;
  ARTSet93[ARTL_ART_cfgDoFirst] = true;
}

public void ARTSet125initialise() {
  ARTSet125 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet125, 0, artSetExtent, false);
  ARTSet125[ARTTB_STRING_BRACE_NEST] = true;
  ARTSet125[ARTL_ART_STRING_BRACE_NEST] = true;
  ARTSet125[ARTL_ART_cfgNativeAction] = true;
}

public void ARTSet105initialise() {
  ARTSet105 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet105, 0, artSetExtent, false);
  ARTSet105[ARTTS__UPARROW] = true;
  ARTSet105[ARTL_ART_cfgFoldUnder] = true;
}

public void ARTSet16initialise() {
  ARTSet16 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet16, 0, artSetExtent, false);
  ARTSet16[ARTX_EOS] = true;
  ARTSet16[ARTTB_CHAR_BQ] = true;
  ARTSet16[ARTTB_ID] = true;
  ARTSet16[ARTTB_SIGNED_INTEGER] = true;
  ARTSet16[ARTTB_SIGNED_REAL] = true;
  ARTSet16[ARTTB_STRING_BRACE_NEST] = true;
  ARTSet16[ARTTB_STRING_DOLLAR] = true;
  ARTSet16[ARTTB_STRING_DQ] = true;
  ARTSet16[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet16[ARTTB_STRING_SQ] = true;
  ARTSet16[ARTTS__SHREIKGLLFIFODescriptors] = true;
  ARTSet16[ARTTS__SHREIKGLLPredictivePops] = true;
  ARTSet16[ARTTS__SHREIKGLLSuppressPopGuard] = true;
  ARTSet16[ARTTS__SHREIKGLLSuppressProductionGuard] = true;
  ARTSet16[ARTTS__SHREIKGLLSuppressSemantics] = true;
  ARTSet16[ARTTS__SHREIKGLLSuppressTestRepeat] = true;
  ARTSet16[ARTTS__SHREIKabsorb] = true;
  ARTSet16[ARTTS__SHREIKalphabet] = true;
  ARTSet16[ARTTS__SHREIKcfgElements] = true;
  ARTSet16[ARTTS__SHREIKcnp] = true;
  ARTSet16[ARTTS__SHREIKcnpGeneratorPool] = true;
  ARTSet16[ARTTS__SHREIKcnpIndexedAPI] = true;
  ARTSet16[ARTTS__SHREIKcnpIndexedPool] = true;
  ARTSet16[ARTTS__SHREIKcnpLinkedAPI] = true;
  ARTSet16[ARTTS__SHREIKcompressWhitespaceJava] = true;
  ARTSet16[ARTTS__SHREIKearley] = true;
  ARTSet16[ARTTS__SHREIKearley2007LinkedAPI] = true;
  ARTSet16[ARTTS__SHREIKearleyIndexedAPI] = true;
  ARTSet16[ARTTS__SHREIKearleyIndexedData] = true;
  ARTSet16[ARTTS__SHREIKearleyIndexedPool] = true;
  ARTSet16[ARTTS__SHREIKearleyLinkedAPI] = true;
  ARTSet16[ARTTS__SHREIKearleyTable] = true;
  ARTSet16[ARTTS__SHREIKearleyTableIndexedAPI] = true;
  ARTSet16[ARTTS__SHREIKearleyTableIndexedData] = true;
  ARTSet16[ARTTS__SHREIKearleyTableIndexedPool] = true;
  ARTSet16[ARTTS__SHREIKearleyTableLinkedAPI] = true;
  ARTSet16[ARTTS__SHREIKextractJLS] = true;
  ARTSet16[ARTTS__SHREIKgenerateC_PLUS_PLUS] = true;
  ARTSet16[ARTTS__SHREIKgenerateDynamic] = true;
  ARTSet16[ARTTS__SHREIKgenerateFragment] = true;
  ARTSet16[ARTTS__SHREIKgenerateJava] = true;
  ARTSet16[ARTTS__SHREIKgenerateML] = true;
  ARTSet16[ARTTS__SHREIKgeneratePool] = true;
  ARTSet16[ARTTS__SHREIKgenerateState] = true;
  ARTSet16[ARTTS__SHREIKgenerateStatic] = true;
  ARTSet16[ARTTS__SHREIKgll] = true;
  ARTSet16[ARTTS__SHREIKgllClusteredGeneratorPool] = true;
  ARTSet16[ARTTS__SHREIKgllGeneratorPool] = true;
  ARTSet16[ARTTS__SHREIKgllTWEGeneratorPool] = true;
  ARTSet16[ARTTS__SHREIKgrammarWrite] = true;
  ARTSet16[ARTTS__SHREIKgssPrint] = true;
  ARTSet16[ARTTS__SHREIKgssShow] = true;
  ARTSet16[ARTTS__SHREIKgssWrite] = true;
  ARTSet16[ARTTS__SHREIKinjectInstance] = true;
  ARTSet16[ARTTS__SHREIKinjectProduction] = true;
  ARTSet16[ARTTS__SHREIKinput] = true;
  ARTSet16[ARTTS__SHREIKinputPrint] = true;
  ARTSet16[ARTTS__SHREIKlatex] = true;
  ARTSet16[ARTTS__SHREIKlcnp] = true;
  ARTSet16[ARTTS__SHREIKlcnpGeneratorPool] = true;
  ARTSet16[ARTTS__SHREIKlcnpIndexedAPI] = true;
  ARTSet16[ARTTS__SHREIKlcnpIndexedPool] = true;
  ARTSet16[ARTTS__SHREIKlcnpLinkedAPI] = true;
  ARTSet16[ARTTS__SHREIKlexDFA] = true;
  ARTSet16[ARTTS__SHREIKlexGLL] = true;
  ARTSet16[ARTTS__SHREIKlexHardCoded] = true;
  ARTSet16[ARTTS__SHREIKlexWSSuffix] = true;
  ARTSet16[ARTTS__SHREIKlexerData] = true;
  ARTSet16[ARTTS__SHREIKlexerName] = true;
  ARTSet16[ARTTS__SHREIKmain] = true;
  ARTSet16[ARTTS__SHREIKmerge] = true;
  ARTSet16[ARTTS__SHREIKmgll] = true;
  ARTSet16[ARTTS__SHREIKmgllGeneratorPool] = true;
  ARTSet16[ARTTS__SHREIKmodule] = true;
  ARTSet16[ARTTS__SHREIKnamespace] = true;
  ARTSet16[ARTTS__SHREIKosbrd] = true;
  ARTSet16[ARTTS__SHREIKosbrdGenerator] = true;
  ARTSet16[ARTTS__SHREIKoutputDirectory] = true;
  ARTSet16[ARTTS__SHREIKparaterminal] = true;
  ARTSet16[ARTTS__SHREIKparseCountsPrint] = true;
  ARTSet16[ARTTS__SHREIKparserName] = true;
  ARTSet16[ARTTS__SHREIKprelude] = true;
  ARTSet16[ARTTS__SHREIKrelation] = true;
  ARTSet16[ARTTS__SHREIKresult] = true;
  ARTSet16[ARTTS__SHREIKsml97Parser] = true;
  ARTSet16[ARTTS__SHREIKsppfLongest] = true;
  ARTSet16[ARTTS__SHREIKsppfPrint] = true;
  ARTSet16[ARTTS__SHREIKsppfPriority] = true;
  ARTSet16[ARTTS__SHREIKsppfShow] = true;
  ARTSet16[ARTTS__SHREIKsppfWrite] = true;
  ARTSet16[ARTTS__SHREIKstart] = true;
  ARTSet16[ARTTS__SHREIKstatistics] = true;
  ARTSet16[ARTTS__SHREIKstrategy] = true;
  ARTSet16[ARTTS__SHREIKsupport] = true;
  ARTSet16[ARTTS__SHREIKtermPrint] = true;
  ARTSet16[ARTTS__SHREIKtermShow] = true;
  ARTSet16[ARTTS__SHREIKtermTool] = true;
  ARTSet16[ARTTS__SHREIKtermWrite] = true;
  ARTSet16[ARTTS__SHREIKtrace] = true;
  ARTSet16[ARTTS__SHREIKtreePrint] = true;
  ARTSet16[ARTTS__SHREIKtreeShow] = true;
  ARTSet16[ARTTS__SHREIKtreeWrite] = true;
  ARTSet16[ARTTS__SHREIKtry] = true;
  ARTSet16[ARTTS__SHREIKtweDead] = true;
  ARTSet16[ARTTS__SHREIKtweExtents] = true;
  ARTSet16[ARTTS__SHREIKtweFromSPPF] = true;
  ARTSet16[ARTTS__SHREIKtweLexicalisations] = true;
  ARTSet16[ARTTS__SHREIKtweLongest] = true;
  ARTSet16[ARTTS__SHREIKtwePrint] = true;
  ARTSet16[ARTTS__SHREIKtwePrintFull] = true;
  ARTSet16[ARTTS__SHREIKtwePrintSummary] = true;
  ARTSet16[ARTTS__SHREIKtwePriority] = true;
  ARTSet16[ARTTS__SHREIKtweRecursive] = true;
  ARTSet16[ARTTS__SHREIKtweSegments] = true;
  ARTSet16[ARTTS__SHREIKtweShow] = true;
  ARTSet16[ARTTS__SHREIKtweTokenWrite] = true;
  ARTSet16[ARTTS__SHREIKtweWrite] = true;
  ARTSet16[ARTTS__SHREIKunicodeAsEscapeSeuences] = true;
  ARTSet16[ARTTS__SHREIKuse] = true;
  ARTSet16[ARTTS__SHREIKverbosity] = true;
  ARTSet16[ARTTS__SHREIKwhitespace] = true;
  ARTSet16[ARTTS__HASH] = true;
  ARTSet16[ARTTS__AMPERSAND] = true;
  ARTSet16[ARTTS__LPAR] = true;
  ARTSet16[ARTTS__RPAR] = true;
  ARTSet16[ARTTS__STAR] = true;
  ARTSet16[ARTTS__PLUS] = true;
  ARTSet16[ARTTS__COMMA] = true;
  ARTSet16[ARTTS__MINUS] = true;
  ARTSet16[ARTTS__MINUS_MINUS_MINUS] = true;
  ARTSet16[ARTTS__PERIOD] = true;
  ARTSet16[ARTTS__SLASH] = true;
  ARTSet16[ARTTS__LT] = true;
  ARTSet16[ARTTS__LT_LT] = true;
  ARTSet16[ARTTS__EQUAL] = true;
  ARTSet16[ARTTS__GT] = true;
  ARTSet16[ARTTS__GT_GT] = true;
  ARTSet16[ARTTS__QUERY] = true;
  ARTSet16[ARTTS__AT] = true;
  ARTSet16[ARTTS_False] = true;
  ARTSet16[ARTTS_True] = true;
  ARTSet16[ARTTS__BACKSLASH] = true;
  ARTSet16[ARTTS__BACKSLASH_BACKSLASH] = true;
  ARTSet16[ARTTS__UPARROW] = true;
  ARTSet16[ARTTS__UPARROW_PLUS] = true;
  ARTSet16[ARTTS__UPARROW_UPARROW] = true;
  ARTSet16[ARTTS__UPARROW_UPARROW_UPARROW] = true;
  ARTSet16[ARTTS__UPARROW_] = true;
  ARTSet16[ARTTS_anyBuiltinTerminal] = true;
  ARTSet16[ARTTS_anyCaseInsensitiveTerminal] = true;
  ARTSet16[ARTTS_anyCaseSensitiveTerminal] = true;
  ARTSet16[ARTTS_anyCharacterTerminal] = true;
  ARTSet16[ARTTS_anyLiteralTerminal] = true;
  ARTSet16[ARTTS_anyNonterminal] = true;
  ARTSet16[ARTTS_anyParaterminal] = true;
  ARTSet16[ARTTS_anyTerminal] = true;
  ARTSet16[ARTTS__BAR] = true;
  ARTSet16[ARTTS__BAR_BAR] = true;
  ARTSet16[ARTL_ART_CHAR_BQ] = true;
  ARTSet16[ARTL_ART_False] = true;
  ARTSet16[ARTL_ART_ID] = true;
  ARTSet16[ARTL_ART_ID_ATTRIBUTE] = true;
  ARTSet16[ARTL_ART_STRING_BRACE_NEST] = true;
  ARTSet16[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet16[ARTL_ART_STRING_DQ] = true;
  ARTSet16[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet16[ARTL_ART_True] = true;
  ARTSet16[ARTL_ART___bool] = true;
  ARTSet16[ARTL_ART___char] = true;
  ARTSet16[ARTL_ART___int32] = true;
  ARTSet16[ARTL_ART___real64] = true;
  ARTSet16[ARTL_ART___string] = true;
  ARTSet16[ARTL_ART_cfgAbbrev] = true;
  ARTSet16[ARTL_ART_cfgAtom] = true;
  ARTSet16[ARTL_ART_cfgAttributeEquation] = true;
  ARTSet16[ARTL_ART_cfgBuiltinTerminal] = true;
  ARTSet16[ARTL_ART_cfgCaseInsensitiveTerminal] = true;
  ARTSet16[ARTL_ART_cfgCaseSensitiveTerminal] = true;
  ARTSet16[ARTL_ART_cfgCatTail] = true;
  ARTSet16[ARTL_ART_cfgCharacterRangeTerminal] = true;
  ARTSet16[ARTL_ART_cfgCharacterTerminal] = true;
  ARTSet16[ARTL_ART_cfgDelay] = true;
  ARTSet16[ARTL_ART_cfgDiff] = true;
  ARTSet16[ARTL_ART_cfgDoFirst] = true;
  ARTSet16[ARTL_ART_cfgElement] = true;
  ARTSet16[ARTL_ART_cfgEpsilon] = true;
  ARTSet16[ARTL_ART_cfgFoldNone] = true;
  ARTSet16[ARTL_ART_cfgFoldOver] = true;
  ARTSet16[ARTL_ART_cfgFoldUnder] = true;
  ARTSet16[ARTL_ART_cfgGather] = true;
  ARTSet16[ARTL_ART_cfgGrammarAnnotations] = true;
  ARTSet16[ARTL_ART_cfgInsert] = true;
  ARTSet16[ARTL_ART_cfgIter] = true;
  ARTSet16[ARTL_ART_cfgKleeneClosure] = true;
  ARTSet16[ARTL_ART_cfgNativeAction] = true;
  ARTSet16[ARTL_ART_cfgNonterminal] = true;
  ARTSet16[ARTL_ART_cfgNot] = true;
  ARTSet16[ARTL_ART_cfgOptional] = true;
  ARTSet16[ARTL_ART_cfgPositiveClosure] = true;
  ARTSet16[ARTL_ART_cfgRule] = true;
  ARTSet16[ARTL_ART_cfgSlot] = true;
  ARTSet16[ARTL_ART_cfgSlotSymbol] = true;
  ARTSet16[ARTL_ART_cfgUnion] = true;
  ARTSet16[ARTL_ART_chooseDiff] = true;
  ARTSet16[ARTL_ART_chooseElement] = true;
  ARTSet16[ARTL_ART_chooseHigher] = true;
  ARTSet16[ARTL_ART_chooseIntersection] = true;
  ARTSet16[ARTL_ART_chooseLonger] = true;
  ARTSet16[ARTL_ART_chooseLower] = true;
  ARTSet16[ARTL_ART_choosePredefinedSet] = true;
  ARTSet16[ARTL_ART_chooseRule] = true;
  ARTSet16[ARTL_ART_chooseShorter] = true;
  ARTSet16[ARTL_ART_chooseUnion] = true;
  ARTSet16[ARTL_ART_chooseUnionIntersection] = true;
  ARTSet16[ARTL_ART_chooserOp] = true;
  ARTSet16[ARTL_ART_directive] = true;
  ARTSet16[ARTL_ART_text] = true;
  ARTSet16[ARTL_ART_textElement] = true;
  ARTSet16[ARTL_ART_tr] = true;
  ARTSet16[ARTL_ART_trConfiguration] = true;
  ARTSet16[ARTL_ART_trLabel] = true;
  ARTSet16[ARTL_ART_trMatch] = true;
  ARTSet16[ARTL_ART_trPremises] = true;
  ARTSet16[ARTL_ART_trPrimaryTerm] = true;
  ARTSet16[ARTL_ART_trRule] = true;
  ARTSet16[ARTL_ART_trTerm] = true;
  ARTSet16[ARTL_ART_trTransition] = true;
}

public void ARTSet168initialise() {
  ARTSet168 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet168, 0, artSetExtent, false);
  ARTSet168[ARTTS__SHREIKlatex] = true;
}

public void ARTSet219initialise() {
  ARTSet219 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet219, 0, artSetExtent, false);
  ARTSet219[ARTTS__SHREIKoutputDirectory] = true;
}

public void ARTSet283initialise() {
  ARTSet283 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet283, 0, artSetExtent, false);
  ARTSet283[ARTTS__PERIODart] = true;
}

public void ARTSet320initialise() {
  ARTSet320 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet320, 0, artSetExtent, false);
  ARTSet320[ARTTB_CHAR_BQ] = true;
  ARTSet320[ARTTB_ID] = true;
  ARTSet320[ARTTB_SIGNED_INTEGER] = true;
  ARTSet320[ARTTB_SIGNED_REAL] = true;
  ARTSet320[ARTTB_STRING_DQ] = true;
  ARTSet320[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet320[ARTTB_STRING_SQ] = true;
  ARTSet320[ARTTS_False] = true;
  ARTSet320[ARTTS_True] = true;
  ARTSet320[ARTL_ART_False] = true;
  ARTSet320[ARTL_ART_ID] = true;
  ARTSet320[ARTL_ART_ID_ATTRIBUTE] = true;
  ARTSet320[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet320[ARTL_ART_True] = true;
  ARTSet320[ARTL_ART___bool] = true;
  ARTSet320[ARTL_ART___char] = true;
  ARTSet320[ARTL_ART___int32] = true;
  ARTSet320[ARTL_ART___real64] = true;
  ARTSet320[ARTL_ART___string] = true;
  ARTSet320[ARTL_ART_trTerm] = true;
  ARTSet320[ARTL_ART_trUnamedTerm] = true;
}

public void ARTSet145initialise() {
  ARTSet145 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet145, 0, artSetExtent, false);
  ARTSet145[ARTTS_anyNonterminal] = true;
}

public void ARTSet221initialise() {
  ARTSet221 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet221, 0, artSetExtent, false);
  ARTSet221[ARTTS__SHREIKlexerName] = true;
}

public void ARTSet203initialise() {
  ARTSet203 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet203, 0, artSetExtent, false);
  ARTSet203[ARTTS__SHREIKlexWSSuffix] = true;
}

public void ARTSet70initialise() {
  ARTSet70 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet70, 0, artSetExtent, false);
  ARTSet70[ARTTB_CHAR_BQ] = true;
  ARTSet70[ARTTB_ID] = true;
  ARTSet70[ARTTB_SIGNED_INTEGER] = true;
  ARTSet70[ARTTB_SIGNED_REAL] = true;
  ARTSet70[ARTTB_STRING_DQ] = true;
  ARTSet70[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet70[ARTTB_STRING_SQ] = true;
  ARTSet70[ARTTS_False] = true;
  ARTSet70[ARTTS_True] = true;
  ARTSet70[ARTL_ART_False] = true;
  ARTSet70[ARTL_ART_ID] = true;
  ARTSet70[ARTL_ART_ID_ATTRIBUTE] = true;
  ARTSet70[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet70[ARTL_ART_True] = true;
  ARTSet70[ARTL_ART___bool] = true;
  ARTSet70[ARTL_ART___char] = true;
  ARTSet70[ARTL_ART___int32] = true;
  ARTSet70[ARTL_ART___real64] = true;
  ARTSet70[ARTL_ART___string] = true;
  ARTSet70[ARTL_ART_trTerm] = true;
}

public void ARTSet77initialise() {
  ARTSet77 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet77, 0, artSetExtent, false);
  ARTSet77[ARTTB_ID] = true;
  ARTSet77[ARTTB_STRING_BRACE_NEST] = true;
  ARTSet77[ARTL_ART_ID_ATTRIBUTE] = true;
  ARTSet77[ARTL_ART_STRING_BRACE_NEST] = true;
  ARTSet77[ARTL_ART_cfgAttributeEquation] = true;
  ARTSet77[ARTL_ART_cfgNativeAction] = true;
  ARTSet77[ARTL_ART_cfgSlot] = true;
}

public void ARTSet321initialise() {
  ARTSet321 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet321, 0, artSetExtent, false);
  ARTSet321[ARTX_EOS] = true;
  ARTSet321[ARTTB_CHAR_BQ] = true;
  ARTSet321[ARTTB_ID] = true;
  ARTSet321[ARTTB_SIGNED_INTEGER] = true;
  ARTSet321[ARTTB_SIGNED_REAL] = true;
  ARTSet321[ARTTB_STRING_DOLLAR] = true;
  ARTSet321[ARTTB_STRING_DQ] = true;
  ARTSet321[ARTTB_STRING_PLAIN_SQ] = true;
  ARTSet321[ARTTB_STRING_SQ] = true;
  ARTSet321[ARTTS__SHREIKGLLFIFODescriptors] = true;
  ARTSet321[ARTTS__SHREIKGLLPredictivePops] = true;
  ARTSet321[ARTTS__SHREIKGLLSuppressPopGuard] = true;
  ARTSet321[ARTTS__SHREIKGLLSuppressProductionGuard] = true;
  ARTSet321[ARTTS__SHREIKGLLSuppressSemantics] = true;
  ARTSet321[ARTTS__SHREIKGLLSuppressTestRepeat] = true;
  ARTSet321[ARTTS__SHREIKabsorb] = true;
  ARTSet321[ARTTS__SHREIKalphabet] = true;
  ARTSet321[ARTTS__SHREIKcfgElements] = true;
  ARTSet321[ARTTS__SHREIKcnp] = true;
  ARTSet321[ARTTS__SHREIKcnpGeneratorPool] = true;
  ARTSet321[ARTTS__SHREIKcnpIndexedAPI] = true;
  ARTSet321[ARTTS__SHREIKcnpIndexedPool] = true;
  ARTSet321[ARTTS__SHREIKcnpLinkedAPI] = true;
  ARTSet321[ARTTS__SHREIKcompressWhitespaceJava] = true;
  ARTSet321[ARTTS__SHREIKearley] = true;
  ARTSet321[ARTTS__SHREIKearley2007LinkedAPI] = true;
  ARTSet321[ARTTS__SHREIKearleyIndexedAPI] = true;
  ARTSet321[ARTTS__SHREIKearleyIndexedData] = true;
  ARTSet321[ARTTS__SHREIKearleyIndexedPool] = true;
  ARTSet321[ARTTS__SHREIKearleyLinkedAPI] = true;
  ARTSet321[ARTTS__SHREIKearleyTable] = true;
  ARTSet321[ARTTS__SHREIKearleyTableIndexedAPI] = true;
  ARTSet321[ARTTS__SHREIKearleyTableIndexedData] = true;
  ARTSet321[ARTTS__SHREIKearleyTableIndexedPool] = true;
  ARTSet321[ARTTS__SHREIKearleyTableLinkedAPI] = true;
  ARTSet321[ARTTS__SHREIKextractJLS] = true;
  ARTSet321[ARTTS__SHREIKgenerateC_PLUS_PLUS] = true;
  ARTSet321[ARTTS__SHREIKgenerateDynamic] = true;
  ARTSet321[ARTTS__SHREIKgenerateFragment] = true;
  ARTSet321[ARTTS__SHREIKgenerateJava] = true;
  ARTSet321[ARTTS__SHREIKgenerateML] = true;
  ARTSet321[ARTTS__SHREIKgeneratePool] = true;
  ARTSet321[ARTTS__SHREIKgenerateState] = true;
  ARTSet321[ARTTS__SHREIKgenerateStatic] = true;
  ARTSet321[ARTTS__SHREIKgll] = true;
  ARTSet321[ARTTS__SHREIKgllClusteredGeneratorPool] = true;
  ARTSet321[ARTTS__SHREIKgllGeneratorPool] = true;
  ARTSet321[ARTTS__SHREIKgllTWEGeneratorPool] = true;
  ARTSet321[ARTTS__SHREIKgrammarWrite] = true;
  ARTSet321[ARTTS__SHREIKgssPrint] = true;
  ARTSet321[ARTTS__SHREIKgssShow] = true;
  ARTSet321[ARTTS__SHREIKgssWrite] = true;
  ARTSet321[ARTTS__SHREIKinjectInstance] = true;
  ARTSet321[ARTTS__SHREIKinjectProduction] = true;
  ARTSet321[ARTTS__SHREIKinput] = true;
  ARTSet321[ARTTS__SHREIKinputPrint] = true;
  ARTSet321[ARTTS__SHREIKlatex] = true;
  ARTSet321[ARTTS__SHREIKlcnp] = true;
  ARTSet321[ARTTS__SHREIKlcnpGeneratorPool] = true;
  ARTSet321[ARTTS__SHREIKlcnpIndexedAPI] = true;
  ARTSet321[ARTTS__SHREIKlcnpIndexedPool] = true;
  ARTSet321[ARTTS__SHREIKlcnpLinkedAPI] = true;
  ARTSet321[ARTTS__SHREIKlexDFA] = true;
  ARTSet321[ARTTS__SHREIKlexGLL] = true;
  ARTSet321[ARTTS__SHREIKlexHardCoded] = true;
  ARTSet321[ARTTS__SHREIKlexWSSuffix] = true;
  ARTSet321[ARTTS__SHREIKlexerData] = true;
  ARTSet321[ARTTS__SHREIKlexerName] = true;
  ARTSet321[ARTTS__SHREIKmain] = true;
  ARTSet321[ARTTS__SHREIKmerge] = true;
  ARTSet321[ARTTS__SHREIKmgll] = true;
  ARTSet321[ARTTS__SHREIKmgllGeneratorPool] = true;
  ARTSet321[ARTTS__SHREIKmodule] = true;
  ARTSet321[ARTTS__SHREIKnamespace] = true;
  ARTSet321[ARTTS__SHREIKosbrd] = true;
  ARTSet321[ARTTS__SHREIKosbrdGenerator] = true;
  ARTSet321[ARTTS__SHREIKoutputDirectory] = true;
  ARTSet321[ARTTS__SHREIKparaterminal] = true;
  ARTSet321[ARTTS__SHREIKparseCountsPrint] = true;
  ARTSet321[ARTTS__SHREIKparserName] = true;
  ARTSet321[ARTTS__SHREIKprelude] = true;
  ARTSet321[ARTTS__SHREIKrelation] = true;
  ARTSet321[ARTTS__SHREIKresult] = true;
  ARTSet321[ARTTS__SHREIKsml97Parser] = true;
  ARTSet321[ARTTS__SHREIKsppfLongest] = true;
  ARTSet321[ARTTS__SHREIKsppfPrint] = true;
  ARTSet321[ARTTS__SHREIKsppfPriority] = true;
  ARTSet321[ARTTS__SHREIKsppfShow] = true;
  ARTSet321[ARTTS__SHREIKsppfWrite] = true;
  ARTSet321[ARTTS__SHREIKstart] = true;
  ARTSet321[ARTTS__SHREIKstatistics] = true;
  ARTSet321[ARTTS__SHREIKstrategy] = true;
  ARTSet321[ARTTS__SHREIKsupport] = true;
  ARTSet321[ARTTS__SHREIKtermPrint] = true;
  ARTSet321[ARTTS__SHREIKtermShow] = true;
  ARTSet321[ARTTS__SHREIKtermTool] = true;
  ARTSet321[ARTTS__SHREIKtermWrite] = true;
  ARTSet321[ARTTS__SHREIKtrace] = true;
  ARTSet321[ARTTS__SHREIKtreePrint] = true;
  ARTSet321[ARTTS__SHREIKtreeShow] = true;
  ARTSet321[ARTTS__SHREIKtreeWrite] = true;
  ARTSet321[ARTTS__SHREIKtry] = true;
  ARTSet321[ARTTS__SHREIKtweDead] = true;
  ARTSet321[ARTTS__SHREIKtweExtents] = true;
  ARTSet321[ARTTS__SHREIKtweFromSPPF] = true;
  ARTSet321[ARTTS__SHREIKtweLexicalisations] = true;
  ARTSet321[ARTTS__SHREIKtweLongest] = true;
  ARTSet321[ARTTS__SHREIKtwePrint] = true;
  ARTSet321[ARTTS__SHREIKtwePrintFull] = true;
  ARTSet321[ARTTS__SHREIKtwePrintSummary] = true;
  ARTSet321[ARTTS__SHREIKtwePriority] = true;
  ARTSet321[ARTTS__SHREIKtweRecursive] = true;
  ARTSet321[ARTTS__SHREIKtweSegments] = true;
  ARTSet321[ARTTS__SHREIKtweShow] = true;
  ARTSet321[ARTTS__SHREIKtweTokenWrite] = true;
  ARTSet321[ARTTS__SHREIKtweWrite] = true;
  ARTSet321[ARTTS__SHREIKunicodeAsEscapeSeuences] = true;
  ARTSet321[ARTTS__SHREIKuse] = true;
  ARTSet321[ARTTS__SHREIKverbosity] = true;
  ARTSet321[ARTTS__SHREIKwhitespace] = true;
  ARTSet321[ARTTS__AMPERSAND] = true;
  ARTSet321[ARTTS__LPAR] = true;
  ARTSet321[ARTTS__COMMA] = true;
  ARTSet321[ARTTS__MINUS] = true;
  ARTSet321[ARTTS__MINUS_MINUS_MINUS] = true;
  ARTSet321[ARTTS__MINUS_SLASH] = true;
  ARTSet321[ARTTS__MINUS_SLASH_STAR] = true;
  ARTSet321[ARTTS__MINUS_SLASH_GT] = true;
  ARTSet321[ARTTS__MINUS_GT] = true;
  ARTSet321[ARTTS__MINUS_GT_STAR] = true;
  ARTSet321[ARTTS__MINUS_GT_GT] = true;
  ARTSet321[ARTTS__MINUS_BACKSLASH] = true;
  ARTSet321[ARTTS__MINUS_BACKSLASH_STAR] = true;
  ARTSet321[ARTTS__MINUS_BACKSLASH_GT] = true;
  ARTSet321[ARTTS__LT] = true;
  ARTSet321[ARTTS__EQUAL] = true;
  ARTSet321[ARTTS__EQUAL_GT] = true;
  ARTSet321[ARTTS__EQUAL_GT_STAR] = true;
  ARTSet321[ARTTS__EQUAL_GT_GT] = true;
  ARTSet321[ARTTS__GT] = true;
  ARTSet321[ARTTS_False] = true;
  ARTSet321[ARTTS_True] = true;
  ARTSet321[ARTTS_anyBuiltinTerminal] = true;
  ARTSet321[ARTTS_anyCaseInsensitiveTerminal] = true;
  ARTSet321[ARTTS_anyCaseSensitiveTerminal] = true;
  ARTSet321[ARTTS_anyCharacterTerminal] = true;
  ARTSet321[ARTTS_anyLiteralTerminal] = true;
  ARTSet321[ARTTS_anyNonterminal] = true;
  ARTSet321[ARTTS_anyParaterminal] = true;
  ARTSet321[ARTTS_anyTerminal] = true;
  ARTSet321[ARTTS__TILDE_GT] = true;
  ARTSet321[ARTTS__TILDE_GT_STAR] = true;
  ARTSet321[ARTTS__TILDE_GT_GT] = true;
  ARTSet321[ARTL_ART_CHAR_BQ] = true;
  ARTSet321[ARTL_ART_False] = true;
  ARTSet321[ARTL_ART_ID] = true;
  ARTSet321[ARTL_ART_ID_ATTRIBUTE] = true;
  ARTSet321[ARTL_ART_STRING_DOLLAR] = true;
  ARTSet321[ARTL_ART_STRING_DQ] = true;
  ARTSet321[ARTL_ART_STRING_PLAIN_SQ] = true;
  ARTSet321[ARTL_ART_TRRELATION] = true;
  ARTSet321[ARTL_ART_True] = true;
  ARTSet321[ARTL_ART___bool] = true;
  ARTSet321[ARTL_ART___char] = true;
  ARTSet321[ARTL_ART___int32] = true;
  ARTSet321[ARTL_ART___real64] = true;
  ARTSet321[ARTL_ART___string] = true;
  ARTSet321[ARTL_ART_cfgAttributeEquation] = true;
  ARTSet321[ARTL_ART_cfgBuiltinTerminal] = true;
  ARTSet321[ARTL_ART_cfgCaseInsensitiveTerminal] = true;
  ARTSet321[ARTL_ART_cfgCaseSensitiveTerminal] = true;
  ARTSet321[ARTL_ART_cfgCharacterTerminal] = true;
  ARTSet321[ARTL_ART_cfgNonterminal] = true;
  ARTSet321[ARTL_ART_cfgRule] = true;
  ARTSet321[ARTL_ART_chooseDiff] = true;
  ARTSet321[ARTL_ART_chooseElement] = true;
  ARTSet321[ARTL_ART_choosePredefinedSet] = true;
  ARTSet321[ARTL_ART_chooseRule] = true;
  ARTSet321[ARTL_ART_chooseUnionIntersection] = true;
  ARTSet321[ARTL_ART_directive] = true;
  ARTSet321[ARTL_ART_text] = true;
  ARTSet321[ARTL_ART_textElement] = true;
  ARTSet321[ARTL_ART_tr] = true;
  ARTSet321[ARTL_ART_trConfiguration] = true;
  ARTSet321[ARTL_ART_trEntityReferences] = true;
  ARTSet321[ARTL_ART_trEquations] = true;
  ARTSet321[ARTL_ART_trLabel] = true;
  ARTSet321[ARTL_ART_trMatch] = true;
  ARTSet321[ARTL_ART_trPremises] = true;
  ARTSet321[ARTL_ART_trPrimaryTerm] = true;
  ARTSet321[ARTL_ART_trRule] = true;
  ARTSet321[ARTL_ART_trTerm] = true;
  ARTSet321[ARTL_ART_trTransition] = true;
}

public void ARTSet33initialise() {
  ARTSet33 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet33, 0, artSetExtent, false);
  ARTSet33[ARTTS__TILDE_GT] = true;
}

public void ARTSet88initialise() {
  ARTSet88 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet88, 0, artSetExtent, false);
  ARTSet88[ARTTS__BACKSLASH_BACKSLASH] = true;
}

public void ARTSet128initialise() {
  ARTSet128 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet128, 0, artSetExtent, false);
  ARTSet128[ARTTS__BAR_BAR] = true;
}

public void ARTSet150initialise() {
  ARTSet150 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet150, 0, artSetExtent, false);
  ARTSet150[ARTTS__LT_LT] = true;
}

public void ARTSet249initialise() {
  ARTSet249 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet249, 0, artSetExtent, false);
  ARTSet249[ARTTS__SHREIKearleyTableIndexedData] = true;
}

public void ARTSet177initialise() {
  ARTSet177 = new boolean[artSetExtent];
  artInitialiseBooleanArray(ARTSet177, 0, artSetExtent, false);
  ARTSet177[ARTTS__SHREIKtwePrint] = true;
}

public void artSetInitialise() {
  ARTSet1initialise();
  ARTSet277initialise();
  ARTSet241initialise();
  ARTSet74initialise();
  ARTSet165initialise();
  ARTSet246initialise();
  ARTSet334initialise();
  ARTSet109initialise();
  ARTSet244initialise();
  ARTSet266initialise();
  ARTSet126initialise();
  ARTSet129initialise();
  ARTSet327initialise();
  ARTSet36initialise();
  ARTSet149initialise();
  ARTSet338initialise();
  ARTSet293initialise();
  ARTSet261initialise();
  ARTSet284initialise();
  ARTSet38initialise();
  ARTSet216initialise();
  ARTSet85initialise();
  ARTSet290initialise();
  ARTSet24initialise();
  ARTSet30initialise();
  ARTSet223initialise();
  ARTSet328initialise();
  ARTSet61initialise();
  ARTSet144initialise();
  ARTSet84initialise();
  ARTSet247initialise();
  ARTSet86initialise();
  ARTSet204initialise();
  ARTSet256initialise();
  ARTSet68initialise();
  ARTSet133initialise();
  ARTSet188initialise();
  ARTSet80initialise();
  ARTSet90initialise();
  ARTSet21initialise();
  ARTSet233initialise();
  ARTSet226initialise();
  ARTSet214initialise();
  ARTSet250initialise();
  ARTSet63initialise();
  ARTSet197initialise();
  ARTSet82initialise();
  ARTSet99initialise();
  ARTSet139initialise();
  ARTSet98initialise();
  ARTSet59initialise();
  ARTSet286initialise();
  ARTSet58initialise();
  ARTSet291initialise();
  ARTSet335initialise();
  ARTSet234initialise();
  ARTSet72initialise();
  ARTSet140initialise();
  ARTSet193initialise();
  ARTSet27initialise();
  ARTSet73initialise();
  ARTSet141initialise();
  ARTSet157initialise();
  ARTSet162initialise();
  ARTSet155initialise();
  ARTSet138initialise();
  ARTSet224initialise();
  ARTSet96initialise();
  ARTSet113initialise();
  ARTSet270initialise();
  ARTSet304initialise();
  ARTSet289initialise();
  ARTSet317initialise();
  ARTSet282initialise();
  ARTSet69initialise();
  ARTSet332initialise();
  ARTSet248initialise();
  ARTSet288initialise();
  ARTSet295initialise();
  ARTSet316initialise();
  ARTSet49initialise();
  ARTSet37initialise();
  ARTSet189initialise();
  ARTSet278initialise();
  ARTSet329initialise();
  ARTSet152initialise();
  ARTSet209initialise();
  ARTSet232initialise();
  ARTSet330initialise();
  ARTSet17initialise();
  ARTSet160initialise();
  ARTSet130initialise();
  ARTSet67initialise();
  ARTSet236initialise();
  ARTSet62initialise();
  ARTSet230initialise();
  ARTSet39initialise();
  ARTSet184initialise();
  ARTSet269initialise();
  ARTSet211initialise();
  ARTSet48initialise();
  ARTSet339initialise();
  ARTSet275initialise();
  ARTSet237initialise();
  ARTSet297initialise();
  ARTSet315initialise();
  ARTSet314initialise();
  ARTSet268initialise();
  ARTSet281initialise();
  ARTSet97initialise();
  ARTSet71initialise();
  ARTSet333initialise();
  ARTSet89initialise();
  ARTSet53initialise();
  ARTSet222initialise();
  ARTSet112initialise();
  ARTSet120initialise();
  ARTSet173initialise();
  ARTSet66initialise();
  ARTSet325initialise();
  ARTSet9initialise();
  ARTSet137initialise();
  ARTSet187initialise();
  ARTSet337initialise();
  ARTSet264initialise();
  ARTSet313initialise();
  ARTSet123initialise();
  ARTSet303initialise();
  ARTSet309initialise();
  ARTSet28initialise();
  ARTSet202initialise();
  ARTSet213initialise();
  ARTSet20initialise();
  ARTSet83initialise();
  ARTSet322initialise();
  ARTSet45initialise();
  ARTSet94initialise();
  ARTSet102initialise();
  ARTSet4initialise();
  ARTSet136initialise();
  ARTSet179initialise();
  ARTSet119initialise();
  ARTSet111initialise();
  ARTSet306initialise();
  ARTSet47initialise();
  ARTSet182initialise();
  ARTSet143initialise();
  ARTSet142initialise();
  ARTSet81initialise();
  ARTSet192initialise();
  ARTSet212initialise();
  ARTSet169initialise();
  ARTSet29initialise();
  ARTSet183initialise();
  ARTSet198initialise();
  ARTSet215initialise();
  ARTSet220initialise();
  ARTSet75initialise();
  ARTSet2initialise();
  ARTSet118initialise();
  ARTSet104initialise();
  ARTSet132initialise();
  ARTSet91initialise();
  ARTSet100initialise();
  ARTSet110initialise();
  ARTSet201initialise();
  ARTSet10initialise();
  ARTSet185initialise();
  ARTSet217initialise();
  ARTSet117initialise();
  ARTSet200initialise();
  ARTSet42initialise();
  ARTSet252initialise();
  ARTSet44initialise();
  ARTSet170initialise();
  ARTSet207initialise();
  ARTSet79initialise();
  ARTSet158initialise();
  ARTSet116initialise();
  ARTSet8initialise();
  ARTSet260initialise();
  ARTSet225initialise();
  ARTSet243initialise();
  ARTSet54initialise();
  ARTSet147initialise();
  ARTSet254initialise();
  ARTSet65initialise();
  ARTSet106initialise();
  ARTSet148initialise();
  ARTSet265initialise();
  ARTSet271initialise();
  ARTSet324initialise();
  ARTSet300initialise();
  ARTSet57initialise();
  ARTSet153initialise();
  ARTSet307initialise();
  ARTSet308initialise();
  ARTSet11initialise();
  ARTSet257initialise();
  ARTSet298initialise();
  ARTSet22initialise();
  ARTSet245initialise();
  ARTSet331initialise();
  ARTSet55initialise();
  ARTSet114initialise();
  ARTSet228initialise();
  ARTSet101initialise();
  ARTSet262initialise();
  ARTSet78initialise();
  ARTSet107initialise();
  ARTSet227initialise();
  ARTSet127initialise();
  ARTSet231initialise();
  ARTSet25initialise();
  ARTSet319initialise();
  ARTSet34initialise();
  ARTSet146initialise();
  ARTSet12initialise();
  ARTSet131initialise();
  ARTSet23initialise();
  ARTSet56initialise();
  ARTSet175initialise();
  ARTSet174initialise();
  ARTSet276initialise();
  ARTSet108initialise();
  ARTSet180initialise();
  ARTSet26initialise();
  ARTSet41initialise();
  ARTSet35initialise();
  ARTSet31initialise();
  ARTSet171initialise();
  ARTSet164initialise();
  ARTSet238initialise();
  ARTSet159initialise();
  ARTSet299initialise();
  ARTSet95initialise();
  ARTSet301initialise();
  ARTSet115initialise();
  ARTSet199initialise();
  ARTSet124initialise();
  ARTSet172initialise();
  ARTSet336initialise();
  ARTSet32initialise();
  ARTSet7initialise();
  ARTSet43initialise();
  ARTSet167initialise();
  ARTSet103initialise();
  ARTSet210initialise();
  ARTSet318initialise();
  ARTSet178initialise();
  ARTSet323initialise();
  ARTSet15initialise();
  ARTSet154initialise();
  ARTSet279initialise();
  ARTSet14initialise();
  ARTSet294initialise();
  ARTSet6initialise();
  ARTSet218initialise();
  ARTSet121initialise();
  ARTSet240initialise();
  ARTSet310initialise();
  ARTSet285initialise();
  ARTSet46initialise();
  ARTSet5initialise();
  ARTSet122initialise();
  ARTSet191initialise();
  ARTSet40initialise();
  ARTSet239initialise();
  ARTSet267initialise();
  ARTSet92initialise();
  ARTSet135initialise();
  ARTSet274initialise();
  ARTSet60initialise();
  ARTSet134initialise();
  ARTSet280initialise();
  ARTSet208initialise();
  ARTSet263initialise();
  ARTSet292initialise();
  ARTSet251initialise();
  ARTSet206initialise();
  ARTSet166initialise();
  ARTSet196initialise();
  ARTSet255initialise();
  ARTSet190initialise();
  ARTSet287initialise();
  ARTSet181initialise();
  ARTSet186initialise();
  ARTSet194initialise();
  ARTSet52initialise();
  ARTSet156initialise();
  ARTSet3initialise();
  ARTSet76initialise();
  ARTSet161initialise();
  ARTSet50initialise();
  ARTSet163initialise();
  ARTSet195initialise();
  ARTSet253initialise();
  ARTSet311initialise();
  ARTSet272initialise();
  ARTSet176initialise();
  ARTSet326initialise();
  ARTSet19initialise();
  ARTSet87initialise();
  ARTSet151initialise();
  ARTSet259initialise();
  ARTSet235initialise();
  ARTSet258initialise();
  ARTSet205initialise();
  ARTSet242initialise();
  ARTSet229initialise();
  ARTSet302initialise();
  ARTSet305initialise();
  ARTSet51initialise();
  ARTSet273initialise();
  ARTSet13initialise();
  ARTSet18initialise();
  ARTSet64initialise();
  ARTSet296initialise();
  ARTSet312initialise();
  ARTSet93initialise();
  ARTSet125initialise();
  ARTSet105initialise();
  ARTSet16initialise();
  ARTSet168initialise();
  ARTSet219initialise();
  ARTSet283initialise();
  ARTSet320initialise();
  ARTSet145initialise();
  ARTSet221initialise();
  ARTSet203initialise();
  ARTSet70initialise();
  ARTSet77initialise();
  ARTSet321initialise();
  ARTSet33initialise();
  ARTSet88initialise();
  ARTSet128initialise();
  ARTSet150initialise();
  ARTSet249initialise();
  ARTSet177initialise();
}

public void artTableInitialiser_ART_CHAR_BQ() {
  artLabelInternalStrings[ARTL_ART_CHAR_BQ] = "CHAR_BQ";
  artLabelStrings[ARTL_ART_CHAR_BQ] = "CHAR_BQ";
  artKindOfs[ARTL_ART_CHAR_BQ] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_CHAR_BQ_1020] = "CHAR_BQ ::= . &CHAR_BQ  ";
  artLabelStrings[ARTL_ART_CHAR_BQ_1020] = "";
  artlhsL[ARTL_ART_CHAR_BQ_1020] = ARTL_ART_CHAR_BQ;
  artKindOfs[ARTL_ART_CHAR_BQ_1020] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_CHAR_BQ_1020] = true;
  artFolds[ARTL_ART_CHAR_BQ_1022] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_CHAR_BQ_1021] = "CHAR_BQ ::= &CHAR_BQ  ";
  artLabelStrings[ARTL_ART_CHAR_BQ_1021] = "";
  artlhsL[ARTL_ART_CHAR_BQ_1021] = ARTL_ART_CHAR_BQ;
  artPopD[ARTL_ART_CHAR_BQ_1021] = true;
  artLabelInternalStrings[ARTL_ART_CHAR_BQ_1022] = "CHAR_BQ ::= &CHAR_BQ  .";
  artLabelStrings[ARTL_ART_CHAR_BQ_1022] = "";
  artlhsL[ARTL_ART_CHAR_BQ_1022] = ARTL_ART_CHAR_BQ;
  artKindOfs[ARTL_ART_CHAR_BQ_1022] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_CHAR_BQ_1022] = true;
  arteoR_pL[ARTL_ART_CHAR_BQ_1022] = true;
  artPopD[ARTL_ART_CHAR_BQ_1022] = true;
}

public void artTableInitialiser_ART_False() {
  artLabelInternalStrings[ARTL_ART_False] = "False";
  artLabelStrings[ARTL_ART_False] = "False";
  artKindOfs[ARTL_ART_False] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_False_1602] = "False ::= . 'False'  ";
  artLabelStrings[ARTL_ART_False_1602] = "";
  artlhsL[ARTL_ART_False_1602] = ARTL_ART_False;
  artKindOfs[ARTL_ART_False_1602] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_False_1602] = true;
  artFolds[ARTL_ART_False_1604] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_False_1603] = "False ::= 'False'  ";
  artLabelStrings[ARTL_ART_False_1603] = "";
  artlhsL[ARTL_ART_False_1603] = ARTL_ART_False;
  artPopD[ARTL_ART_False_1603] = true;
  artLabelInternalStrings[ARTL_ART_False_1604] = "False ::= 'False'  .";
  artLabelStrings[ARTL_ART_False_1604] = "";
  artlhsL[ARTL_ART_False_1604] = ARTL_ART_False;
  artKindOfs[ARTL_ART_False_1604] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_False_1604] = true;
  arteoR_pL[ARTL_ART_False_1604] = true;
  artPopD[ARTL_ART_False_1604] = true;
}

public void artTableInitialiser_ART_ID() {
  artLabelInternalStrings[ARTL_ART_ID] = "ID";
  artLabelStrings[ARTL_ART_ID] = "ID";
  artKindOfs[ARTL_ART_ID] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_ID_998] = "ID ::= . &ID  ";
  artLabelStrings[ARTL_ART_ID_998] = "";
  artlhsL[ARTL_ART_ID_998] = ARTL_ART_ID;
  artKindOfs[ARTL_ART_ID_998] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_ID_998] = true;
  artFolds[ARTL_ART_ID_1000] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_ID_999] = "ID ::= &ID  ";
  artLabelStrings[ARTL_ART_ID_999] = "";
  artlhsL[ARTL_ART_ID_999] = ARTL_ART_ID;
  artPopD[ARTL_ART_ID_999] = true;
  artLabelInternalStrings[ARTL_ART_ID_1000] = "ID ::= &ID  .";
  artLabelStrings[ARTL_ART_ID_1000] = "";
  artlhsL[ARTL_ART_ID_1000] = ARTL_ART_ID;
  artKindOfs[ARTL_ART_ID_1000] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_ID_1000] = true;
  arteoR_pL[ARTL_ART_ID_1000] = true;
  artPopD[ARTL_ART_ID_1000] = true;
}

public void artTableInitialiser_ART_ID_ATTRIBUTE() {
  artLabelInternalStrings[ARTL_ART_ID_ATTRIBUTE] = "ID_ATTRIBUTE";
  artLabelStrings[ARTL_ART_ID_ATTRIBUTE] = "ID_ATTRIBUTE";
  artKindOfs[ARTL_ART_ID_ATTRIBUTE] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_ID_ATTRIBUTE_810] = "ID_ATTRIBUTE ::= . &ID  '.'  &ID  ";
  artLabelStrings[ARTL_ART_ID_ATTRIBUTE_810] = "";
  artlhsL[ARTL_ART_ID_ATTRIBUTE_810] = ARTL_ART_ID_ATTRIBUTE;
  artKindOfs[ARTL_ART_ID_ATTRIBUTE_810] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_ID_ATTRIBUTE_810] = true;
  artLabelInternalStrings[ARTL_ART_ID_ATTRIBUTE_811] = "ID_ATTRIBUTE ::= &ID  '.'  &ID  ";
  artLabelStrings[ARTL_ART_ID_ATTRIBUTE_811] = "";
  artlhsL[ARTL_ART_ID_ATTRIBUTE_811] = ARTL_ART_ID_ATTRIBUTE;
  artPopD[ARTL_ART_ID_ATTRIBUTE_811] = true;
  artLabelInternalStrings[ARTL_ART_ID_ATTRIBUTE_812] = "ID_ATTRIBUTE ::= &ID  . '.'  &ID  ";
  artLabelStrings[ARTL_ART_ID_ATTRIBUTE_812] = "";
  artlhsL[ARTL_ART_ID_ATTRIBUTE_812] = ARTL_ART_ID_ATTRIBUTE;
  artKindOfs[ARTL_ART_ID_ATTRIBUTE_812] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_ID_ATTRIBUTE_812] = true;
  artPopD[ARTL_ART_ID_ATTRIBUTE_812] = true;
  artFolds[ARTL_ART_ID_ATTRIBUTE_814] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_ID_ATTRIBUTE_813] = "ID_ATTRIBUTE ::= &ID  '.'  &ID  ";
  artLabelStrings[ARTL_ART_ID_ATTRIBUTE_813] = "";
  artlhsL[ARTL_ART_ID_ATTRIBUTE_813] = ARTL_ART_ID_ATTRIBUTE;
  artPopD[ARTL_ART_ID_ATTRIBUTE_813] = true;
  artLabelInternalStrings[ARTL_ART_ID_ATTRIBUTE_814] = "ID_ATTRIBUTE ::= &ID  '.'  . &ID  ";
  artLabelStrings[ARTL_ART_ID_ATTRIBUTE_814] = "";
  artlhsL[ARTL_ART_ID_ATTRIBUTE_814] = ARTL_ART_ID_ATTRIBUTE;
  artKindOfs[ARTL_ART_ID_ATTRIBUTE_814] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_ID_ATTRIBUTE_814] = true;
  artLabelInternalStrings[ARTL_ART_ID_ATTRIBUTE_815] = "ID_ATTRIBUTE ::= &ID  '.'  &ID  ";
  artLabelStrings[ARTL_ART_ID_ATTRIBUTE_815] = "";
  artlhsL[ARTL_ART_ID_ATTRIBUTE_815] = ARTL_ART_ID_ATTRIBUTE;
  artPopD[ARTL_ART_ID_ATTRIBUTE_815] = true;
  artLabelInternalStrings[ARTL_ART_ID_ATTRIBUTE_816] = "ID_ATTRIBUTE ::= &ID  '.'  &ID  .";
  artLabelStrings[ARTL_ART_ID_ATTRIBUTE_816] = "";
  artlhsL[ARTL_ART_ID_ATTRIBUTE_816] = ARTL_ART_ID_ATTRIBUTE;
  artKindOfs[ARTL_ART_ID_ATTRIBUTE_816] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_ID_ATTRIBUTE_816] = true;
  arteoR_pL[ARTL_ART_ID_ATTRIBUTE_816] = true;
  artPopD[ARTL_ART_ID_ATTRIBUTE_816] = true;
}

public void artTableInitialiser_ART_STRING_BRACE_NEST() {
  artLabelInternalStrings[ARTL_ART_STRING_BRACE_NEST] = "STRING_BRACE_NEST";
  artLabelStrings[ARTL_ART_STRING_BRACE_NEST] = "STRING_BRACE_NEST";
  artKindOfs[ARTL_ART_STRING_BRACE_NEST] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_STRING_BRACE_NEST_868] = "STRING_BRACE_NEST ::= . &STRING_BRACE_NEST  ";
  artLabelStrings[ARTL_ART_STRING_BRACE_NEST_868] = "";
  artlhsL[ARTL_ART_STRING_BRACE_NEST_868] = ARTL_ART_STRING_BRACE_NEST;
  artKindOfs[ARTL_ART_STRING_BRACE_NEST_868] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_STRING_BRACE_NEST_868] = true;
  artFolds[ARTL_ART_STRING_BRACE_NEST_870] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_STRING_BRACE_NEST_869] = "STRING_BRACE_NEST ::= &STRING_BRACE_NEST  ";
  artLabelStrings[ARTL_ART_STRING_BRACE_NEST_869] = "";
  artlhsL[ARTL_ART_STRING_BRACE_NEST_869] = ARTL_ART_STRING_BRACE_NEST;
  artPopD[ARTL_ART_STRING_BRACE_NEST_869] = true;
  artLabelInternalStrings[ARTL_ART_STRING_BRACE_NEST_870] = "STRING_BRACE_NEST ::= &STRING_BRACE_NEST  .";
  artLabelStrings[ARTL_ART_STRING_BRACE_NEST_870] = "";
  artlhsL[ARTL_ART_STRING_BRACE_NEST_870] = ARTL_ART_STRING_BRACE_NEST;
  artKindOfs[ARTL_ART_STRING_BRACE_NEST_870] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_STRING_BRACE_NEST_870] = true;
  arteoR_pL[ARTL_ART_STRING_BRACE_NEST_870] = true;
  artPopD[ARTL_ART_STRING_BRACE_NEST_870] = true;
}

public void artTableInitialiser_ART_STRING_BRACKET_NEST() {
  artLabelInternalStrings[ARTL_ART_STRING_BRACKET_NEST] = "STRING_BRACKET_NEST";
  artLabelStrings[ARTL_ART_STRING_BRACKET_NEST] = "STRING_BRACKET_NEST";
  artKindOfs[ARTL_ART_STRING_BRACKET_NEST] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_STRING_BRACKET_NEST_1606] = "STRING_BRACKET_NEST ::= . &STRING_BRACKET_NEST  ";
  artLabelStrings[ARTL_ART_STRING_BRACKET_NEST_1606] = "";
  artlhsL[ARTL_ART_STRING_BRACKET_NEST_1606] = ARTL_ART_STRING_BRACKET_NEST;
  artKindOfs[ARTL_ART_STRING_BRACKET_NEST_1606] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_STRING_BRACKET_NEST_1606] = true;
  artFolds[ARTL_ART_STRING_BRACKET_NEST_1608] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_STRING_BRACKET_NEST_1607] = "STRING_BRACKET_NEST ::= &STRING_BRACKET_NEST  ";
  artLabelStrings[ARTL_ART_STRING_BRACKET_NEST_1607] = "";
  artlhsL[ARTL_ART_STRING_BRACKET_NEST_1607] = ARTL_ART_STRING_BRACKET_NEST;
  artPopD[ARTL_ART_STRING_BRACKET_NEST_1607] = true;
  artLabelInternalStrings[ARTL_ART_STRING_BRACKET_NEST_1608] = "STRING_BRACKET_NEST ::= &STRING_BRACKET_NEST  .";
  artLabelStrings[ARTL_ART_STRING_BRACKET_NEST_1608] = "";
  artlhsL[ARTL_ART_STRING_BRACKET_NEST_1608] = ARTL_ART_STRING_BRACKET_NEST;
  artKindOfs[ARTL_ART_STRING_BRACKET_NEST_1608] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_STRING_BRACKET_NEST_1608] = true;
  arteoR_pL[ARTL_ART_STRING_BRACKET_NEST_1608] = true;
  artPopD[ARTL_ART_STRING_BRACKET_NEST_1608] = true;
}

public void artTableInitialiser_ART_STRING_DOLLAR() {
  artLabelInternalStrings[ARTL_ART_STRING_DOLLAR] = "STRING_DOLLAR";
  artLabelStrings[ARTL_ART_STRING_DOLLAR] = "STRING_DOLLAR";
  artKindOfs[ARTL_ART_STRING_DOLLAR] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_STRING_DOLLAR_1008] = "STRING_DOLLAR ::= . &STRING_DOLLAR  ";
  artLabelStrings[ARTL_ART_STRING_DOLLAR_1008] = "";
  artlhsL[ARTL_ART_STRING_DOLLAR_1008] = ARTL_ART_STRING_DOLLAR;
  artKindOfs[ARTL_ART_STRING_DOLLAR_1008] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_STRING_DOLLAR_1008] = true;
  artFolds[ARTL_ART_STRING_DOLLAR_1010] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_STRING_DOLLAR_1009] = "STRING_DOLLAR ::= &STRING_DOLLAR  ";
  artLabelStrings[ARTL_ART_STRING_DOLLAR_1009] = "";
  artlhsL[ARTL_ART_STRING_DOLLAR_1009] = ARTL_ART_STRING_DOLLAR;
  artPopD[ARTL_ART_STRING_DOLLAR_1009] = true;
  artLabelInternalStrings[ARTL_ART_STRING_DOLLAR_1010] = "STRING_DOLLAR ::= &STRING_DOLLAR  .";
  artLabelStrings[ARTL_ART_STRING_DOLLAR_1010] = "";
  artlhsL[ARTL_ART_STRING_DOLLAR_1010] = ARTL_ART_STRING_DOLLAR;
  artKindOfs[ARTL_ART_STRING_DOLLAR_1010] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_STRING_DOLLAR_1010] = true;
  arteoR_pL[ARTL_ART_STRING_DOLLAR_1010] = true;
  artPopD[ARTL_ART_STRING_DOLLAR_1010] = true;
}

public void artTableInitialiser_ART_STRING_DQ() {
  artLabelInternalStrings[ARTL_ART_STRING_DQ] = "STRING_DQ";
  artLabelStrings[ARTL_ART_STRING_DQ] = "STRING_DQ";
  artKindOfs[ARTL_ART_STRING_DQ] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_STRING_DQ_1016] = "STRING_DQ ::= . &STRING_DQ  ";
  artLabelStrings[ARTL_ART_STRING_DQ_1016] = "";
  artlhsL[ARTL_ART_STRING_DQ_1016] = ARTL_ART_STRING_DQ;
  artKindOfs[ARTL_ART_STRING_DQ_1016] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_STRING_DQ_1016] = true;
  artFolds[ARTL_ART_STRING_DQ_1018] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_STRING_DQ_1017] = "STRING_DQ ::= &STRING_DQ  ";
  artLabelStrings[ARTL_ART_STRING_DQ_1017] = "";
  artlhsL[ARTL_ART_STRING_DQ_1017] = ARTL_ART_STRING_DQ;
  artPopD[ARTL_ART_STRING_DQ_1017] = true;
  artLabelInternalStrings[ARTL_ART_STRING_DQ_1018] = "STRING_DQ ::= &STRING_DQ  .";
  artLabelStrings[ARTL_ART_STRING_DQ_1018] = "";
  artlhsL[ARTL_ART_STRING_DQ_1018] = ARTL_ART_STRING_DQ;
  artKindOfs[ARTL_ART_STRING_DQ_1018] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_STRING_DQ_1018] = true;
  arteoR_pL[ARTL_ART_STRING_DQ_1018] = true;
  artPopD[ARTL_ART_STRING_DQ_1018] = true;
}

public void artTableInitialiser_ART_STRING_PLAIN_SQ() {
  artLabelInternalStrings[ARTL_ART_STRING_PLAIN_SQ] = "STRING_PLAIN_SQ";
  artLabelStrings[ARTL_ART_STRING_PLAIN_SQ] = "STRING_PLAIN_SQ";
  artKindOfs[ARTL_ART_STRING_PLAIN_SQ] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_STRING_PLAIN_SQ_1012] = "STRING_PLAIN_SQ ::= . &STRING_PLAIN_SQ  ";
  artLabelStrings[ARTL_ART_STRING_PLAIN_SQ_1012] = "";
  artlhsL[ARTL_ART_STRING_PLAIN_SQ_1012] = ARTL_ART_STRING_PLAIN_SQ;
  artKindOfs[ARTL_ART_STRING_PLAIN_SQ_1012] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_STRING_PLAIN_SQ_1012] = true;
  artFolds[ARTL_ART_STRING_PLAIN_SQ_1014] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_STRING_PLAIN_SQ_1013] = "STRING_PLAIN_SQ ::= &STRING_PLAIN_SQ  ";
  artLabelStrings[ARTL_ART_STRING_PLAIN_SQ_1013] = "";
  artlhsL[ARTL_ART_STRING_PLAIN_SQ_1013] = ARTL_ART_STRING_PLAIN_SQ;
  artPopD[ARTL_ART_STRING_PLAIN_SQ_1013] = true;
  artLabelInternalStrings[ARTL_ART_STRING_PLAIN_SQ_1014] = "STRING_PLAIN_SQ ::= &STRING_PLAIN_SQ  .";
  artLabelStrings[ARTL_ART_STRING_PLAIN_SQ_1014] = "";
  artlhsL[ARTL_ART_STRING_PLAIN_SQ_1014] = ARTL_ART_STRING_PLAIN_SQ;
  artKindOfs[ARTL_ART_STRING_PLAIN_SQ_1014] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_STRING_PLAIN_SQ_1014] = true;
  arteoR_pL[ARTL_ART_STRING_PLAIN_SQ_1014] = true;
  artPopD[ARTL_ART_STRING_PLAIN_SQ_1014] = true;
}

public void artTableInitialiser_ART_TRRELATION() {
  artLabelInternalStrings[ARTL_ART_TRRELATION] = "TRRELATION";
  artLabelStrings[ARTL_ART_TRRELATION] = "TRRELATION";
  artKindOfs[ARTL_ART_TRRELATION] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_TRRELATION_1142] = "TRRELATION ::= . '->'  ";
  artLabelStrings[ARTL_ART_TRRELATION_1142] = "";
  artlhsL[ARTL_ART_TRRELATION_1142] = ARTL_ART_TRRELATION;
  artKindOfs[ARTL_ART_TRRELATION_1142] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_TRRELATION_1142] = true;
  artLabelInternalStrings[ARTL_ART_TRRELATION_1143] = "TRRELATION ::= '->'  ";
  artLabelStrings[ARTL_ART_TRRELATION_1143] = "";
  artlhsL[ARTL_ART_TRRELATION_1143] = ARTL_ART_TRRELATION;
  artPopD[ARTL_ART_TRRELATION_1143] = true;
  artLabelInternalStrings[ARTL_ART_TRRELATION_1144] = "TRRELATION ::= '->'  .";
  artLabelStrings[ARTL_ART_TRRELATION_1144] = "";
  artlhsL[ARTL_ART_TRRELATION_1144] = ARTL_ART_TRRELATION;
  artKindOfs[ARTL_ART_TRRELATION_1144] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_TRRELATION_1144] = true;
  arteoR_pL[ARTL_ART_TRRELATION_1144] = true;
  artPopD[ARTL_ART_TRRELATION_1144] = true;
  artLabelInternalStrings[ARTL_ART_TRRELATION_1146] = "TRRELATION ::= . '->*'  ";
  artLabelStrings[ARTL_ART_TRRELATION_1146] = "";
  artlhsL[ARTL_ART_TRRELATION_1146] = ARTL_ART_TRRELATION;
  artKindOfs[ARTL_ART_TRRELATION_1146] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_TRRELATION_1146] = true;
  artLabelInternalStrings[ARTL_ART_TRRELATION_1147] = "TRRELATION ::= '->*'  ";
  artLabelStrings[ARTL_ART_TRRELATION_1147] = "";
  artlhsL[ARTL_ART_TRRELATION_1147] = ARTL_ART_TRRELATION;
  artPopD[ARTL_ART_TRRELATION_1147] = true;
  artLabelInternalStrings[ARTL_ART_TRRELATION_1148] = "TRRELATION ::= '->*'  .";
  artLabelStrings[ARTL_ART_TRRELATION_1148] = "";
  artlhsL[ARTL_ART_TRRELATION_1148] = ARTL_ART_TRRELATION;
  artKindOfs[ARTL_ART_TRRELATION_1148] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_TRRELATION_1148] = true;
  arteoR_pL[ARTL_ART_TRRELATION_1148] = true;
  artPopD[ARTL_ART_TRRELATION_1148] = true;
  artLabelInternalStrings[ARTL_ART_TRRELATION_1150] = "TRRELATION ::= . '->>'  ";
  artLabelStrings[ARTL_ART_TRRELATION_1150] = "";
  artlhsL[ARTL_ART_TRRELATION_1150] = ARTL_ART_TRRELATION;
  artKindOfs[ARTL_ART_TRRELATION_1150] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_TRRELATION_1150] = true;
  artLabelInternalStrings[ARTL_ART_TRRELATION_1151] = "TRRELATION ::= '->>'  ";
  artLabelStrings[ARTL_ART_TRRELATION_1151] = "";
  artlhsL[ARTL_ART_TRRELATION_1151] = ARTL_ART_TRRELATION;
  artPopD[ARTL_ART_TRRELATION_1151] = true;
  artLabelInternalStrings[ARTL_ART_TRRELATION_1152] = "TRRELATION ::= '->>'  .";
  artLabelStrings[ARTL_ART_TRRELATION_1152] = "";
  artlhsL[ARTL_ART_TRRELATION_1152] = ARTL_ART_TRRELATION;
  artKindOfs[ARTL_ART_TRRELATION_1152] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_TRRELATION_1152] = true;
  arteoR_pL[ARTL_ART_TRRELATION_1152] = true;
  artPopD[ARTL_ART_TRRELATION_1152] = true;
  artLabelInternalStrings[ARTL_ART_TRRELATION_1154] = "TRRELATION ::= . '=>'  ";
  artLabelStrings[ARTL_ART_TRRELATION_1154] = "";
  artlhsL[ARTL_ART_TRRELATION_1154] = ARTL_ART_TRRELATION;
  artKindOfs[ARTL_ART_TRRELATION_1154] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_TRRELATION_1154] = true;
  artLabelInternalStrings[ARTL_ART_TRRELATION_1155] = "TRRELATION ::= '=>'  ";
  artLabelStrings[ARTL_ART_TRRELATION_1155] = "";
  artlhsL[ARTL_ART_TRRELATION_1155] = ARTL_ART_TRRELATION;
  artPopD[ARTL_ART_TRRELATION_1155] = true;
  artLabelInternalStrings[ARTL_ART_TRRELATION_1156] = "TRRELATION ::= '=>'  .";
  artLabelStrings[ARTL_ART_TRRELATION_1156] = "";
  artlhsL[ARTL_ART_TRRELATION_1156] = ARTL_ART_TRRELATION;
  artKindOfs[ARTL_ART_TRRELATION_1156] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_TRRELATION_1156] = true;
  arteoR_pL[ARTL_ART_TRRELATION_1156] = true;
  artPopD[ARTL_ART_TRRELATION_1156] = true;
  artLabelInternalStrings[ARTL_ART_TRRELATION_1158] = "TRRELATION ::= . '=>*'  ";
  artLabelStrings[ARTL_ART_TRRELATION_1158] = "";
  artlhsL[ARTL_ART_TRRELATION_1158] = ARTL_ART_TRRELATION;
  artKindOfs[ARTL_ART_TRRELATION_1158] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_TRRELATION_1158] = true;
  artLabelInternalStrings[ARTL_ART_TRRELATION_1159] = "TRRELATION ::= '=>*'  ";
  artLabelStrings[ARTL_ART_TRRELATION_1159] = "";
  artlhsL[ARTL_ART_TRRELATION_1159] = ARTL_ART_TRRELATION;
  artPopD[ARTL_ART_TRRELATION_1159] = true;
  artLabelInternalStrings[ARTL_ART_TRRELATION_1160] = "TRRELATION ::= '=>*'  .";
  artLabelStrings[ARTL_ART_TRRELATION_1160] = "";
  artlhsL[ARTL_ART_TRRELATION_1160] = ARTL_ART_TRRELATION;
  artKindOfs[ARTL_ART_TRRELATION_1160] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_TRRELATION_1160] = true;
  arteoR_pL[ARTL_ART_TRRELATION_1160] = true;
  artPopD[ARTL_ART_TRRELATION_1160] = true;
  artLabelInternalStrings[ARTL_ART_TRRELATION_1162] = "TRRELATION ::= . '=>>'  ";
  artLabelStrings[ARTL_ART_TRRELATION_1162] = "";
  artlhsL[ARTL_ART_TRRELATION_1162] = ARTL_ART_TRRELATION;
  artKindOfs[ARTL_ART_TRRELATION_1162] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_TRRELATION_1162] = true;
  artLabelInternalStrings[ARTL_ART_TRRELATION_1163] = "TRRELATION ::= '=>>'  ";
  artLabelStrings[ARTL_ART_TRRELATION_1163] = "";
  artlhsL[ARTL_ART_TRRELATION_1163] = ARTL_ART_TRRELATION;
  artPopD[ARTL_ART_TRRELATION_1163] = true;
  artLabelInternalStrings[ARTL_ART_TRRELATION_1164] = "TRRELATION ::= '=>>'  .";
  artLabelStrings[ARTL_ART_TRRELATION_1164] = "";
  artlhsL[ARTL_ART_TRRELATION_1164] = ARTL_ART_TRRELATION;
  artKindOfs[ARTL_ART_TRRELATION_1164] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_TRRELATION_1164] = true;
  arteoR_pL[ARTL_ART_TRRELATION_1164] = true;
  artPopD[ARTL_ART_TRRELATION_1164] = true;
  artLabelInternalStrings[ARTL_ART_TRRELATION_1166] = "TRRELATION ::= . '-\\'  ";
  artLabelStrings[ARTL_ART_TRRELATION_1166] = "";
  artlhsL[ARTL_ART_TRRELATION_1166] = ARTL_ART_TRRELATION;
  artKindOfs[ARTL_ART_TRRELATION_1166] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_TRRELATION_1166] = true;
  artLabelInternalStrings[ARTL_ART_TRRELATION_1167] = "TRRELATION ::= '-\\'  ";
  artLabelStrings[ARTL_ART_TRRELATION_1167] = "";
  artlhsL[ARTL_ART_TRRELATION_1167] = ARTL_ART_TRRELATION;
  artPopD[ARTL_ART_TRRELATION_1167] = true;
  artLabelInternalStrings[ARTL_ART_TRRELATION_1168] = "TRRELATION ::= '-\\'  .";
  artLabelStrings[ARTL_ART_TRRELATION_1168] = "";
  artlhsL[ARTL_ART_TRRELATION_1168] = ARTL_ART_TRRELATION;
  artKindOfs[ARTL_ART_TRRELATION_1168] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_TRRELATION_1168] = true;
  arteoR_pL[ARTL_ART_TRRELATION_1168] = true;
  artPopD[ARTL_ART_TRRELATION_1168] = true;
  artLabelInternalStrings[ARTL_ART_TRRELATION_1170] = "TRRELATION ::= . '-\\*'  ";
  artLabelStrings[ARTL_ART_TRRELATION_1170] = "";
  artlhsL[ARTL_ART_TRRELATION_1170] = ARTL_ART_TRRELATION;
  artKindOfs[ARTL_ART_TRRELATION_1170] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_TRRELATION_1170] = true;
  artLabelInternalStrings[ARTL_ART_TRRELATION_1171] = "TRRELATION ::= '-\\*'  ";
  artLabelStrings[ARTL_ART_TRRELATION_1171] = "";
  artlhsL[ARTL_ART_TRRELATION_1171] = ARTL_ART_TRRELATION;
  artPopD[ARTL_ART_TRRELATION_1171] = true;
  artLabelInternalStrings[ARTL_ART_TRRELATION_1172] = "TRRELATION ::= '-\\*'  .";
  artLabelStrings[ARTL_ART_TRRELATION_1172] = "";
  artlhsL[ARTL_ART_TRRELATION_1172] = ARTL_ART_TRRELATION;
  artKindOfs[ARTL_ART_TRRELATION_1172] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_TRRELATION_1172] = true;
  arteoR_pL[ARTL_ART_TRRELATION_1172] = true;
  artPopD[ARTL_ART_TRRELATION_1172] = true;
  artLabelInternalStrings[ARTL_ART_TRRELATION_1174] = "TRRELATION ::= . '-\\>'  ";
  artLabelStrings[ARTL_ART_TRRELATION_1174] = "";
  artlhsL[ARTL_ART_TRRELATION_1174] = ARTL_ART_TRRELATION;
  artKindOfs[ARTL_ART_TRRELATION_1174] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_TRRELATION_1174] = true;
  artLabelInternalStrings[ARTL_ART_TRRELATION_1175] = "TRRELATION ::= '-\\>'  ";
  artLabelStrings[ARTL_ART_TRRELATION_1175] = "";
  artlhsL[ARTL_ART_TRRELATION_1175] = ARTL_ART_TRRELATION;
  artPopD[ARTL_ART_TRRELATION_1175] = true;
  artLabelInternalStrings[ARTL_ART_TRRELATION_1176] = "TRRELATION ::= '-\\>'  .";
  artLabelStrings[ARTL_ART_TRRELATION_1176] = "";
  artlhsL[ARTL_ART_TRRELATION_1176] = ARTL_ART_TRRELATION;
  artKindOfs[ARTL_ART_TRRELATION_1176] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_TRRELATION_1176] = true;
  arteoR_pL[ARTL_ART_TRRELATION_1176] = true;
  artPopD[ARTL_ART_TRRELATION_1176] = true;
  artLabelInternalStrings[ARTL_ART_TRRELATION_1178] = "TRRELATION ::= . '-/'  ";
  artLabelStrings[ARTL_ART_TRRELATION_1178] = "";
  artlhsL[ARTL_ART_TRRELATION_1178] = ARTL_ART_TRRELATION;
  artKindOfs[ARTL_ART_TRRELATION_1178] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_TRRELATION_1178] = true;
  artLabelInternalStrings[ARTL_ART_TRRELATION_1179] = "TRRELATION ::= '-/'  ";
  artLabelStrings[ARTL_ART_TRRELATION_1179] = "";
  artlhsL[ARTL_ART_TRRELATION_1179] = ARTL_ART_TRRELATION;
  artPopD[ARTL_ART_TRRELATION_1179] = true;
  artLabelInternalStrings[ARTL_ART_TRRELATION_1180] = "TRRELATION ::= '-/'  .";
  artLabelStrings[ARTL_ART_TRRELATION_1180] = "";
  artlhsL[ARTL_ART_TRRELATION_1180] = ARTL_ART_TRRELATION;
  artKindOfs[ARTL_ART_TRRELATION_1180] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_TRRELATION_1180] = true;
  arteoR_pL[ARTL_ART_TRRELATION_1180] = true;
  artPopD[ARTL_ART_TRRELATION_1180] = true;
  artLabelInternalStrings[ARTL_ART_TRRELATION_1182] = "TRRELATION ::= . '-/*'  ";
  artLabelStrings[ARTL_ART_TRRELATION_1182] = "";
  artlhsL[ARTL_ART_TRRELATION_1182] = ARTL_ART_TRRELATION;
  artKindOfs[ARTL_ART_TRRELATION_1182] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_TRRELATION_1182] = true;
  artLabelInternalStrings[ARTL_ART_TRRELATION_1183] = "TRRELATION ::= '-/*'  ";
  artLabelStrings[ARTL_ART_TRRELATION_1183] = "";
  artlhsL[ARTL_ART_TRRELATION_1183] = ARTL_ART_TRRELATION;
  artPopD[ARTL_ART_TRRELATION_1183] = true;
  artLabelInternalStrings[ARTL_ART_TRRELATION_1184] = "TRRELATION ::= '-/*'  .";
  artLabelStrings[ARTL_ART_TRRELATION_1184] = "";
  artlhsL[ARTL_ART_TRRELATION_1184] = ARTL_ART_TRRELATION;
  artKindOfs[ARTL_ART_TRRELATION_1184] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_TRRELATION_1184] = true;
  arteoR_pL[ARTL_ART_TRRELATION_1184] = true;
  artPopD[ARTL_ART_TRRELATION_1184] = true;
  artLabelInternalStrings[ARTL_ART_TRRELATION_1186] = "TRRELATION ::= . '-/>'  ";
  artLabelStrings[ARTL_ART_TRRELATION_1186] = "";
  artlhsL[ARTL_ART_TRRELATION_1186] = ARTL_ART_TRRELATION;
  artKindOfs[ARTL_ART_TRRELATION_1186] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_TRRELATION_1186] = true;
  artLabelInternalStrings[ARTL_ART_TRRELATION_1187] = "TRRELATION ::= '-/>'  ";
  artLabelStrings[ARTL_ART_TRRELATION_1187] = "";
  artlhsL[ARTL_ART_TRRELATION_1187] = ARTL_ART_TRRELATION;
  artPopD[ARTL_ART_TRRELATION_1187] = true;
  artLabelInternalStrings[ARTL_ART_TRRELATION_1188] = "TRRELATION ::= '-/>'  .";
  artLabelStrings[ARTL_ART_TRRELATION_1188] = "";
  artlhsL[ARTL_ART_TRRELATION_1188] = ARTL_ART_TRRELATION;
  artKindOfs[ARTL_ART_TRRELATION_1188] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_TRRELATION_1188] = true;
  arteoR_pL[ARTL_ART_TRRELATION_1188] = true;
  artPopD[ARTL_ART_TRRELATION_1188] = true;
  artLabelInternalStrings[ARTL_ART_TRRELATION_1190] = "TRRELATION ::= . '~>'  ";
  artLabelStrings[ARTL_ART_TRRELATION_1190] = "";
  artlhsL[ARTL_ART_TRRELATION_1190] = ARTL_ART_TRRELATION;
  artKindOfs[ARTL_ART_TRRELATION_1190] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_TRRELATION_1190] = true;
  artLabelInternalStrings[ARTL_ART_TRRELATION_1191] = "TRRELATION ::= '~>'  ";
  artLabelStrings[ARTL_ART_TRRELATION_1191] = "";
  artlhsL[ARTL_ART_TRRELATION_1191] = ARTL_ART_TRRELATION;
  artPopD[ARTL_ART_TRRELATION_1191] = true;
  artLabelInternalStrings[ARTL_ART_TRRELATION_1192] = "TRRELATION ::= '~>'  .";
  artLabelStrings[ARTL_ART_TRRELATION_1192] = "";
  artlhsL[ARTL_ART_TRRELATION_1192] = ARTL_ART_TRRELATION;
  artKindOfs[ARTL_ART_TRRELATION_1192] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_TRRELATION_1192] = true;
  arteoR_pL[ARTL_ART_TRRELATION_1192] = true;
  artPopD[ARTL_ART_TRRELATION_1192] = true;
  artLabelInternalStrings[ARTL_ART_TRRELATION_1194] = "TRRELATION ::= . '~>*'  ";
  artLabelStrings[ARTL_ART_TRRELATION_1194] = "";
  artlhsL[ARTL_ART_TRRELATION_1194] = ARTL_ART_TRRELATION;
  artKindOfs[ARTL_ART_TRRELATION_1194] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_TRRELATION_1194] = true;
  artLabelInternalStrings[ARTL_ART_TRRELATION_1195] = "TRRELATION ::= '~>*'  ";
  artLabelStrings[ARTL_ART_TRRELATION_1195] = "";
  artlhsL[ARTL_ART_TRRELATION_1195] = ARTL_ART_TRRELATION;
  artPopD[ARTL_ART_TRRELATION_1195] = true;
  artLabelInternalStrings[ARTL_ART_TRRELATION_1196] = "TRRELATION ::= '~>*'  .";
  artLabelStrings[ARTL_ART_TRRELATION_1196] = "";
  artlhsL[ARTL_ART_TRRELATION_1196] = ARTL_ART_TRRELATION;
  artKindOfs[ARTL_ART_TRRELATION_1196] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_TRRELATION_1196] = true;
  arteoR_pL[ARTL_ART_TRRELATION_1196] = true;
  artPopD[ARTL_ART_TRRELATION_1196] = true;
  artLabelInternalStrings[ARTL_ART_TRRELATION_1198] = "TRRELATION ::= . '~>>'  ";
  artLabelStrings[ARTL_ART_TRRELATION_1198] = "";
  artlhsL[ARTL_ART_TRRELATION_1198] = ARTL_ART_TRRELATION;
  artKindOfs[ARTL_ART_TRRELATION_1198] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_TRRELATION_1198] = true;
  artLabelInternalStrings[ARTL_ART_TRRELATION_1199] = "TRRELATION ::= '~>>'  ";
  artLabelStrings[ARTL_ART_TRRELATION_1199] = "";
  artlhsL[ARTL_ART_TRRELATION_1199] = ARTL_ART_TRRELATION;
  artPopD[ARTL_ART_TRRELATION_1199] = true;
  artLabelInternalStrings[ARTL_ART_TRRELATION_1200] = "TRRELATION ::= '~>>'  .";
  artLabelStrings[ARTL_ART_TRRELATION_1200] = "";
  artlhsL[ARTL_ART_TRRELATION_1200] = ARTL_ART_TRRELATION;
  artKindOfs[ARTL_ART_TRRELATION_1200] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_TRRELATION_1200] = true;
  arteoR_pL[ARTL_ART_TRRELATION_1200] = true;
  artPopD[ARTL_ART_TRRELATION_1200] = true;
}

public void artTableInitialiser_ART_True() {
  artLabelInternalStrings[ARTL_ART_True] = "True";
  artLabelStrings[ARTL_ART_True] = "True";
  artKindOfs[ARTL_ART_True] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_True_1598] = "True ::= . 'True'  ";
  artLabelStrings[ARTL_ART_True_1598] = "";
  artlhsL[ARTL_ART_True_1598] = ARTL_ART_True;
  artKindOfs[ARTL_ART_True_1598] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_True_1598] = true;
  artFolds[ARTL_ART_True_1600] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_True_1599] = "True ::= 'True'  ";
  artLabelStrings[ARTL_ART_True_1599] = "";
  artlhsL[ARTL_ART_True_1599] = ARTL_ART_True;
  artPopD[ARTL_ART_True_1599] = true;
  artLabelInternalStrings[ARTL_ART_True_1600] = "True ::= 'True'  .";
  artLabelStrings[ARTL_ART_True_1600] = "";
  artlhsL[ARTL_ART_True_1600] = ARTL_ART_True;
  artKindOfs[ARTL_ART_True_1600] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_True_1600] = true;
  arteoR_pL[ARTL_ART_True_1600] = true;
  artPopD[ARTL_ART_True_1600] = true;
}

public void artTableInitialiser_ART___bool() {
  artLabelInternalStrings[ARTL_ART___bool] = "__bool";
  artLabelStrings[ARTL_ART___bool] = "__bool";
  artKindOfs[ARTL_ART___bool] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART___bool_1238] = "__bool ::= . True ";
  artLabelStrings[ARTL_ART___bool_1238] = "";
  artlhsL[ARTL_ART___bool_1238] = ARTL_ART___bool;
  artKindOfs[ARTL_ART___bool_1238] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART___bool_1240] = "__bool ::= True .";
  artLabelStrings[ARTL_ART___bool_1240] = "";
  artlhsL[ARTL_ART___bool_1240] = ARTL_ART___bool;
  artSlotInstanceOfs[ARTL_ART___bool_1240] = ARTL_ART_True;
  artKindOfs[ARTL_ART___bool_1240] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART___bool_1240] = true;
  arteoR_pL[ARTL_ART___bool_1240] = true;
  artPopD[ARTL_ART___bool_1240] = true;
  artLabelInternalStrings[ARTL_ART___bool_1242] = "__bool ::= . False ";
  artLabelStrings[ARTL_ART___bool_1242] = "";
  artlhsL[ARTL_ART___bool_1242] = ARTL_ART___bool;
  artKindOfs[ARTL_ART___bool_1242] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART___bool_1244] = "__bool ::= False .";
  artLabelStrings[ARTL_ART___bool_1244] = "";
  artlhsL[ARTL_ART___bool_1244] = ARTL_ART___bool;
  artSlotInstanceOfs[ARTL_ART___bool_1244] = ARTL_ART_False;
  artKindOfs[ARTL_ART___bool_1244] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART___bool_1244] = true;
  arteoR_pL[ARTL_ART___bool_1244] = true;
  artPopD[ARTL_ART___bool_1244] = true;
}

public void artTableInitialiser_ART___char() {
  artLabelInternalStrings[ARTL_ART___char] = "__char";
  artLabelStrings[ARTL_ART___char] = "__char";
  artKindOfs[ARTL_ART___char] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART___char_1262] = "__char ::= . &CHAR_BQ  ";
  artLabelStrings[ARTL_ART___char_1262] = "";
  artlhsL[ARTL_ART___char_1262] = ARTL_ART___char;
  artKindOfs[ARTL_ART___char_1262] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART___char_1262] = true;
  artLabelInternalStrings[ARTL_ART___char_1263] = "__char ::= &CHAR_BQ  ";
  artLabelStrings[ARTL_ART___char_1263] = "";
  artlhsL[ARTL_ART___char_1263] = ARTL_ART___char;
  artPopD[ARTL_ART___char_1263] = true;
  artLabelInternalStrings[ARTL_ART___char_1264] = "__char ::= &CHAR_BQ  .";
  artLabelStrings[ARTL_ART___char_1264] = "";
  artlhsL[ARTL_ART___char_1264] = ARTL_ART___char;
  artKindOfs[ARTL_ART___char_1264] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART___char_1264] = true;
  arteoR_pL[ARTL_ART___char_1264] = true;
  artPopD[ARTL_ART___char_1264] = true;
}

public void artTableInitialiser_ART___int32() {
  artLabelInternalStrings[ARTL_ART___int32] = "__int32";
  artLabelStrings[ARTL_ART___int32] = "__int32";
  artKindOfs[ARTL_ART___int32] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART___int32_1246] = "__int32 ::= . &SIGNED_INTEGER  ";
  artLabelStrings[ARTL_ART___int32_1246] = "";
  artlhsL[ARTL_ART___int32_1246] = ARTL_ART___int32;
  artKindOfs[ARTL_ART___int32_1246] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART___int32_1246] = true;
  artLabelInternalStrings[ARTL_ART___int32_1247] = "__int32 ::= &SIGNED_INTEGER  ";
  artLabelStrings[ARTL_ART___int32_1247] = "";
  artlhsL[ARTL_ART___int32_1247] = ARTL_ART___int32;
  artPopD[ARTL_ART___int32_1247] = true;
  artLabelInternalStrings[ARTL_ART___int32_1248] = "__int32 ::= &SIGNED_INTEGER  .";
  artLabelStrings[ARTL_ART___int32_1248] = "";
  artlhsL[ARTL_ART___int32_1248] = ARTL_ART___int32;
  artKindOfs[ARTL_ART___int32_1248] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART___int32_1248] = true;
  arteoR_pL[ARTL_ART___int32_1248] = true;
  artPopD[ARTL_ART___int32_1248] = true;
}

public void artTableInitialiser_ART___real64() {
  artLabelInternalStrings[ARTL_ART___real64] = "__real64";
  artLabelStrings[ARTL_ART___real64] = "__real64";
  artKindOfs[ARTL_ART___real64] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART___real64_1250] = "__real64 ::= . &SIGNED_REAL  ";
  artLabelStrings[ARTL_ART___real64_1250] = "";
  artlhsL[ARTL_ART___real64_1250] = ARTL_ART___real64;
  artKindOfs[ARTL_ART___real64_1250] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART___real64_1250] = true;
  artLabelInternalStrings[ARTL_ART___real64_1251] = "__real64 ::= &SIGNED_REAL  ";
  artLabelStrings[ARTL_ART___real64_1251] = "";
  artlhsL[ARTL_ART___real64_1251] = ARTL_ART___real64;
  artPopD[ARTL_ART___real64_1251] = true;
  artLabelInternalStrings[ARTL_ART___real64_1252] = "__real64 ::= &SIGNED_REAL  .";
  artLabelStrings[ARTL_ART___real64_1252] = "";
  artlhsL[ARTL_ART___real64_1252] = ARTL_ART___real64;
  artKindOfs[ARTL_ART___real64_1252] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART___real64_1252] = true;
  arteoR_pL[ARTL_ART___real64_1252] = true;
  artPopD[ARTL_ART___real64_1252] = true;
}

public void artTableInitialiser_ART___string() {
  artLabelInternalStrings[ARTL_ART___string] = "__string";
  artLabelStrings[ARTL_ART___string] = "__string";
  artKindOfs[ARTL_ART___string] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART___string_1254] = "__string ::= . &STRING_DQ  ";
  artLabelStrings[ARTL_ART___string_1254] = "";
  artlhsL[ARTL_ART___string_1254] = ARTL_ART___string;
  artKindOfs[ARTL_ART___string_1254] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART___string_1254] = true;
  artLabelInternalStrings[ARTL_ART___string_1255] = "__string ::= &STRING_DQ  ";
  artLabelStrings[ARTL_ART___string_1255] = "";
  artlhsL[ARTL_ART___string_1255] = ARTL_ART___string;
  artPopD[ARTL_ART___string_1255] = true;
  artLabelInternalStrings[ARTL_ART___string_1256] = "__string ::= &STRING_DQ  .";
  artLabelStrings[ARTL_ART___string_1256] = "";
  artlhsL[ARTL_ART___string_1256] = ARTL_ART___string;
  artKindOfs[ARTL_ART___string_1256] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART___string_1256] = true;
  arteoR_pL[ARTL_ART___string_1256] = true;
  artPopD[ARTL_ART___string_1256] = true;
  artLabelInternalStrings[ARTL_ART___string_1258] = "__string ::= . &STRING_SQ  ";
  artLabelStrings[ARTL_ART___string_1258] = "";
  artlhsL[ARTL_ART___string_1258] = ARTL_ART___string;
  artKindOfs[ARTL_ART___string_1258] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART___string_1258] = true;
  artLabelInternalStrings[ARTL_ART___string_1259] = "__string ::= &STRING_SQ  ";
  artLabelStrings[ARTL_ART___string_1259] = "";
  artlhsL[ARTL_ART___string_1259] = ARTL_ART___string;
  artPopD[ARTL_ART___string_1259] = true;
  artLabelInternalStrings[ARTL_ART___string_1260] = "__string ::= &STRING_SQ  .";
  artLabelStrings[ARTL_ART___string_1260] = "";
  artlhsL[ARTL_ART___string_1260] = ARTL_ART___string;
  artKindOfs[ARTL_ART___string_1260] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART___string_1260] = true;
  arteoR_pL[ARTL_ART___string_1260] = true;
  artPopD[ARTL_ART___string_1260] = true;
}

public void artTableInitialiser_ART_aliasedCFGNonterminal() {
  artLabelInternalStrings[ARTL_ART_aliasedCFGNonterminal] = "aliasedCFGNonterminal";
  artLabelStrings[ARTL_ART_aliasedCFGNonterminal] = "aliasedCFGNonterminal";
  artKindOfs[ARTL_ART_aliasedCFGNonterminal] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_aliasedCFGNonterminal_1562] = "aliasedCFGNonterminal ::= . cfgNonterminal ";
  artLabelStrings[ARTL_ART_aliasedCFGNonterminal_1562] = "";
  artlhsL[ARTL_ART_aliasedCFGNonterminal_1562] = ARTL_ART_aliasedCFGNonterminal;
  artKindOfs[ARTL_ART_aliasedCFGNonterminal_1562] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_aliasedCFGNonterminal_1564] = "aliasedCFGNonterminal ::= cfgNonterminal .";
  artLabelStrings[ARTL_ART_aliasedCFGNonterminal_1564] = "";
  artlhsL[ARTL_ART_aliasedCFGNonterminal_1564] = ARTL_ART_aliasedCFGNonterminal;
  artSlotInstanceOfs[ARTL_ART_aliasedCFGNonterminal_1564] = ARTL_ART_cfgNonterminal;
  artKindOfs[ARTL_ART_aliasedCFGNonterminal_1564] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_aliasedCFGNonterminal_1564] = true;
  arteoR_pL[ARTL_ART_aliasedCFGNonterminal_1564] = true;
  artPopD[ARTL_ART_aliasedCFGNonterminal_1564] = true;
  artLabelInternalStrings[ARTL_ART_aliasedCFGNonterminal_1566] = "aliasedCFGNonterminal ::= . cfgNonterminal '='  __string ";
  artLabelStrings[ARTL_ART_aliasedCFGNonterminal_1566] = "";
  artlhsL[ARTL_ART_aliasedCFGNonterminal_1566] = ARTL_ART_aliasedCFGNonterminal;
  artKindOfs[ARTL_ART_aliasedCFGNonterminal_1566] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_aliasedCFGNonterminal_1568] = "aliasedCFGNonterminal ::= cfgNonterminal . '='  __string ";
  artLabelStrings[ARTL_ART_aliasedCFGNonterminal_1568] = "";
  artlhsL[ARTL_ART_aliasedCFGNonterminal_1568] = ARTL_ART_aliasedCFGNonterminal;
  artSlotInstanceOfs[ARTL_ART_aliasedCFGNonterminal_1568] = ARTL_ART_cfgNonterminal;
  artKindOfs[ARTL_ART_aliasedCFGNonterminal_1568] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_aliasedCFGNonterminal_1568] = true;
  artFolds[ARTL_ART_aliasedCFGNonterminal_1570] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_aliasedCFGNonterminal_1569] = "aliasedCFGNonterminal ::= cfgNonterminal '='  __string ";
  artLabelStrings[ARTL_ART_aliasedCFGNonterminal_1569] = "";
  artlhsL[ARTL_ART_aliasedCFGNonterminal_1569] = ARTL_ART_aliasedCFGNonterminal;
  artLabelInternalStrings[ARTL_ART_aliasedCFGNonterminal_1570] = "aliasedCFGNonterminal ::= cfgNonterminal '='  . __string ";
  artLabelStrings[ARTL_ART_aliasedCFGNonterminal_1570] = "";
  artlhsL[ARTL_ART_aliasedCFGNonterminal_1570] = ARTL_ART_aliasedCFGNonterminal;
  artKindOfs[ARTL_ART_aliasedCFGNonterminal_1570] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_aliasedCFGNonterminal_1572] = "aliasedCFGNonterminal ::= cfgNonterminal '='  __string .";
  artLabelStrings[ARTL_ART_aliasedCFGNonterminal_1572] = "";
  artlhsL[ARTL_ART_aliasedCFGNonterminal_1572] = ARTL_ART_aliasedCFGNonterminal;
  artSlotInstanceOfs[ARTL_ART_aliasedCFGNonterminal_1572] = ARTL_ART___string;
  artKindOfs[ARTL_ART_aliasedCFGNonterminal_1572] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_aliasedCFGNonterminal_1572] = true;
  arteoR_pL[ARTL_ART_aliasedCFGNonterminal_1572] = true;
  artPopD[ARTL_ART_aliasedCFGNonterminal_1572] = true;
}

public void artTableInitialiser_ART_cfgAbbrev() {
  artLabelInternalStrings[ARTL_ART_cfgAbbrev] = "cfgAbbrev";
  artLabelStrings[ARTL_ART_cfgAbbrev] = "cfgAbbrev";
  artKindOfs[ARTL_ART_cfgAbbrev] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_cfgAbbrev_704] = "cfgAbbrev ::= . cfgIter ";
  artLabelStrings[ARTL_ART_cfgAbbrev_704] = "";
  artlhsL[ARTL_ART_cfgAbbrev_704] = ARTL_ART_cfgAbbrev;
  artKindOfs[ARTL_ART_cfgAbbrev_704] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_cfgAbbrev_706] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_cfgAbbrev_706] = "cfgAbbrev ::= cfgIter .";
  artLabelStrings[ARTL_ART_cfgAbbrev_706] = "";
  artlhsL[ARTL_ART_cfgAbbrev_706] = ARTL_ART_cfgAbbrev;
  artSlotInstanceOfs[ARTL_ART_cfgAbbrev_706] = ARTL_ART_cfgIter;
  artKindOfs[ARTL_ART_cfgAbbrev_706] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgAbbrev_706] = true;
  arteoR_pL[ARTL_ART_cfgAbbrev_706] = true;
  artPopD[ARTL_ART_cfgAbbrev_706] = true;
  artLabelInternalStrings[ARTL_ART_cfgAbbrev_708] = "cfgAbbrev ::= . cfgIter cfgKleeneClosure ";
  artLabelStrings[ARTL_ART_cfgAbbrev_708] = "";
  artlhsL[ARTL_ART_cfgAbbrev_708] = ARTL_ART_cfgAbbrev;
  artKindOfs[ARTL_ART_cfgAbbrev_708] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_cfgAbbrev_710] = "cfgAbbrev ::= cfgIter . cfgKleeneClosure ";
  artLabelStrings[ARTL_ART_cfgAbbrev_710] = "";
  artlhsL[ARTL_ART_cfgAbbrev_710] = ARTL_ART_cfgAbbrev;
  artSlotInstanceOfs[ARTL_ART_cfgAbbrev_710] = ARTL_ART_cfgIter;
  artKindOfs[ARTL_ART_cfgAbbrev_710] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_cfgAbbrev_710] = true;
  artFolds[ARTL_ART_cfgAbbrev_712] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_cfgAbbrev_712] = "cfgAbbrev ::= cfgIter cfgKleeneClosure .";
  artLabelStrings[ARTL_ART_cfgAbbrev_712] = "";
  artlhsL[ARTL_ART_cfgAbbrev_712] = ARTL_ART_cfgAbbrev;
  artSlotInstanceOfs[ARTL_ART_cfgAbbrev_712] = ARTL_ART_cfgKleeneClosure;
  artKindOfs[ARTL_ART_cfgAbbrev_712] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgAbbrev_712] = true;
  arteoR_pL[ARTL_ART_cfgAbbrev_712] = true;
  artPopD[ARTL_ART_cfgAbbrev_712] = true;
  artLabelInternalStrings[ARTL_ART_cfgAbbrev_714] = "cfgAbbrev ::= . cfgIter cfgPositiveClosure ";
  artLabelStrings[ARTL_ART_cfgAbbrev_714] = "";
  artlhsL[ARTL_ART_cfgAbbrev_714] = ARTL_ART_cfgAbbrev;
  artKindOfs[ARTL_ART_cfgAbbrev_714] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_cfgAbbrev_716] = "cfgAbbrev ::= cfgIter . cfgPositiveClosure ";
  artLabelStrings[ARTL_ART_cfgAbbrev_716] = "";
  artlhsL[ARTL_ART_cfgAbbrev_716] = ARTL_ART_cfgAbbrev;
  artSlotInstanceOfs[ARTL_ART_cfgAbbrev_716] = ARTL_ART_cfgIter;
  artKindOfs[ARTL_ART_cfgAbbrev_716] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_cfgAbbrev_716] = true;
  artFolds[ARTL_ART_cfgAbbrev_718] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_cfgAbbrev_718] = "cfgAbbrev ::= cfgIter cfgPositiveClosure .";
  artLabelStrings[ARTL_ART_cfgAbbrev_718] = "";
  artlhsL[ARTL_ART_cfgAbbrev_718] = ARTL_ART_cfgAbbrev;
  artSlotInstanceOfs[ARTL_ART_cfgAbbrev_718] = ARTL_ART_cfgPositiveClosure;
  artKindOfs[ARTL_ART_cfgAbbrev_718] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgAbbrev_718] = true;
  arteoR_pL[ARTL_ART_cfgAbbrev_718] = true;
  artPopD[ARTL_ART_cfgAbbrev_718] = true;
  artLabelInternalStrings[ARTL_ART_cfgAbbrev_720] = "cfgAbbrev ::= . cfgIter cfgOptional ";
  artLabelStrings[ARTL_ART_cfgAbbrev_720] = "";
  artlhsL[ARTL_ART_cfgAbbrev_720] = ARTL_ART_cfgAbbrev;
  artKindOfs[ARTL_ART_cfgAbbrev_720] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_cfgAbbrev_722] = "cfgAbbrev ::= cfgIter . cfgOptional ";
  artLabelStrings[ARTL_ART_cfgAbbrev_722] = "";
  artlhsL[ARTL_ART_cfgAbbrev_722] = ARTL_ART_cfgAbbrev;
  artSlotInstanceOfs[ARTL_ART_cfgAbbrev_722] = ARTL_ART_cfgIter;
  artKindOfs[ARTL_ART_cfgAbbrev_722] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_cfgAbbrev_722] = true;
  artFolds[ARTL_ART_cfgAbbrev_724] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_cfgAbbrev_724] = "cfgAbbrev ::= cfgIter cfgOptional .";
  artLabelStrings[ARTL_ART_cfgAbbrev_724] = "";
  artlhsL[ARTL_ART_cfgAbbrev_724] = ARTL_ART_cfgAbbrev;
  artSlotInstanceOfs[ARTL_ART_cfgAbbrev_724] = ARTL_ART_cfgOptional;
  artKindOfs[ARTL_ART_cfgAbbrev_724] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgAbbrev_724] = true;
  arteoR_pL[ARTL_ART_cfgAbbrev_724] = true;
  artPopD[ARTL_ART_cfgAbbrev_724] = true;
}

public void artTableInitialiser_ART_cfgAlt() {
  artLabelInternalStrings[ARTL_ART_cfgAlt] = "cfgAlt";
  artLabelStrings[ARTL_ART_cfgAlt] = "cfgAlt";
  artKindOfs[ARTL_ART_cfgAlt] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_cfgAlt_654] = "cfgAlt ::= . cfgCat ";
  artLabelStrings[ARTL_ART_cfgAlt_654] = "";
  artlhsL[ARTL_ART_cfgAlt_654] = ARTL_ART_cfgAlt;
  artKindOfs[ARTL_ART_cfgAlt_654] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_cfgAlt_656] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_cfgAlt_656] = "cfgAlt ::= cfgCat .";
  artLabelStrings[ARTL_ART_cfgAlt_656] = "";
  artlhsL[ARTL_ART_cfgAlt_656] = ARTL_ART_cfgAlt;
  artSlotInstanceOfs[ARTL_ART_cfgAlt_656] = ARTL_ART_cfgCat;
  artKindOfs[ARTL_ART_cfgAlt_656] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgAlt_656] = true;
  arteoR_pL[ARTL_ART_cfgAlt_656] = true;
  artPopD[ARTL_ART_cfgAlt_656] = true;
  artLabelInternalStrings[ARTL_ART_cfgAlt_658] = "cfgAlt ::= . cfgCat '|'  cfgAlt1 ";
  artLabelStrings[ARTL_ART_cfgAlt_658] = "";
  artlhsL[ARTL_ART_cfgAlt_658] = ARTL_ART_cfgAlt;
  artKindOfs[ARTL_ART_cfgAlt_658] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_cfgAlt_660] = "cfgAlt ::= cfgCat . '|'  cfgAlt1 ";
  artLabelStrings[ARTL_ART_cfgAlt_660] = "";
  artlhsL[ARTL_ART_cfgAlt_660] = ARTL_ART_cfgAlt;
  artSlotInstanceOfs[ARTL_ART_cfgAlt_660] = ARTL_ART_cfgCat;
  artKindOfs[ARTL_ART_cfgAlt_660] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_cfgAlt_660] = true;
  artFolds[ARTL_ART_cfgAlt_662] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_cfgAlt_661] = "cfgAlt ::= cfgCat '|'  cfgAlt1 ";
  artLabelStrings[ARTL_ART_cfgAlt_661] = "";
  artlhsL[ARTL_ART_cfgAlt_661] = ARTL_ART_cfgAlt;
  artLabelInternalStrings[ARTL_ART_cfgAlt_662] = "cfgAlt ::= cfgCat '|'  . cfgAlt1 ";
  artLabelStrings[ARTL_ART_cfgAlt_662] = "";
  artlhsL[ARTL_ART_cfgAlt_662] = ARTL_ART_cfgAlt;
  artKindOfs[ARTL_ART_cfgAlt_662] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_cfgAlt_664] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_cfgAlt_664] = "cfgAlt ::= cfgCat '|'  cfgAlt1 .";
  artLabelStrings[ARTL_ART_cfgAlt_664] = "";
  artlhsL[ARTL_ART_cfgAlt_664] = ARTL_ART_cfgAlt;
  artSlotInstanceOfs[ARTL_ART_cfgAlt_664] = ARTL_ART_cfgAlt1;
  artKindOfs[ARTL_ART_cfgAlt_664] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgAlt_664] = true;
  arteoR_pL[ARTL_ART_cfgAlt_664] = true;
  artPopD[ARTL_ART_cfgAlt_664] = true;
}

public void artTableInitialiser_ART_cfgAlt1() {
  artLabelInternalStrings[ARTL_ART_cfgAlt1] = "cfgAlt1";
  artLabelStrings[ARTL_ART_cfgAlt1] = "cfgAlt1";
  artKindOfs[ARTL_ART_cfgAlt1] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_cfgAlt1_666] = "cfgAlt1 ::= . cfgCat ";
  artLabelStrings[ARTL_ART_cfgAlt1_666] = "";
  artlhsL[ARTL_ART_cfgAlt1_666] = ARTL_ART_cfgAlt1;
  artKindOfs[ARTL_ART_cfgAlt1_666] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_cfgAlt1_668] = "cfgAlt1 ::= cfgCat .";
  artLabelStrings[ARTL_ART_cfgAlt1_668] = "";
  artlhsL[ARTL_ART_cfgAlt1_668] = ARTL_ART_cfgAlt1;
  artSlotInstanceOfs[ARTL_ART_cfgAlt1_668] = ARTL_ART_cfgCat;
  artKindOfs[ARTL_ART_cfgAlt1_668] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgAlt1_668] = true;
  arteoR_pL[ARTL_ART_cfgAlt1_668] = true;
  artPopD[ARTL_ART_cfgAlt1_668] = true;
  artLabelInternalStrings[ARTL_ART_cfgAlt1_670] = "cfgAlt1 ::= . cfgCat '|'  cfgAlt1 ";
  artLabelStrings[ARTL_ART_cfgAlt1_670] = "";
  artlhsL[ARTL_ART_cfgAlt1_670] = ARTL_ART_cfgAlt1;
  artKindOfs[ARTL_ART_cfgAlt1_670] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_cfgAlt1_672] = "cfgAlt1 ::= cfgCat . '|'  cfgAlt1 ";
  artLabelStrings[ARTL_ART_cfgAlt1_672] = "";
  artlhsL[ARTL_ART_cfgAlt1_672] = ARTL_ART_cfgAlt1;
  artSlotInstanceOfs[ARTL_ART_cfgAlt1_672] = ARTL_ART_cfgCat;
  artKindOfs[ARTL_ART_cfgAlt1_672] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_cfgAlt1_672] = true;
  artFolds[ARTL_ART_cfgAlt1_674] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_cfgAlt1_673] = "cfgAlt1 ::= cfgCat '|'  cfgAlt1 ";
  artLabelStrings[ARTL_ART_cfgAlt1_673] = "";
  artlhsL[ARTL_ART_cfgAlt1_673] = ARTL_ART_cfgAlt1;
  artLabelInternalStrings[ARTL_ART_cfgAlt1_674] = "cfgAlt1 ::= cfgCat '|'  . cfgAlt1 ";
  artLabelStrings[ARTL_ART_cfgAlt1_674] = "";
  artlhsL[ARTL_ART_cfgAlt1_674] = ARTL_ART_cfgAlt1;
  artKindOfs[ARTL_ART_cfgAlt1_674] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_cfgAlt1_676] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_cfgAlt1_676] = "cfgAlt1 ::= cfgCat '|'  cfgAlt1 .";
  artLabelStrings[ARTL_ART_cfgAlt1_676] = "";
  artlhsL[ARTL_ART_cfgAlt1_676] = ARTL_ART_cfgAlt1;
  artSlotInstanceOfs[ARTL_ART_cfgAlt1_676] = ARTL_ART_cfgAlt1;
  artKindOfs[ARTL_ART_cfgAlt1_676] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgAlt1_676] = true;
  arteoR_pL[ARTL_ART_cfgAlt1_676] = true;
  artPopD[ARTL_ART_cfgAlt1_676] = true;
}

public void artTableInitialiser_ART_cfgAtom() {
  artLabelInternalStrings[ARTL_ART_cfgAtom] = "cfgAtom";
  artLabelStrings[ARTL_ART_cfgAtom] = "cfgAtom";
  artKindOfs[ARTL_ART_cfgAtom] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_cfgAtom_872] = "cfgAtom ::= . cfgEpsilon ";
  artLabelStrings[ARTL_ART_cfgAtom_872] = "";
  artlhsL[ARTL_ART_cfgAtom_872] = ARTL_ART_cfgAtom;
  artKindOfs[ARTL_ART_cfgAtom_872] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_cfgAtom_874] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_cfgAtom_874] = "cfgAtom ::= cfgEpsilon .";
  artLabelStrings[ARTL_ART_cfgAtom_874] = "";
  artlhsL[ARTL_ART_cfgAtom_874] = ARTL_ART_cfgAtom;
  artSlotInstanceOfs[ARTL_ART_cfgAtom_874] = ARTL_ART_cfgEpsilon;
  artKindOfs[ARTL_ART_cfgAtom_874] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgAtom_874] = true;
  arteoR_pL[ARTL_ART_cfgAtom_874] = true;
  artPopD[ARTL_ART_cfgAtom_874] = true;
  artLabelInternalStrings[ARTL_ART_cfgAtom_876] = "cfgAtom ::= . cfgNonterminal ";
  artLabelStrings[ARTL_ART_cfgAtom_876] = "";
  artlhsL[ARTL_ART_cfgAtom_876] = ARTL_ART_cfgAtom;
  artKindOfs[ARTL_ART_cfgAtom_876] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_cfgAtom_878] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_cfgAtom_878] = "cfgAtom ::= cfgNonterminal .";
  artLabelStrings[ARTL_ART_cfgAtom_878] = "";
  artlhsL[ARTL_ART_cfgAtom_878] = ARTL_ART_cfgAtom;
  artSlotInstanceOfs[ARTL_ART_cfgAtom_878] = ARTL_ART_cfgNonterminal;
  artKindOfs[ARTL_ART_cfgAtom_878] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgAtom_878] = true;
  arteoR_pL[ARTL_ART_cfgAtom_878] = true;
  artPopD[ARTL_ART_cfgAtom_878] = true;
  artLabelInternalStrings[ARTL_ART_cfgAtom_880] = "cfgAtom ::= . cfgSlotSymbol ";
  artLabelStrings[ARTL_ART_cfgAtom_880] = "";
  artlhsL[ARTL_ART_cfgAtom_880] = ARTL_ART_cfgAtom;
  artKindOfs[ARTL_ART_cfgAtom_880] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_cfgAtom_882] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_cfgAtom_882] = "cfgAtom ::= cfgSlotSymbol .";
  artLabelStrings[ARTL_ART_cfgAtom_882] = "";
  artlhsL[ARTL_ART_cfgAtom_882] = ARTL_ART_cfgAtom;
  artSlotInstanceOfs[ARTL_ART_cfgAtom_882] = ARTL_ART_cfgSlotSymbol;
  artKindOfs[ARTL_ART_cfgAtom_882] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgAtom_882] = true;
  arteoR_pL[ARTL_ART_cfgAtom_882] = true;
  artPopD[ARTL_ART_cfgAtom_882] = true;
  artLabelInternalStrings[ARTL_ART_cfgAtom_884] = "cfgAtom ::= . cfgCaseSensitiveTerminal ";
  artLabelStrings[ARTL_ART_cfgAtom_884] = "";
  artlhsL[ARTL_ART_cfgAtom_884] = ARTL_ART_cfgAtom;
  artKindOfs[ARTL_ART_cfgAtom_884] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_cfgAtom_886] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_cfgAtom_886] = "cfgAtom ::= cfgCaseSensitiveTerminal .";
  artLabelStrings[ARTL_ART_cfgAtom_886] = "";
  artlhsL[ARTL_ART_cfgAtom_886] = ARTL_ART_cfgAtom;
  artSlotInstanceOfs[ARTL_ART_cfgAtom_886] = ARTL_ART_cfgCaseSensitiveTerminal;
  artKindOfs[ARTL_ART_cfgAtom_886] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgAtom_886] = true;
  arteoR_pL[ARTL_ART_cfgAtom_886] = true;
  artPopD[ARTL_ART_cfgAtom_886] = true;
  artLabelInternalStrings[ARTL_ART_cfgAtom_888] = "cfgAtom ::= . cfgCaseInsensitiveTerminal ";
  artLabelStrings[ARTL_ART_cfgAtom_888] = "";
  artlhsL[ARTL_ART_cfgAtom_888] = ARTL_ART_cfgAtom;
  artKindOfs[ARTL_ART_cfgAtom_888] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_cfgAtom_890] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_cfgAtom_890] = "cfgAtom ::= cfgCaseInsensitiveTerminal .";
  artLabelStrings[ARTL_ART_cfgAtom_890] = "";
  artlhsL[ARTL_ART_cfgAtom_890] = ARTL_ART_cfgAtom;
  artSlotInstanceOfs[ARTL_ART_cfgAtom_890] = ARTL_ART_cfgCaseInsensitiveTerminal;
  artKindOfs[ARTL_ART_cfgAtom_890] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgAtom_890] = true;
  arteoR_pL[ARTL_ART_cfgAtom_890] = true;
  artPopD[ARTL_ART_cfgAtom_890] = true;
  artLabelInternalStrings[ARTL_ART_cfgAtom_892] = "cfgAtom ::= . cfgCharacterTerminal ";
  artLabelStrings[ARTL_ART_cfgAtom_892] = "";
  artlhsL[ARTL_ART_cfgAtom_892] = ARTL_ART_cfgAtom;
  artKindOfs[ARTL_ART_cfgAtom_892] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_cfgAtom_894] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_cfgAtom_894] = "cfgAtom ::= cfgCharacterTerminal .";
  artLabelStrings[ARTL_ART_cfgAtom_894] = "";
  artlhsL[ARTL_ART_cfgAtom_894] = ARTL_ART_cfgAtom;
  artSlotInstanceOfs[ARTL_ART_cfgAtom_894] = ARTL_ART_cfgCharacterTerminal;
  artKindOfs[ARTL_ART_cfgAtom_894] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgAtom_894] = true;
  arteoR_pL[ARTL_ART_cfgAtom_894] = true;
  artPopD[ARTL_ART_cfgAtom_894] = true;
  artLabelInternalStrings[ARTL_ART_cfgAtom_896] = "cfgAtom ::= . cfgCharacterRangeTerminal ";
  artLabelStrings[ARTL_ART_cfgAtom_896] = "";
  artlhsL[ARTL_ART_cfgAtom_896] = ARTL_ART_cfgAtom;
  artKindOfs[ARTL_ART_cfgAtom_896] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_cfgAtom_898] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_cfgAtom_898] = "cfgAtom ::= cfgCharacterRangeTerminal .";
  artLabelStrings[ARTL_ART_cfgAtom_898] = "";
  artlhsL[ARTL_ART_cfgAtom_898] = ARTL_ART_cfgAtom;
  artSlotInstanceOfs[ARTL_ART_cfgAtom_898] = ARTL_ART_cfgCharacterRangeTerminal;
  artKindOfs[ARTL_ART_cfgAtom_898] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgAtom_898] = true;
  arteoR_pL[ARTL_ART_cfgAtom_898] = true;
  artPopD[ARTL_ART_cfgAtom_898] = true;
  artLabelInternalStrings[ARTL_ART_cfgAtom_900] = "cfgAtom ::= . cfgBuiltinTerminal ";
  artLabelStrings[ARTL_ART_cfgAtom_900] = "";
  artlhsL[ARTL_ART_cfgAtom_900] = ARTL_ART_cfgAtom;
  artKindOfs[ARTL_ART_cfgAtom_900] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_cfgAtom_902] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_cfgAtom_902] = "cfgAtom ::= cfgBuiltinTerminal .";
  artLabelStrings[ARTL_ART_cfgAtom_902] = "";
  artlhsL[ARTL_ART_cfgAtom_902] = ARTL_ART_cfgAtom;
  artSlotInstanceOfs[ARTL_ART_cfgAtom_902] = ARTL_ART_cfgBuiltinTerminal;
  artKindOfs[ARTL_ART_cfgAtom_902] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgAtom_902] = true;
  arteoR_pL[ARTL_ART_cfgAtom_902] = true;
  artPopD[ARTL_ART_cfgAtom_902] = true;
}

public void artTableInitialiser_ART_cfgAtoms() {
  artLabelInternalStrings[ARTL_ART_cfgAtoms] = "cfgAtoms";
  artLabelStrings[ARTL_ART_cfgAtoms] = "cfgAtoms";
  artKindOfs[ARTL_ART_cfgAtoms] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_cfgAtoms_1024] = "cfgAtoms ::= . cfgAtom ";
  artLabelStrings[ARTL_ART_cfgAtoms_1024] = "";
  artlhsL[ARTL_ART_cfgAtoms_1024] = ARTL_ART_cfgAtoms;
  artKindOfs[ARTL_ART_cfgAtoms_1024] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_cfgAtoms_1026] = "cfgAtoms ::= cfgAtom .";
  artLabelStrings[ARTL_ART_cfgAtoms_1026] = "";
  artlhsL[ARTL_ART_cfgAtoms_1026] = ARTL_ART_cfgAtoms;
  artSlotInstanceOfs[ARTL_ART_cfgAtoms_1026] = ARTL_ART_cfgAtom;
  artKindOfs[ARTL_ART_cfgAtoms_1026] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgAtoms_1026] = true;
  arteoR_pL[ARTL_ART_cfgAtoms_1026] = true;
  artPopD[ARTL_ART_cfgAtoms_1026] = true;
  artLabelInternalStrings[ARTL_ART_cfgAtoms_1028] = "cfgAtoms ::= . cfgAtom ','  cfgAtoms ";
  artLabelStrings[ARTL_ART_cfgAtoms_1028] = "";
  artlhsL[ARTL_ART_cfgAtoms_1028] = ARTL_ART_cfgAtoms;
  artKindOfs[ARTL_ART_cfgAtoms_1028] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_cfgAtoms_1030] = "cfgAtoms ::= cfgAtom . ','  cfgAtoms ";
  artLabelStrings[ARTL_ART_cfgAtoms_1030] = "";
  artlhsL[ARTL_ART_cfgAtoms_1030] = ARTL_ART_cfgAtoms;
  artSlotInstanceOfs[ARTL_ART_cfgAtoms_1030] = ARTL_ART_cfgAtom;
  artKindOfs[ARTL_ART_cfgAtoms_1030] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_cfgAtoms_1030] = true;
  artFolds[ARTL_ART_cfgAtoms_1032] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_cfgAtoms_1031] = "cfgAtoms ::= cfgAtom ','  cfgAtoms ";
  artLabelStrings[ARTL_ART_cfgAtoms_1031] = "";
  artlhsL[ARTL_ART_cfgAtoms_1031] = ARTL_ART_cfgAtoms;
  artLabelInternalStrings[ARTL_ART_cfgAtoms_1032] = "cfgAtoms ::= cfgAtom ','  . cfgAtoms ";
  artLabelStrings[ARTL_ART_cfgAtoms_1032] = "";
  artlhsL[ARTL_ART_cfgAtoms_1032] = ARTL_ART_cfgAtoms;
  artKindOfs[ARTL_ART_cfgAtoms_1032] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_cfgAtoms_1034] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_cfgAtoms_1034] = "cfgAtoms ::= cfgAtom ','  cfgAtoms .";
  artLabelStrings[ARTL_ART_cfgAtoms_1034] = "";
  artlhsL[ARTL_ART_cfgAtoms_1034] = ARTL_ART_cfgAtoms;
  artSlotInstanceOfs[ARTL_ART_cfgAtoms_1034] = ARTL_ART_cfgAtoms;
  artKindOfs[ARTL_ART_cfgAtoms_1034] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgAtoms_1034] = true;
  arteoR_pL[ARTL_ART_cfgAtoms_1034] = true;
  artPopD[ARTL_ART_cfgAtoms_1034] = true;
}

public void artTableInitialiser_ART_cfgAttributeEquation() {
  artLabelInternalStrings[ARTL_ART_cfgAttributeEquation] = "cfgAttributeEquation";
  artLabelStrings[ARTL_ART_cfgAttributeEquation] = "cfgAttributeEquation";
  artKindOfs[ARTL_ART_cfgAttributeEquation] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_cfgAttributeEquation_726] = "cfgAttributeEquation ::= . ID_ATTRIBUTE '='  trTerm ";
  artLabelStrings[ARTL_ART_cfgAttributeEquation_726] = "";
  artlhsL[ARTL_ART_cfgAttributeEquation_726] = ARTL_ART_cfgAttributeEquation;
  artKindOfs[ARTL_ART_cfgAttributeEquation_726] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_cfgAttributeEquation_728] = "cfgAttributeEquation ::= ID_ATTRIBUTE . '='  trTerm ";
  artLabelStrings[ARTL_ART_cfgAttributeEquation_728] = "";
  artlhsL[ARTL_ART_cfgAttributeEquation_728] = ARTL_ART_cfgAttributeEquation;
  artSlotInstanceOfs[ARTL_ART_cfgAttributeEquation_728] = ARTL_ART_ID_ATTRIBUTE;
  artKindOfs[ARTL_ART_cfgAttributeEquation_728] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_cfgAttributeEquation_728] = true;
  artFolds[ARTL_ART_cfgAttributeEquation_730] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_cfgAttributeEquation_729] = "cfgAttributeEquation ::= ID_ATTRIBUTE '='  trTerm ";
  artLabelStrings[ARTL_ART_cfgAttributeEquation_729] = "";
  artlhsL[ARTL_ART_cfgAttributeEquation_729] = ARTL_ART_cfgAttributeEquation;
  artLabelInternalStrings[ARTL_ART_cfgAttributeEquation_730] = "cfgAttributeEquation ::= ID_ATTRIBUTE '='  . trTerm ";
  artLabelStrings[ARTL_ART_cfgAttributeEquation_730] = "";
  artlhsL[ARTL_ART_cfgAttributeEquation_730] = ARTL_ART_cfgAttributeEquation;
  artKindOfs[ARTL_ART_cfgAttributeEquation_730] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_cfgAttributeEquation_732] = "cfgAttributeEquation ::= ID_ATTRIBUTE '='  trTerm .";
  artLabelStrings[ARTL_ART_cfgAttributeEquation_732] = "";
  artlhsL[ARTL_ART_cfgAttributeEquation_732] = ARTL_ART_cfgAttributeEquation;
  artSlotInstanceOfs[ARTL_ART_cfgAttributeEquation_732] = ARTL_ART_trTerm;
  artKindOfs[ARTL_ART_cfgAttributeEquation_732] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgAttributeEquation_732] = true;
  arteoR_pL[ARTL_ART_cfgAttributeEquation_732] = true;
  artPopD[ARTL_ART_cfgAttributeEquation_732] = true;
}

public void artTableInitialiser_ART_cfgBuiltinTerminal() {
  artLabelInternalStrings[ARTL_ART_cfgBuiltinTerminal] = "cfgBuiltinTerminal";
  artLabelStrings[ARTL_ART_cfgBuiltinTerminal] = "cfgBuiltinTerminal";
  artKindOfs[ARTL_ART_cfgBuiltinTerminal] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_cfgBuiltinTerminal_964] = "cfgBuiltinTerminal ::= . '&'  ID ";
  artLabelStrings[ARTL_ART_cfgBuiltinTerminal_964] = "";
  artlhsL[ARTL_ART_cfgBuiltinTerminal_964] = ARTL_ART_cfgBuiltinTerminal;
  artKindOfs[ARTL_ART_cfgBuiltinTerminal_964] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_cfgBuiltinTerminal_966] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_cfgBuiltinTerminal_965] = "cfgBuiltinTerminal ::= '&'  ID ";
  artLabelStrings[ARTL_ART_cfgBuiltinTerminal_965] = "";
  artlhsL[ARTL_ART_cfgBuiltinTerminal_965] = ARTL_ART_cfgBuiltinTerminal;
  artLabelInternalStrings[ARTL_ART_cfgBuiltinTerminal_966] = "cfgBuiltinTerminal ::= '&'  . ID ";
  artLabelStrings[ARTL_ART_cfgBuiltinTerminal_966] = "";
  artlhsL[ARTL_ART_cfgBuiltinTerminal_966] = ARTL_ART_cfgBuiltinTerminal;
  artKindOfs[ARTL_ART_cfgBuiltinTerminal_966] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_cfgBuiltinTerminal_966] = true;
  artLabelInternalStrings[ARTL_ART_cfgBuiltinTerminal_968] = "cfgBuiltinTerminal ::= '&'  ID .";
  artLabelStrings[ARTL_ART_cfgBuiltinTerminal_968] = "";
  artlhsL[ARTL_ART_cfgBuiltinTerminal_968] = ARTL_ART_cfgBuiltinTerminal;
  artSlotInstanceOfs[ARTL_ART_cfgBuiltinTerminal_968] = ARTL_ART_ID;
  artKindOfs[ARTL_ART_cfgBuiltinTerminal_968] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgBuiltinTerminal_968] = true;
  arteoR_pL[ARTL_ART_cfgBuiltinTerminal_968] = true;
  artPopD[ARTL_ART_cfgBuiltinTerminal_968] = true;
}

public void artTableInitialiser_ART_cfgCaseInsensitiveTerminal() {
  artLabelInternalStrings[ARTL_ART_cfgCaseInsensitiveTerminal] = "cfgCaseInsensitiveTerminal";
  artLabelStrings[ARTL_ART_cfgCaseInsensitiveTerminal] = "cfgCaseInsensitiveTerminal";
  artKindOfs[ARTL_ART_cfgCaseInsensitiveTerminal] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_cfgCaseInsensitiveTerminal_948] = "cfgCaseInsensitiveTerminal ::= . STRING_DQ ";
  artLabelStrings[ARTL_ART_cfgCaseInsensitiveTerminal_948] = "";
  artlhsL[ARTL_ART_cfgCaseInsensitiveTerminal_948] = ARTL_ART_cfgCaseInsensitiveTerminal;
  artKindOfs[ARTL_ART_cfgCaseInsensitiveTerminal_948] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_cfgCaseInsensitiveTerminal_950] = "cfgCaseInsensitiveTerminal ::= STRING_DQ .";
  artLabelStrings[ARTL_ART_cfgCaseInsensitiveTerminal_950] = "";
  artlhsL[ARTL_ART_cfgCaseInsensitiveTerminal_950] = ARTL_ART_cfgCaseInsensitiveTerminal;
  artSlotInstanceOfs[ARTL_ART_cfgCaseInsensitiveTerminal_950] = ARTL_ART_STRING_DQ;
  artKindOfs[ARTL_ART_cfgCaseInsensitiveTerminal_950] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgCaseInsensitiveTerminal_950] = true;
  arteoR_pL[ARTL_ART_cfgCaseInsensitiveTerminal_950] = true;
  artPopD[ARTL_ART_cfgCaseInsensitiveTerminal_950] = true;
}

public void artTableInitialiser_ART_cfgCaseSensitiveTerminal() {
  artLabelInternalStrings[ARTL_ART_cfgCaseSensitiveTerminal] = "cfgCaseSensitiveTerminal";
  artLabelStrings[ARTL_ART_cfgCaseSensitiveTerminal] = "cfgCaseSensitiveTerminal";
  artKindOfs[ARTL_ART_cfgCaseSensitiveTerminal] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_cfgCaseSensitiveTerminal_944] = "cfgCaseSensitiveTerminal ::= . STRING_PLAIN_SQ ";
  artLabelStrings[ARTL_ART_cfgCaseSensitiveTerminal_944] = "";
  artlhsL[ARTL_ART_cfgCaseSensitiveTerminal_944] = ARTL_ART_cfgCaseSensitiveTerminal;
  artKindOfs[ARTL_ART_cfgCaseSensitiveTerminal_944] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_cfgCaseSensitiveTerminal_946] = "cfgCaseSensitiveTerminal ::= STRING_PLAIN_SQ .";
  artLabelStrings[ARTL_ART_cfgCaseSensitiveTerminal_946] = "";
  artlhsL[ARTL_ART_cfgCaseSensitiveTerminal_946] = ARTL_ART_cfgCaseSensitiveTerminal;
  artSlotInstanceOfs[ARTL_ART_cfgCaseSensitiveTerminal_946] = ARTL_ART_STRING_PLAIN_SQ;
  artKindOfs[ARTL_ART_cfgCaseSensitiveTerminal_946] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgCaseSensitiveTerminal_946] = true;
  arteoR_pL[ARTL_ART_cfgCaseSensitiveTerminal_946] = true;
  artPopD[ARTL_ART_cfgCaseSensitiveTerminal_946] = true;
}

public void artTableInitialiser_ART_cfgCat() {
  artLabelInternalStrings[ARTL_ART_cfgCat] = "cfgCat";
  artLabelStrings[ARTL_ART_cfgCat] = "cfgCat";
  artKindOfs[ARTL_ART_cfgCat] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_cfgCat_648] = "cfgCat ::= . cfgSlot cfgCatTail ";
  artLabelStrings[ARTL_ART_cfgCat_648] = "";
  artlhsL[ARTL_ART_cfgCat_648] = ARTL_ART_cfgCat;
  artKindOfs[ARTL_ART_cfgCat_648] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_cfgCat_650] = "cfgCat ::= cfgSlot . cfgCatTail ";
  artLabelStrings[ARTL_ART_cfgCat_650] = "";
  artlhsL[ARTL_ART_cfgCat_650] = ARTL_ART_cfgCat;
  artSlotInstanceOfs[ARTL_ART_cfgCat_650] = ARTL_ART_cfgSlot;
  artKindOfs[ARTL_ART_cfgCat_650] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_cfgCat_650] = true;
  artFolds[ARTL_ART_cfgCat_652] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_cfgCat_652] = "cfgCat ::= cfgSlot cfgCatTail .";
  artLabelStrings[ARTL_ART_cfgCat_652] = "";
  artlhsL[ARTL_ART_cfgCat_652] = ARTL_ART_cfgCat;
  artSlotInstanceOfs[ARTL_ART_cfgCat_652] = ARTL_ART_cfgCatTail;
  artKindOfs[ARTL_ART_cfgCat_652] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgCat_652] = true;
  arteoR_pL[ARTL_ART_cfgCat_652] = true;
  artPopD[ARTL_ART_cfgCat_652] = true;
}

public void artTableInitialiser_ART_cfgCatTail() {
  artLabelInternalStrings[ARTL_ART_cfgCatTail] = "cfgCatTail";
  artLabelStrings[ARTL_ART_cfgCatTail] = "cfgCatTail";
  artKindOfs[ARTL_ART_cfgCatTail] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_cfgCatTail_690] = "cfgCatTail ::= . cfgAbbrev cfgSlot ";
  artLabelStrings[ARTL_ART_cfgCatTail_690] = "";
  artlhsL[ARTL_ART_cfgCatTail_690] = ARTL_ART_cfgCatTail;
  artKindOfs[ARTL_ART_cfgCatTail_690] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_cfgCatTail_692] = "cfgCatTail ::= cfgAbbrev . cfgSlot ";
  artLabelStrings[ARTL_ART_cfgCatTail_692] = "";
  artlhsL[ARTL_ART_cfgCatTail_692] = ARTL_ART_cfgCatTail;
  artSlotInstanceOfs[ARTL_ART_cfgCatTail_692] = ARTL_ART_cfgAbbrev;
  artKindOfs[ARTL_ART_cfgCatTail_692] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_cfgCatTail_692] = true;
  artLabelInternalStrings[ARTL_ART_cfgCatTail_694] = "cfgCatTail ::= cfgAbbrev cfgSlot .";
  artLabelStrings[ARTL_ART_cfgCatTail_694] = "";
  artlhsL[ARTL_ART_cfgCatTail_694] = ARTL_ART_cfgCatTail;
  artSlotInstanceOfs[ARTL_ART_cfgCatTail_694] = ARTL_ART_cfgSlot;
  artKindOfs[ARTL_ART_cfgCatTail_694] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgCatTail_694] = true;
  arteoR_pL[ARTL_ART_cfgCatTail_694] = true;
  artPopD[ARTL_ART_cfgCatTail_694] = true;
  artLabelInternalStrings[ARTL_ART_cfgCatTail_696] = "cfgCatTail ::= . cfgAbbrev cfgSlot cfgCatTail ";
  artLabelStrings[ARTL_ART_cfgCatTail_696] = "";
  artlhsL[ARTL_ART_cfgCatTail_696] = ARTL_ART_cfgCatTail;
  artKindOfs[ARTL_ART_cfgCatTail_696] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_cfgCatTail_698] = "cfgCatTail ::= cfgAbbrev . cfgSlot cfgCatTail ";
  artLabelStrings[ARTL_ART_cfgCatTail_698] = "";
  artlhsL[ARTL_ART_cfgCatTail_698] = ARTL_ART_cfgCatTail;
  artSlotInstanceOfs[ARTL_ART_cfgCatTail_698] = ARTL_ART_cfgAbbrev;
  artKindOfs[ARTL_ART_cfgCatTail_698] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_cfgCatTail_698] = true;
  artLabelInternalStrings[ARTL_ART_cfgCatTail_700] = "cfgCatTail ::= cfgAbbrev cfgSlot . cfgCatTail ";
  artLabelStrings[ARTL_ART_cfgCatTail_700] = "";
  artlhsL[ARTL_ART_cfgCatTail_700] = ARTL_ART_cfgCatTail;
  artSlotInstanceOfs[ARTL_ART_cfgCatTail_700] = ARTL_ART_cfgSlot;
  artKindOfs[ARTL_ART_cfgCatTail_700] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_cfgCatTail_702] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_cfgCatTail_702] = "cfgCatTail ::= cfgAbbrev cfgSlot cfgCatTail .";
  artLabelStrings[ARTL_ART_cfgCatTail_702] = "";
  artlhsL[ARTL_ART_cfgCatTail_702] = ARTL_ART_cfgCatTail;
  artSlotInstanceOfs[ARTL_ART_cfgCatTail_702] = ARTL_ART_cfgCatTail;
  artKindOfs[ARTL_ART_cfgCatTail_702] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgCatTail_702] = true;
  arteoR_pL[ARTL_ART_cfgCatTail_702] = true;
  artPopD[ARTL_ART_cfgCatTail_702] = true;
}

public void artTableInitialiser_ART_cfgCharacterRangeTerminal() {
  artLabelInternalStrings[ARTL_ART_cfgCharacterRangeTerminal] = "cfgCharacterRangeTerminal";
  artLabelStrings[ARTL_ART_cfgCharacterRangeTerminal] = "cfgCharacterRangeTerminal";
  artKindOfs[ARTL_ART_cfgCharacterRangeTerminal] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_cfgCharacterRangeTerminal_956] = "cfgCharacterRangeTerminal ::= . CHAR_BQ '..'  CHAR_BQ ";
  artLabelStrings[ARTL_ART_cfgCharacterRangeTerminal_956] = "";
  artlhsL[ARTL_ART_cfgCharacterRangeTerminal_956] = ARTL_ART_cfgCharacterRangeTerminal;
  artKindOfs[ARTL_ART_cfgCharacterRangeTerminal_956] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_cfgCharacterRangeTerminal_958] = "cfgCharacterRangeTerminal ::= CHAR_BQ . '..'  CHAR_BQ ";
  artLabelStrings[ARTL_ART_cfgCharacterRangeTerminal_958] = "";
  artlhsL[ARTL_ART_cfgCharacterRangeTerminal_958] = ARTL_ART_cfgCharacterRangeTerminal;
  artSlotInstanceOfs[ARTL_ART_cfgCharacterRangeTerminal_958] = ARTL_ART_CHAR_BQ;
  artKindOfs[ARTL_ART_cfgCharacterRangeTerminal_958] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_cfgCharacterRangeTerminal_958] = true;
  artFolds[ARTL_ART_cfgCharacterRangeTerminal_960] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_cfgCharacterRangeTerminal_959] = "cfgCharacterRangeTerminal ::= CHAR_BQ '..'  CHAR_BQ ";
  artLabelStrings[ARTL_ART_cfgCharacterRangeTerminal_959] = "";
  artlhsL[ARTL_ART_cfgCharacterRangeTerminal_959] = ARTL_ART_cfgCharacterRangeTerminal;
  artLabelInternalStrings[ARTL_ART_cfgCharacterRangeTerminal_960] = "cfgCharacterRangeTerminal ::= CHAR_BQ '..'  . CHAR_BQ ";
  artLabelStrings[ARTL_ART_cfgCharacterRangeTerminal_960] = "";
  artlhsL[ARTL_ART_cfgCharacterRangeTerminal_960] = ARTL_ART_cfgCharacterRangeTerminal;
  artKindOfs[ARTL_ART_cfgCharacterRangeTerminal_960] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_cfgCharacterRangeTerminal_962] = "cfgCharacterRangeTerminal ::= CHAR_BQ '..'  CHAR_BQ .";
  artLabelStrings[ARTL_ART_cfgCharacterRangeTerminal_962] = "";
  artlhsL[ARTL_ART_cfgCharacterRangeTerminal_962] = ARTL_ART_cfgCharacterRangeTerminal;
  artSlotInstanceOfs[ARTL_ART_cfgCharacterRangeTerminal_962] = ARTL_ART_CHAR_BQ;
  artKindOfs[ARTL_ART_cfgCharacterRangeTerminal_962] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgCharacterRangeTerminal_962] = true;
  arteoR_pL[ARTL_ART_cfgCharacterRangeTerminal_962] = true;
  artPopD[ARTL_ART_cfgCharacterRangeTerminal_962] = true;
}

public void artTableInitialiser_ART_cfgCharacterTerminal() {
  artLabelInternalStrings[ARTL_ART_cfgCharacterTerminal] = "cfgCharacterTerminal";
  artLabelStrings[ARTL_ART_cfgCharacterTerminal] = "cfgCharacterTerminal";
  artKindOfs[ARTL_ART_cfgCharacterTerminal] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_cfgCharacterTerminal_952] = "cfgCharacterTerminal ::= . CHAR_BQ ";
  artLabelStrings[ARTL_ART_cfgCharacterTerminal_952] = "";
  artlhsL[ARTL_ART_cfgCharacterTerminal_952] = ARTL_ART_cfgCharacterTerminal;
  artKindOfs[ARTL_ART_cfgCharacterTerminal_952] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_cfgCharacterTerminal_954] = "cfgCharacterTerminal ::= CHAR_BQ .";
  artLabelStrings[ARTL_ART_cfgCharacterTerminal_954] = "";
  artlhsL[ARTL_ART_cfgCharacterTerminal_954] = ARTL_ART_cfgCharacterTerminal;
  artSlotInstanceOfs[ARTL_ART_cfgCharacterTerminal_954] = ARTL_ART_CHAR_BQ;
  artKindOfs[ARTL_ART_cfgCharacterTerminal_954] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgCharacterTerminal_954] = true;
  arteoR_pL[ARTL_ART_cfgCharacterTerminal_954] = true;
  artPopD[ARTL_ART_cfgCharacterTerminal_954] = true;
}

public void artTableInitialiser_ART_cfgDelay() {
  artLabelInternalStrings[ARTL_ART_cfgDelay] = "cfgDelay";
  artLabelStrings[ARTL_ART_cfgDelay] = "cfgDelay";
  artKindOfs[ARTL_ART_cfgDelay] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_cfgDelay_970] = "cfgDelay ::= . '<'  ";
  artLabelStrings[ARTL_ART_cfgDelay_970] = "";
  artlhsL[ARTL_ART_cfgDelay_970] = ARTL_ART_cfgDelay;
  artKindOfs[ARTL_ART_cfgDelay_970] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_cfgDelay_970] = true;
  artFolds[ARTL_ART_cfgDelay_972] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_cfgDelay_971] = "cfgDelay ::= '<'  ";
  artLabelStrings[ARTL_ART_cfgDelay_971] = "";
  artlhsL[ARTL_ART_cfgDelay_971] = ARTL_ART_cfgDelay;
  artPopD[ARTL_ART_cfgDelay_971] = true;
  artLabelInternalStrings[ARTL_ART_cfgDelay_972] = "cfgDelay ::= '<'  .";
  artLabelStrings[ARTL_ART_cfgDelay_972] = "";
  artlhsL[ARTL_ART_cfgDelay_972] = ARTL_ART_cfgDelay;
  artKindOfs[ARTL_ART_cfgDelay_972] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgDelay_972] = true;
  arteoR_pL[ARTL_ART_cfgDelay_972] = true;
  artPopD[ARTL_ART_cfgDelay_972] = true;
}

public void artTableInitialiser_ART_cfgDiff() {
  artLabelInternalStrings[ARTL_ART_cfgDiff] = "cfgDiff";
  artLabelStrings[ARTL_ART_cfgDiff] = "cfgDiff";
  artKindOfs[ARTL_ART_cfgDiff] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_cfgDiff_762] = "cfgDiff ::= . cfgUnion ";
  artLabelStrings[ARTL_ART_cfgDiff_762] = "";
  artlhsL[ARTL_ART_cfgDiff_762] = ARTL_ART_cfgDiff;
  artKindOfs[ARTL_ART_cfgDiff_762] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_cfgDiff_764] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_cfgDiff_764] = "cfgDiff ::= cfgUnion .";
  artLabelStrings[ARTL_ART_cfgDiff_764] = "";
  artlhsL[ARTL_ART_cfgDiff_764] = ARTL_ART_cfgDiff;
  artSlotInstanceOfs[ARTL_ART_cfgDiff_764] = ARTL_ART_cfgUnion;
  artKindOfs[ARTL_ART_cfgDiff_764] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgDiff_764] = true;
  arteoR_pL[ARTL_ART_cfgDiff_764] = true;
  artPopD[ARTL_ART_cfgDiff_764] = true;
  artLabelInternalStrings[ARTL_ART_cfgDiff_766] = "cfgDiff ::= . cfgDiff '\\\\'  cfgUnion ";
  artLabelStrings[ARTL_ART_cfgDiff_766] = "";
  artlhsL[ARTL_ART_cfgDiff_766] = ARTL_ART_cfgDiff;
  artKindOfs[ARTL_ART_cfgDiff_766] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_cfgDiff_768] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_cfgDiff_768] = "cfgDiff ::= cfgDiff . '\\\\'  cfgUnion ";
  artLabelStrings[ARTL_ART_cfgDiff_768] = "";
  artlhsL[ARTL_ART_cfgDiff_768] = ARTL_ART_cfgDiff;
  artSlotInstanceOfs[ARTL_ART_cfgDiff_768] = ARTL_ART_cfgDiff;
  artKindOfs[ARTL_ART_cfgDiff_768] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_cfgDiff_768] = true;
  artFolds[ARTL_ART_cfgDiff_770] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_cfgDiff_769] = "cfgDiff ::= cfgDiff '\\\\'  cfgUnion ";
  artLabelStrings[ARTL_ART_cfgDiff_769] = "";
  artlhsL[ARTL_ART_cfgDiff_769] = ARTL_ART_cfgDiff;
  artLabelInternalStrings[ARTL_ART_cfgDiff_770] = "cfgDiff ::= cfgDiff '\\\\'  . cfgUnion ";
  artLabelStrings[ARTL_ART_cfgDiff_770] = "";
  artlhsL[ARTL_ART_cfgDiff_770] = ARTL_ART_cfgDiff;
  artKindOfs[ARTL_ART_cfgDiff_770] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_cfgDiff_772] = "cfgDiff ::= cfgDiff '\\\\'  cfgUnion .";
  artLabelStrings[ARTL_ART_cfgDiff_772] = "";
  artlhsL[ARTL_ART_cfgDiff_772] = ARTL_ART_cfgDiff;
  artSlotInstanceOfs[ARTL_ART_cfgDiff_772] = ARTL_ART_cfgUnion;
  artKindOfs[ARTL_ART_cfgDiff_772] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgDiff_772] = true;
  arteoR_pL[ARTL_ART_cfgDiff_772] = true;
  artPopD[ARTL_ART_cfgDiff_772] = true;
}

public void artTableInitialiser_ART_cfgDoFirst() {
  artLabelInternalStrings[ARTL_ART_cfgDoFirst] = "cfgDoFirst";
  artLabelStrings[ARTL_ART_cfgDoFirst] = "cfgDoFirst";
  artKindOfs[ARTL_ART_cfgDoFirst] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_cfgDoFirst_928] = "cfgDoFirst ::= . '('  cfgAlt ')'  ";
  artLabelStrings[ARTL_ART_cfgDoFirst_928] = "";
  artlhsL[ARTL_ART_cfgDoFirst_928] = ARTL_ART_cfgDoFirst;
  artKindOfs[ARTL_ART_cfgDoFirst_928] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_cfgDoFirst_930] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_cfgDoFirst_929] = "cfgDoFirst ::= '('  cfgAlt ')'  ";
  artLabelStrings[ARTL_ART_cfgDoFirst_929] = "";
  artlhsL[ARTL_ART_cfgDoFirst_929] = ARTL_ART_cfgDoFirst;
  artLabelInternalStrings[ARTL_ART_cfgDoFirst_930] = "cfgDoFirst ::= '('  . cfgAlt ')'  ";
  artLabelStrings[ARTL_ART_cfgDoFirst_930] = "";
  artlhsL[ARTL_ART_cfgDoFirst_930] = ARTL_ART_cfgDoFirst;
  artKindOfs[ARTL_ART_cfgDoFirst_930] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_cfgDoFirst_930] = true;
  artLabelInternalStrings[ARTL_ART_cfgDoFirst_932] = "cfgDoFirst ::= '('  cfgAlt . ')'  ";
  artLabelStrings[ARTL_ART_cfgDoFirst_932] = "";
  artlhsL[ARTL_ART_cfgDoFirst_932] = ARTL_ART_cfgDoFirst;
  artSlotInstanceOfs[ARTL_ART_cfgDoFirst_932] = ARTL_ART_cfgAlt;
  artKindOfs[ARTL_ART_cfgDoFirst_932] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_cfgDoFirst_932] = true;
  artFolds[ARTL_ART_cfgDoFirst_934] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_cfgDoFirst_933] = "cfgDoFirst ::= '('  cfgAlt ')'  ";
  artLabelStrings[ARTL_ART_cfgDoFirst_933] = "";
  artlhsL[ARTL_ART_cfgDoFirst_933] = ARTL_ART_cfgDoFirst;
  artPopD[ARTL_ART_cfgDoFirst_933] = true;
  artLabelInternalStrings[ARTL_ART_cfgDoFirst_934] = "cfgDoFirst ::= '('  cfgAlt ')'  .";
  artLabelStrings[ARTL_ART_cfgDoFirst_934] = "";
  artlhsL[ARTL_ART_cfgDoFirst_934] = ARTL_ART_cfgDoFirst;
  artKindOfs[ARTL_ART_cfgDoFirst_934] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgDoFirst_934] = true;
  arteoR_pL[ARTL_ART_cfgDoFirst_934] = true;
  artPopD[ARTL_ART_cfgDoFirst_934] = true;
}

public void artTableInitialiser_ART_cfgElement() {
  artLabelInternalStrings[ARTL_ART_cfgElement] = "cfgElement";
  artLabelStrings[ARTL_ART_cfgElement] = "cfgElement";
  artKindOfs[ARTL_ART_cfgElement] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_cfgElement_796] = "cfgElement ::= . cfgAtom ";
  artLabelStrings[ARTL_ART_cfgElement_796] = "";
  artlhsL[ARTL_ART_cfgElement_796] = ARTL_ART_cfgElement;
  artKindOfs[ARTL_ART_cfgElement_796] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_cfgElement_798] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_cfgElement_798] = "cfgElement ::= cfgAtom .";
  artLabelStrings[ARTL_ART_cfgElement_798] = "";
  artlhsL[ARTL_ART_cfgElement_798] = ARTL_ART_cfgElement;
  artSlotInstanceOfs[ARTL_ART_cfgElement_798] = ARTL_ART_cfgAtom;
  artKindOfs[ARTL_ART_cfgElement_798] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgElement_798] = true;
  arteoR_pL[ARTL_ART_cfgElement_798] = true;
  artPopD[ARTL_ART_cfgElement_798] = true;
  artLabelInternalStrings[ARTL_ART_cfgElement_800] = "cfgElement ::= . cfgAtom cfgGrammarAnnotations ";
  artLabelStrings[ARTL_ART_cfgElement_800] = "";
  artlhsL[ARTL_ART_cfgElement_800] = ARTL_ART_cfgElement;
  artKindOfs[ARTL_ART_cfgElement_800] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_cfgElement_802] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_cfgElement_802] = "cfgElement ::= cfgAtom . cfgGrammarAnnotations ";
  artLabelStrings[ARTL_ART_cfgElement_802] = "";
  artlhsL[ARTL_ART_cfgElement_802] = ARTL_ART_cfgElement;
  artSlotInstanceOfs[ARTL_ART_cfgElement_802] = ARTL_ART_cfgAtom;
  artKindOfs[ARTL_ART_cfgElement_802] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_cfgElement_802] = true;
  artLabelInternalStrings[ARTL_ART_cfgElement_804] = "cfgElement ::= cfgAtom cfgGrammarAnnotations .";
  artLabelStrings[ARTL_ART_cfgElement_804] = "";
  artlhsL[ARTL_ART_cfgElement_804] = ARTL_ART_cfgElement;
  artSlotInstanceOfs[ARTL_ART_cfgElement_804] = ARTL_ART_cfgGrammarAnnotations;
  artKindOfs[ARTL_ART_cfgElement_804] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgElement_804] = true;
  arteoR_pL[ARTL_ART_cfgElement_804] = true;
  artPopD[ARTL_ART_cfgElement_804] = true;
  artLabelInternalStrings[ARTL_ART_cfgElement_806] = "cfgElement ::= . cfgDoFirst ";
  artLabelStrings[ARTL_ART_cfgElement_806] = "";
  artlhsL[ARTL_ART_cfgElement_806] = ARTL_ART_cfgElement;
  artKindOfs[ARTL_ART_cfgElement_806] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_cfgElement_808] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_cfgElement_808] = "cfgElement ::= cfgDoFirst .";
  artLabelStrings[ARTL_ART_cfgElement_808] = "";
  artlhsL[ARTL_ART_cfgElement_808] = ARTL_ART_cfgElement;
  artSlotInstanceOfs[ARTL_ART_cfgElement_808] = ARTL_ART_cfgDoFirst;
  artKindOfs[ARTL_ART_cfgElement_808] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgElement_808] = true;
  arteoR_pL[ARTL_ART_cfgElement_808] = true;
  artPopD[ARTL_ART_cfgElement_808] = true;
}

public void artTableInitialiser_ART_cfgElementDeclaration() {
  artLabelInternalStrings[ARTL_ART_cfgElementDeclaration] = "cfgElementDeclaration";
  artLabelStrings[ARTL_ART_cfgElementDeclaration] = "cfgElementDeclaration";
  artKindOfs[ARTL_ART_cfgElementDeclaration] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_cfgElementDeclaration_1550] = "cfgElementDeclaration ::= . cfgAtom ";
  artLabelStrings[ARTL_ART_cfgElementDeclaration_1550] = "";
  artlhsL[ARTL_ART_cfgElementDeclaration_1550] = ARTL_ART_cfgElementDeclaration;
  artKindOfs[ARTL_ART_cfgElementDeclaration_1550] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_cfgElementDeclaration_1552] = "cfgElementDeclaration ::= cfgAtom .";
  artLabelStrings[ARTL_ART_cfgElementDeclaration_1552] = "";
  artlhsL[ARTL_ART_cfgElementDeclaration_1552] = ARTL_ART_cfgElementDeclaration;
  artSlotInstanceOfs[ARTL_ART_cfgElementDeclaration_1552] = ARTL_ART_cfgAtom;
  artKindOfs[ARTL_ART_cfgElementDeclaration_1552] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgElementDeclaration_1552] = true;
  arteoR_pL[ARTL_ART_cfgElementDeclaration_1552] = true;
  artPopD[ARTL_ART_cfgElementDeclaration_1552] = true;
  artLabelInternalStrings[ARTL_ART_cfgElementDeclaration_1554] = "cfgElementDeclaration ::= . cfgAtom '='  ID ";
  artLabelStrings[ARTL_ART_cfgElementDeclaration_1554] = "";
  artlhsL[ARTL_ART_cfgElementDeclaration_1554] = ARTL_ART_cfgElementDeclaration;
  artKindOfs[ARTL_ART_cfgElementDeclaration_1554] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_cfgElementDeclaration_1556] = "cfgElementDeclaration ::= cfgAtom . '='  ID ";
  artLabelStrings[ARTL_ART_cfgElementDeclaration_1556] = "";
  artlhsL[ARTL_ART_cfgElementDeclaration_1556] = ARTL_ART_cfgElementDeclaration;
  artSlotInstanceOfs[ARTL_ART_cfgElementDeclaration_1556] = ARTL_ART_cfgAtom;
  artKindOfs[ARTL_ART_cfgElementDeclaration_1556] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_cfgElementDeclaration_1556] = true;
  artFolds[ARTL_ART_cfgElementDeclaration_1558] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_cfgElementDeclaration_1557] = "cfgElementDeclaration ::= cfgAtom '='  ID ";
  artLabelStrings[ARTL_ART_cfgElementDeclaration_1557] = "";
  artlhsL[ARTL_ART_cfgElementDeclaration_1557] = ARTL_ART_cfgElementDeclaration;
  artLabelInternalStrings[ARTL_ART_cfgElementDeclaration_1558] = "cfgElementDeclaration ::= cfgAtom '='  . ID ";
  artLabelStrings[ARTL_ART_cfgElementDeclaration_1558] = "";
  artlhsL[ARTL_ART_cfgElementDeclaration_1558] = ARTL_ART_cfgElementDeclaration;
  artKindOfs[ARTL_ART_cfgElementDeclaration_1558] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_cfgElementDeclaration_1560] = "cfgElementDeclaration ::= cfgAtom '='  ID .";
  artLabelStrings[ARTL_ART_cfgElementDeclaration_1560] = "";
  artlhsL[ARTL_ART_cfgElementDeclaration_1560] = ARTL_ART_cfgElementDeclaration;
  artSlotInstanceOfs[ARTL_ART_cfgElementDeclaration_1560] = ARTL_ART_ID;
  artKindOfs[ARTL_ART_cfgElementDeclaration_1560] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgElementDeclaration_1560] = true;
  arteoR_pL[ARTL_ART_cfgElementDeclaration_1560] = true;
  artPopD[ARTL_ART_cfgElementDeclaration_1560] = true;
}

public void artTableInitialiser_ART_cfgElementDeclarations() {
  artLabelInternalStrings[ARTL_ART_cfgElementDeclarations] = "cfgElementDeclarations";
  artLabelStrings[ARTL_ART_cfgElementDeclarations] = "cfgElementDeclarations";
  artKindOfs[ARTL_ART_cfgElementDeclarations] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_cfgElementDeclarations_1462] = "cfgElementDeclarations ::= . cfgElementDeclaration ";
  artLabelStrings[ARTL_ART_cfgElementDeclarations_1462] = "";
  artlhsL[ARTL_ART_cfgElementDeclarations_1462] = ARTL_ART_cfgElementDeclarations;
  artKindOfs[ARTL_ART_cfgElementDeclarations_1462] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_cfgElementDeclarations_1464] = "cfgElementDeclarations ::= cfgElementDeclaration .";
  artLabelStrings[ARTL_ART_cfgElementDeclarations_1464] = "";
  artlhsL[ARTL_ART_cfgElementDeclarations_1464] = ARTL_ART_cfgElementDeclarations;
  artSlotInstanceOfs[ARTL_ART_cfgElementDeclarations_1464] = ARTL_ART_cfgElementDeclaration;
  artKindOfs[ARTL_ART_cfgElementDeclarations_1464] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgElementDeclarations_1464] = true;
  arteoR_pL[ARTL_ART_cfgElementDeclarations_1464] = true;
  artPopD[ARTL_ART_cfgElementDeclarations_1464] = true;
  artLabelInternalStrings[ARTL_ART_cfgElementDeclarations_1466] = "cfgElementDeclarations ::= . cfgElementDeclaration ','  cfgElementDeclarations ";
  artLabelStrings[ARTL_ART_cfgElementDeclarations_1466] = "";
  artlhsL[ARTL_ART_cfgElementDeclarations_1466] = ARTL_ART_cfgElementDeclarations;
  artKindOfs[ARTL_ART_cfgElementDeclarations_1466] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_cfgElementDeclarations_1468] = "cfgElementDeclarations ::= cfgElementDeclaration . ','  cfgElementDeclarations ";
  artLabelStrings[ARTL_ART_cfgElementDeclarations_1468] = "";
  artlhsL[ARTL_ART_cfgElementDeclarations_1468] = ARTL_ART_cfgElementDeclarations;
  artSlotInstanceOfs[ARTL_ART_cfgElementDeclarations_1468] = ARTL_ART_cfgElementDeclaration;
  artKindOfs[ARTL_ART_cfgElementDeclarations_1468] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_cfgElementDeclarations_1468] = true;
  artFolds[ARTL_ART_cfgElementDeclarations_1470] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_cfgElementDeclarations_1469] = "cfgElementDeclarations ::= cfgElementDeclaration ','  cfgElementDeclarations ";
  artLabelStrings[ARTL_ART_cfgElementDeclarations_1469] = "";
  artlhsL[ARTL_ART_cfgElementDeclarations_1469] = ARTL_ART_cfgElementDeclarations;
  artLabelInternalStrings[ARTL_ART_cfgElementDeclarations_1470] = "cfgElementDeclarations ::= cfgElementDeclaration ','  . cfgElementDeclarations ";
  artLabelStrings[ARTL_ART_cfgElementDeclarations_1470] = "";
  artlhsL[ARTL_ART_cfgElementDeclarations_1470] = ARTL_ART_cfgElementDeclarations;
  artKindOfs[ARTL_ART_cfgElementDeclarations_1470] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_cfgElementDeclarations_1472] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_cfgElementDeclarations_1472] = "cfgElementDeclarations ::= cfgElementDeclaration ','  cfgElementDeclarations .";
  artLabelStrings[ARTL_ART_cfgElementDeclarations_1472] = "";
  artlhsL[ARTL_ART_cfgElementDeclarations_1472] = ARTL_ART_cfgElementDeclarations;
  artSlotInstanceOfs[ARTL_ART_cfgElementDeclarations_1472] = ARTL_ART_cfgElementDeclarations;
  artKindOfs[ARTL_ART_cfgElementDeclarations_1472] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgElementDeclarations_1472] = true;
  arteoR_pL[ARTL_ART_cfgElementDeclarations_1472] = true;
  artPopD[ARTL_ART_cfgElementDeclarations_1472] = true;
}

public void artTableInitialiser_ART_cfgEpsilon() {
  artLabelInternalStrings[ARTL_ART_cfgEpsilon] = "cfgEpsilon";
  artLabelStrings[ARTL_ART_cfgEpsilon] = "cfgEpsilon";
  artKindOfs[ARTL_ART_cfgEpsilon] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_cfgEpsilon_936] = "cfgEpsilon ::= . '#'  ";
  artLabelStrings[ARTL_ART_cfgEpsilon_936] = "";
  artlhsL[ARTL_ART_cfgEpsilon_936] = ARTL_ART_cfgEpsilon;
  artKindOfs[ARTL_ART_cfgEpsilon_936] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_cfgEpsilon_936] = true;
  artFolds[ARTL_ART_cfgEpsilon_938] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_cfgEpsilon_937] = "cfgEpsilon ::= '#'  ";
  artLabelStrings[ARTL_ART_cfgEpsilon_937] = "";
  artlhsL[ARTL_ART_cfgEpsilon_937] = ARTL_ART_cfgEpsilon;
  artPopD[ARTL_ART_cfgEpsilon_937] = true;
  artLabelInternalStrings[ARTL_ART_cfgEpsilon_938] = "cfgEpsilon ::= '#'  .";
  artLabelStrings[ARTL_ART_cfgEpsilon_938] = "";
  artlhsL[ARTL_ART_cfgEpsilon_938] = ARTL_ART_cfgEpsilon;
  artKindOfs[ARTL_ART_cfgEpsilon_938] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgEpsilon_938] = true;
  arteoR_pL[ARTL_ART_cfgEpsilon_938] = true;
  artPopD[ARTL_ART_cfgEpsilon_938] = true;
}

public void artTableInitialiser_ART_cfgFoldNone() {
  artLabelInternalStrings[ARTL_ART_cfgFoldNone] = "cfgFoldNone";
  artLabelStrings[ARTL_ART_cfgFoldNone] = "cfgFoldNone";
  artKindOfs[ARTL_ART_cfgFoldNone] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_cfgFoldNone_974] = "cfgFoldNone ::= . '^_'  ";
  artLabelStrings[ARTL_ART_cfgFoldNone_974] = "";
  artlhsL[ARTL_ART_cfgFoldNone_974] = ARTL_ART_cfgFoldNone;
  artKindOfs[ARTL_ART_cfgFoldNone_974] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_cfgFoldNone_974] = true;
  artFolds[ARTL_ART_cfgFoldNone_976] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_cfgFoldNone_975] = "cfgFoldNone ::= '^_'  ";
  artLabelStrings[ARTL_ART_cfgFoldNone_975] = "";
  artlhsL[ARTL_ART_cfgFoldNone_975] = ARTL_ART_cfgFoldNone;
  artPopD[ARTL_ART_cfgFoldNone_975] = true;
  artLabelInternalStrings[ARTL_ART_cfgFoldNone_976] = "cfgFoldNone ::= '^_'  .";
  artLabelStrings[ARTL_ART_cfgFoldNone_976] = "";
  artlhsL[ARTL_ART_cfgFoldNone_976] = ARTL_ART_cfgFoldNone;
  artKindOfs[ARTL_ART_cfgFoldNone_976] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgFoldNone_976] = true;
  arteoR_pL[ARTL_ART_cfgFoldNone_976] = true;
  artPopD[ARTL_ART_cfgFoldNone_976] = true;
}

public void artTableInitialiser_ART_cfgFoldOver() {
  artLabelInternalStrings[ARTL_ART_cfgFoldOver] = "cfgFoldOver";
  artLabelStrings[ARTL_ART_cfgFoldOver] = "cfgFoldOver";
  artKindOfs[ARTL_ART_cfgFoldOver] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_cfgFoldOver_982] = "cfgFoldOver ::= . '^^'  ";
  artLabelStrings[ARTL_ART_cfgFoldOver_982] = "";
  artlhsL[ARTL_ART_cfgFoldOver_982] = ARTL_ART_cfgFoldOver;
  artKindOfs[ARTL_ART_cfgFoldOver_982] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_cfgFoldOver_982] = true;
  artFolds[ARTL_ART_cfgFoldOver_984] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_cfgFoldOver_983] = "cfgFoldOver ::= '^^'  ";
  artLabelStrings[ARTL_ART_cfgFoldOver_983] = "";
  artlhsL[ARTL_ART_cfgFoldOver_983] = ARTL_ART_cfgFoldOver;
  artPopD[ARTL_ART_cfgFoldOver_983] = true;
  artLabelInternalStrings[ARTL_ART_cfgFoldOver_984] = "cfgFoldOver ::= '^^'  .";
  artLabelStrings[ARTL_ART_cfgFoldOver_984] = "";
  artlhsL[ARTL_ART_cfgFoldOver_984] = ARTL_ART_cfgFoldOver;
  artKindOfs[ARTL_ART_cfgFoldOver_984] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgFoldOver_984] = true;
  arteoR_pL[ARTL_ART_cfgFoldOver_984] = true;
  artPopD[ARTL_ART_cfgFoldOver_984] = true;
}

public void artTableInitialiser_ART_cfgFoldUnder() {
  artLabelInternalStrings[ARTL_ART_cfgFoldUnder] = "cfgFoldUnder";
  artLabelStrings[ARTL_ART_cfgFoldUnder] = "cfgFoldUnder";
  artKindOfs[ARTL_ART_cfgFoldUnder] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_cfgFoldUnder_978] = "cfgFoldUnder ::= . '^'  ";
  artLabelStrings[ARTL_ART_cfgFoldUnder_978] = "";
  artlhsL[ARTL_ART_cfgFoldUnder_978] = ARTL_ART_cfgFoldUnder;
  artKindOfs[ARTL_ART_cfgFoldUnder_978] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_cfgFoldUnder_978] = true;
  artFolds[ARTL_ART_cfgFoldUnder_980] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_cfgFoldUnder_979] = "cfgFoldUnder ::= '^'  ";
  artLabelStrings[ARTL_ART_cfgFoldUnder_979] = "";
  artlhsL[ARTL_ART_cfgFoldUnder_979] = ARTL_ART_cfgFoldUnder;
  artPopD[ARTL_ART_cfgFoldUnder_979] = true;
  artLabelInternalStrings[ARTL_ART_cfgFoldUnder_980] = "cfgFoldUnder ::= '^'  .";
  artLabelStrings[ARTL_ART_cfgFoldUnder_980] = "";
  artlhsL[ARTL_ART_cfgFoldUnder_980] = ARTL_ART_cfgFoldUnder;
  artKindOfs[ARTL_ART_cfgFoldUnder_980] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgFoldUnder_980] = true;
  arteoR_pL[ARTL_ART_cfgFoldUnder_980] = true;
  artPopD[ARTL_ART_cfgFoldUnder_980] = true;
}

public void artTableInitialiser_ART_cfgGather() {
  artLabelInternalStrings[ARTL_ART_cfgGather] = "cfgGather";
  artLabelStrings[ARTL_ART_cfgGather] = "cfgGather";
  artKindOfs[ARTL_ART_cfgGather] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_cfgGather_986] = "cfgGather ::= . '^^^'  ID ";
  artLabelStrings[ARTL_ART_cfgGather_986] = "";
  artlhsL[ARTL_ART_cfgGather_986] = ARTL_ART_cfgGather;
  artKindOfs[ARTL_ART_cfgGather_986] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_cfgGather_988] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_cfgGather_987] = "cfgGather ::= '^^^'  ID ";
  artLabelStrings[ARTL_ART_cfgGather_987] = "";
  artlhsL[ARTL_ART_cfgGather_987] = ARTL_ART_cfgGather;
  artLabelInternalStrings[ARTL_ART_cfgGather_988] = "cfgGather ::= '^^^'  . ID ";
  artLabelStrings[ARTL_ART_cfgGather_988] = "";
  artlhsL[ARTL_ART_cfgGather_988] = ARTL_ART_cfgGather;
  artKindOfs[ARTL_ART_cfgGather_988] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_cfgGather_988] = true;
  artLabelInternalStrings[ARTL_ART_cfgGather_990] = "cfgGather ::= '^^^'  ID .";
  artLabelStrings[ARTL_ART_cfgGather_990] = "";
  artlhsL[ARTL_ART_cfgGather_990] = ARTL_ART_cfgGather;
  artSlotInstanceOfs[ARTL_ART_cfgGather_990] = ARTL_ART_ID;
  artKindOfs[ARTL_ART_cfgGather_990] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgGather_990] = true;
  arteoR_pL[ARTL_ART_cfgGather_990] = true;
  artPopD[ARTL_ART_cfgGather_990] = true;
}

public void artTableInitialiser_ART_cfgGrammarAnnotations() {
  artLabelInternalStrings[ARTL_ART_cfgGrammarAnnotations] = "cfgGrammarAnnotations";
  artLabelStrings[ARTL_ART_cfgGrammarAnnotations] = "cfgGrammarAnnotations";
  artKindOfs[ARTL_ART_cfgGrammarAnnotations] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_cfgGrammarAnnotations_904] = "cfgGrammarAnnotations ::= . cfgDelay ";
  artLabelStrings[ARTL_ART_cfgGrammarAnnotations_904] = "";
  artlhsL[ARTL_ART_cfgGrammarAnnotations_904] = ARTL_ART_cfgGrammarAnnotations;
  artKindOfs[ARTL_ART_cfgGrammarAnnotations_904] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_cfgGrammarAnnotations_906] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_cfgGrammarAnnotations_906] = "cfgGrammarAnnotations ::= cfgDelay .";
  artLabelStrings[ARTL_ART_cfgGrammarAnnotations_906] = "";
  artlhsL[ARTL_ART_cfgGrammarAnnotations_906] = ARTL_ART_cfgGrammarAnnotations;
  artSlotInstanceOfs[ARTL_ART_cfgGrammarAnnotations_906] = ARTL_ART_cfgDelay;
  artKindOfs[ARTL_ART_cfgGrammarAnnotations_906] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgGrammarAnnotations_906] = true;
  arteoR_pL[ARTL_ART_cfgGrammarAnnotations_906] = true;
  artPopD[ARTL_ART_cfgGrammarAnnotations_906] = true;
  artLabelInternalStrings[ARTL_ART_cfgGrammarAnnotations_908] = "cfgGrammarAnnotations ::= . cfgFoldNone ";
  artLabelStrings[ARTL_ART_cfgGrammarAnnotations_908] = "";
  artlhsL[ARTL_ART_cfgGrammarAnnotations_908] = ARTL_ART_cfgGrammarAnnotations;
  artKindOfs[ARTL_ART_cfgGrammarAnnotations_908] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_cfgGrammarAnnotations_910] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_cfgGrammarAnnotations_910] = "cfgGrammarAnnotations ::= cfgFoldNone .";
  artLabelStrings[ARTL_ART_cfgGrammarAnnotations_910] = "";
  artlhsL[ARTL_ART_cfgGrammarAnnotations_910] = ARTL_ART_cfgGrammarAnnotations;
  artSlotInstanceOfs[ARTL_ART_cfgGrammarAnnotations_910] = ARTL_ART_cfgFoldNone;
  artKindOfs[ARTL_ART_cfgGrammarAnnotations_910] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgGrammarAnnotations_910] = true;
  arteoR_pL[ARTL_ART_cfgGrammarAnnotations_910] = true;
  artPopD[ARTL_ART_cfgGrammarAnnotations_910] = true;
  artLabelInternalStrings[ARTL_ART_cfgGrammarAnnotations_912] = "cfgGrammarAnnotations ::= . cfgFoldUnder ";
  artLabelStrings[ARTL_ART_cfgGrammarAnnotations_912] = "";
  artlhsL[ARTL_ART_cfgGrammarAnnotations_912] = ARTL_ART_cfgGrammarAnnotations;
  artKindOfs[ARTL_ART_cfgGrammarAnnotations_912] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_cfgGrammarAnnotations_914] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_cfgGrammarAnnotations_914] = "cfgGrammarAnnotations ::= cfgFoldUnder .";
  artLabelStrings[ARTL_ART_cfgGrammarAnnotations_914] = "";
  artlhsL[ARTL_ART_cfgGrammarAnnotations_914] = ARTL_ART_cfgGrammarAnnotations;
  artSlotInstanceOfs[ARTL_ART_cfgGrammarAnnotations_914] = ARTL_ART_cfgFoldUnder;
  artKindOfs[ARTL_ART_cfgGrammarAnnotations_914] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgGrammarAnnotations_914] = true;
  arteoR_pL[ARTL_ART_cfgGrammarAnnotations_914] = true;
  artPopD[ARTL_ART_cfgGrammarAnnotations_914] = true;
  artLabelInternalStrings[ARTL_ART_cfgGrammarAnnotations_916] = "cfgGrammarAnnotations ::= . cfgFoldOver ";
  artLabelStrings[ARTL_ART_cfgGrammarAnnotations_916] = "";
  artlhsL[ARTL_ART_cfgGrammarAnnotations_916] = ARTL_ART_cfgGrammarAnnotations;
  artKindOfs[ARTL_ART_cfgGrammarAnnotations_916] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_cfgGrammarAnnotations_918] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_cfgGrammarAnnotations_918] = "cfgGrammarAnnotations ::= cfgFoldOver .";
  artLabelStrings[ARTL_ART_cfgGrammarAnnotations_918] = "";
  artlhsL[ARTL_ART_cfgGrammarAnnotations_918] = ARTL_ART_cfgGrammarAnnotations;
  artSlotInstanceOfs[ARTL_ART_cfgGrammarAnnotations_918] = ARTL_ART_cfgFoldOver;
  artKindOfs[ARTL_ART_cfgGrammarAnnotations_918] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgGrammarAnnotations_918] = true;
  arteoR_pL[ARTL_ART_cfgGrammarAnnotations_918] = true;
  artPopD[ARTL_ART_cfgGrammarAnnotations_918] = true;
  artLabelInternalStrings[ARTL_ART_cfgGrammarAnnotations_920] = "cfgGrammarAnnotations ::= . cfgGather ";
  artLabelStrings[ARTL_ART_cfgGrammarAnnotations_920] = "";
  artlhsL[ARTL_ART_cfgGrammarAnnotations_920] = ARTL_ART_cfgGrammarAnnotations;
  artKindOfs[ARTL_ART_cfgGrammarAnnotations_920] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_cfgGrammarAnnotations_922] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_cfgGrammarAnnotations_922] = "cfgGrammarAnnotations ::= cfgGather .";
  artLabelStrings[ARTL_ART_cfgGrammarAnnotations_922] = "";
  artlhsL[ARTL_ART_cfgGrammarAnnotations_922] = ARTL_ART_cfgGrammarAnnotations;
  artSlotInstanceOfs[ARTL_ART_cfgGrammarAnnotations_922] = ARTL_ART_cfgGather;
  artKindOfs[ARTL_ART_cfgGrammarAnnotations_922] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgGrammarAnnotations_922] = true;
  arteoR_pL[ARTL_ART_cfgGrammarAnnotations_922] = true;
  artPopD[ARTL_ART_cfgGrammarAnnotations_922] = true;
  artLabelInternalStrings[ARTL_ART_cfgGrammarAnnotations_924] = "cfgGrammarAnnotations ::= . cfgInsert ";
  artLabelStrings[ARTL_ART_cfgGrammarAnnotations_924] = "";
  artlhsL[ARTL_ART_cfgGrammarAnnotations_924] = ARTL_ART_cfgGrammarAnnotations;
  artKindOfs[ARTL_ART_cfgGrammarAnnotations_924] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_cfgGrammarAnnotations_926] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_cfgGrammarAnnotations_926] = "cfgGrammarAnnotations ::= cfgInsert .";
  artLabelStrings[ARTL_ART_cfgGrammarAnnotations_926] = "";
  artlhsL[ARTL_ART_cfgGrammarAnnotations_926] = ARTL_ART_cfgGrammarAnnotations;
  artSlotInstanceOfs[ARTL_ART_cfgGrammarAnnotations_926] = ARTL_ART_cfgInsert;
  artKindOfs[ARTL_ART_cfgGrammarAnnotations_926] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgGrammarAnnotations_926] = true;
  arteoR_pL[ARTL_ART_cfgGrammarAnnotations_926] = true;
  artPopD[ARTL_ART_cfgGrammarAnnotations_926] = true;
}

public void artTableInitialiser_ART_cfgInsert() {
  artLabelInternalStrings[ARTL_ART_cfgInsert] = "cfgInsert";
  artLabelStrings[ARTL_ART_cfgInsert] = "cfgInsert";
  artKindOfs[ARTL_ART_cfgInsert] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_cfgInsert_992] = "cfgInsert ::= . '^+'  ID ";
  artLabelStrings[ARTL_ART_cfgInsert_992] = "";
  artlhsL[ARTL_ART_cfgInsert_992] = ARTL_ART_cfgInsert;
  artKindOfs[ARTL_ART_cfgInsert_992] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_cfgInsert_994] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_cfgInsert_993] = "cfgInsert ::= '^+'  ID ";
  artLabelStrings[ARTL_ART_cfgInsert_993] = "";
  artlhsL[ARTL_ART_cfgInsert_993] = ARTL_ART_cfgInsert;
  artLabelInternalStrings[ARTL_ART_cfgInsert_994] = "cfgInsert ::= '^+'  . ID ";
  artLabelStrings[ARTL_ART_cfgInsert_994] = "";
  artlhsL[ARTL_ART_cfgInsert_994] = ARTL_ART_cfgInsert;
  artKindOfs[ARTL_ART_cfgInsert_994] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_cfgInsert_994] = true;
  artLabelInternalStrings[ARTL_ART_cfgInsert_996] = "cfgInsert ::= '^+'  ID .";
  artLabelStrings[ARTL_ART_cfgInsert_996] = "";
  artlhsL[ARTL_ART_cfgInsert_996] = ARTL_ART_cfgInsert;
  artSlotInstanceOfs[ARTL_ART_cfgInsert_996] = ARTL_ART_ID;
  artKindOfs[ARTL_ART_cfgInsert_996] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgInsert_996] = true;
  arteoR_pL[ARTL_ART_cfgInsert_996] = true;
  artPopD[ARTL_ART_cfgInsert_996] = true;
}

public void artTableInitialiser_ART_cfgIter() {
  artLabelInternalStrings[ARTL_ART_cfgIter] = "cfgIter";
  artLabelStrings[ARTL_ART_cfgIter] = "cfgIter";
  artKindOfs[ARTL_ART_cfgIter] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_cfgIter_738] = "cfgIter ::= . cfgDiff ";
  artLabelStrings[ARTL_ART_cfgIter_738] = "";
  artlhsL[ARTL_ART_cfgIter_738] = ARTL_ART_cfgIter;
  artKindOfs[ARTL_ART_cfgIter_738] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_cfgIter_740] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_cfgIter_740] = "cfgIter ::= cfgDiff .";
  artLabelStrings[ARTL_ART_cfgIter_740] = "";
  artlhsL[ARTL_ART_cfgIter_740] = ARTL_ART_cfgIter;
  artSlotInstanceOfs[ARTL_ART_cfgIter_740] = ARTL_ART_cfgDiff;
  artKindOfs[ARTL_ART_cfgIter_740] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgIter_740] = true;
  arteoR_pL[ARTL_ART_cfgIter_740] = true;
  artPopD[ARTL_ART_cfgIter_740] = true;
  artLabelInternalStrings[ARTL_ART_cfgIter_742] = "cfgIter ::= . cfgDiff '@'  cfgIter ";
  artLabelStrings[ARTL_ART_cfgIter_742] = "";
  artlhsL[ARTL_ART_cfgIter_742] = ARTL_ART_cfgIter;
  artKindOfs[ARTL_ART_cfgIter_742] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_cfgIter_744] = "cfgIter ::= cfgDiff . '@'  cfgIter ";
  artLabelStrings[ARTL_ART_cfgIter_744] = "";
  artlhsL[ARTL_ART_cfgIter_744] = ARTL_ART_cfgIter;
  artSlotInstanceOfs[ARTL_ART_cfgIter_744] = ARTL_ART_cfgDiff;
  artKindOfs[ARTL_ART_cfgIter_744] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_cfgIter_744] = true;
  artFolds[ARTL_ART_cfgIter_746] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_cfgIter_745] = "cfgIter ::= cfgDiff '@'  cfgIter ";
  artLabelStrings[ARTL_ART_cfgIter_745] = "";
  artlhsL[ARTL_ART_cfgIter_745] = ARTL_ART_cfgIter;
  artLabelInternalStrings[ARTL_ART_cfgIter_746] = "cfgIter ::= cfgDiff '@'  . cfgIter ";
  artLabelStrings[ARTL_ART_cfgIter_746] = "";
  artlhsL[ARTL_ART_cfgIter_746] = ARTL_ART_cfgIter;
  artKindOfs[ARTL_ART_cfgIter_746] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_cfgIter_748] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_cfgIter_748] = "cfgIter ::= cfgDiff '@'  cfgIter .";
  artLabelStrings[ARTL_ART_cfgIter_748] = "";
  artlhsL[ARTL_ART_cfgIter_748] = ARTL_ART_cfgIter;
  artSlotInstanceOfs[ARTL_ART_cfgIter_748] = ARTL_ART_cfgIter;
  artKindOfs[ARTL_ART_cfgIter_748] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgIter_748] = true;
  arteoR_pL[ARTL_ART_cfgIter_748] = true;
  artPopD[ARTL_ART_cfgIter_748] = true;
}

public void artTableInitialiser_ART_cfgKleeneClosure() {
  artLabelInternalStrings[ARTL_ART_cfgKleeneClosure] = "cfgKleeneClosure";
  artLabelStrings[ARTL_ART_cfgKleeneClosure] = "cfgKleeneClosure";
  artKindOfs[ARTL_ART_cfgKleeneClosure] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_cfgKleeneClosure_750] = "cfgKleeneClosure ::= . '*'  ";
  artLabelStrings[ARTL_ART_cfgKleeneClosure_750] = "";
  artlhsL[ARTL_ART_cfgKleeneClosure_750] = ARTL_ART_cfgKleeneClosure;
  artKindOfs[ARTL_ART_cfgKleeneClosure_750] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_cfgKleeneClosure_750] = true;
  artFolds[ARTL_ART_cfgKleeneClosure_752] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_cfgKleeneClosure_751] = "cfgKleeneClosure ::= '*'  ";
  artLabelStrings[ARTL_ART_cfgKleeneClosure_751] = "";
  artlhsL[ARTL_ART_cfgKleeneClosure_751] = ARTL_ART_cfgKleeneClosure;
  artPopD[ARTL_ART_cfgKleeneClosure_751] = true;
  artLabelInternalStrings[ARTL_ART_cfgKleeneClosure_752] = "cfgKleeneClosure ::= '*'  .";
  artLabelStrings[ARTL_ART_cfgKleeneClosure_752] = "";
  artlhsL[ARTL_ART_cfgKleeneClosure_752] = ARTL_ART_cfgKleeneClosure;
  artKindOfs[ARTL_ART_cfgKleeneClosure_752] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgKleeneClosure_752] = true;
  arteoR_pL[ARTL_ART_cfgKleeneClosure_752] = true;
  artPopD[ARTL_ART_cfgKleeneClosure_752] = true;
}

public void artTableInitialiser_ART_cfgNativeAction() {
  artLabelInternalStrings[ARTL_ART_cfgNativeAction] = "cfgNativeAction";
  artLabelStrings[ARTL_ART_cfgNativeAction] = "cfgNativeAction";
  artKindOfs[ARTL_ART_cfgNativeAction] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_cfgNativeAction_734] = "cfgNativeAction ::= . STRING_BRACE_NEST ";
  artLabelStrings[ARTL_ART_cfgNativeAction_734] = "";
  artlhsL[ARTL_ART_cfgNativeAction_734] = ARTL_ART_cfgNativeAction;
  artKindOfs[ARTL_ART_cfgNativeAction_734] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_cfgNativeAction_736] = "cfgNativeAction ::= STRING_BRACE_NEST .";
  artLabelStrings[ARTL_ART_cfgNativeAction_736] = "";
  artlhsL[ARTL_ART_cfgNativeAction_736] = ARTL_ART_cfgNativeAction;
  artSlotInstanceOfs[ARTL_ART_cfgNativeAction_736] = ARTL_ART_STRING_BRACE_NEST;
  artKindOfs[ARTL_ART_cfgNativeAction_736] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgNativeAction_736] = true;
  arteoR_pL[ARTL_ART_cfgNativeAction_736] = true;
  artPopD[ARTL_ART_cfgNativeAction_736] = true;
}

public void artTableInitialiser_ART_cfgNonterminal() {
  artLabelInternalStrings[ARTL_ART_cfgNonterminal] = "cfgNonterminal";
  artLabelStrings[ARTL_ART_cfgNonterminal] = "cfgNonterminal";
  artKindOfs[ARTL_ART_cfgNonterminal] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_cfgNonterminal_628] = "cfgNonterminal ::= . ID ";
  artLabelStrings[ARTL_ART_cfgNonterminal_628] = "";
  artlhsL[ARTL_ART_cfgNonterminal_628] = ARTL_ART_cfgNonterminal;
  artKindOfs[ARTL_ART_cfgNonterminal_628] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_cfgNonterminal_630] = "cfgNonterminal ::= ID .";
  artLabelStrings[ARTL_ART_cfgNonterminal_630] = "";
  artlhsL[ARTL_ART_cfgNonterminal_630] = ARTL_ART_cfgNonterminal;
  artSlotInstanceOfs[ARTL_ART_cfgNonterminal_630] = ARTL_ART_ID;
  artKindOfs[ARTL_ART_cfgNonterminal_630] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgNonterminal_630] = true;
  arteoR_pL[ARTL_ART_cfgNonterminal_630] = true;
  artPopD[ARTL_ART_cfgNonterminal_630] = true;
  artLabelInternalStrings[ARTL_ART_cfgNonterminal_632] = "cfgNonterminal ::= . STRING_DOLLAR ";
  artLabelStrings[ARTL_ART_cfgNonterminal_632] = "";
  artlhsL[ARTL_ART_cfgNonterminal_632] = ARTL_ART_cfgNonterminal;
  artKindOfs[ARTL_ART_cfgNonterminal_632] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_cfgNonterminal_634] = "cfgNonterminal ::= STRING_DOLLAR .";
  artLabelStrings[ARTL_ART_cfgNonterminal_634] = "";
  artlhsL[ARTL_ART_cfgNonterminal_634] = ARTL_ART_cfgNonterminal;
  artSlotInstanceOfs[ARTL_ART_cfgNonterminal_634] = ARTL_ART_STRING_DOLLAR;
  artKindOfs[ARTL_ART_cfgNonterminal_634] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgNonterminal_634] = true;
  arteoR_pL[ARTL_ART_cfgNonterminal_634] = true;
  artPopD[ARTL_ART_cfgNonterminal_634] = true;
}

public void artTableInitialiser_ART_cfgNonterminals() {
  artLabelInternalStrings[ARTL_ART_cfgNonterminals] = "cfgNonterminals";
  artLabelStrings[ARTL_ART_cfgNonterminals] = "cfgNonterminals";
  artKindOfs[ARTL_ART_cfgNonterminals] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_cfgNonterminals_1036] = "cfgNonterminals ::= . cfgNonterminal ";
  artLabelStrings[ARTL_ART_cfgNonterminals_1036] = "";
  artlhsL[ARTL_ART_cfgNonterminals_1036] = ARTL_ART_cfgNonterminals;
  artKindOfs[ARTL_ART_cfgNonterminals_1036] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_cfgNonterminals_1038] = "cfgNonterminals ::= cfgNonterminal .";
  artLabelStrings[ARTL_ART_cfgNonterminals_1038] = "";
  artlhsL[ARTL_ART_cfgNonterminals_1038] = ARTL_ART_cfgNonterminals;
  artSlotInstanceOfs[ARTL_ART_cfgNonterminals_1038] = ARTL_ART_cfgNonterminal;
  artKindOfs[ARTL_ART_cfgNonterminals_1038] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgNonterminals_1038] = true;
  arteoR_pL[ARTL_ART_cfgNonterminals_1038] = true;
  artPopD[ARTL_ART_cfgNonterminals_1038] = true;
  artLabelInternalStrings[ARTL_ART_cfgNonterminals_1040] = "cfgNonterminals ::= . cfgNonterminal ','  cfgNonterminals ";
  artLabelStrings[ARTL_ART_cfgNonterminals_1040] = "";
  artlhsL[ARTL_ART_cfgNonterminals_1040] = ARTL_ART_cfgNonterminals;
  artKindOfs[ARTL_ART_cfgNonterminals_1040] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_cfgNonterminals_1042] = "cfgNonterminals ::= cfgNonterminal . ','  cfgNonterminals ";
  artLabelStrings[ARTL_ART_cfgNonterminals_1042] = "";
  artlhsL[ARTL_ART_cfgNonterminals_1042] = ARTL_ART_cfgNonterminals;
  artSlotInstanceOfs[ARTL_ART_cfgNonterminals_1042] = ARTL_ART_cfgNonterminal;
  artKindOfs[ARTL_ART_cfgNonterminals_1042] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_cfgNonterminals_1042] = true;
  artFolds[ARTL_ART_cfgNonterminals_1044] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_cfgNonterminals_1043] = "cfgNonterminals ::= cfgNonterminal ','  cfgNonterminals ";
  artLabelStrings[ARTL_ART_cfgNonterminals_1043] = "";
  artlhsL[ARTL_ART_cfgNonterminals_1043] = ARTL_ART_cfgNonterminals;
  artLabelInternalStrings[ARTL_ART_cfgNonterminals_1044] = "cfgNonterminals ::= cfgNonterminal ','  . cfgNonterminals ";
  artLabelStrings[ARTL_ART_cfgNonterminals_1044] = "";
  artlhsL[ARTL_ART_cfgNonterminals_1044] = ARTL_ART_cfgNonterminals;
  artKindOfs[ARTL_ART_cfgNonterminals_1044] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_cfgNonterminals_1046] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_cfgNonterminals_1046] = "cfgNonterminals ::= cfgNonterminal ','  cfgNonterminals .";
  artLabelStrings[ARTL_ART_cfgNonterminals_1046] = "";
  artlhsL[ARTL_ART_cfgNonterminals_1046] = ARTL_ART_cfgNonterminals;
  artSlotInstanceOfs[ARTL_ART_cfgNonterminals_1046] = ARTL_ART_cfgNonterminals;
  artKindOfs[ARTL_ART_cfgNonterminals_1046] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgNonterminals_1046] = true;
  arteoR_pL[ARTL_ART_cfgNonterminals_1046] = true;
  artPopD[ARTL_ART_cfgNonterminals_1046] = true;
}

public void artTableInitialiser_ART_cfgNot() {
  artLabelInternalStrings[ARTL_ART_cfgNot] = "cfgNot";
  artLabelStrings[ARTL_ART_cfgNot] = "cfgNot";
  artKindOfs[ARTL_ART_cfgNot] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_cfgNot_786] = "cfgNot ::= . cfgElement ";
  artLabelStrings[ARTL_ART_cfgNot_786] = "";
  artlhsL[ARTL_ART_cfgNot_786] = ARTL_ART_cfgNot;
  artKindOfs[ARTL_ART_cfgNot_786] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_cfgNot_788] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_cfgNot_788] = "cfgNot ::= cfgElement .";
  artLabelStrings[ARTL_ART_cfgNot_788] = "";
  artlhsL[ARTL_ART_cfgNot_788] = ARTL_ART_cfgNot;
  artSlotInstanceOfs[ARTL_ART_cfgNot_788] = ARTL_ART_cfgElement;
  artKindOfs[ARTL_ART_cfgNot_788] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgNot_788] = true;
  arteoR_pL[ARTL_ART_cfgNot_788] = true;
  artPopD[ARTL_ART_cfgNot_788] = true;
  artLabelInternalStrings[ARTL_ART_cfgNot_790] = "cfgNot ::= . '\\\\'  cfgElement ";
  artLabelStrings[ARTL_ART_cfgNot_790] = "";
  artlhsL[ARTL_ART_cfgNot_790] = ARTL_ART_cfgNot;
  artKindOfs[ARTL_ART_cfgNot_790] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_cfgNot_792] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_cfgNot_791] = "cfgNot ::= '\\\\'  cfgElement ";
  artLabelStrings[ARTL_ART_cfgNot_791] = "";
  artlhsL[ARTL_ART_cfgNot_791] = ARTL_ART_cfgNot;
  artLabelInternalStrings[ARTL_ART_cfgNot_792] = "cfgNot ::= '\\\\'  . cfgElement ";
  artLabelStrings[ARTL_ART_cfgNot_792] = "";
  artlhsL[ARTL_ART_cfgNot_792] = ARTL_ART_cfgNot;
  artKindOfs[ARTL_ART_cfgNot_792] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_cfgNot_792] = true;
  artLabelInternalStrings[ARTL_ART_cfgNot_794] = "cfgNot ::= '\\\\'  cfgElement .";
  artLabelStrings[ARTL_ART_cfgNot_794] = "";
  artlhsL[ARTL_ART_cfgNot_794] = ARTL_ART_cfgNot;
  artSlotInstanceOfs[ARTL_ART_cfgNot_794] = ARTL_ART_cfgElement;
  artKindOfs[ARTL_ART_cfgNot_794] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgNot_794] = true;
  arteoR_pL[ARTL_ART_cfgNot_794] = true;
  artPopD[ARTL_ART_cfgNot_794] = true;
}

public void artTableInitialiser_ART_cfgOptional() {
  artLabelInternalStrings[ARTL_ART_cfgOptional] = "cfgOptional";
  artLabelStrings[ARTL_ART_cfgOptional] = "cfgOptional";
  artKindOfs[ARTL_ART_cfgOptional] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_cfgOptional_758] = "cfgOptional ::= . '?'  ";
  artLabelStrings[ARTL_ART_cfgOptional_758] = "";
  artlhsL[ARTL_ART_cfgOptional_758] = ARTL_ART_cfgOptional;
  artKindOfs[ARTL_ART_cfgOptional_758] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_cfgOptional_758] = true;
  artFolds[ARTL_ART_cfgOptional_760] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_cfgOptional_759] = "cfgOptional ::= '?'  ";
  artLabelStrings[ARTL_ART_cfgOptional_759] = "";
  artlhsL[ARTL_ART_cfgOptional_759] = ARTL_ART_cfgOptional;
  artPopD[ARTL_ART_cfgOptional_759] = true;
  artLabelInternalStrings[ARTL_ART_cfgOptional_760] = "cfgOptional ::= '?'  .";
  artLabelStrings[ARTL_ART_cfgOptional_760] = "";
  artlhsL[ARTL_ART_cfgOptional_760] = ARTL_ART_cfgOptional;
  artKindOfs[ARTL_ART_cfgOptional_760] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgOptional_760] = true;
  arteoR_pL[ARTL_ART_cfgOptional_760] = true;
  artPopD[ARTL_ART_cfgOptional_760] = true;
}

public void artTableInitialiser_ART_cfgPositiveClosure() {
  artLabelInternalStrings[ARTL_ART_cfgPositiveClosure] = "cfgPositiveClosure";
  artLabelStrings[ARTL_ART_cfgPositiveClosure] = "cfgPositiveClosure";
  artKindOfs[ARTL_ART_cfgPositiveClosure] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_cfgPositiveClosure_754] = "cfgPositiveClosure ::= . '+'  ";
  artLabelStrings[ARTL_ART_cfgPositiveClosure_754] = "";
  artlhsL[ARTL_ART_cfgPositiveClosure_754] = ARTL_ART_cfgPositiveClosure;
  artKindOfs[ARTL_ART_cfgPositiveClosure_754] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_cfgPositiveClosure_754] = true;
  artFolds[ARTL_ART_cfgPositiveClosure_756] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_cfgPositiveClosure_755] = "cfgPositiveClosure ::= '+'  ";
  artLabelStrings[ARTL_ART_cfgPositiveClosure_755] = "";
  artlhsL[ARTL_ART_cfgPositiveClosure_755] = ARTL_ART_cfgPositiveClosure;
  artPopD[ARTL_ART_cfgPositiveClosure_755] = true;
  artLabelInternalStrings[ARTL_ART_cfgPositiveClosure_756] = "cfgPositiveClosure ::= '+'  .";
  artLabelStrings[ARTL_ART_cfgPositiveClosure_756] = "";
  artlhsL[ARTL_ART_cfgPositiveClosure_756] = ARTL_ART_cfgPositiveClosure;
  artKindOfs[ARTL_ART_cfgPositiveClosure_756] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgPositiveClosure_756] = true;
  arteoR_pL[ARTL_ART_cfgPositiveClosure_756] = true;
  artPopD[ARTL_ART_cfgPositiveClosure_756] = true;
}

public void artTableInitialiser_ART_cfgRHS() {
  artLabelInternalStrings[ARTL_ART_cfgRHS] = "cfgRHS";
  artLabelStrings[ARTL_ART_cfgRHS] = "cfgRHS";
  artKindOfs[ARTL_ART_cfgRHS] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_cfgRHS_636] = "cfgRHS ::= . cfgCat ";
  artLabelStrings[ARTL_ART_cfgRHS_636] = "";
  artlhsL[ARTL_ART_cfgRHS_636] = ARTL_ART_cfgRHS;
  artKindOfs[ARTL_ART_cfgRHS_636] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_cfgRHS_638] = "cfgRHS ::= cfgCat .";
  artLabelStrings[ARTL_ART_cfgRHS_638] = "";
  artlhsL[ARTL_ART_cfgRHS_638] = ARTL_ART_cfgRHS;
  artSlotInstanceOfs[ARTL_ART_cfgRHS_638] = ARTL_ART_cfgCat;
  artKindOfs[ARTL_ART_cfgRHS_638] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgRHS_638] = true;
  arteoR_pL[ARTL_ART_cfgRHS_638] = true;
  artPopD[ARTL_ART_cfgRHS_638] = true;
  artLabelInternalStrings[ARTL_ART_cfgRHS_640] = "cfgRHS ::= . cfgCat '|'  cfgRHS ";
  artLabelStrings[ARTL_ART_cfgRHS_640] = "";
  artlhsL[ARTL_ART_cfgRHS_640] = ARTL_ART_cfgRHS;
  artKindOfs[ARTL_ART_cfgRHS_640] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_cfgRHS_642] = "cfgRHS ::= cfgCat . '|'  cfgRHS ";
  artLabelStrings[ARTL_ART_cfgRHS_642] = "";
  artlhsL[ARTL_ART_cfgRHS_642] = ARTL_ART_cfgRHS;
  artSlotInstanceOfs[ARTL_ART_cfgRHS_642] = ARTL_ART_cfgCat;
  artKindOfs[ARTL_ART_cfgRHS_642] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_cfgRHS_642] = true;
  artFolds[ARTL_ART_cfgRHS_644] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_cfgRHS_643] = "cfgRHS ::= cfgCat '|'  cfgRHS ";
  artLabelStrings[ARTL_ART_cfgRHS_643] = "";
  artlhsL[ARTL_ART_cfgRHS_643] = ARTL_ART_cfgRHS;
  artLabelInternalStrings[ARTL_ART_cfgRHS_644] = "cfgRHS ::= cfgCat '|'  . cfgRHS ";
  artLabelStrings[ARTL_ART_cfgRHS_644] = "";
  artlhsL[ARTL_ART_cfgRHS_644] = ARTL_ART_cfgRHS;
  artKindOfs[ARTL_ART_cfgRHS_644] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_cfgRHS_646] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_cfgRHS_646] = "cfgRHS ::= cfgCat '|'  cfgRHS .";
  artLabelStrings[ARTL_ART_cfgRHS_646] = "";
  artlhsL[ARTL_ART_cfgRHS_646] = ARTL_ART_cfgRHS;
  artSlotInstanceOfs[ARTL_ART_cfgRHS_646] = ARTL_ART_cfgRHS;
  artKindOfs[ARTL_ART_cfgRHS_646] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgRHS_646] = true;
  arteoR_pL[ARTL_ART_cfgRHS_646] = true;
  artPopD[ARTL_ART_cfgRHS_646] = true;
}

public void artTableInitialiser_ART_cfgRule() {
  artLabelInternalStrings[ARTL_ART_cfgRule] = "cfgRule";
  artLabelStrings[ARTL_ART_cfgRule] = "cfgRule";
  artKindOfs[ARTL_ART_cfgRule] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_cfgRule_28] = "cfgRule ::= . cfgNonterminal '::='  cfgRHS ";
  artLabelStrings[ARTL_ART_cfgRule_28] = "";
  artlhsL[ARTL_ART_cfgRule_28] = ARTL_ART_cfgRule;
  artKindOfs[ARTL_ART_cfgRule_28] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_cfgRule_30] = "cfgRule ::= cfgNonterminal . '::='  cfgRHS ";
  artLabelStrings[ARTL_ART_cfgRule_30] = "";
  artlhsL[ARTL_ART_cfgRule_30] = ARTL_ART_cfgRule;
  artSlotInstanceOfs[ARTL_ART_cfgRule_30] = ARTL_ART_cfgNonterminal;
  artKindOfs[ARTL_ART_cfgRule_30] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_cfgRule_30] = true;
  artFolds[ARTL_ART_cfgRule_32] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_cfgRule_31] = "cfgRule ::= cfgNonterminal '::='  cfgRHS ";
  artLabelStrings[ARTL_ART_cfgRule_31] = "";
  artlhsL[ARTL_ART_cfgRule_31] = ARTL_ART_cfgRule;
  artLabelInternalStrings[ARTL_ART_cfgRule_32] = "cfgRule ::= cfgNonterminal '::='  . cfgRHS ";
  artLabelStrings[ARTL_ART_cfgRule_32] = "";
  artlhsL[ARTL_ART_cfgRule_32] = ARTL_ART_cfgRule;
  artKindOfs[ARTL_ART_cfgRule_32] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_cfgRule_34] = "cfgRule ::= cfgNonterminal '::='  cfgRHS .";
  artLabelStrings[ARTL_ART_cfgRule_34] = "";
  artlhsL[ARTL_ART_cfgRule_34] = ARTL_ART_cfgRule;
  artSlotInstanceOfs[ARTL_ART_cfgRule_34] = ARTL_ART_cfgRHS;
  artKindOfs[ARTL_ART_cfgRule_34] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgRule_34] = true;
  arteoR_pL[ARTL_ART_cfgRule_34] = true;
  artPopD[ARTL_ART_cfgRule_34] = true;
}

public void artTableInitialiser_ART_cfgSlot() {
  artLabelInternalStrings[ARTL_ART_cfgSlot] = "cfgSlot";
  artLabelStrings[ARTL_ART_cfgSlot] = "cfgSlot";
  artKindOfs[ARTL_ART_cfgSlot] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_cfgSlot_678] = "cfgSlot ::= . # ";
  artLabelStrings[ARTL_ART_cfgSlot_678] = "";
  artlhsL[ARTL_ART_cfgSlot_678] = ARTL_ART_cfgSlot;
  artKindOfs[ARTL_ART_cfgSlot_678] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_cfgSlot_678] = true;
  artFolds[ARTL_ART_cfgSlot_680] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_cfgSlot_680] = "cfgSlot ::= # .";
  artLabelStrings[ARTL_ART_cfgSlot_680] = "";
  artlhsL[ARTL_ART_cfgSlot_680] = ARTL_ART_cfgSlot;
  artKindOfs[ARTL_ART_cfgSlot_680] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgSlot_680] = true;
  arteoR_pL[ARTL_ART_cfgSlot_680] = true;
  artPopD[ARTL_ART_cfgSlot_680] = true;
  artLabelInternalStrings[ARTL_ART_cfgSlot_682] = "cfgSlot ::= . cfgAttributeEquation ";
  artLabelStrings[ARTL_ART_cfgSlot_682] = "";
  artlhsL[ARTL_ART_cfgSlot_682] = ARTL_ART_cfgSlot;
  artKindOfs[ARTL_ART_cfgSlot_682] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_cfgSlot_684] = "cfgSlot ::= cfgAttributeEquation .";
  artLabelStrings[ARTL_ART_cfgSlot_684] = "";
  artlhsL[ARTL_ART_cfgSlot_684] = ARTL_ART_cfgSlot;
  artSlotInstanceOfs[ARTL_ART_cfgSlot_684] = ARTL_ART_cfgAttributeEquation;
  artKindOfs[ARTL_ART_cfgSlot_684] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgSlot_684] = true;
  arteoR_pL[ARTL_ART_cfgSlot_684] = true;
  artPopD[ARTL_ART_cfgSlot_684] = true;
  artLabelInternalStrings[ARTL_ART_cfgSlot_686] = "cfgSlot ::= . cfgNativeAction ";
  artLabelStrings[ARTL_ART_cfgSlot_686] = "";
  artlhsL[ARTL_ART_cfgSlot_686] = ARTL_ART_cfgSlot;
  artKindOfs[ARTL_ART_cfgSlot_686] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_cfgSlot_688] = "cfgSlot ::= cfgNativeAction .";
  artLabelStrings[ARTL_ART_cfgSlot_688] = "";
  artlhsL[ARTL_ART_cfgSlot_688] = ARTL_ART_cfgSlot;
  artSlotInstanceOfs[ARTL_ART_cfgSlot_688] = ARTL_ART_cfgNativeAction;
  artKindOfs[ARTL_ART_cfgSlot_688] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgSlot_688] = true;
  arteoR_pL[ARTL_ART_cfgSlot_688] = true;
  artPopD[ARTL_ART_cfgSlot_688] = true;
}

public void artTableInitialiser_ART_cfgSlotSymbol() {
  artLabelInternalStrings[ARTL_ART_cfgSlotSymbol] = "cfgSlotSymbol";
  artLabelStrings[ARTL_ART_cfgSlotSymbol] = "cfgSlotSymbol";
  artKindOfs[ARTL_ART_cfgSlotSymbol] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_cfgSlotSymbol_940] = "cfgSlotSymbol ::= . '.'  ";
  artLabelStrings[ARTL_ART_cfgSlotSymbol_940] = "";
  artlhsL[ARTL_ART_cfgSlotSymbol_940] = ARTL_ART_cfgSlotSymbol;
  artKindOfs[ARTL_ART_cfgSlotSymbol_940] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_cfgSlotSymbol_940] = true;
  artLabelInternalStrings[ARTL_ART_cfgSlotSymbol_941] = "cfgSlotSymbol ::= '.'  ";
  artLabelStrings[ARTL_ART_cfgSlotSymbol_941] = "";
  artlhsL[ARTL_ART_cfgSlotSymbol_941] = ARTL_ART_cfgSlotSymbol;
  artPopD[ARTL_ART_cfgSlotSymbol_941] = true;
  artLabelInternalStrings[ARTL_ART_cfgSlotSymbol_942] = "cfgSlotSymbol ::= '.'  .";
  artLabelStrings[ARTL_ART_cfgSlotSymbol_942] = "";
  artlhsL[ARTL_ART_cfgSlotSymbol_942] = ARTL_ART_cfgSlotSymbol;
  artKindOfs[ARTL_ART_cfgSlotSymbol_942] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgSlotSymbol_942] = true;
  arteoR_pL[ARTL_ART_cfgSlotSymbol_942] = true;
  artPopD[ARTL_ART_cfgSlotSymbol_942] = true;
}

public void artTableInitialiser_ART_cfgTear() {
  artLabelInternalStrings[ARTL_ART_cfgTear] = "cfgTear";
  artLabelStrings[ARTL_ART_cfgTear] = "cfgTear";
  artKindOfs[ARTL_ART_cfgTear] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_cfgTear_1002] = "cfgTear ::= . '^-'  ID ";
  artLabelStrings[ARTL_ART_cfgTear_1002] = "";
  artlhsL[ARTL_ART_cfgTear_1002] = ARTL_ART_cfgTear;
  artKindOfs[ARTL_ART_cfgTear_1002] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_cfgTear_1004] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_cfgTear_1003] = "cfgTear ::= '^-'  ID ";
  artLabelStrings[ARTL_ART_cfgTear_1003] = "";
  artlhsL[ARTL_ART_cfgTear_1003] = ARTL_ART_cfgTear;
  artLabelInternalStrings[ARTL_ART_cfgTear_1004] = "cfgTear ::= '^-'  . ID ";
  artLabelStrings[ARTL_ART_cfgTear_1004] = "";
  artlhsL[ARTL_ART_cfgTear_1004] = ARTL_ART_cfgTear;
  artKindOfs[ARTL_ART_cfgTear_1004] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_cfgTear_1004] = true;
  artLabelInternalStrings[ARTL_ART_cfgTear_1006] = "cfgTear ::= '^-'  ID .";
  artLabelStrings[ARTL_ART_cfgTear_1006] = "";
  artlhsL[ARTL_ART_cfgTear_1006] = ARTL_ART_cfgTear;
  artSlotInstanceOfs[ARTL_ART_cfgTear_1006] = ARTL_ART_ID;
  artKindOfs[ARTL_ART_cfgTear_1006] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgTear_1006] = true;
  arteoR_pL[ARTL_ART_cfgTear_1006] = true;
  artPopD[ARTL_ART_cfgTear_1006] = true;
}

public void artTableInitialiser_ART_cfgUnion() {
  artLabelInternalStrings[ARTL_ART_cfgUnion] = "cfgUnion";
  artLabelStrings[ARTL_ART_cfgUnion] = "cfgUnion";
  artKindOfs[ARTL_ART_cfgUnion] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_cfgUnion_774] = "cfgUnion ::= . cfgNot ";
  artLabelStrings[ARTL_ART_cfgUnion_774] = "";
  artlhsL[ARTL_ART_cfgUnion_774] = ARTL_ART_cfgUnion;
  artKindOfs[ARTL_ART_cfgUnion_774] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_cfgUnion_776] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_cfgUnion_776] = "cfgUnion ::= cfgNot .";
  artLabelStrings[ARTL_ART_cfgUnion_776] = "";
  artlhsL[ARTL_ART_cfgUnion_776] = ARTL_ART_cfgUnion;
  artSlotInstanceOfs[ARTL_ART_cfgUnion_776] = ARTL_ART_cfgNot;
  artKindOfs[ARTL_ART_cfgUnion_776] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgUnion_776] = true;
  arteoR_pL[ARTL_ART_cfgUnion_776] = true;
  artPopD[ARTL_ART_cfgUnion_776] = true;
  artLabelInternalStrings[ARTL_ART_cfgUnion_778] = "cfgUnion ::= . cfgUnion '||'  cfgNot ";
  artLabelStrings[ARTL_ART_cfgUnion_778] = "";
  artlhsL[ARTL_ART_cfgUnion_778] = ARTL_ART_cfgUnion;
  artKindOfs[ARTL_ART_cfgUnion_778] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_cfgUnion_780] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_cfgUnion_780] = "cfgUnion ::= cfgUnion . '||'  cfgNot ";
  artLabelStrings[ARTL_ART_cfgUnion_780] = "";
  artlhsL[ARTL_ART_cfgUnion_780] = ARTL_ART_cfgUnion;
  artSlotInstanceOfs[ARTL_ART_cfgUnion_780] = ARTL_ART_cfgUnion;
  artKindOfs[ARTL_ART_cfgUnion_780] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_cfgUnion_780] = true;
  artFolds[ARTL_ART_cfgUnion_782] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_cfgUnion_781] = "cfgUnion ::= cfgUnion '||'  cfgNot ";
  artLabelStrings[ARTL_ART_cfgUnion_781] = "";
  artlhsL[ARTL_ART_cfgUnion_781] = ARTL_ART_cfgUnion;
  artLabelInternalStrings[ARTL_ART_cfgUnion_782] = "cfgUnion ::= cfgUnion '||'  . cfgNot ";
  artLabelStrings[ARTL_ART_cfgUnion_782] = "";
  artlhsL[ARTL_ART_cfgUnion_782] = ARTL_ART_cfgUnion;
  artKindOfs[ARTL_ART_cfgUnion_782] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_cfgUnion_784] = "cfgUnion ::= cfgUnion '||'  cfgNot .";
  artLabelStrings[ARTL_ART_cfgUnion_784] = "";
  artlhsL[ARTL_ART_cfgUnion_784] = ARTL_ART_cfgUnion;
  artSlotInstanceOfs[ARTL_ART_cfgUnion_784] = ARTL_ART_cfgNot;
  artKindOfs[ARTL_ART_cfgUnion_784] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_cfgUnion_784] = true;
  arteoR_pL[ARTL_ART_cfgUnion_784] = true;
  artPopD[ARTL_ART_cfgUnion_784] = true;
}

public void artTableInitialiser_ART_chooseDiff() {
  artLabelInternalStrings[ARTL_ART_chooseDiff] = "chooseDiff";
  artLabelStrings[ARTL_ART_chooseDiff] = "chooseDiff";
  artKindOfs[ARTL_ART_chooseDiff] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_chooseDiff_1284] = "chooseDiff ::= . chooseUnionIntersection ";
  artLabelStrings[ARTL_ART_chooseDiff_1284] = "";
  artlhsL[ARTL_ART_chooseDiff_1284] = ARTL_ART_chooseDiff;
  artKindOfs[ARTL_ART_chooseDiff_1284] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_chooseDiff_1286] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_chooseDiff_1286] = "chooseDiff ::= chooseUnionIntersection .";
  artLabelStrings[ARTL_ART_chooseDiff_1286] = "";
  artlhsL[ARTL_ART_chooseDiff_1286] = ARTL_ART_chooseDiff;
  artSlotInstanceOfs[ARTL_ART_chooseDiff_1286] = ARTL_ART_chooseUnionIntersection;
  artKindOfs[ARTL_ART_chooseDiff_1286] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_chooseDiff_1286] = true;
  arteoR_pL[ARTL_ART_chooseDiff_1286] = true;
  artPopD[ARTL_ART_chooseDiff_1286] = true;
  artLabelInternalStrings[ARTL_ART_chooseDiff_1288] = "chooseDiff ::= . chooseDiff '\\'  chooseUnionIntersection ";
  artLabelStrings[ARTL_ART_chooseDiff_1288] = "";
  artlhsL[ARTL_ART_chooseDiff_1288] = ARTL_ART_chooseDiff;
  artKindOfs[ARTL_ART_chooseDiff_1288] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_chooseDiff_1290] = "chooseDiff ::= chooseDiff . '\\'  chooseUnionIntersection ";
  artLabelStrings[ARTL_ART_chooseDiff_1290] = "";
  artlhsL[ARTL_ART_chooseDiff_1290] = ARTL_ART_chooseDiff;
  artSlotInstanceOfs[ARTL_ART_chooseDiff_1290] = ARTL_ART_chooseDiff;
  artKindOfs[ARTL_ART_chooseDiff_1290] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_chooseDiff_1290] = true;
  artFolds[ARTL_ART_chooseDiff_1292] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_chooseDiff_1291] = "chooseDiff ::= chooseDiff '\\'  chooseUnionIntersection ";
  artLabelStrings[ARTL_ART_chooseDiff_1291] = "";
  artlhsL[ARTL_ART_chooseDiff_1291] = ARTL_ART_chooseDiff;
  artLabelInternalStrings[ARTL_ART_chooseDiff_1292] = "chooseDiff ::= chooseDiff '\\'  . chooseUnionIntersection ";
  artLabelStrings[ARTL_ART_chooseDiff_1292] = "";
  artlhsL[ARTL_ART_chooseDiff_1292] = ARTL_ART_chooseDiff;
  artKindOfs[ARTL_ART_chooseDiff_1292] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_chooseDiff_1294] = "chooseDiff ::= chooseDiff '\\'  chooseUnionIntersection .";
  artLabelStrings[ARTL_ART_chooseDiff_1294] = "";
  artlhsL[ARTL_ART_chooseDiff_1294] = ARTL_ART_chooseDiff;
  artSlotInstanceOfs[ARTL_ART_chooseDiff_1294] = ARTL_ART_chooseUnionIntersection;
  artKindOfs[ARTL_ART_chooseDiff_1294] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_chooseDiff_1294] = true;
  arteoR_pL[ARTL_ART_chooseDiff_1294] = true;
  artPopD[ARTL_ART_chooseDiff_1294] = true;
}

public void artTableInitialiser_ART_chooseElement() {
  artLabelInternalStrings[ARTL_ART_chooseElement] = "chooseElement";
  artLabelStrings[ARTL_ART_chooseElement] = "chooseElement";
  artKindOfs[ARTL_ART_chooseElement] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_chooseElement_1332] = "chooseElement ::= . cfgNonterminal ";
  artLabelStrings[ARTL_ART_chooseElement_1332] = "";
  artlhsL[ARTL_ART_chooseElement_1332] = ARTL_ART_chooseElement;
  artKindOfs[ARTL_ART_chooseElement_1332] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_chooseElement_1334] = "chooseElement ::= cfgNonterminal .";
  artLabelStrings[ARTL_ART_chooseElement_1334] = "";
  artlhsL[ARTL_ART_chooseElement_1334] = ARTL_ART_chooseElement;
  artSlotInstanceOfs[ARTL_ART_chooseElement_1334] = ARTL_ART_cfgNonterminal;
  artKindOfs[ARTL_ART_chooseElement_1334] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_chooseElement_1334] = true;
  arteoR_pL[ARTL_ART_chooseElement_1334] = true;
  artPopD[ARTL_ART_chooseElement_1334] = true;
  artLabelInternalStrings[ARTL_ART_chooseElement_1336] = "chooseElement ::= . cfgCharacterTerminal ";
  artLabelStrings[ARTL_ART_chooseElement_1336] = "";
  artlhsL[ARTL_ART_chooseElement_1336] = ARTL_ART_chooseElement;
  artKindOfs[ARTL_ART_chooseElement_1336] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_chooseElement_1338] = "chooseElement ::= cfgCharacterTerminal .";
  artLabelStrings[ARTL_ART_chooseElement_1338] = "";
  artlhsL[ARTL_ART_chooseElement_1338] = ARTL_ART_chooseElement;
  artSlotInstanceOfs[ARTL_ART_chooseElement_1338] = ARTL_ART_cfgCharacterTerminal;
  artKindOfs[ARTL_ART_chooseElement_1338] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_chooseElement_1338] = true;
  arteoR_pL[ARTL_ART_chooseElement_1338] = true;
  artPopD[ARTL_ART_chooseElement_1338] = true;
  artLabelInternalStrings[ARTL_ART_chooseElement_1340] = "chooseElement ::= . cfgBuiltinTerminal ";
  artLabelStrings[ARTL_ART_chooseElement_1340] = "";
  artlhsL[ARTL_ART_chooseElement_1340] = ARTL_ART_chooseElement;
  artKindOfs[ARTL_ART_chooseElement_1340] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_chooseElement_1342] = "chooseElement ::= cfgBuiltinTerminal .";
  artLabelStrings[ARTL_ART_chooseElement_1342] = "";
  artlhsL[ARTL_ART_chooseElement_1342] = ARTL_ART_chooseElement;
  artSlotInstanceOfs[ARTL_ART_chooseElement_1342] = ARTL_ART_cfgBuiltinTerminal;
  artKindOfs[ARTL_ART_chooseElement_1342] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_chooseElement_1342] = true;
  arteoR_pL[ARTL_ART_chooseElement_1342] = true;
  artPopD[ARTL_ART_chooseElement_1342] = true;
  artLabelInternalStrings[ARTL_ART_chooseElement_1344] = "chooseElement ::= . cfgCaseInsensitiveTerminal ";
  artLabelStrings[ARTL_ART_chooseElement_1344] = "";
  artlhsL[ARTL_ART_chooseElement_1344] = ARTL_ART_chooseElement;
  artKindOfs[ARTL_ART_chooseElement_1344] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_chooseElement_1346] = "chooseElement ::= cfgCaseInsensitiveTerminal .";
  artLabelStrings[ARTL_ART_chooseElement_1346] = "";
  artlhsL[ARTL_ART_chooseElement_1346] = ARTL_ART_chooseElement;
  artSlotInstanceOfs[ARTL_ART_chooseElement_1346] = ARTL_ART_cfgCaseInsensitiveTerminal;
  artKindOfs[ARTL_ART_chooseElement_1346] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_chooseElement_1346] = true;
  arteoR_pL[ARTL_ART_chooseElement_1346] = true;
  artPopD[ARTL_ART_chooseElement_1346] = true;
  artLabelInternalStrings[ARTL_ART_chooseElement_1348] = "chooseElement ::= . cfgCaseSensitiveTerminal ";
  artLabelStrings[ARTL_ART_chooseElement_1348] = "";
  artlhsL[ARTL_ART_chooseElement_1348] = ARTL_ART_chooseElement;
  artKindOfs[ARTL_ART_chooseElement_1348] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_chooseElement_1350] = "chooseElement ::= cfgCaseSensitiveTerminal .";
  artLabelStrings[ARTL_ART_chooseElement_1350] = "";
  artlhsL[ARTL_ART_chooseElement_1350] = ARTL_ART_chooseElement;
  artSlotInstanceOfs[ARTL_ART_chooseElement_1350] = ARTL_ART_cfgCaseSensitiveTerminal;
  artKindOfs[ARTL_ART_chooseElement_1350] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_chooseElement_1350] = true;
  arteoR_pL[ARTL_ART_chooseElement_1350] = true;
  artPopD[ARTL_ART_chooseElement_1350] = true;
  artLabelInternalStrings[ARTL_ART_chooseElement_1352] = "chooseElement ::= . choosePredefinedSet ";
  artLabelStrings[ARTL_ART_chooseElement_1352] = "";
  artlhsL[ARTL_ART_chooseElement_1352] = ARTL_ART_chooseElement;
  artKindOfs[ARTL_ART_chooseElement_1352] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_chooseElement_1354] = "chooseElement ::= choosePredefinedSet .";
  artLabelStrings[ARTL_ART_chooseElement_1354] = "";
  artlhsL[ARTL_ART_chooseElement_1354] = ARTL_ART_chooseElement;
  artSlotInstanceOfs[ARTL_ART_chooseElement_1354] = ARTL_ART_choosePredefinedSet;
  artKindOfs[ARTL_ART_chooseElement_1354] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_chooseElement_1354] = true;
  arteoR_pL[ARTL_ART_chooseElement_1354] = true;
  artPopD[ARTL_ART_chooseElement_1354] = true;
  artLabelInternalStrings[ARTL_ART_chooseElement_1356] = "chooseElement ::= . '('  chooseDiff ')'  ";
  artLabelStrings[ARTL_ART_chooseElement_1356] = "";
  artlhsL[ARTL_ART_chooseElement_1356] = ARTL_ART_chooseElement;
  artKindOfs[ARTL_ART_chooseElement_1356] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_chooseElement_1358] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_chooseElement_1357] = "chooseElement ::= '('  chooseDiff ')'  ";
  artLabelStrings[ARTL_ART_chooseElement_1357] = "";
  artlhsL[ARTL_ART_chooseElement_1357] = ARTL_ART_chooseElement;
  artLabelInternalStrings[ARTL_ART_chooseElement_1358] = "chooseElement ::= '('  . chooseDiff ')'  ";
  artLabelStrings[ARTL_ART_chooseElement_1358] = "";
  artlhsL[ARTL_ART_chooseElement_1358] = ARTL_ART_chooseElement;
  artKindOfs[ARTL_ART_chooseElement_1358] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_chooseElement_1358] = true;
  artLabelInternalStrings[ARTL_ART_chooseElement_1360] = "chooseElement ::= '('  chooseDiff . ')'  ";
  artLabelStrings[ARTL_ART_chooseElement_1360] = "";
  artlhsL[ARTL_ART_chooseElement_1360] = ARTL_ART_chooseElement;
  artSlotInstanceOfs[ARTL_ART_chooseElement_1360] = ARTL_ART_chooseDiff;
  artKindOfs[ARTL_ART_chooseElement_1360] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_chooseElement_1360] = true;
  artFolds[ARTL_ART_chooseElement_1362] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_chooseElement_1361] = "chooseElement ::= '('  chooseDiff ')'  ";
  artLabelStrings[ARTL_ART_chooseElement_1361] = "";
  artlhsL[ARTL_ART_chooseElement_1361] = ARTL_ART_chooseElement;
  artPopD[ARTL_ART_chooseElement_1361] = true;
  artLabelInternalStrings[ARTL_ART_chooseElement_1362] = "chooseElement ::= '('  chooseDiff ')'  .";
  artLabelStrings[ARTL_ART_chooseElement_1362] = "";
  artlhsL[ARTL_ART_chooseElement_1362] = ARTL_ART_chooseElement;
  artKindOfs[ARTL_ART_chooseElement_1362] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_chooseElement_1362] = true;
  arteoR_pL[ARTL_ART_chooseElement_1362] = true;
  artPopD[ARTL_ART_chooseElement_1362] = true;
}

public void artTableInitialiser_ART_chooseHigher() {
  artLabelInternalStrings[ARTL_ART_chooseHigher] = "chooseHigher";
  artLabelStrings[ARTL_ART_chooseHigher] = "chooseHigher";
  artKindOfs[ARTL_ART_chooseHigher] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_chooseHigher_1404] = "chooseHigher ::= . '>'  ";
  artLabelStrings[ARTL_ART_chooseHigher_1404] = "";
  artlhsL[ARTL_ART_chooseHigher_1404] = ARTL_ART_chooseHigher;
  artKindOfs[ARTL_ART_chooseHigher_1404] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_chooseHigher_1404] = true;
  artFolds[ARTL_ART_chooseHigher_1406] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_chooseHigher_1405] = "chooseHigher ::= '>'  ";
  artLabelStrings[ARTL_ART_chooseHigher_1405] = "";
  artlhsL[ARTL_ART_chooseHigher_1405] = ARTL_ART_chooseHigher;
  artPopD[ARTL_ART_chooseHigher_1405] = true;
  artLabelInternalStrings[ARTL_ART_chooseHigher_1406] = "chooseHigher ::= '>'  .";
  artLabelStrings[ARTL_ART_chooseHigher_1406] = "";
  artlhsL[ARTL_ART_chooseHigher_1406] = ARTL_ART_chooseHigher;
  artKindOfs[ARTL_ART_chooseHigher_1406] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_chooseHigher_1406] = true;
  arteoR_pL[ARTL_ART_chooseHigher_1406] = true;
  artPopD[ARTL_ART_chooseHigher_1406] = true;
}

public void artTableInitialiser_ART_chooseIntersection() {
  artLabelInternalStrings[ARTL_ART_chooseIntersection] = "chooseIntersection";
  artLabelStrings[ARTL_ART_chooseIntersection] = "chooseIntersection";
  artKindOfs[ARTL_ART_chooseIntersection] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_chooseIntersection_1368] = "chooseIntersection ::= . '/'  ";
  artLabelStrings[ARTL_ART_chooseIntersection_1368] = "";
  artlhsL[ARTL_ART_chooseIntersection_1368] = ARTL_ART_chooseIntersection;
  artKindOfs[ARTL_ART_chooseIntersection_1368] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_chooseIntersection_1368] = true;
  artFolds[ARTL_ART_chooseIntersection_1370] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_chooseIntersection_1369] = "chooseIntersection ::= '/'  ";
  artLabelStrings[ARTL_ART_chooseIntersection_1369] = "";
  artlhsL[ARTL_ART_chooseIntersection_1369] = ARTL_ART_chooseIntersection;
  artPopD[ARTL_ART_chooseIntersection_1369] = true;
  artLabelInternalStrings[ARTL_ART_chooseIntersection_1370] = "chooseIntersection ::= '/'  .";
  artLabelStrings[ARTL_ART_chooseIntersection_1370] = "";
  artlhsL[ARTL_ART_chooseIntersection_1370] = ARTL_ART_chooseIntersection;
  artKindOfs[ARTL_ART_chooseIntersection_1370] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_chooseIntersection_1370] = true;
  arteoR_pL[ARTL_ART_chooseIntersection_1370] = true;
  artPopD[ARTL_ART_chooseIntersection_1370] = true;
}

public void artTableInitialiser_ART_chooseLonger() {
  artLabelInternalStrings[ARTL_ART_chooseLonger] = "chooseLonger";
  artLabelStrings[ARTL_ART_chooseLonger] = "chooseLonger";
  artKindOfs[ARTL_ART_chooseLonger] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_chooseLonger_1412] = "chooseLonger ::= . '>>'  ";
  artLabelStrings[ARTL_ART_chooseLonger_1412] = "";
  artlhsL[ARTL_ART_chooseLonger_1412] = ARTL_ART_chooseLonger;
  artKindOfs[ARTL_ART_chooseLonger_1412] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_chooseLonger_1412] = true;
  artFolds[ARTL_ART_chooseLonger_1414] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_chooseLonger_1413] = "chooseLonger ::= '>>'  ";
  artLabelStrings[ARTL_ART_chooseLonger_1413] = "";
  artlhsL[ARTL_ART_chooseLonger_1413] = ARTL_ART_chooseLonger;
  artPopD[ARTL_ART_chooseLonger_1413] = true;
  artLabelInternalStrings[ARTL_ART_chooseLonger_1414] = "chooseLonger ::= '>>'  .";
  artLabelStrings[ARTL_ART_chooseLonger_1414] = "";
  artlhsL[ARTL_ART_chooseLonger_1414] = ARTL_ART_chooseLonger;
  artKindOfs[ARTL_ART_chooseLonger_1414] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_chooseLonger_1414] = true;
  arteoR_pL[ARTL_ART_chooseLonger_1414] = true;
  artPopD[ARTL_ART_chooseLonger_1414] = true;
}

public void artTableInitialiser_ART_chooseLower() {
  artLabelInternalStrings[ARTL_ART_chooseLower] = "chooseLower";
  artLabelStrings[ARTL_ART_chooseLower] = "chooseLower";
  artKindOfs[ARTL_ART_chooseLower] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_chooseLower_1408] = "chooseLower ::= . '<'  ";
  artLabelStrings[ARTL_ART_chooseLower_1408] = "";
  artlhsL[ARTL_ART_chooseLower_1408] = ARTL_ART_chooseLower;
  artKindOfs[ARTL_ART_chooseLower_1408] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_chooseLower_1408] = true;
  artFolds[ARTL_ART_chooseLower_1410] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_chooseLower_1409] = "chooseLower ::= '<'  ";
  artLabelStrings[ARTL_ART_chooseLower_1409] = "";
  artlhsL[ARTL_ART_chooseLower_1409] = ARTL_ART_chooseLower;
  artPopD[ARTL_ART_chooseLower_1409] = true;
  artLabelInternalStrings[ARTL_ART_chooseLower_1410] = "chooseLower ::= '<'  .";
  artLabelStrings[ARTL_ART_chooseLower_1410] = "";
  artlhsL[ARTL_ART_chooseLower_1410] = ARTL_ART_chooseLower;
  artKindOfs[ARTL_ART_chooseLower_1410] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_chooseLower_1410] = true;
  arteoR_pL[ARTL_ART_chooseLower_1410] = true;
  artPopD[ARTL_ART_chooseLower_1410] = true;
}

public void artTableInitialiser_ART_choosePredefinedSet() {
  artLabelInternalStrings[ARTL_ART_choosePredefinedSet] = "choosePredefinedSet";
  artLabelStrings[ARTL_ART_choosePredefinedSet] = "choosePredefinedSet";
  artKindOfs[ARTL_ART_choosePredefinedSet] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_choosePredefinedSet_1372] = "choosePredefinedSet ::= . 'anyCharacterTerminal'  ";
  artLabelStrings[ARTL_ART_choosePredefinedSet_1372] = "";
  artlhsL[ARTL_ART_choosePredefinedSet_1372] = ARTL_ART_choosePredefinedSet;
  artKindOfs[ARTL_ART_choosePredefinedSet_1372] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_choosePredefinedSet_1372] = true;
  artLabelInternalStrings[ARTL_ART_choosePredefinedSet_1373] = "choosePredefinedSet ::= 'anyCharacterTerminal'  ";
  artLabelStrings[ARTL_ART_choosePredefinedSet_1373] = "";
  artlhsL[ARTL_ART_choosePredefinedSet_1373] = ARTL_ART_choosePredefinedSet;
  artPopD[ARTL_ART_choosePredefinedSet_1373] = true;
  artLabelInternalStrings[ARTL_ART_choosePredefinedSet_1374] = "choosePredefinedSet ::= 'anyCharacterTerminal'  .";
  artLabelStrings[ARTL_ART_choosePredefinedSet_1374] = "";
  artlhsL[ARTL_ART_choosePredefinedSet_1374] = ARTL_ART_choosePredefinedSet;
  artKindOfs[ARTL_ART_choosePredefinedSet_1374] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_choosePredefinedSet_1374] = true;
  arteoR_pL[ARTL_ART_choosePredefinedSet_1374] = true;
  artPopD[ARTL_ART_choosePredefinedSet_1374] = true;
  artLabelInternalStrings[ARTL_ART_choosePredefinedSet_1376] = "choosePredefinedSet ::= . 'anyBuiltinTerminal'  ";
  artLabelStrings[ARTL_ART_choosePredefinedSet_1376] = "";
  artlhsL[ARTL_ART_choosePredefinedSet_1376] = ARTL_ART_choosePredefinedSet;
  artKindOfs[ARTL_ART_choosePredefinedSet_1376] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_choosePredefinedSet_1376] = true;
  artLabelInternalStrings[ARTL_ART_choosePredefinedSet_1377] = "choosePredefinedSet ::= 'anyBuiltinTerminal'  ";
  artLabelStrings[ARTL_ART_choosePredefinedSet_1377] = "";
  artlhsL[ARTL_ART_choosePredefinedSet_1377] = ARTL_ART_choosePredefinedSet;
  artPopD[ARTL_ART_choosePredefinedSet_1377] = true;
  artLabelInternalStrings[ARTL_ART_choosePredefinedSet_1378] = "choosePredefinedSet ::= 'anyBuiltinTerminal'  .";
  artLabelStrings[ARTL_ART_choosePredefinedSet_1378] = "";
  artlhsL[ARTL_ART_choosePredefinedSet_1378] = ARTL_ART_choosePredefinedSet;
  artKindOfs[ARTL_ART_choosePredefinedSet_1378] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_choosePredefinedSet_1378] = true;
  arteoR_pL[ARTL_ART_choosePredefinedSet_1378] = true;
  artPopD[ARTL_ART_choosePredefinedSet_1378] = true;
  artLabelInternalStrings[ARTL_ART_choosePredefinedSet_1380] = "choosePredefinedSet ::= . 'anyCaseSensitiveTerminal'  ";
  artLabelStrings[ARTL_ART_choosePredefinedSet_1380] = "";
  artlhsL[ARTL_ART_choosePredefinedSet_1380] = ARTL_ART_choosePredefinedSet;
  artKindOfs[ARTL_ART_choosePredefinedSet_1380] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_choosePredefinedSet_1380] = true;
  artLabelInternalStrings[ARTL_ART_choosePredefinedSet_1381] = "choosePredefinedSet ::= 'anyCaseSensitiveTerminal'  ";
  artLabelStrings[ARTL_ART_choosePredefinedSet_1381] = "";
  artlhsL[ARTL_ART_choosePredefinedSet_1381] = ARTL_ART_choosePredefinedSet;
  artPopD[ARTL_ART_choosePredefinedSet_1381] = true;
  artLabelInternalStrings[ARTL_ART_choosePredefinedSet_1382] = "choosePredefinedSet ::= 'anyCaseSensitiveTerminal'  .";
  artLabelStrings[ARTL_ART_choosePredefinedSet_1382] = "";
  artlhsL[ARTL_ART_choosePredefinedSet_1382] = ARTL_ART_choosePredefinedSet;
  artKindOfs[ARTL_ART_choosePredefinedSet_1382] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_choosePredefinedSet_1382] = true;
  arteoR_pL[ARTL_ART_choosePredefinedSet_1382] = true;
  artPopD[ARTL_ART_choosePredefinedSet_1382] = true;
  artLabelInternalStrings[ARTL_ART_choosePredefinedSet_1384] = "choosePredefinedSet ::= . 'anyCaseInsensitiveTerminal'  ";
  artLabelStrings[ARTL_ART_choosePredefinedSet_1384] = "";
  artlhsL[ARTL_ART_choosePredefinedSet_1384] = ARTL_ART_choosePredefinedSet;
  artKindOfs[ARTL_ART_choosePredefinedSet_1384] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_choosePredefinedSet_1384] = true;
  artLabelInternalStrings[ARTL_ART_choosePredefinedSet_1385] = "choosePredefinedSet ::= 'anyCaseInsensitiveTerminal'  ";
  artLabelStrings[ARTL_ART_choosePredefinedSet_1385] = "";
  artlhsL[ARTL_ART_choosePredefinedSet_1385] = ARTL_ART_choosePredefinedSet;
  artPopD[ARTL_ART_choosePredefinedSet_1385] = true;
  artLabelInternalStrings[ARTL_ART_choosePredefinedSet_1386] = "choosePredefinedSet ::= 'anyCaseInsensitiveTerminal'  .";
  artLabelStrings[ARTL_ART_choosePredefinedSet_1386] = "";
  artlhsL[ARTL_ART_choosePredefinedSet_1386] = ARTL_ART_choosePredefinedSet;
  artKindOfs[ARTL_ART_choosePredefinedSet_1386] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_choosePredefinedSet_1386] = true;
  arteoR_pL[ARTL_ART_choosePredefinedSet_1386] = true;
  artPopD[ARTL_ART_choosePredefinedSet_1386] = true;
  artLabelInternalStrings[ARTL_ART_choosePredefinedSet_1388] = "choosePredefinedSet ::= . 'anyNonterminal'  ";
  artLabelStrings[ARTL_ART_choosePredefinedSet_1388] = "";
  artlhsL[ARTL_ART_choosePredefinedSet_1388] = ARTL_ART_choosePredefinedSet;
  artKindOfs[ARTL_ART_choosePredefinedSet_1388] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_choosePredefinedSet_1388] = true;
  artLabelInternalStrings[ARTL_ART_choosePredefinedSet_1389] = "choosePredefinedSet ::= 'anyNonterminal'  ";
  artLabelStrings[ARTL_ART_choosePredefinedSet_1389] = "";
  artlhsL[ARTL_ART_choosePredefinedSet_1389] = ARTL_ART_choosePredefinedSet;
  artPopD[ARTL_ART_choosePredefinedSet_1389] = true;
  artLabelInternalStrings[ARTL_ART_choosePredefinedSet_1390] = "choosePredefinedSet ::= 'anyNonterminal'  .";
  artLabelStrings[ARTL_ART_choosePredefinedSet_1390] = "";
  artlhsL[ARTL_ART_choosePredefinedSet_1390] = ARTL_ART_choosePredefinedSet;
  artKindOfs[ARTL_ART_choosePredefinedSet_1390] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_choosePredefinedSet_1390] = true;
  arteoR_pL[ARTL_ART_choosePredefinedSet_1390] = true;
  artPopD[ARTL_ART_choosePredefinedSet_1390] = true;
  artLabelInternalStrings[ARTL_ART_choosePredefinedSet_1392] = "choosePredefinedSet ::= . 'anyParaterminal'  ";
  artLabelStrings[ARTL_ART_choosePredefinedSet_1392] = "";
  artlhsL[ARTL_ART_choosePredefinedSet_1392] = ARTL_ART_choosePredefinedSet;
  artKindOfs[ARTL_ART_choosePredefinedSet_1392] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_choosePredefinedSet_1392] = true;
  artLabelInternalStrings[ARTL_ART_choosePredefinedSet_1393] = "choosePredefinedSet ::= 'anyParaterminal'  ";
  artLabelStrings[ARTL_ART_choosePredefinedSet_1393] = "";
  artlhsL[ARTL_ART_choosePredefinedSet_1393] = ARTL_ART_choosePredefinedSet;
  artPopD[ARTL_ART_choosePredefinedSet_1393] = true;
  artLabelInternalStrings[ARTL_ART_choosePredefinedSet_1394] = "choosePredefinedSet ::= 'anyParaterminal'  .";
  artLabelStrings[ARTL_ART_choosePredefinedSet_1394] = "";
  artlhsL[ARTL_ART_choosePredefinedSet_1394] = ARTL_ART_choosePredefinedSet;
  artKindOfs[ARTL_ART_choosePredefinedSet_1394] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_choosePredefinedSet_1394] = true;
  arteoR_pL[ARTL_ART_choosePredefinedSet_1394] = true;
  artPopD[ARTL_ART_choosePredefinedSet_1394] = true;
  artLabelInternalStrings[ARTL_ART_choosePredefinedSet_1396] = "choosePredefinedSet ::= . 'anyLiteralTerminal'  ";
  artLabelStrings[ARTL_ART_choosePredefinedSet_1396] = "";
  artlhsL[ARTL_ART_choosePredefinedSet_1396] = ARTL_ART_choosePredefinedSet;
  artKindOfs[ARTL_ART_choosePredefinedSet_1396] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_choosePredefinedSet_1396] = true;
  artLabelInternalStrings[ARTL_ART_choosePredefinedSet_1397] = "choosePredefinedSet ::= 'anyLiteralTerminal'  ";
  artLabelStrings[ARTL_ART_choosePredefinedSet_1397] = "";
  artlhsL[ARTL_ART_choosePredefinedSet_1397] = ARTL_ART_choosePredefinedSet;
  artPopD[ARTL_ART_choosePredefinedSet_1397] = true;
  artLabelInternalStrings[ARTL_ART_choosePredefinedSet_1398] = "choosePredefinedSet ::= 'anyLiteralTerminal'  .";
  artLabelStrings[ARTL_ART_choosePredefinedSet_1398] = "";
  artlhsL[ARTL_ART_choosePredefinedSet_1398] = ARTL_ART_choosePredefinedSet;
  artKindOfs[ARTL_ART_choosePredefinedSet_1398] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_choosePredefinedSet_1398] = true;
  arteoR_pL[ARTL_ART_choosePredefinedSet_1398] = true;
  artPopD[ARTL_ART_choosePredefinedSet_1398] = true;
  artLabelInternalStrings[ARTL_ART_choosePredefinedSet_1400] = "choosePredefinedSet ::= . 'anyTerminal'  ";
  artLabelStrings[ARTL_ART_choosePredefinedSet_1400] = "";
  artlhsL[ARTL_ART_choosePredefinedSet_1400] = ARTL_ART_choosePredefinedSet;
  artKindOfs[ARTL_ART_choosePredefinedSet_1400] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_choosePredefinedSet_1400] = true;
  artLabelInternalStrings[ARTL_ART_choosePredefinedSet_1401] = "choosePredefinedSet ::= 'anyTerminal'  ";
  artLabelStrings[ARTL_ART_choosePredefinedSet_1401] = "";
  artlhsL[ARTL_ART_choosePredefinedSet_1401] = ARTL_ART_choosePredefinedSet;
  artPopD[ARTL_ART_choosePredefinedSet_1401] = true;
  artLabelInternalStrings[ARTL_ART_choosePredefinedSet_1402] = "choosePredefinedSet ::= 'anyTerminal'  .";
  artLabelStrings[ARTL_ART_choosePredefinedSet_1402] = "";
  artlhsL[ARTL_ART_choosePredefinedSet_1402] = ARTL_ART_choosePredefinedSet;
  artKindOfs[ARTL_ART_choosePredefinedSet_1402] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_choosePredefinedSet_1402] = true;
  arteoR_pL[ARTL_ART_choosePredefinedSet_1402] = true;
  artPopD[ARTL_ART_choosePredefinedSet_1402] = true;
}

public void artTableInitialiser_ART_chooseRule() {
  artLabelInternalStrings[ARTL_ART_chooseRule] = "chooseRule";
  artLabelStrings[ARTL_ART_chooseRule] = "chooseRule";
  artKindOfs[ARTL_ART_chooseRule] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_chooseRule_42] = "chooseRule ::= . chooseDiff chooserOp chooseDiff ";
  artLabelStrings[ARTL_ART_chooseRule_42] = "";
  artlhsL[ARTL_ART_chooseRule_42] = ARTL_ART_chooseRule;
  artKindOfs[ARTL_ART_chooseRule_42] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_chooseRule_44] = "chooseRule ::= chooseDiff . chooserOp chooseDiff ";
  artLabelStrings[ARTL_ART_chooseRule_44] = "";
  artlhsL[ARTL_ART_chooseRule_44] = ARTL_ART_chooseRule;
  artSlotInstanceOfs[ARTL_ART_chooseRule_44] = ARTL_ART_chooseDiff;
  artKindOfs[ARTL_ART_chooseRule_44] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_chooseRule_44] = true;
  artLabelInternalStrings[ARTL_ART_chooseRule_46] = "chooseRule ::= chooseDiff chooserOp . chooseDiff ";
  artLabelStrings[ARTL_ART_chooseRule_46] = "";
  artlhsL[ARTL_ART_chooseRule_46] = ARTL_ART_chooseRule;
  artSlotInstanceOfs[ARTL_ART_chooseRule_46] = ARTL_ART_chooserOp;
  artKindOfs[ARTL_ART_chooseRule_46] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_chooseRule_48] = "chooseRule ::= chooseDiff chooserOp chooseDiff .";
  artLabelStrings[ARTL_ART_chooseRule_48] = "";
  artlhsL[ARTL_ART_chooseRule_48] = ARTL_ART_chooseRule;
  artSlotInstanceOfs[ARTL_ART_chooseRule_48] = ARTL_ART_chooseDiff;
  artKindOfs[ARTL_ART_chooseRule_48] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_chooseRule_48] = true;
  arteoR_pL[ARTL_ART_chooseRule_48] = true;
  artPopD[ARTL_ART_chooseRule_48] = true;
}

public void artTableInitialiser_ART_chooseShorter() {
  artLabelInternalStrings[ARTL_ART_chooseShorter] = "chooseShorter";
  artLabelStrings[ARTL_ART_chooseShorter] = "chooseShorter";
  artKindOfs[ARTL_ART_chooseShorter] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_chooseShorter_1416] = "chooseShorter ::= . '<<'  ";
  artLabelStrings[ARTL_ART_chooseShorter_1416] = "";
  artlhsL[ARTL_ART_chooseShorter_1416] = ARTL_ART_chooseShorter;
  artKindOfs[ARTL_ART_chooseShorter_1416] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_chooseShorter_1416] = true;
  artFolds[ARTL_ART_chooseShorter_1418] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_chooseShorter_1417] = "chooseShorter ::= '<<'  ";
  artLabelStrings[ARTL_ART_chooseShorter_1417] = "";
  artlhsL[ARTL_ART_chooseShorter_1417] = ARTL_ART_chooseShorter;
  artPopD[ARTL_ART_chooseShorter_1417] = true;
  artLabelInternalStrings[ARTL_ART_chooseShorter_1418] = "chooseShorter ::= '<<'  .";
  artLabelStrings[ARTL_ART_chooseShorter_1418] = "";
  artlhsL[ARTL_ART_chooseShorter_1418] = ARTL_ART_chooseShorter;
  artKindOfs[ARTL_ART_chooseShorter_1418] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_chooseShorter_1418] = true;
  arteoR_pL[ARTL_ART_chooseShorter_1418] = true;
  artPopD[ARTL_ART_chooseShorter_1418] = true;
}

public void artTableInitialiser_ART_chooseUnion() {
  artLabelInternalStrings[ARTL_ART_chooseUnion] = "chooseUnion";
  artLabelStrings[ARTL_ART_chooseUnion] = "chooseUnion";
  artKindOfs[ARTL_ART_chooseUnion] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_chooseUnion_1364] = "chooseUnion ::= . '|'  ";
  artLabelStrings[ARTL_ART_chooseUnion_1364] = "";
  artlhsL[ARTL_ART_chooseUnion_1364] = ARTL_ART_chooseUnion;
  artKindOfs[ARTL_ART_chooseUnion_1364] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_chooseUnion_1364] = true;
  artFolds[ARTL_ART_chooseUnion_1366] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_chooseUnion_1365] = "chooseUnion ::= '|'  ";
  artLabelStrings[ARTL_ART_chooseUnion_1365] = "";
  artlhsL[ARTL_ART_chooseUnion_1365] = ARTL_ART_chooseUnion;
  artPopD[ARTL_ART_chooseUnion_1365] = true;
  artLabelInternalStrings[ARTL_ART_chooseUnion_1366] = "chooseUnion ::= '|'  .";
  artLabelStrings[ARTL_ART_chooseUnion_1366] = "";
  artlhsL[ARTL_ART_chooseUnion_1366] = ARTL_ART_chooseUnion;
  artKindOfs[ARTL_ART_chooseUnion_1366] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_chooseUnion_1366] = true;
  arteoR_pL[ARTL_ART_chooseUnion_1366] = true;
  artPopD[ARTL_ART_chooseUnion_1366] = true;
}

public void artTableInitialiser_ART_chooseUnionIntersection() {
  artLabelInternalStrings[ARTL_ART_chooseUnionIntersection] = "chooseUnionIntersection";
  artLabelStrings[ARTL_ART_chooseUnionIntersection] = "chooseUnionIntersection";
  artKindOfs[ARTL_ART_chooseUnionIntersection] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_chooseUnionIntersection_1312] = "chooseUnionIntersection ::= . chooseElement ";
  artLabelStrings[ARTL_ART_chooseUnionIntersection_1312] = "";
  artlhsL[ARTL_ART_chooseUnionIntersection_1312] = ARTL_ART_chooseUnionIntersection;
  artKindOfs[ARTL_ART_chooseUnionIntersection_1312] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_chooseUnionIntersection_1314] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_chooseUnionIntersection_1314] = "chooseUnionIntersection ::= chooseElement .";
  artLabelStrings[ARTL_ART_chooseUnionIntersection_1314] = "";
  artlhsL[ARTL_ART_chooseUnionIntersection_1314] = ARTL_ART_chooseUnionIntersection;
  artSlotInstanceOfs[ARTL_ART_chooseUnionIntersection_1314] = ARTL_ART_chooseElement;
  artKindOfs[ARTL_ART_chooseUnionIntersection_1314] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_chooseUnionIntersection_1314] = true;
  arteoR_pL[ARTL_ART_chooseUnionIntersection_1314] = true;
  artPopD[ARTL_ART_chooseUnionIntersection_1314] = true;
  artLabelInternalStrings[ARTL_ART_chooseUnionIntersection_1316] = "chooseUnionIntersection ::= . chooseUnionIntersection chooseUnion chooseElement ";
  artLabelStrings[ARTL_ART_chooseUnionIntersection_1316] = "";
  artlhsL[ARTL_ART_chooseUnionIntersection_1316] = ARTL_ART_chooseUnionIntersection;
  artKindOfs[ARTL_ART_chooseUnionIntersection_1316] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_chooseUnionIntersection_1318] = "chooseUnionIntersection ::= chooseUnionIntersection . chooseUnion chooseElement ";
  artLabelStrings[ARTL_ART_chooseUnionIntersection_1318] = "";
  artlhsL[ARTL_ART_chooseUnionIntersection_1318] = ARTL_ART_chooseUnionIntersection;
  artSlotInstanceOfs[ARTL_ART_chooseUnionIntersection_1318] = ARTL_ART_chooseUnionIntersection;
  artKindOfs[ARTL_ART_chooseUnionIntersection_1318] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_chooseUnionIntersection_1318] = true;
  artFolds[ARTL_ART_chooseUnionIntersection_1320] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_chooseUnionIntersection_1320] = "chooseUnionIntersection ::= chooseUnionIntersection chooseUnion . chooseElement ";
  artLabelStrings[ARTL_ART_chooseUnionIntersection_1320] = "";
  artlhsL[ARTL_ART_chooseUnionIntersection_1320] = ARTL_ART_chooseUnionIntersection;
  artSlotInstanceOfs[ARTL_ART_chooseUnionIntersection_1320] = ARTL_ART_chooseUnion;
  artKindOfs[ARTL_ART_chooseUnionIntersection_1320] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_chooseUnionIntersection_1322] = "chooseUnionIntersection ::= chooseUnionIntersection chooseUnion chooseElement .";
  artLabelStrings[ARTL_ART_chooseUnionIntersection_1322] = "";
  artlhsL[ARTL_ART_chooseUnionIntersection_1322] = ARTL_ART_chooseUnionIntersection;
  artSlotInstanceOfs[ARTL_ART_chooseUnionIntersection_1322] = ARTL_ART_chooseElement;
  artKindOfs[ARTL_ART_chooseUnionIntersection_1322] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_chooseUnionIntersection_1322] = true;
  arteoR_pL[ARTL_ART_chooseUnionIntersection_1322] = true;
  artPopD[ARTL_ART_chooseUnionIntersection_1322] = true;
  artLabelInternalStrings[ARTL_ART_chooseUnionIntersection_1324] = "chooseUnionIntersection ::= . chooseUnionIntersection chooseIntersection chooseElement ";
  artLabelStrings[ARTL_ART_chooseUnionIntersection_1324] = "";
  artlhsL[ARTL_ART_chooseUnionIntersection_1324] = ARTL_ART_chooseUnionIntersection;
  artKindOfs[ARTL_ART_chooseUnionIntersection_1324] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_chooseUnionIntersection_1326] = "chooseUnionIntersection ::= chooseUnionIntersection . chooseIntersection chooseElement ";
  artLabelStrings[ARTL_ART_chooseUnionIntersection_1326] = "";
  artlhsL[ARTL_ART_chooseUnionIntersection_1326] = ARTL_ART_chooseUnionIntersection;
  artSlotInstanceOfs[ARTL_ART_chooseUnionIntersection_1326] = ARTL_ART_chooseUnionIntersection;
  artKindOfs[ARTL_ART_chooseUnionIntersection_1326] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_chooseUnionIntersection_1326] = true;
  artFolds[ARTL_ART_chooseUnionIntersection_1328] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_chooseUnionIntersection_1328] = "chooseUnionIntersection ::= chooseUnionIntersection chooseIntersection . chooseElement ";
  artLabelStrings[ARTL_ART_chooseUnionIntersection_1328] = "";
  artlhsL[ARTL_ART_chooseUnionIntersection_1328] = ARTL_ART_chooseUnionIntersection;
  artSlotInstanceOfs[ARTL_ART_chooseUnionIntersection_1328] = ARTL_ART_chooseIntersection;
  artKindOfs[ARTL_ART_chooseUnionIntersection_1328] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_chooseUnionIntersection_1330] = "chooseUnionIntersection ::= chooseUnionIntersection chooseIntersection chooseElement .";
  artLabelStrings[ARTL_ART_chooseUnionIntersection_1330] = "";
  artlhsL[ARTL_ART_chooseUnionIntersection_1330] = ARTL_ART_chooseUnionIntersection;
  artSlotInstanceOfs[ARTL_ART_chooseUnionIntersection_1330] = ARTL_ART_chooseElement;
  artKindOfs[ARTL_ART_chooseUnionIntersection_1330] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_chooseUnionIntersection_1330] = true;
  arteoR_pL[ARTL_ART_chooseUnionIntersection_1330] = true;
  artPopD[ARTL_ART_chooseUnionIntersection_1330] = true;
}

public void artTableInitialiser_ART_chooserOp() {
  artLabelInternalStrings[ARTL_ART_chooserOp] = "chooserOp";
  artLabelStrings[ARTL_ART_chooserOp] = "chooserOp";
  artKindOfs[ARTL_ART_chooserOp] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_chooserOp_1296] = "chooserOp ::= . chooseHigher ";
  artLabelStrings[ARTL_ART_chooserOp_1296] = "";
  artlhsL[ARTL_ART_chooserOp_1296] = ARTL_ART_chooserOp;
  artKindOfs[ARTL_ART_chooserOp_1296] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_chooserOp_1298] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_chooserOp_1298] = "chooserOp ::= chooseHigher .";
  artLabelStrings[ARTL_ART_chooserOp_1298] = "";
  artlhsL[ARTL_ART_chooserOp_1298] = ARTL_ART_chooserOp;
  artSlotInstanceOfs[ARTL_ART_chooserOp_1298] = ARTL_ART_chooseHigher;
  artKindOfs[ARTL_ART_chooserOp_1298] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_chooserOp_1298] = true;
  arteoR_pL[ARTL_ART_chooserOp_1298] = true;
  artPopD[ARTL_ART_chooserOp_1298] = true;
  artLabelInternalStrings[ARTL_ART_chooserOp_1300] = "chooserOp ::= . chooseLower ";
  artLabelStrings[ARTL_ART_chooserOp_1300] = "";
  artlhsL[ARTL_ART_chooserOp_1300] = ARTL_ART_chooserOp;
  artKindOfs[ARTL_ART_chooserOp_1300] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_chooserOp_1302] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_chooserOp_1302] = "chooserOp ::= chooseLower .";
  artLabelStrings[ARTL_ART_chooserOp_1302] = "";
  artlhsL[ARTL_ART_chooserOp_1302] = ARTL_ART_chooserOp;
  artSlotInstanceOfs[ARTL_ART_chooserOp_1302] = ARTL_ART_chooseLower;
  artKindOfs[ARTL_ART_chooserOp_1302] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_chooserOp_1302] = true;
  arteoR_pL[ARTL_ART_chooserOp_1302] = true;
  artPopD[ARTL_ART_chooserOp_1302] = true;
  artLabelInternalStrings[ARTL_ART_chooserOp_1304] = "chooserOp ::= . chooseLonger ";
  artLabelStrings[ARTL_ART_chooserOp_1304] = "";
  artlhsL[ARTL_ART_chooserOp_1304] = ARTL_ART_chooserOp;
  artKindOfs[ARTL_ART_chooserOp_1304] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_chooserOp_1306] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_chooserOp_1306] = "chooserOp ::= chooseLonger .";
  artLabelStrings[ARTL_ART_chooserOp_1306] = "";
  artlhsL[ARTL_ART_chooserOp_1306] = ARTL_ART_chooserOp;
  artSlotInstanceOfs[ARTL_ART_chooserOp_1306] = ARTL_ART_chooseLonger;
  artKindOfs[ARTL_ART_chooserOp_1306] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_chooserOp_1306] = true;
  arteoR_pL[ARTL_ART_chooserOp_1306] = true;
  artPopD[ARTL_ART_chooserOp_1306] = true;
  artLabelInternalStrings[ARTL_ART_chooserOp_1308] = "chooserOp ::= . chooseShorter ";
  artLabelStrings[ARTL_ART_chooserOp_1308] = "";
  artlhsL[ARTL_ART_chooserOp_1308] = ARTL_ART_chooserOp;
  artKindOfs[ARTL_ART_chooserOp_1308] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_chooserOp_1310] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_chooserOp_1310] = "chooserOp ::= chooseShorter .";
  artLabelStrings[ARTL_ART_chooserOp_1310] = "";
  artlhsL[ARTL_ART_chooserOp_1310] = ARTL_ART_chooserOp;
  artSlotInstanceOfs[ARTL_ART_chooserOp_1310] = ARTL_ART_chooseShorter;
  artKindOfs[ARTL_ART_chooserOp_1310] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_chooserOp_1310] = true;
  arteoR_pL[ARTL_ART_chooserOp_1310] = true;
  artPopD[ARTL_ART_chooserOp_1310] = true;
}

public void artTableInitialiser_ART_directive() {
  artLabelInternalStrings[ARTL_ART_directive] = "directive";
  artLabelStrings[ARTL_ART_directive] = "directive";
  artKindOfs[ARTL_ART_directive] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_directive_50] = "directive ::= . '!merge'  idART ";
  artLabelStrings[ARTL_ART_directive_50] = "";
  artlhsL[ARTL_ART_directive_50] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_50] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_51] = "directive ::= '!merge'  idART ";
  artLabelStrings[ARTL_ART_directive_51] = "";
  artlhsL[ARTL_ART_directive_51] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_52] = "directive ::= '!merge'  . idART ";
  artLabelStrings[ARTL_ART_directive_52] = "";
  artlhsL[ARTL_ART_directive_52] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_52] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_52] = true;
  artLabelInternalStrings[ARTL_ART_directive_54] = "directive ::= '!merge'  idART .";
  artLabelStrings[ARTL_ART_directive_54] = "";
  artlhsL[ARTL_ART_directive_54] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_54] = ARTL_ART_idART;
  artKindOfs[ARTL_ART_directive_54] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_54] = true;
  arteoR_pL[ARTL_ART_directive_54] = true;
  artPopD[ARTL_ART_directive_54] = true;
  artLabelInternalStrings[ARTL_ART_directive_56] = "directive ::= . '!module'  ID ";
  artLabelStrings[ARTL_ART_directive_56] = "";
  artlhsL[ARTL_ART_directive_56] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_56] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_57] = "directive ::= '!module'  ID ";
  artLabelStrings[ARTL_ART_directive_57] = "";
  artlhsL[ARTL_ART_directive_57] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_58] = "directive ::= '!module'  . ID ";
  artLabelStrings[ARTL_ART_directive_58] = "";
  artlhsL[ARTL_ART_directive_58] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_58] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_58] = true;
  artLabelInternalStrings[ARTL_ART_directive_60] = "directive ::= '!module'  ID .";
  artLabelStrings[ARTL_ART_directive_60] = "";
  artlhsL[ARTL_ART_directive_60] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_60] = ARTL_ART_ID;
  artKindOfs[ARTL_ART_directive_60] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_60] = true;
  arteoR_pL[ARTL_ART_directive_60] = true;
  artPopD[ARTL_ART_directive_60] = true;
  artLabelInternalStrings[ARTL_ART_directive_62] = "directive ::= . '!use'  useElements ";
  artLabelStrings[ARTL_ART_directive_62] = "";
  artlhsL[ARTL_ART_directive_62] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_62] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_63] = "directive ::= '!use'  useElements ";
  artLabelStrings[ARTL_ART_directive_63] = "";
  artlhsL[ARTL_ART_directive_63] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_64] = "directive ::= '!use'  . useElements ";
  artLabelStrings[ARTL_ART_directive_64] = "";
  artlhsL[ARTL_ART_directive_64] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_64] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_64] = true;
  artLabelInternalStrings[ARTL_ART_directive_66] = "directive ::= '!use'  useElements .";
  artLabelStrings[ARTL_ART_directive_66] = "";
  artlhsL[ARTL_ART_directive_66] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_66] = ARTL_ART_useElements;
  artKindOfs[ARTL_ART_directive_66] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_66] = true;
  arteoR_pL[ARTL_ART_directive_66] = true;
  artPopD[ARTL_ART_directive_66] = true;
  artLabelInternalStrings[ARTL_ART_directive_68] = "directive ::= . '!cfgElements'  cfgElementDeclarations ";
  artLabelStrings[ARTL_ART_directive_68] = "";
  artlhsL[ARTL_ART_directive_68] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_68] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_69] = "directive ::= '!cfgElements'  cfgElementDeclarations ";
  artLabelStrings[ARTL_ART_directive_69] = "";
  artlhsL[ARTL_ART_directive_69] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_70] = "directive ::= '!cfgElements'  . cfgElementDeclarations ";
  artLabelStrings[ARTL_ART_directive_70] = "";
  artlhsL[ARTL_ART_directive_70] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_70] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_70] = true;
  artLabelInternalStrings[ARTL_ART_directive_72] = "directive ::= '!cfgElements'  cfgElementDeclarations .";
  artLabelStrings[ARTL_ART_directive_72] = "";
  artlhsL[ARTL_ART_directive_72] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_72] = ARTL_ART_cfgElementDeclarations;
  artKindOfs[ARTL_ART_directive_72] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_72] = true;
  arteoR_pL[ARTL_ART_directive_72] = true;
  artPopD[ARTL_ART_directive_72] = true;
  artLabelInternalStrings[ARTL_ART_directive_74] = "directive ::= . '!paraterminal'  paraterminalisers ";
  artLabelStrings[ARTL_ART_directive_74] = "";
  artlhsL[ARTL_ART_directive_74] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_74] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_75] = "directive ::= '!paraterminal'  paraterminalisers ";
  artLabelStrings[ARTL_ART_directive_75] = "";
  artlhsL[ARTL_ART_directive_75] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_76] = "directive ::= '!paraterminal'  . paraterminalisers ";
  artLabelStrings[ARTL_ART_directive_76] = "";
  artlhsL[ARTL_ART_directive_76] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_76] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_76] = true;
  artFolds[ARTL_ART_directive_78] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_directive_78] = "directive ::= '!paraterminal'  paraterminalisers .";
  artLabelStrings[ARTL_ART_directive_78] = "";
  artlhsL[ARTL_ART_directive_78] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_78] = ARTL_ART_paraterminalisers;
  artKindOfs[ARTL_ART_directive_78] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_78] = true;
  arteoR_pL[ARTL_ART_directive_78] = true;
  artPopD[ARTL_ART_directive_78] = true;
  artLabelInternalStrings[ARTL_ART_directive_80] = "directive ::= . '!alphabet'  cfgNonterminals ";
  artLabelStrings[ARTL_ART_directive_80] = "";
  artlhsL[ARTL_ART_directive_80] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_80] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_81] = "directive ::= '!alphabet'  cfgNonterminals ";
  artLabelStrings[ARTL_ART_directive_81] = "";
  artlhsL[ARTL_ART_directive_81] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_82] = "directive ::= '!alphabet'  . cfgNonterminals ";
  artLabelStrings[ARTL_ART_directive_82] = "";
  artlhsL[ARTL_ART_directive_82] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_82] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_82] = true;
  artLabelInternalStrings[ARTL_ART_directive_84] = "directive ::= '!alphabet'  cfgNonterminals .";
  artLabelStrings[ARTL_ART_directive_84] = "";
  artlhsL[ARTL_ART_directive_84] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_84] = ARTL_ART_cfgNonterminals;
  artKindOfs[ARTL_ART_directive_84] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_84] = true;
  arteoR_pL[ARTL_ART_directive_84] = true;
  artPopD[ARTL_ART_directive_84] = true;
  artLabelInternalStrings[ARTL_ART_directive_86] = "directive ::= . '!latex'  latexDeclarations ";
  artLabelStrings[ARTL_ART_directive_86] = "";
  artlhsL[ARTL_ART_directive_86] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_86] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_87] = "directive ::= '!latex'  latexDeclarations ";
  artLabelStrings[ARTL_ART_directive_87] = "";
  artlhsL[ARTL_ART_directive_87] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_88] = "directive ::= '!latex'  . latexDeclarations ";
  artLabelStrings[ARTL_ART_directive_88] = "";
  artlhsL[ARTL_ART_directive_88] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_88] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_88] = true;
  artLabelInternalStrings[ARTL_ART_directive_90] = "directive ::= '!latex'  latexDeclarations .";
  artLabelStrings[ARTL_ART_directive_90] = "";
  artlhsL[ARTL_ART_directive_90] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_90] = ARTL_ART_latexDeclarations;
  artKindOfs[ARTL_ART_directive_90] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_90] = true;
  arteoR_pL[ARTL_ART_directive_90] = true;
  artPopD[ARTL_ART_directive_90] = true;
  artLabelInternalStrings[ARTL_ART_directive_92] = "directive ::= . '!verbosity'  __int32 ";
  artLabelStrings[ARTL_ART_directive_92] = "";
  artlhsL[ARTL_ART_directive_92] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_92] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_93] = "directive ::= '!verbosity'  __int32 ";
  artLabelStrings[ARTL_ART_directive_93] = "";
  artlhsL[ARTL_ART_directive_93] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_94] = "directive ::= '!verbosity'  . __int32 ";
  artLabelStrings[ARTL_ART_directive_94] = "";
  artlhsL[ARTL_ART_directive_94] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_94] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_94] = true;
  artLabelInternalStrings[ARTL_ART_directive_96] = "directive ::= '!verbosity'  __int32 .";
  artLabelStrings[ARTL_ART_directive_96] = "";
  artlhsL[ARTL_ART_directive_96] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_96] = ARTL_ART___int32;
  artKindOfs[ARTL_ART_directive_96] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_96] = true;
  arteoR_pL[ARTL_ART_directive_96] = true;
  artPopD[ARTL_ART_directive_96] = true;
  artLabelInternalStrings[ARTL_ART_directive_98] = "directive ::= . '!statistics'  __int32 ";
  artLabelStrings[ARTL_ART_directive_98] = "";
  artlhsL[ARTL_ART_directive_98] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_98] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_99] = "directive ::= '!statistics'  __int32 ";
  artLabelStrings[ARTL_ART_directive_99] = "";
  artlhsL[ARTL_ART_directive_99] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_100] = "directive ::= '!statistics'  . __int32 ";
  artLabelStrings[ARTL_ART_directive_100] = "";
  artlhsL[ARTL_ART_directive_100] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_100] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_100] = true;
  artLabelInternalStrings[ARTL_ART_directive_102] = "directive ::= '!statistics'  __int32 .";
  artLabelStrings[ARTL_ART_directive_102] = "";
  artlhsL[ARTL_ART_directive_102] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_102] = ARTL_ART___int32;
  artKindOfs[ARTL_ART_directive_102] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_102] = true;
  arteoR_pL[ARTL_ART_directive_102] = true;
  artPopD[ARTL_ART_directive_102] = true;
  artLabelInternalStrings[ARTL_ART_directive_104] = "directive ::= . '!trace'  __int32 ";
  artLabelStrings[ARTL_ART_directive_104] = "";
  artlhsL[ARTL_ART_directive_104] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_104] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_105] = "directive ::= '!trace'  __int32 ";
  artLabelStrings[ARTL_ART_directive_105] = "";
  artlhsL[ARTL_ART_directive_105] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_106] = "directive ::= '!trace'  . __int32 ";
  artLabelStrings[ARTL_ART_directive_106] = "";
  artlhsL[ARTL_ART_directive_106] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_106] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_106] = true;
  artLabelInternalStrings[ARTL_ART_directive_108] = "directive ::= '!trace'  __int32 .";
  artLabelStrings[ARTL_ART_directive_108] = "";
  artlhsL[ARTL_ART_directive_108] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_108] = ARTL_ART___int32;
  artKindOfs[ARTL_ART_directive_108] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_108] = true;
  arteoR_pL[ARTL_ART_directive_108] = true;
  artPopD[ARTL_ART_directive_108] = true;
  artLabelInternalStrings[ARTL_ART_directive_110] = "directive ::= . '!inputPrint'  ";
  artLabelStrings[ARTL_ART_directive_110] = "";
  artlhsL[ARTL_ART_directive_110] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_110] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_110] = true;
  artLabelInternalStrings[ARTL_ART_directive_111] = "directive ::= '!inputPrint'  ";
  artLabelStrings[ARTL_ART_directive_111] = "";
  artlhsL[ARTL_ART_directive_111] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_111] = true;
  artLabelInternalStrings[ARTL_ART_directive_112] = "directive ::= '!inputPrint'  .";
  artLabelStrings[ARTL_ART_directive_112] = "";
  artlhsL[ARTL_ART_directive_112] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_112] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_112] = true;
  arteoR_pL[ARTL_ART_directive_112] = true;
  artPopD[ARTL_ART_directive_112] = true;
  artLabelInternalStrings[ARTL_ART_directive_114] = "directive ::= . '!twePrintFull'  ";
  artLabelStrings[ARTL_ART_directive_114] = "";
  artlhsL[ARTL_ART_directive_114] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_114] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_114] = true;
  artLabelInternalStrings[ARTL_ART_directive_115] = "directive ::= '!twePrintFull'  ";
  artLabelStrings[ARTL_ART_directive_115] = "";
  artlhsL[ARTL_ART_directive_115] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_115] = true;
  artLabelInternalStrings[ARTL_ART_directive_116] = "directive ::= '!twePrintFull'  .";
  artLabelStrings[ARTL_ART_directive_116] = "";
  artlhsL[ARTL_ART_directive_116] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_116] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_116] = true;
  arteoR_pL[ARTL_ART_directive_116] = true;
  artPopD[ARTL_ART_directive_116] = true;
  artLabelInternalStrings[ARTL_ART_directive_118] = "directive ::= . '!twePrintSummary'  ";
  artLabelStrings[ARTL_ART_directive_118] = "";
  artlhsL[ARTL_ART_directive_118] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_118] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_118] = true;
  artLabelInternalStrings[ARTL_ART_directive_119] = "directive ::= '!twePrintSummary'  ";
  artLabelStrings[ARTL_ART_directive_119] = "";
  artlhsL[ARTL_ART_directive_119] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_119] = true;
  artLabelInternalStrings[ARTL_ART_directive_120] = "directive ::= '!twePrintSummary'  .";
  artLabelStrings[ARTL_ART_directive_120] = "";
  artlhsL[ARTL_ART_directive_120] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_120] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_120] = true;
  arteoR_pL[ARTL_ART_directive_120] = true;
  artPopD[ARTL_ART_directive_120] = true;
  artLabelInternalStrings[ARTL_ART_directive_122] = "directive ::= . '!twePrint'  ";
  artLabelStrings[ARTL_ART_directive_122] = "";
  artlhsL[ARTL_ART_directive_122] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_122] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_122] = true;
  artLabelInternalStrings[ARTL_ART_directive_123] = "directive ::= '!twePrint'  ";
  artLabelStrings[ARTL_ART_directive_123] = "";
  artlhsL[ARTL_ART_directive_123] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_123] = true;
  artLabelInternalStrings[ARTL_ART_directive_124] = "directive ::= '!twePrint'  .";
  artLabelStrings[ARTL_ART_directive_124] = "";
  artlhsL[ARTL_ART_directive_124] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_124] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_124] = true;
  arteoR_pL[ARTL_ART_directive_124] = true;
  artPopD[ARTL_ART_directive_124] = true;
  artLabelInternalStrings[ARTL_ART_directive_126] = "directive ::= . '!tweWrite'  ";
  artLabelStrings[ARTL_ART_directive_126] = "";
  artlhsL[ARTL_ART_directive_126] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_126] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_126] = true;
  artLabelInternalStrings[ARTL_ART_directive_127] = "directive ::= '!tweWrite'  ";
  artLabelStrings[ARTL_ART_directive_127] = "";
  artlhsL[ARTL_ART_directive_127] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_127] = true;
  artLabelInternalStrings[ARTL_ART_directive_128] = "directive ::= '!tweWrite'  .";
  artLabelStrings[ARTL_ART_directive_128] = "";
  artlhsL[ARTL_ART_directive_128] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_128] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_128] = true;
  arteoR_pL[ARTL_ART_directive_128] = true;
  artPopD[ARTL_ART_directive_128] = true;
  artLabelInternalStrings[ARTL_ART_directive_130] = "directive ::= . '!tweShow'  ";
  artLabelStrings[ARTL_ART_directive_130] = "";
  artlhsL[ARTL_ART_directive_130] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_130] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_130] = true;
  artLabelInternalStrings[ARTL_ART_directive_131] = "directive ::= '!tweShow'  ";
  artLabelStrings[ARTL_ART_directive_131] = "";
  artlhsL[ARTL_ART_directive_131] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_131] = true;
  artLabelInternalStrings[ARTL_ART_directive_132] = "directive ::= '!tweShow'  .";
  artLabelStrings[ARTL_ART_directive_132] = "";
  artlhsL[ARTL_ART_directive_132] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_132] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_132] = true;
  arteoR_pL[ARTL_ART_directive_132] = true;
  artPopD[ARTL_ART_directive_132] = true;
  artLabelInternalStrings[ARTL_ART_directive_134] = "directive ::= . '!gssPrint'  ";
  artLabelStrings[ARTL_ART_directive_134] = "";
  artlhsL[ARTL_ART_directive_134] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_134] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_134] = true;
  artLabelInternalStrings[ARTL_ART_directive_135] = "directive ::= '!gssPrint'  ";
  artLabelStrings[ARTL_ART_directive_135] = "";
  artlhsL[ARTL_ART_directive_135] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_135] = true;
  artLabelInternalStrings[ARTL_ART_directive_136] = "directive ::= '!gssPrint'  .";
  artLabelStrings[ARTL_ART_directive_136] = "";
  artlhsL[ARTL_ART_directive_136] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_136] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_136] = true;
  arteoR_pL[ARTL_ART_directive_136] = true;
  artPopD[ARTL_ART_directive_136] = true;
  artLabelInternalStrings[ARTL_ART_directive_138] = "directive ::= . '!gssWrite'  ";
  artLabelStrings[ARTL_ART_directive_138] = "";
  artlhsL[ARTL_ART_directive_138] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_138] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_138] = true;
  artLabelInternalStrings[ARTL_ART_directive_139] = "directive ::= '!gssWrite'  ";
  artLabelStrings[ARTL_ART_directive_139] = "";
  artlhsL[ARTL_ART_directive_139] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_139] = true;
  artLabelInternalStrings[ARTL_ART_directive_140] = "directive ::= '!gssWrite'  .";
  artLabelStrings[ARTL_ART_directive_140] = "";
  artlhsL[ARTL_ART_directive_140] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_140] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_140] = true;
  arteoR_pL[ARTL_ART_directive_140] = true;
  artPopD[ARTL_ART_directive_140] = true;
  artLabelInternalStrings[ARTL_ART_directive_142] = "directive ::= . '!gssShow'  ";
  artLabelStrings[ARTL_ART_directive_142] = "";
  artlhsL[ARTL_ART_directive_142] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_142] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_142] = true;
  artLabelInternalStrings[ARTL_ART_directive_143] = "directive ::= '!gssShow'  ";
  artLabelStrings[ARTL_ART_directive_143] = "";
  artlhsL[ARTL_ART_directive_143] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_143] = true;
  artLabelInternalStrings[ARTL_ART_directive_144] = "directive ::= '!gssShow'  .";
  artLabelStrings[ARTL_ART_directive_144] = "";
  artlhsL[ARTL_ART_directive_144] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_144] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_144] = true;
  arteoR_pL[ARTL_ART_directive_144] = true;
  artPopD[ARTL_ART_directive_144] = true;
  artLabelInternalStrings[ARTL_ART_directive_146] = "directive ::= . '!sppfPrint'  ";
  artLabelStrings[ARTL_ART_directive_146] = "";
  artlhsL[ARTL_ART_directive_146] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_146] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_146] = true;
  artLabelInternalStrings[ARTL_ART_directive_147] = "directive ::= '!sppfPrint'  ";
  artLabelStrings[ARTL_ART_directive_147] = "";
  artlhsL[ARTL_ART_directive_147] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_147] = true;
  artLabelInternalStrings[ARTL_ART_directive_148] = "directive ::= '!sppfPrint'  .";
  artLabelStrings[ARTL_ART_directive_148] = "";
  artlhsL[ARTL_ART_directive_148] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_148] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_148] = true;
  arteoR_pL[ARTL_ART_directive_148] = true;
  artPopD[ARTL_ART_directive_148] = true;
  artLabelInternalStrings[ARTL_ART_directive_150] = "directive ::= . '!sppfWrite'  ";
  artLabelStrings[ARTL_ART_directive_150] = "";
  artlhsL[ARTL_ART_directive_150] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_150] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_150] = true;
  artLabelInternalStrings[ARTL_ART_directive_151] = "directive ::= '!sppfWrite'  ";
  artLabelStrings[ARTL_ART_directive_151] = "";
  artlhsL[ARTL_ART_directive_151] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_151] = true;
  artLabelInternalStrings[ARTL_ART_directive_152] = "directive ::= '!sppfWrite'  .";
  artLabelStrings[ARTL_ART_directive_152] = "";
  artlhsL[ARTL_ART_directive_152] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_152] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_152] = true;
  arteoR_pL[ARTL_ART_directive_152] = true;
  artPopD[ARTL_ART_directive_152] = true;
  artLabelInternalStrings[ARTL_ART_directive_154] = "directive ::= . '!sppfShow'  ";
  artLabelStrings[ARTL_ART_directive_154] = "";
  artlhsL[ARTL_ART_directive_154] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_154] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_154] = true;
  artLabelInternalStrings[ARTL_ART_directive_155] = "directive ::= '!sppfShow'  ";
  artLabelStrings[ARTL_ART_directive_155] = "";
  artlhsL[ARTL_ART_directive_155] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_155] = true;
  artLabelInternalStrings[ARTL_ART_directive_156] = "directive ::= '!sppfShow'  .";
  artLabelStrings[ARTL_ART_directive_156] = "";
  artlhsL[ARTL_ART_directive_156] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_156] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_156] = true;
  arteoR_pL[ARTL_ART_directive_156] = true;
  artPopD[ARTL_ART_directive_156] = true;
  artLabelInternalStrings[ARTL_ART_directive_158] = "directive ::= . '!treePrint'  ";
  artLabelStrings[ARTL_ART_directive_158] = "";
  artlhsL[ARTL_ART_directive_158] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_158] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_158] = true;
  artLabelInternalStrings[ARTL_ART_directive_159] = "directive ::= '!treePrint'  ";
  artLabelStrings[ARTL_ART_directive_159] = "";
  artlhsL[ARTL_ART_directive_159] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_159] = true;
  artLabelInternalStrings[ARTL_ART_directive_160] = "directive ::= '!treePrint'  .";
  artLabelStrings[ARTL_ART_directive_160] = "";
  artlhsL[ARTL_ART_directive_160] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_160] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_160] = true;
  arteoR_pL[ARTL_ART_directive_160] = true;
  artPopD[ARTL_ART_directive_160] = true;
  artLabelInternalStrings[ARTL_ART_directive_162] = "directive ::= . '!treeWrite'  ";
  artLabelStrings[ARTL_ART_directive_162] = "";
  artlhsL[ARTL_ART_directive_162] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_162] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_162] = true;
  artLabelInternalStrings[ARTL_ART_directive_163] = "directive ::= '!treeWrite'  ";
  artLabelStrings[ARTL_ART_directive_163] = "";
  artlhsL[ARTL_ART_directive_163] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_163] = true;
  artLabelInternalStrings[ARTL_ART_directive_164] = "directive ::= '!treeWrite'  .";
  artLabelStrings[ARTL_ART_directive_164] = "";
  artlhsL[ARTL_ART_directive_164] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_164] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_164] = true;
  arteoR_pL[ARTL_ART_directive_164] = true;
  artPopD[ARTL_ART_directive_164] = true;
  artLabelInternalStrings[ARTL_ART_directive_166] = "directive ::= . '!treeShow'  ";
  artLabelStrings[ARTL_ART_directive_166] = "";
  artlhsL[ARTL_ART_directive_166] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_166] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_166] = true;
  artLabelInternalStrings[ARTL_ART_directive_167] = "directive ::= '!treeShow'  ";
  artLabelStrings[ARTL_ART_directive_167] = "";
  artlhsL[ARTL_ART_directive_167] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_167] = true;
  artLabelInternalStrings[ARTL_ART_directive_168] = "directive ::= '!treeShow'  .";
  artLabelStrings[ARTL_ART_directive_168] = "";
  artlhsL[ARTL_ART_directive_168] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_168] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_168] = true;
  arteoR_pL[ARTL_ART_directive_168] = true;
  artPopD[ARTL_ART_directive_168] = true;
  artLabelInternalStrings[ARTL_ART_directive_170] = "directive ::= . '!termPrint'  ";
  artLabelStrings[ARTL_ART_directive_170] = "";
  artlhsL[ARTL_ART_directive_170] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_170] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_170] = true;
  artLabelInternalStrings[ARTL_ART_directive_171] = "directive ::= '!termPrint'  ";
  artLabelStrings[ARTL_ART_directive_171] = "";
  artlhsL[ARTL_ART_directive_171] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_171] = true;
  artLabelInternalStrings[ARTL_ART_directive_172] = "directive ::= '!termPrint'  .";
  artLabelStrings[ARTL_ART_directive_172] = "";
  artlhsL[ARTL_ART_directive_172] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_172] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_172] = true;
  arteoR_pL[ARTL_ART_directive_172] = true;
  artPopD[ARTL_ART_directive_172] = true;
  artLabelInternalStrings[ARTL_ART_directive_174] = "directive ::= . '!termWrite'  ";
  artLabelStrings[ARTL_ART_directive_174] = "";
  artlhsL[ARTL_ART_directive_174] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_174] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_174] = true;
  artLabelInternalStrings[ARTL_ART_directive_175] = "directive ::= '!termWrite'  ";
  artLabelStrings[ARTL_ART_directive_175] = "";
  artlhsL[ARTL_ART_directive_175] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_175] = true;
  artLabelInternalStrings[ARTL_ART_directive_176] = "directive ::= '!termWrite'  .";
  artLabelStrings[ARTL_ART_directive_176] = "";
  artlhsL[ARTL_ART_directive_176] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_176] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_176] = true;
  arteoR_pL[ARTL_ART_directive_176] = true;
  artPopD[ARTL_ART_directive_176] = true;
  artLabelInternalStrings[ARTL_ART_directive_178] = "directive ::= . '!termShow'  ";
  artLabelStrings[ARTL_ART_directive_178] = "";
  artlhsL[ARTL_ART_directive_178] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_178] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_178] = true;
  artLabelInternalStrings[ARTL_ART_directive_179] = "directive ::= '!termShow'  ";
  artLabelStrings[ARTL_ART_directive_179] = "";
  artlhsL[ARTL_ART_directive_179] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_179] = true;
  artLabelInternalStrings[ARTL_ART_directive_180] = "directive ::= '!termShow'  .";
  artLabelStrings[ARTL_ART_directive_180] = "";
  artlhsL[ARTL_ART_directive_180] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_180] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_180] = true;
  arteoR_pL[ARTL_ART_directive_180] = true;
  artPopD[ARTL_ART_directive_180] = true;
  artLabelInternalStrings[ARTL_ART_directive_182] = "directive ::= . '!parseCountsPrint'  ";
  artLabelStrings[ARTL_ART_directive_182] = "";
  artlhsL[ARTL_ART_directive_182] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_182] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_182] = true;
  artLabelInternalStrings[ARTL_ART_directive_183] = "directive ::= '!parseCountsPrint'  ";
  artLabelStrings[ARTL_ART_directive_183] = "";
  artlhsL[ARTL_ART_directive_183] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_183] = true;
  artLabelInternalStrings[ARTL_ART_directive_184] = "directive ::= '!parseCountsPrint'  .";
  artLabelStrings[ARTL_ART_directive_184] = "";
  artlhsL[ARTL_ART_directive_184] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_184] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_184] = true;
  arteoR_pL[ARTL_ART_directive_184] = true;
  artPopD[ARTL_ART_directive_184] = true;
  artLabelInternalStrings[ARTL_ART_directive_186] = "directive ::= . '!grammarWrite'  idART ";
  artLabelStrings[ARTL_ART_directive_186] = "";
  artlhsL[ARTL_ART_directive_186] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_186] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_187] = "directive ::= '!grammarWrite'  idART ";
  artLabelStrings[ARTL_ART_directive_187] = "";
  artlhsL[ARTL_ART_directive_187] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_188] = "directive ::= '!grammarWrite'  . idART ";
  artLabelStrings[ARTL_ART_directive_188] = "";
  artlhsL[ARTL_ART_directive_188] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_188] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_188] = true;
  artLabelInternalStrings[ARTL_ART_directive_190] = "directive ::= '!grammarWrite'  idART .";
  artLabelStrings[ARTL_ART_directive_190] = "";
  artlhsL[ARTL_ART_directive_190] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_190] = ARTL_ART_idART;
  artKindOfs[ARTL_ART_directive_190] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_190] = true;
  arteoR_pL[ARTL_ART_directive_190] = true;
  artPopD[ARTL_ART_directive_190] = true;
  artLabelInternalStrings[ARTL_ART_directive_192] = "directive ::= . '!termTool'  ";
  artLabelStrings[ARTL_ART_directive_192] = "";
  artlhsL[ARTL_ART_directive_192] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_192] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_192] = true;
  artLabelInternalStrings[ARTL_ART_directive_193] = "directive ::= '!termTool'  ";
  artLabelStrings[ARTL_ART_directive_193] = "";
  artlhsL[ARTL_ART_directive_193] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_193] = true;
  artLabelInternalStrings[ARTL_ART_directive_194] = "directive ::= '!termTool'  .";
  artLabelStrings[ARTL_ART_directive_194] = "";
  artlhsL[ARTL_ART_directive_194] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_194] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_194] = true;
  arteoR_pL[ARTL_ART_directive_194] = true;
  artPopD[ARTL_ART_directive_194] = true;
  artLabelInternalStrings[ARTL_ART_directive_196] = "directive ::= . '!unicodeAsEscapeSeuences'  idJAVA idJAVA ";
  artLabelStrings[ARTL_ART_directive_196] = "";
  artlhsL[ARTL_ART_directive_196] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_196] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_197] = "directive ::= '!unicodeAsEscapeSeuences'  idJAVA idJAVA ";
  artLabelStrings[ARTL_ART_directive_197] = "";
  artlhsL[ARTL_ART_directive_197] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_198] = "directive ::= '!unicodeAsEscapeSeuences'  . idJAVA idJAVA ";
  artLabelStrings[ARTL_ART_directive_198] = "";
  artlhsL[ARTL_ART_directive_198] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_198] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_198] = true;
  artLabelInternalStrings[ARTL_ART_directive_200] = "directive ::= '!unicodeAsEscapeSeuences'  idJAVA . idJAVA ";
  artLabelStrings[ARTL_ART_directive_200] = "";
  artlhsL[ARTL_ART_directive_200] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_200] = ARTL_ART_idJAVA;
  artKindOfs[ARTL_ART_directive_200] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_202] = "directive ::= '!unicodeAsEscapeSeuences'  idJAVA idJAVA .";
  artLabelStrings[ARTL_ART_directive_202] = "";
  artlhsL[ARTL_ART_directive_202] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_202] = ARTL_ART_idJAVA;
  artKindOfs[ARTL_ART_directive_202] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_202] = true;
  arteoR_pL[ARTL_ART_directive_202] = true;
  artPopD[ARTL_ART_directive_202] = true;
  artLabelInternalStrings[ARTL_ART_directive_204] = "directive ::= . '!compressWhitespaceJava'  idJAVA idJAVA ";
  artLabelStrings[ARTL_ART_directive_204] = "";
  artlhsL[ARTL_ART_directive_204] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_204] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_205] = "directive ::= '!compressWhitespaceJava'  idJAVA idJAVA ";
  artLabelStrings[ARTL_ART_directive_205] = "";
  artlhsL[ARTL_ART_directive_205] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_206] = "directive ::= '!compressWhitespaceJava'  . idJAVA idJAVA ";
  artLabelStrings[ARTL_ART_directive_206] = "";
  artlhsL[ARTL_ART_directive_206] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_206] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_206] = true;
  artLabelInternalStrings[ARTL_ART_directive_208] = "directive ::= '!compressWhitespaceJava'  idJAVA . idJAVA ";
  artLabelStrings[ARTL_ART_directive_208] = "";
  artlhsL[ARTL_ART_directive_208] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_208] = ARTL_ART_idJAVA;
  artKindOfs[ARTL_ART_directive_208] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_210] = "directive ::= '!compressWhitespaceJava'  idJAVA idJAVA .";
  artLabelStrings[ARTL_ART_directive_210] = "";
  artlhsL[ARTL_ART_directive_210] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_210] = ARTL_ART_idJAVA;
  artKindOfs[ARTL_ART_directive_210] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_210] = true;
  arteoR_pL[ARTL_ART_directive_210] = true;
  artPopD[ARTL_ART_directive_210] = true;
  artLabelInternalStrings[ARTL_ART_directive_212] = "directive ::= . '!extractJLS'  idRAW idRAW idRAW idART ID ";
  artLabelStrings[ARTL_ART_directive_212] = "";
  artlhsL[ARTL_ART_directive_212] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_212] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_213] = "directive ::= '!extractJLS'  idRAW idRAW idRAW idART ID ";
  artLabelStrings[ARTL_ART_directive_213] = "";
  artlhsL[ARTL_ART_directive_213] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_214] = "directive ::= '!extractJLS'  . idRAW idRAW idRAW idART ID ";
  artLabelStrings[ARTL_ART_directive_214] = "";
  artlhsL[ARTL_ART_directive_214] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_214] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_214] = true;
  artLabelInternalStrings[ARTL_ART_directive_216] = "directive ::= '!extractJLS'  idRAW . idRAW idRAW idART ID ";
  artLabelStrings[ARTL_ART_directive_216] = "";
  artlhsL[ARTL_ART_directive_216] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_216] = ARTL_ART_idRAW;
  artKindOfs[ARTL_ART_directive_216] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_218] = "directive ::= '!extractJLS'  idRAW idRAW . idRAW idART ID ";
  artLabelStrings[ARTL_ART_directive_218] = "";
  artlhsL[ARTL_ART_directive_218] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_218] = ARTL_ART_idRAW;
  artKindOfs[ARTL_ART_directive_218] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_220] = "directive ::= '!extractJLS'  idRAW idRAW idRAW . idART ID ";
  artLabelStrings[ARTL_ART_directive_220] = "";
  artlhsL[ARTL_ART_directive_220] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_220] = ARTL_ART_idRAW;
  artKindOfs[ARTL_ART_directive_220] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_222] = "directive ::= '!extractJLS'  idRAW idRAW idRAW idART . ID ";
  artLabelStrings[ARTL_ART_directive_222] = "";
  artlhsL[ARTL_ART_directive_222] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_222] = ARTL_ART_idART;
  artKindOfs[ARTL_ART_directive_222] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_224] = "directive ::= '!extractJLS'  idRAW idRAW idRAW idART ID .";
  artLabelStrings[ARTL_ART_directive_224] = "";
  artlhsL[ARTL_ART_directive_224] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_224] = ARTL_ART_ID;
  artKindOfs[ARTL_ART_directive_224] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_224] = true;
  arteoR_pL[ARTL_ART_directive_224] = true;
  artPopD[ARTL_ART_directive_224] = true;
  artLabelInternalStrings[ARTL_ART_directive_226] = "directive ::= . '!lexDFA'  ";
  artLabelStrings[ARTL_ART_directive_226] = "";
  artlhsL[ARTL_ART_directive_226] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_226] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_226] = true;
  artLabelInternalStrings[ARTL_ART_directive_227] = "directive ::= '!lexDFA'  ";
  artLabelStrings[ARTL_ART_directive_227] = "";
  artlhsL[ARTL_ART_directive_227] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_227] = true;
  artLabelInternalStrings[ARTL_ART_directive_228] = "directive ::= '!lexDFA'  .";
  artLabelStrings[ARTL_ART_directive_228] = "";
  artlhsL[ARTL_ART_directive_228] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_228] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_228] = true;
  arteoR_pL[ARTL_ART_directive_228] = true;
  artPopD[ARTL_ART_directive_228] = true;
  artLabelInternalStrings[ARTL_ART_directive_230] = "directive ::= . '!lexGLL'  ";
  artLabelStrings[ARTL_ART_directive_230] = "";
  artlhsL[ARTL_ART_directive_230] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_230] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_230] = true;
  artLabelInternalStrings[ARTL_ART_directive_231] = "directive ::= '!lexGLL'  ";
  artLabelStrings[ARTL_ART_directive_231] = "";
  artlhsL[ARTL_ART_directive_231] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_231] = true;
  artLabelInternalStrings[ARTL_ART_directive_232] = "directive ::= '!lexGLL'  .";
  artLabelStrings[ARTL_ART_directive_232] = "";
  artlhsL[ARTL_ART_directive_232] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_232] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_232] = true;
  arteoR_pL[ARTL_ART_directive_232] = true;
  artPopD[ARTL_ART_directive_232] = true;
  artLabelInternalStrings[ARTL_ART_directive_234] = "directive ::= . '!lexHardCoded'  ";
  artLabelStrings[ARTL_ART_directive_234] = "";
  artlhsL[ARTL_ART_directive_234] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_234] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_234] = true;
  artLabelInternalStrings[ARTL_ART_directive_235] = "directive ::= '!lexHardCoded'  ";
  artLabelStrings[ARTL_ART_directive_235] = "";
  artlhsL[ARTL_ART_directive_235] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_235] = true;
  artLabelInternalStrings[ARTL_ART_directive_236] = "directive ::= '!lexHardCoded'  .";
  artLabelStrings[ARTL_ART_directive_236] = "";
  artlhsL[ARTL_ART_directive_236] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_236] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_236] = true;
  arteoR_pL[ARTL_ART_directive_236] = true;
  artPopD[ARTL_ART_directive_236] = true;
  artLabelInternalStrings[ARTL_ART_directive_238] = "directive ::= . '!lexWSSuffix'  ";
  artLabelStrings[ARTL_ART_directive_238] = "";
  artlhsL[ARTL_ART_directive_238] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_238] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_238] = true;
  artLabelInternalStrings[ARTL_ART_directive_239] = "directive ::= '!lexWSSuffix'  ";
  artLabelStrings[ARTL_ART_directive_239] = "";
  artlhsL[ARTL_ART_directive_239] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_239] = true;
  artLabelInternalStrings[ARTL_ART_directive_240] = "directive ::= '!lexWSSuffix'  .";
  artLabelStrings[ARTL_ART_directive_240] = "";
  artlhsL[ARTL_ART_directive_240] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_240] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_240] = true;
  arteoR_pL[ARTL_ART_directive_240] = true;
  artPopD[ARTL_ART_directive_240] = true;
  artLabelInternalStrings[ARTL_ART_directive_242] = "directive ::= . '!whitespace'  cfgNonterminal ";
  artLabelStrings[ARTL_ART_directive_242] = "";
  artlhsL[ARTL_ART_directive_242] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_242] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_243] = "directive ::= '!whitespace'  cfgNonterminal ";
  artLabelStrings[ARTL_ART_directive_243] = "";
  artlhsL[ARTL_ART_directive_243] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_244] = "directive ::= '!whitespace'  . cfgNonterminal ";
  artLabelStrings[ARTL_ART_directive_244] = "";
  artlhsL[ARTL_ART_directive_244] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_244] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_244] = true;
  artLabelInternalStrings[ARTL_ART_directive_246] = "directive ::= '!whitespace'  cfgNonterminal .";
  artLabelStrings[ARTL_ART_directive_246] = "";
  artlhsL[ARTL_ART_directive_246] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_246] = ARTL_ART_cfgNonterminal;
  artKindOfs[ARTL_ART_directive_246] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_246] = true;
  arteoR_pL[ARTL_ART_directive_246] = true;
  artPopD[ARTL_ART_directive_246] = true;
  artLabelInternalStrings[ARTL_ART_directive_248] = "directive ::= . '!absorb'  cfgNonterminal ";
  artLabelStrings[ARTL_ART_directive_248] = "";
  artlhsL[ARTL_ART_directive_248] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_248] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_249] = "directive ::= '!absorb'  cfgNonterminal ";
  artLabelStrings[ARTL_ART_directive_249] = "";
  artlhsL[ARTL_ART_directive_249] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_250] = "directive ::= '!absorb'  . cfgNonterminal ";
  artLabelStrings[ARTL_ART_directive_250] = "";
  artlhsL[ARTL_ART_directive_250] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_250] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_250] = true;
  artLabelInternalStrings[ARTL_ART_directive_252] = "directive ::= '!absorb'  cfgNonterminal .";
  artLabelStrings[ARTL_ART_directive_252] = "";
  artlhsL[ARTL_ART_directive_252] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_252] = ARTL_ART_cfgNonterminal;
  artKindOfs[ARTL_ART_directive_252] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_252] = true;
  arteoR_pL[ARTL_ART_directive_252] = true;
  artPopD[ARTL_ART_directive_252] = true;
  artLabelInternalStrings[ARTL_ART_directive_254] = "directive ::= . '!absorb'  '#'  ";
  artLabelStrings[ARTL_ART_directive_254] = "";
  artlhsL[ARTL_ART_directive_254] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_254] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_254] = true;
  artLabelInternalStrings[ARTL_ART_directive_255] = "directive ::= '!absorb'  '#'  ";
  artLabelStrings[ARTL_ART_directive_255] = "";
  artlhsL[ARTL_ART_directive_255] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_255] = true;
  artLabelInternalStrings[ARTL_ART_directive_256] = "directive ::= '!absorb'  . '#'  ";
  artLabelStrings[ARTL_ART_directive_256] = "";
  artlhsL[ARTL_ART_directive_256] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_256] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_256] = true;
  artPopD[ARTL_ART_directive_256] = true;
  artFolds[ARTL_ART_directive_258] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_directive_257] = "directive ::= '!absorb'  '#'  ";
  artLabelStrings[ARTL_ART_directive_257] = "";
  artlhsL[ARTL_ART_directive_257] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_257] = true;
  artLabelInternalStrings[ARTL_ART_directive_258] = "directive ::= '!absorb'  '#'  .";
  artLabelStrings[ARTL_ART_directive_258] = "";
  artlhsL[ARTL_ART_directive_258] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_258] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_258] = true;
  arteoR_pL[ARTL_ART_directive_258] = true;
  artPopD[ARTL_ART_directive_258] = true;
  artLabelInternalStrings[ARTL_ART_directive_260] = "directive ::= . '!injectInstance'  cfgRHS ";
  artLabelStrings[ARTL_ART_directive_260] = "";
  artlhsL[ARTL_ART_directive_260] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_260] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_261] = "directive ::= '!injectInstance'  cfgRHS ";
  artLabelStrings[ARTL_ART_directive_261] = "";
  artlhsL[ARTL_ART_directive_261] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_262] = "directive ::= '!injectInstance'  . cfgRHS ";
  artLabelStrings[ARTL_ART_directive_262] = "";
  artlhsL[ARTL_ART_directive_262] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_262] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_262] = true;
  artLabelInternalStrings[ARTL_ART_directive_264] = "directive ::= '!injectInstance'  cfgRHS .";
  artLabelStrings[ARTL_ART_directive_264] = "";
  artlhsL[ARTL_ART_directive_264] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_264] = ARTL_ART_cfgRHS;
  artKindOfs[ARTL_ART_directive_264] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_264] = true;
  arteoR_pL[ARTL_ART_directive_264] = true;
  artPopD[ARTL_ART_directive_264] = true;
  artLabelInternalStrings[ARTL_ART_directive_266] = "directive ::= . '!injectInstance'  '#'  ";
  artLabelStrings[ARTL_ART_directive_266] = "";
  artlhsL[ARTL_ART_directive_266] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_266] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_266] = true;
  artLabelInternalStrings[ARTL_ART_directive_267] = "directive ::= '!injectInstance'  '#'  ";
  artLabelStrings[ARTL_ART_directive_267] = "";
  artlhsL[ARTL_ART_directive_267] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_267] = true;
  artLabelInternalStrings[ARTL_ART_directive_268] = "directive ::= '!injectInstance'  . '#'  ";
  artLabelStrings[ARTL_ART_directive_268] = "";
  artlhsL[ARTL_ART_directive_268] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_268] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_268] = true;
  artPopD[ARTL_ART_directive_268] = true;
  artLabelInternalStrings[ARTL_ART_directive_269] = "directive ::= '!injectInstance'  '#'  ";
  artLabelStrings[ARTL_ART_directive_269] = "";
  artlhsL[ARTL_ART_directive_269] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_269] = true;
  artLabelInternalStrings[ARTL_ART_directive_270] = "directive ::= '!injectInstance'  '#'  .";
  artLabelStrings[ARTL_ART_directive_270] = "";
  artlhsL[ARTL_ART_directive_270] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_270] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_270] = true;
  arteoR_pL[ARTL_ART_directive_270] = true;
  artPopD[ARTL_ART_directive_270] = true;
  artLabelInternalStrings[ARTL_ART_directive_272] = "directive ::= . '!injectProduction'  cfgRHS ";
  artLabelStrings[ARTL_ART_directive_272] = "";
  artlhsL[ARTL_ART_directive_272] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_272] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_273] = "directive ::= '!injectProduction'  cfgRHS ";
  artLabelStrings[ARTL_ART_directive_273] = "";
  artlhsL[ARTL_ART_directive_273] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_274] = "directive ::= '!injectProduction'  . cfgRHS ";
  artLabelStrings[ARTL_ART_directive_274] = "";
  artlhsL[ARTL_ART_directive_274] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_274] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_274] = true;
  artLabelInternalStrings[ARTL_ART_directive_276] = "directive ::= '!injectProduction'  cfgRHS .";
  artLabelStrings[ARTL_ART_directive_276] = "";
  artlhsL[ARTL_ART_directive_276] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_276] = ARTL_ART_cfgRHS;
  artKindOfs[ARTL_ART_directive_276] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_276] = true;
  arteoR_pL[ARTL_ART_directive_276] = true;
  artPopD[ARTL_ART_directive_276] = true;
  artLabelInternalStrings[ARTL_ART_directive_278] = "directive ::= . '!injectProduction'  '#'  ";
  artLabelStrings[ARTL_ART_directive_278] = "";
  artlhsL[ARTL_ART_directive_278] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_278] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_278] = true;
  artLabelInternalStrings[ARTL_ART_directive_279] = "directive ::= '!injectProduction'  '#'  ";
  artLabelStrings[ARTL_ART_directive_279] = "";
  artlhsL[ARTL_ART_directive_279] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_279] = true;
  artLabelInternalStrings[ARTL_ART_directive_280] = "directive ::= '!injectProduction'  . '#'  ";
  artLabelStrings[ARTL_ART_directive_280] = "";
  artlhsL[ARTL_ART_directive_280] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_280] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_280] = true;
  artPopD[ARTL_ART_directive_280] = true;
  artFolds[ARTL_ART_directive_282] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_directive_281] = "directive ::= '!injectProduction'  '#'  ";
  artLabelStrings[ARTL_ART_directive_281] = "";
  artlhsL[ARTL_ART_directive_281] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_281] = true;
  artLabelInternalStrings[ARTL_ART_directive_282] = "directive ::= '!injectProduction'  '#'  .";
  artLabelStrings[ARTL_ART_directive_282] = "";
  artlhsL[ARTL_ART_directive_282] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_282] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_282] = true;
  arteoR_pL[ARTL_ART_directive_282] = true;
  artPopD[ARTL_ART_directive_282] = true;
  artLabelInternalStrings[ARTL_ART_directive_284] = "directive ::= . '!tweFromSPPF'  ";
  artLabelStrings[ARTL_ART_directive_284] = "";
  artlhsL[ARTL_ART_directive_284] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_284] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_284] = true;
  artLabelInternalStrings[ARTL_ART_directive_285] = "directive ::= '!tweFromSPPF'  ";
  artLabelStrings[ARTL_ART_directive_285] = "";
  artlhsL[ARTL_ART_directive_285] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_285] = true;
  artLabelInternalStrings[ARTL_ART_directive_286] = "directive ::= '!tweFromSPPF'  .";
  artLabelStrings[ARTL_ART_directive_286] = "";
  artlhsL[ARTL_ART_directive_286] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_286] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_286] = true;
  arteoR_pL[ARTL_ART_directive_286] = true;
  artPopD[ARTL_ART_directive_286] = true;
  artLabelInternalStrings[ARTL_ART_directive_288] = "directive ::= . '!tweTokenWrite'  ";
  artLabelStrings[ARTL_ART_directive_288] = "";
  artlhsL[ARTL_ART_directive_288] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_288] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_288] = true;
  artLabelInternalStrings[ARTL_ART_directive_289] = "directive ::= '!tweTokenWrite'  ";
  artLabelStrings[ARTL_ART_directive_289] = "";
  artlhsL[ARTL_ART_directive_289] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_289] = true;
  artLabelInternalStrings[ARTL_ART_directive_290] = "directive ::= '!tweTokenWrite'  .";
  artLabelStrings[ARTL_ART_directive_290] = "";
  artlhsL[ARTL_ART_directive_290] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_290] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_290] = true;
  arteoR_pL[ARTL_ART_directive_290] = true;
  artPopD[ARTL_ART_directive_290] = true;
  artLabelInternalStrings[ARTL_ART_directive_292] = "directive ::= . '!tweLexicalisations'  ";
  artLabelStrings[ARTL_ART_directive_292] = "";
  artlhsL[ARTL_ART_directive_292] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_292] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_292] = true;
  artLabelInternalStrings[ARTL_ART_directive_293] = "directive ::= '!tweLexicalisations'  ";
  artLabelStrings[ARTL_ART_directive_293] = "";
  artlhsL[ARTL_ART_directive_293] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_293] = true;
  artLabelInternalStrings[ARTL_ART_directive_294] = "directive ::= '!tweLexicalisations'  .";
  artLabelStrings[ARTL_ART_directive_294] = "";
  artlhsL[ARTL_ART_directive_294] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_294] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_294] = true;
  arteoR_pL[ARTL_ART_directive_294] = true;
  artPopD[ARTL_ART_directive_294] = true;
  artLabelInternalStrings[ARTL_ART_directive_296] = "directive ::= . '!tweExtents'  ";
  artLabelStrings[ARTL_ART_directive_296] = "";
  artlhsL[ARTL_ART_directive_296] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_296] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_296] = true;
  artLabelInternalStrings[ARTL_ART_directive_297] = "directive ::= '!tweExtents'  ";
  artLabelStrings[ARTL_ART_directive_297] = "";
  artlhsL[ARTL_ART_directive_297] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_297] = true;
  artLabelInternalStrings[ARTL_ART_directive_298] = "directive ::= '!tweExtents'  .";
  artLabelStrings[ARTL_ART_directive_298] = "";
  artlhsL[ARTL_ART_directive_298] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_298] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_298] = true;
  arteoR_pL[ARTL_ART_directive_298] = true;
  artPopD[ARTL_ART_directive_298] = true;
  artLabelInternalStrings[ARTL_ART_directive_300] = "directive ::= . '!tweSegments'  ";
  artLabelStrings[ARTL_ART_directive_300] = "";
  artlhsL[ARTL_ART_directive_300] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_300] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_300] = true;
  artLabelInternalStrings[ARTL_ART_directive_301] = "directive ::= '!tweSegments'  ";
  artLabelStrings[ARTL_ART_directive_301] = "";
  artlhsL[ARTL_ART_directive_301] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_301] = true;
  artLabelInternalStrings[ARTL_ART_directive_302] = "directive ::= '!tweSegments'  .";
  artLabelStrings[ARTL_ART_directive_302] = "";
  artlhsL[ARTL_ART_directive_302] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_302] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_302] = true;
  arteoR_pL[ARTL_ART_directive_302] = true;
  artPopD[ARTL_ART_directive_302] = true;
  artLabelInternalStrings[ARTL_ART_directive_304] = "directive ::= . '!tweRecursive'  ";
  artLabelStrings[ARTL_ART_directive_304] = "";
  artlhsL[ARTL_ART_directive_304] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_304] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_304] = true;
  artLabelInternalStrings[ARTL_ART_directive_305] = "directive ::= '!tweRecursive'  ";
  artLabelStrings[ARTL_ART_directive_305] = "";
  artlhsL[ARTL_ART_directive_305] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_305] = true;
  artLabelInternalStrings[ARTL_ART_directive_306] = "directive ::= '!tweRecursive'  .";
  artLabelStrings[ARTL_ART_directive_306] = "";
  artlhsL[ARTL_ART_directive_306] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_306] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_306] = true;
  arteoR_pL[ARTL_ART_directive_306] = true;
  artPopD[ARTL_ART_directive_306] = true;
  artLabelInternalStrings[ARTL_ART_directive_308] = "directive ::= . '!tweLongest'  ";
  artLabelStrings[ARTL_ART_directive_308] = "";
  artlhsL[ARTL_ART_directive_308] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_308] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_308] = true;
  artLabelInternalStrings[ARTL_ART_directive_309] = "directive ::= '!tweLongest'  ";
  artLabelStrings[ARTL_ART_directive_309] = "";
  artlhsL[ARTL_ART_directive_309] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_309] = true;
  artLabelInternalStrings[ARTL_ART_directive_310] = "directive ::= '!tweLongest'  .";
  artLabelStrings[ARTL_ART_directive_310] = "";
  artlhsL[ARTL_ART_directive_310] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_310] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_310] = true;
  arteoR_pL[ARTL_ART_directive_310] = true;
  artPopD[ARTL_ART_directive_310] = true;
  artLabelInternalStrings[ARTL_ART_directive_312] = "directive ::= . '!twePriority'  ";
  artLabelStrings[ARTL_ART_directive_312] = "";
  artlhsL[ARTL_ART_directive_312] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_312] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_312] = true;
  artLabelInternalStrings[ARTL_ART_directive_313] = "directive ::= '!twePriority'  ";
  artLabelStrings[ARTL_ART_directive_313] = "";
  artlhsL[ARTL_ART_directive_313] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_313] = true;
  artLabelInternalStrings[ARTL_ART_directive_314] = "directive ::= '!twePriority'  .";
  artLabelStrings[ARTL_ART_directive_314] = "";
  artlhsL[ARTL_ART_directive_314] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_314] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_314] = true;
  arteoR_pL[ARTL_ART_directive_314] = true;
  artPopD[ARTL_ART_directive_314] = true;
  artLabelInternalStrings[ARTL_ART_directive_316] = "directive ::= . '!tweDead'  ";
  artLabelStrings[ARTL_ART_directive_316] = "";
  artlhsL[ARTL_ART_directive_316] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_316] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_316] = true;
  artLabelInternalStrings[ARTL_ART_directive_317] = "directive ::= '!tweDead'  ";
  artLabelStrings[ARTL_ART_directive_317] = "";
  artlhsL[ARTL_ART_directive_317] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_317] = true;
  artLabelInternalStrings[ARTL_ART_directive_318] = "directive ::= '!tweDead'  .";
  artLabelStrings[ARTL_ART_directive_318] = "";
  artlhsL[ARTL_ART_directive_318] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_318] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_318] = true;
  arteoR_pL[ARTL_ART_directive_318] = true;
  artPopD[ARTL_ART_directive_318] = true;
  artLabelInternalStrings[ARTL_ART_directive_320] = "directive ::= . '!sppfLongest'  ";
  artLabelStrings[ARTL_ART_directive_320] = "";
  artlhsL[ARTL_ART_directive_320] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_320] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_320] = true;
  artLabelInternalStrings[ARTL_ART_directive_321] = "directive ::= '!sppfLongest'  ";
  artLabelStrings[ARTL_ART_directive_321] = "";
  artlhsL[ARTL_ART_directive_321] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_321] = true;
  artLabelInternalStrings[ARTL_ART_directive_322] = "directive ::= '!sppfLongest'  .";
  artLabelStrings[ARTL_ART_directive_322] = "";
  artlhsL[ARTL_ART_directive_322] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_322] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_322] = true;
  arteoR_pL[ARTL_ART_directive_322] = true;
  artPopD[ARTL_ART_directive_322] = true;
  artLabelInternalStrings[ARTL_ART_directive_324] = "directive ::= . '!sppfPriority'  ";
  artLabelStrings[ARTL_ART_directive_324] = "";
  artlhsL[ARTL_ART_directive_324] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_324] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_324] = true;
  artLabelInternalStrings[ARTL_ART_directive_325] = "directive ::= '!sppfPriority'  ";
  artLabelStrings[ARTL_ART_directive_325] = "";
  artlhsL[ARTL_ART_directive_325] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_325] = true;
  artLabelInternalStrings[ARTL_ART_directive_326] = "directive ::= '!sppfPriority'  .";
  artLabelStrings[ARTL_ART_directive_326] = "";
  artlhsL[ARTL_ART_directive_326] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_326] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_326] = true;
  arteoR_pL[ARTL_ART_directive_326] = true;
  artPopD[ARTL_ART_directive_326] = true;
  artLabelInternalStrings[ARTL_ART_directive_328] = "directive ::= . '!outputDirectory'  STRING_PLAIN_SQ ";
  artLabelStrings[ARTL_ART_directive_328] = "";
  artlhsL[ARTL_ART_directive_328] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_328] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_329] = "directive ::= '!outputDirectory'  STRING_PLAIN_SQ ";
  artLabelStrings[ARTL_ART_directive_329] = "";
  artlhsL[ARTL_ART_directive_329] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_330] = "directive ::= '!outputDirectory'  . STRING_PLAIN_SQ ";
  artLabelStrings[ARTL_ART_directive_330] = "";
  artlhsL[ARTL_ART_directive_330] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_330] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_330] = true;
  artLabelInternalStrings[ARTL_ART_directive_332] = "directive ::= '!outputDirectory'  STRING_PLAIN_SQ .";
  artLabelStrings[ARTL_ART_directive_332] = "";
  artlhsL[ARTL_ART_directive_332] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_332] = ARTL_ART_STRING_PLAIN_SQ;
  artKindOfs[ARTL_ART_directive_332] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_332] = true;
  arteoR_pL[ARTL_ART_directive_332] = true;
  artPopD[ARTL_ART_directive_332] = true;
  artLabelInternalStrings[ARTL_ART_directive_334] = "directive ::= . '!namespace'  STRING_PLAIN_SQ ";
  artLabelStrings[ARTL_ART_directive_334] = "";
  artlhsL[ARTL_ART_directive_334] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_334] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_335] = "directive ::= '!namespace'  STRING_PLAIN_SQ ";
  artLabelStrings[ARTL_ART_directive_335] = "";
  artlhsL[ARTL_ART_directive_335] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_336] = "directive ::= '!namespace'  . STRING_PLAIN_SQ ";
  artLabelStrings[ARTL_ART_directive_336] = "";
  artlhsL[ARTL_ART_directive_336] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_336] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_336] = true;
  artLabelInternalStrings[ARTL_ART_directive_338] = "directive ::= '!namespace'  STRING_PLAIN_SQ .";
  artLabelStrings[ARTL_ART_directive_338] = "";
  artlhsL[ARTL_ART_directive_338] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_338] = ARTL_ART_STRING_PLAIN_SQ;
  artKindOfs[ARTL_ART_directive_338] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_338] = true;
  arteoR_pL[ARTL_ART_directive_338] = true;
  artPopD[ARTL_ART_directive_338] = true;
  artLabelInternalStrings[ARTL_ART_directive_340] = "directive ::= . '!lexerName'  STRING_PLAIN_SQ ";
  artLabelStrings[ARTL_ART_directive_340] = "";
  artlhsL[ARTL_ART_directive_340] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_340] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_341] = "directive ::= '!lexerName'  STRING_PLAIN_SQ ";
  artLabelStrings[ARTL_ART_directive_341] = "";
  artlhsL[ARTL_ART_directive_341] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_342] = "directive ::= '!lexerName'  . STRING_PLAIN_SQ ";
  artLabelStrings[ARTL_ART_directive_342] = "";
  artlhsL[ARTL_ART_directive_342] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_342] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_342] = true;
  artLabelInternalStrings[ARTL_ART_directive_344] = "directive ::= '!lexerName'  STRING_PLAIN_SQ .";
  artLabelStrings[ARTL_ART_directive_344] = "";
  artlhsL[ARTL_ART_directive_344] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_344] = ARTL_ART_STRING_PLAIN_SQ;
  artKindOfs[ARTL_ART_directive_344] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_344] = true;
  arteoR_pL[ARTL_ART_directive_344] = true;
  artPopD[ARTL_ART_directive_344] = true;
  artLabelInternalStrings[ARTL_ART_directive_346] = "directive ::= . '!parserName'  STRING_PLAIN_SQ ";
  artLabelStrings[ARTL_ART_directive_346] = "";
  artlhsL[ARTL_ART_directive_346] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_346] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_347] = "directive ::= '!parserName'  STRING_PLAIN_SQ ";
  artLabelStrings[ARTL_ART_directive_347] = "";
  artlhsL[ARTL_ART_directive_347] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_348] = "directive ::= '!parserName'  . STRING_PLAIN_SQ ";
  artLabelStrings[ARTL_ART_directive_348] = "";
  artlhsL[ARTL_ART_directive_348] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_348] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_348] = true;
  artLabelInternalStrings[ARTL_ART_directive_350] = "directive ::= '!parserName'  STRING_PLAIN_SQ .";
  artLabelStrings[ARTL_ART_directive_350] = "";
  artlhsL[ARTL_ART_directive_350] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_350] = ARTL_ART_STRING_PLAIN_SQ;
  artKindOfs[ARTL_ART_directive_350] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_350] = true;
  arteoR_pL[ARTL_ART_directive_350] = true;
  artPopD[ARTL_ART_directive_350] = true;
  artLabelInternalStrings[ARTL_ART_directive_352] = "directive ::= . '!generateDynamic'  ";
  artLabelStrings[ARTL_ART_directive_352] = "";
  artlhsL[ARTL_ART_directive_352] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_352] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_352] = true;
  artLabelInternalStrings[ARTL_ART_directive_353] = "directive ::= '!generateDynamic'  ";
  artLabelStrings[ARTL_ART_directive_353] = "";
  artlhsL[ARTL_ART_directive_353] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_353] = true;
  artLabelInternalStrings[ARTL_ART_directive_354] = "directive ::= '!generateDynamic'  .";
  artLabelStrings[ARTL_ART_directive_354] = "";
  artlhsL[ARTL_ART_directive_354] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_354] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_354] = true;
  arteoR_pL[ARTL_ART_directive_354] = true;
  artPopD[ARTL_ART_directive_354] = true;
  artLabelInternalStrings[ARTL_ART_directive_356] = "directive ::= . '!generateStatic'  ";
  artLabelStrings[ARTL_ART_directive_356] = "";
  artlhsL[ARTL_ART_directive_356] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_356] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_356] = true;
  artLabelInternalStrings[ARTL_ART_directive_357] = "directive ::= '!generateStatic'  ";
  artLabelStrings[ARTL_ART_directive_357] = "";
  artlhsL[ARTL_ART_directive_357] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_357] = true;
  artLabelInternalStrings[ARTL_ART_directive_358] = "directive ::= '!generateStatic'  .";
  artLabelStrings[ARTL_ART_directive_358] = "";
  artlhsL[ARTL_ART_directive_358] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_358] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_358] = true;
  arteoR_pL[ARTL_ART_directive_358] = true;
  artPopD[ARTL_ART_directive_358] = true;
  artLabelInternalStrings[ARTL_ART_directive_360] = "directive ::= . '!generateState'  ";
  artLabelStrings[ARTL_ART_directive_360] = "";
  artlhsL[ARTL_ART_directive_360] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_360] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_360] = true;
  artLabelInternalStrings[ARTL_ART_directive_361] = "directive ::= '!generateState'  ";
  artLabelStrings[ARTL_ART_directive_361] = "";
  artlhsL[ARTL_ART_directive_361] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_361] = true;
  artLabelInternalStrings[ARTL_ART_directive_362] = "directive ::= '!generateState'  .";
  artLabelStrings[ARTL_ART_directive_362] = "";
  artlhsL[ARTL_ART_directive_362] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_362] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_362] = true;
  arteoR_pL[ARTL_ART_directive_362] = true;
  artPopD[ARTL_ART_directive_362] = true;
  artLabelInternalStrings[ARTL_ART_directive_364] = "directive ::= . '!generateFragment'  ";
  artLabelStrings[ARTL_ART_directive_364] = "";
  artlhsL[ARTL_ART_directive_364] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_364] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_364] = true;
  artLabelInternalStrings[ARTL_ART_directive_365] = "directive ::= '!generateFragment'  ";
  artLabelStrings[ARTL_ART_directive_365] = "";
  artlhsL[ARTL_ART_directive_365] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_365] = true;
  artLabelInternalStrings[ARTL_ART_directive_366] = "directive ::= '!generateFragment'  .";
  artLabelStrings[ARTL_ART_directive_366] = "";
  artlhsL[ARTL_ART_directive_366] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_366] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_366] = true;
  arteoR_pL[ARTL_ART_directive_366] = true;
  artPopD[ARTL_ART_directive_366] = true;
  artLabelInternalStrings[ARTL_ART_directive_368] = "directive ::= . '!generatePool'  ";
  artLabelStrings[ARTL_ART_directive_368] = "";
  artlhsL[ARTL_ART_directive_368] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_368] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_368] = true;
  artLabelInternalStrings[ARTL_ART_directive_369] = "directive ::= '!generatePool'  ";
  artLabelStrings[ARTL_ART_directive_369] = "";
  artlhsL[ARTL_ART_directive_369] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_369] = true;
  artLabelInternalStrings[ARTL_ART_directive_370] = "directive ::= '!generatePool'  .";
  artLabelStrings[ARTL_ART_directive_370] = "";
  artlhsL[ARTL_ART_directive_370] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_370] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_370] = true;
  arteoR_pL[ARTL_ART_directive_370] = true;
  artPopD[ARTL_ART_directive_370] = true;
  artLabelInternalStrings[ARTL_ART_directive_372] = "directive ::= . '!generateJava'  ";
  artLabelStrings[ARTL_ART_directive_372] = "";
  artlhsL[ARTL_ART_directive_372] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_372] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_372] = true;
  artLabelInternalStrings[ARTL_ART_directive_373] = "directive ::= '!generateJava'  ";
  artLabelStrings[ARTL_ART_directive_373] = "";
  artlhsL[ARTL_ART_directive_373] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_373] = true;
  artLabelInternalStrings[ARTL_ART_directive_374] = "directive ::= '!generateJava'  .";
  artLabelStrings[ARTL_ART_directive_374] = "";
  artlhsL[ARTL_ART_directive_374] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_374] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_374] = true;
  arteoR_pL[ARTL_ART_directive_374] = true;
  artPopD[ARTL_ART_directive_374] = true;
  artLabelInternalStrings[ARTL_ART_directive_376] = "directive ::= . '!generateC++'  ";
  artLabelStrings[ARTL_ART_directive_376] = "";
  artlhsL[ARTL_ART_directive_376] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_376] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_376] = true;
  artLabelInternalStrings[ARTL_ART_directive_377] = "directive ::= '!generateC++'  ";
  artLabelStrings[ARTL_ART_directive_377] = "";
  artlhsL[ARTL_ART_directive_377] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_377] = true;
  artLabelInternalStrings[ARTL_ART_directive_378] = "directive ::= '!generateC++'  .";
  artLabelStrings[ARTL_ART_directive_378] = "";
  artlhsL[ARTL_ART_directive_378] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_378] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_378] = true;
  arteoR_pL[ARTL_ART_directive_378] = true;
  artPopD[ARTL_ART_directive_378] = true;
  artLabelInternalStrings[ARTL_ART_directive_380] = "directive ::= . '!generateML'  ";
  artLabelStrings[ARTL_ART_directive_380] = "";
  artlhsL[ARTL_ART_directive_380] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_380] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_380] = true;
  artLabelInternalStrings[ARTL_ART_directive_381] = "directive ::= '!generateML'  ";
  artLabelStrings[ARTL_ART_directive_381] = "";
  artlhsL[ARTL_ART_directive_381] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_381] = true;
  artLabelInternalStrings[ARTL_ART_directive_382] = "directive ::= '!generateML'  .";
  artLabelStrings[ARTL_ART_directive_382] = "";
  artlhsL[ARTL_ART_directive_382] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_382] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_382] = true;
  arteoR_pL[ARTL_ART_directive_382] = true;
  artPopD[ARTL_ART_directive_382] = true;
  artLabelInternalStrings[ARTL_ART_directive_384] = "directive ::= . '!prelude'  STRING_BRACE_NEST ";
  artLabelStrings[ARTL_ART_directive_384] = "";
  artlhsL[ARTL_ART_directive_384] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_384] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_385] = "directive ::= '!prelude'  STRING_BRACE_NEST ";
  artLabelStrings[ARTL_ART_directive_385] = "";
  artlhsL[ARTL_ART_directive_385] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_386] = "directive ::= '!prelude'  . STRING_BRACE_NEST ";
  artLabelStrings[ARTL_ART_directive_386] = "";
  artlhsL[ARTL_ART_directive_386] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_386] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_386] = true;
  artLabelInternalStrings[ARTL_ART_directive_388] = "directive ::= '!prelude'  STRING_BRACE_NEST .";
  artLabelStrings[ARTL_ART_directive_388] = "";
  artlhsL[ARTL_ART_directive_388] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_388] = ARTL_ART_STRING_BRACE_NEST;
  artKindOfs[ARTL_ART_directive_388] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_388] = true;
  arteoR_pL[ARTL_ART_directive_388] = true;
  artPopD[ARTL_ART_directive_388] = true;
  artLabelInternalStrings[ARTL_ART_directive_390] = "directive ::= . '!support'  STRING_BRACE_NEST ";
  artLabelStrings[ARTL_ART_directive_390] = "";
  artlhsL[ARTL_ART_directive_390] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_390] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_391] = "directive ::= '!support'  STRING_BRACE_NEST ";
  artLabelStrings[ARTL_ART_directive_391] = "";
  artlhsL[ARTL_ART_directive_391] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_392] = "directive ::= '!support'  . STRING_BRACE_NEST ";
  artLabelStrings[ARTL_ART_directive_392] = "";
  artlhsL[ARTL_ART_directive_392] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_392] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_392] = true;
  artLabelInternalStrings[ARTL_ART_directive_394] = "directive ::= '!support'  STRING_BRACE_NEST .";
  artLabelStrings[ARTL_ART_directive_394] = "";
  artlhsL[ARTL_ART_directive_394] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_394] = ARTL_ART_STRING_BRACE_NEST;
  artKindOfs[ARTL_ART_directive_394] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_394] = true;
  arteoR_pL[ARTL_ART_directive_394] = true;
  artPopD[ARTL_ART_directive_394] = true;
  artLabelInternalStrings[ARTL_ART_directive_396] = "directive ::= . '!GLLPredictivePops'  ";
  artLabelStrings[ARTL_ART_directive_396] = "";
  artlhsL[ARTL_ART_directive_396] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_396] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_396] = true;
  artLabelInternalStrings[ARTL_ART_directive_397] = "directive ::= '!GLLPredictivePops'  ";
  artLabelStrings[ARTL_ART_directive_397] = "";
  artlhsL[ARTL_ART_directive_397] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_397] = true;
  artLabelInternalStrings[ARTL_ART_directive_398] = "directive ::= '!GLLPredictivePops'  .";
  artLabelStrings[ARTL_ART_directive_398] = "";
  artlhsL[ARTL_ART_directive_398] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_398] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_398] = true;
  arteoR_pL[ARTL_ART_directive_398] = true;
  artPopD[ARTL_ART_directive_398] = true;
  artLabelInternalStrings[ARTL_ART_directive_400] = "directive ::= . '!GLLFIFODescriptors'  ";
  artLabelStrings[ARTL_ART_directive_400] = "";
  artlhsL[ARTL_ART_directive_400] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_400] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_400] = true;
  artLabelInternalStrings[ARTL_ART_directive_401] = "directive ::= '!GLLFIFODescriptors'  ";
  artLabelStrings[ARTL_ART_directive_401] = "";
  artlhsL[ARTL_ART_directive_401] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_401] = true;
  artLabelInternalStrings[ARTL_ART_directive_402] = "directive ::= '!GLLFIFODescriptors'  .";
  artLabelStrings[ARTL_ART_directive_402] = "";
  artlhsL[ARTL_ART_directive_402] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_402] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_402] = true;
  arteoR_pL[ARTL_ART_directive_402] = true;
  artPopD[ARTL_ART_directive_402] = true;
  artLabelInternalStrings[ARTL_ART_directive_404] = "directive ::= . '!GLLSuppressPopGuard'  ";
  artLabelStrings[ARTL_ART_directive_404] = "";
  artlhsL[ARTL_ART_directive_404] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_404] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_404] = true;
  artLabelInternalStrings[ARTL_ART_directive_405] = "directive ::= '!GLLSuppressPopGuard'  ";
  artLabelStrings[ARTL_ART_directive_405] = "";
  artlhsL[ARTL_ART_directive_405] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_405] = true;
  artLabelInternalStrings[ARTL_ART_directive_406] = "directive ::= '!GLLSuppressPopGuard'  .";
  artLabelStrings[ARTL_ART_directive_406] = "";
  artlhsL[ARTL_ART_directive_406] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_406] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_406] = true;
  arteoR_pL[ARTL_ART_directive_406] = true;
  artPopD[ARTL_ART_directive_406] = true;
  artLabelInternalStrings[ARTL_ART_directive_408] = "directive ::= . '!GLLSuppressProductionGuard'  ";
  artLabelStrings[ARTL_ART_directive_408] = "";
  artlhsL[ARTL_ART_directive_408] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_408] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_408] = true;
  artLabelInternalStrings[ARTL_ART_directive_409] = "directive ::= '!GLLSuppressProductionGuard'  ";
  artLabelStrings[ARTL_ART_directive_409] = "";
  artlhsL[ARTL_ART_directive_409] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_409] = true;
  artLabelInternalStrings[ARTL_ART_directive_410] = "directive ::= '!GLLSuppressProductionGuard'  .";
  artLabelStrings[ARTL_ART_directive_410] = "";
  artlhsL[ARTL_ART_directive_410] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_410] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_410] = true;
  arteoR_pL[ARTL_ART_directive_410] = true;
  artPopD[ARTL_ART_directive_410] = true;
  artLabelInternalStrings[ARTL_ART_directive_412] = "directive ::= . '!GLLSuppressTestRepeat'  ";
  artLabelStrings[ARTL_ART_directive_412] = "";
  artlhsL[ARTL_ART_directive_412] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_412] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_412] = true;
  artLabelInternalStrings[ARTL_ART_directive_413] = "directive ::= '!GLLSuppressTestRepeat'  ";
  artLabelStrings[ARTL_ART_directive_413] = "";
  artlhsL[ARTL_ART_directive_413] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_413] = true;
  artLabelInternalStrings[ARTL_ART_directive_414] = "directive ::= '!GLLSuppressTestRepeat'  .";
  artLabelStrings[ARTL_ART_directive_414] = "";
  artlhsL[ARTL_ART_directive_414] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_414] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_414] = true;
  arteoR_pL[ARTL_ART_directive_414] = true;
  artPopD[ARTL_ART_directive_414] = true;
  artLabelInternalStrings[ARTL_ART_directive_416] = "directive ::= . '!GLLSuppressSemantics'  ";
  artLabelStrings[ARTL_ART_directive_416] = "";
  artlhsL[ARTL_ART_directive_416] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_416] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_416] = true;
  artLabelInternalStrings[ARTL_ART_directive_417] = "directive ::= '!GLLSuppressSemantics'  ";
  artLabelStrings[ARTL_ART_directive_417] = "";
  artlhsL[ARTL_ART_directive_417] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_417] = true;
  artLabelInternalStrings[ARTL_ART_directive_418] = "directive ::= '!GLLSuppressSemantics'  .";
  artLabelStrings[ARTL_ART_directive_418] = "";
  artlhsL[ARTL_ART_directive_418] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_418] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_418] = true;
  arteoR_pL[ARTL_ART_directive_418] = true;
  artPopD[ARTL_ART_directive_418] = true;
  artLabelInternalStrings[ARTL_ART_directive_420] = "directive ::= . '!earley2007LinkedAPI'  ";
  artLabelStrings[ARTL_ART_directive_420] = "";
  artlhsL[ARTL_ART_directive_420] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_420] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_420] = true;
  artLabelInternalStrings[ARTL_ART_directive_421] = "directive ::= '!earley2007LinkedAPI'  ";
  artLabelStrings[ARTL_ART_directive_421] = "";
  artlhsL[ARTL_ART_directive_421] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_421] = true;
  artLabelInternalStrings[ARTL_ART_directive_422] = "directive ::= '!earley2007LinkedAPI'  .";
  artLabelStrings[ARTL_ART_directive_422] = "";
  artlhsL[ARTL_ART_directive_422] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_422] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_422] = true;
  arteoR_pL[ARTL_ART_directive_422] = true;
  artPopD[ARTL_ART_directive_422] = true;
  artLabelInternalStrings[ARTL_ART_directive_424] = "directive ::= . '!earley'  ";
  artLabelStrings[ARTL_ART_directive_424] = "";
  artlhsL[ARTL_ART_directive_424] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_424] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_424] = true;
  artLabelInternalStrings[ARTL_ART_directive_425] = "directive ::= '!earley'  ";
  artLabelStrings[ARTL_ART_directive_425] = "";
  artlhsL[ARTL_ART_directive_425] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_425] = true;
  artLabelInternalStrings[ARTL_ART_directive_426] = "directive ::= '!earley'  .";
  artLabelStrings[ARTL_ART_directive_426] = "";
  artlhsL[ARTL_ART_directive_426] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_426] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_426] = true;
  arteoR_pL[ARTL_ART_directive_426] = true;
  artPopD[ARTL_ART_directive_426] = true;
  artLabelInternalStrings[ARTL_ART_directive_428] = "directive ::= . '!earleyLinkedAPI'  ";
  artLabelStrings[ARTL_ART_directive_428] = "";
  artlhsL[ARTL_ART_directive_428] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_428] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_428] = true;
  artLabelInternalStrings[ARTL_ART_directive_429] = "directive ::= '!earleyLinkedAPI'  ";
  artLabelStrings[ARTL_ART_directive_429] = "";
  artlhsL[ARTL_ART_directive_429] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_429] = true;
  artLabelInternalStrings[ARTL_ART_directive_430] = "directive ::= '!earleyLinkedAPI'  .";
  artLabelStrings[ARTL_ART_directive_430] = "";
  artlhsL[ARTL_ART_directive_430] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_430] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_430] = true;
  arteoR_pL[ARTL_ART_directive_430] = true;
  artPopD[ARTL_ART_directive_430] = true;
  artLabelInternalStrings[ARTL_ART_directive_432] = "directive ::= . '!earleyIndexedAPI'  ";
  artLabelStrings[ARTL_ART_directive_432] = "";
  artlhsL[ARTL_ART_directive_432] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_432] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_432] = true;
  artLabelInternalStrings[ARTL_ART_directive_433] = "directive ::= '!earleyIndexedAPI'  ";
  artLabelStrings[ARTL_ART_directive_433] = "";
  artlhsL[ARTL_ART_directive_433] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_433] = true;
  artLabelInternalStrings[ARTL_ART_directive_434] = "directive ::= '!earleyIndexedAPI'  .";
  artLabelStrings[ARTL_ART_directive_434] = "";
  artlhsL[ARTL_ART_directive_434] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_434] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_434] = true;
  arteoR_pL[ARTL_ART_directive_434] = true;
  artPopD[ARTL_ART_directive_434] = true;
  artLabelInternalStrings[ARTL_ART_directive_436] = "directive ::= . '!earleyIndexedPool'  ";
  artLabelStrings[ARTL_ART_directive_436] = "";
  artlhsL[ARTL_ART_directive_436] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_436] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_436] = true;
  artLabelInternalStrings[ARTL_ART_directive_437] = "directive ::= '!earleyIndexedPool'  ";
  artLabelStrings[ARTL_ART_directive_437] = "";
  artlhsL[ARTL_ART_directive_437] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_437] = true;
  artLabelInternalStrings[ARTL_ART_directive_438] = "directive ::= '!earleyIndexedPool'  .";
  artLabelStrings[ARTL_ART_directive_438] = "";
  artlhsL[ARTL_ART_directive_438] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_438] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_438] = true;
  arteoR_pL[ARTL_ART_directive_438] = true;
  artPopD[ARTL_ART_directive_438] = true;
  artLabelInternalStrings[ARTL_ART_directive_440] = "directive ::= . '!earleyIndexedData'  ";
  artLabelStrings[ARTL_ART_directive_440] = "";
  artlhsL[ARTL_ART_directive_440] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_440] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_440] = true;
  artLabelInternalStrings[ARTL_ART_directive_441] = "directive ::= '!earleyIndexedData'  ";
  artLabelStrings[ARTL_ART_directive_441] = "";
  artlhsL[ARTL_ART_directive_441] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_441] = true;
  artLabelInternalStrings[ARTL_ART_directive_442] = "directive ::= '!earleyIndexedData'  .";
  artLabelStrings[ARTL_ART_directive_442] = "";
  artlhsL[ARTL_ART_directive_442] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_442] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_442] = true;
  arteoR_pL[ARTL_ART_directive_442] = true;
  artPopD[ARTL_ART_directive_442] = true;
  artLabelInternalStrings[ARTL_ART_directive_444] = "directive ::= . '!earleyTable'  ";
  artLabelStrings[ARTL_ART_directive_444] = "";
  artlhsL[ARTL_ART_directive_444] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_444] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_444] = true;
  artLabelInternalStrings[ARTL_ART_directive_445] = "directive ::= '!earleyTable'  ";
  artLabelStrings[ARTL_ART_directive_445] = "";
  artlhsL[ARTL_ART_directive_445] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_445] = true;
  artLabelInternalStrings[ARTL_ART_directive_446] = "directive ::= '!earleyTable'  .";
  artLabelStrings[ARTL_ART_directive_446] = "";
  artlhsL[ARTL_ART_directive_446] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_446] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_446] = true;
  arteoR_pL[ARTL_ART_directive_446] = true;
  artPopD[ARTL_ART_directive_446] = true;
  artLabelInternalStrings[ARTL_ART_directive_448] = "directive ::= . '!earleyTableLinkedAPI'  ";
  artLabelStrings[ARTL_ART_directive_448] = "";
  artlhsL[ARTL_ART_directive_448] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_448] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_448] = true;
  artLabelInternalStrings[ARTL_ART_directive_449] = "directive ::= '!earleyTableLinkedAPI'  ";
  artLabelStrings[ARTL_ART_directive_449] = "";
  artlhsL[ARTL_ART_directive_449] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_449] = true;
  artLabelInternalStrings[ARTL_ART_directive_450] = "directive ::= '!earleyTableLinkedAPI'  .";
  artLabelStrings[ARTL_ART_directive_450] = "";
  artlhsL[ARTL_ART_directive_450] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_450] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_450] = true;
  arteoR_pL[ARTL_ART_directive_450] = true;
  artPopD[ARTL_ART_directive_450] = true;
  artLabelInternalStrings[ARTL_ART_directive_452] = "directive ::= . '!earleyTableIndexedAPI'  ";
  artLabelStrings[ARTL_ART_directive_452] = "";
  artlhsL[ARTL_ART_directive_452] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_452] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_452] = true;
  artLabelInternalStrings[ARTL_ART_directive_453] = "directive ::= '!earleyTableIndexedAPI'  ";
  artLabelStrings[ARTL_ART_directive_453] = "";
  artlhsL[ARTL_ART_directive_453] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_453] = true;
  artLabelInternalStrings[ARTL_ART_directive_454] = "directive ::= '!earleyTableIndexedAPI'  .";
  artLabelStrings[ARTL_ART_directive_454] = "";
  artlhsL[ARTL_ART_directive_454] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_454] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_454] = true;
  arteoR_pL[ARTL_ART_directive_454] = true;
  artPopD[ARTL_ART_directive_454] = true;
  artLabelInternalStrings[ARTL_ART_directive_456] = "directive ::= . '!earleyTableIndexedPool'  ";
  artLabelStrings[ARTL_ART_directive_456] = "";
  artlhsL[ARTL_ART_directive_456] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_456] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_456] = true;
  artLabelInternalStrings[ARTL_ART_directive_457] = "directive ::= '!earleyTableIndexedPool'  ";
  artLabelStrings[ARTL_ART_directive_457] = "";
  artlhsL[ARTL_ART_directive_457] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_457] = true;
  artLabelInternalStrings[ARTL_ART_directive_458] = "directive ::= '!earleyTableIndexedPool'  .";
  artLabelStrings[ARTL_ART_directive_458] = "";
  artlhsL[ARTL_ART_directive_458] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_458] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_458] = true;
  arteoR_pL[ARTL_ART_directive_458] = true;
  artPopD[ARTL_ART_directive_458] = true;
  artLabelInternalStrings[ARTL_ART_directive_460] = "directive ::= . '!earleyTableIndexedData'  ";
  artLabelStrings[ARTL_ART_directive_460] = "";
  artlhsL[ARTL_ART_directive_460] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_460] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_460] = true;
  artLabelInternalStrings[ARTL_ART_directive_461] = "directive ::= '!earleyTableIndexedData'  ";
  artLabelStrings[ARTL_ART_directive_461] = "";
  artlhsL[ARTL_ART_directive_461] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_461] = true;
  artLabelInternalStrings[ARTL_ART_directive_462] = "directive ::= '!earleyTableIndexedData'  .";
  artLabelStrings[ARTL_ART_directive_462] = "";
  artlhsL[ARTL_ART_directive_462] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_462] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_462] = true;
  arteoR_pL[ARTL_ART_directive_462] = true;
  artPopD[ARTL_ART_directive_462] = true;
  artLabelInternalStrings[ARTL_ART_directive_464] = "directive ::= . '!cnp'  ";
  artLabelStrings[ARTL_ART_directive_464] = "";
  artlhsL[ARTL_ART_directive_464] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_464] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_464] = true;
  artLabelInternalStrings[ARTL_ART_directive_465] = "directive ::= '!cnp'  ";
  artLabelStrings[ARTL_ART_directive_465] = "";
  artlhsL[ARTL_ART_directive_465] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_465] = true;
  artLabelInternalStrings[ARTL_ART_directive_466] = "directive ::= '!cnp'  .";
  artLabelStrings[ARTL_ART_directive_466] = "";
  artlhsL[ARTL_ART_directive_466] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_466] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_466] = true;
  arteoR_pL[ARTL_ART_directive_466] = true;
  artPopD[ARTL_ART_directive_466] = true;
  artLabelInternalStrings[ARTL_ART_directive_468] = "directive ::= . '!cnpLinkedAPI'  ";
  artLabelStrings[ARTL_ART_directive_468] = "";
  artlhsL[ARTL_ART_directive_468] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_468] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_468] = true;
  artLabelInternalStrings[ARTL_ART_directive_469] = "directive ::= '!cnpLinkedAPI'  ";
  artLabelStrings[ARTL_ART_directive_469] = "";
  artlhsL[ARTL_ART_directive_469] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_469] = true;
  artLabelInternalStrings[ARTL_ART_directive_470] = "directive ::= '!cnpLinkedAPI'  .";
  artLabelStrings[ARTL_ART_directive_470] = "";
  artlhsL[ARTL_ART_directive_470] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_470] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_470] = true;
  arteoR_pL[ARTL_ART_directive_470] = true;
  artPopD[ARTL_ART_directive_470] = true;
  artLabelInternalStrings[ARTL_ART_directive_472] = "directive ::= . '!cnpIndexedAPI'  ";
  artLabelStrings[ARTL_ART_directive_472] = "";
  artlhsL[ARTL_ART_directive_472] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_472] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_472] = true;
  artLabelInternalStrings[ARTL_ART_directive_473] = "directive ::= '!cnpIndexedAPI'  ";
  artLabelStrings[ARTL_ART_directive_473] = "";
  artlhsL[ARTL_ART_directive_473] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_473] = true;
  artLabelInternalStrings[ARTL_ART_directive_474] = "directive ::= '!cnpIndexedAPI'  .";
  artLabelStrings[ARTL_ART_directive_474] = "";
  artlhsL[ARTL_ART_directive_474] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_474] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_474] = true;
  arteoR_pL[ARTL_ART_directive_474] = true;
  artPopD[ARTL_ART_directive_474] = true;
  artLabelInternalStrings[ARTL_ART_directive_476] = "directive ::= . '!cnpIndexedPool'  ";
  artLabelStrings[ARTL_ART_directive_476] = "";
  artlhsL[ARTL_ART_directive_476] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_476] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_476] = true;
  artLabelInternalStrings[ARTL_ART_directive_477] = "directive ::= '!cnpIndexedPool'  ";
  artLabelStrings[ARTL_ART_directive_477] = "";
  artlhsL[ARTL_ART_directive_477] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_477] = true;
  artLabelInternalStrings[ARTL_ART_directive_478] = "directive ::= '!cnpIndexedPool'  .";
  artLabelStrings[ARTL_ART_directive_478] = "";
  artlhsL[ARTL_ART_directive_478] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_478] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_478] = true;
  arteoR_pL[ARTL_ART_directive_478] = true;
  artPopD[ARTL_ART_directive_478] = true;
  artLabelInternalStrings[ARTL_ART_directive_480] = "directive ::= . '!cnpGeneratorPool'  ";
  artLabelStrings[ARTL_ART_directive_480] = "";
  artlhsL[ARTL_ART_directive_480] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_480] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_480] = true;
  artLabelInternalStrings[ARTL_ART_directive_481] = "directive ::= '!cnpGeneratorPool'  ";
  artLabelStrings[ARTL_ART_directive_481] = "";
  artlhsL[ARTL_ART_directive_481] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_481] = true;
  artLabelInternalStrings[ARTL_ART_directive_482] = "directive ::= '!cnpGeneratorPool'  .";
  artLabelStrings[ARTL_ART_directive_482] = "";
  artlhsL[ARTL_ART_directive_482] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_482] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_482] = true;
  arteoR_pL[ARTL_ART_directive_482] = true;
  artPopD[ARTL_ART_directive_482] = true;
  artLabelInternalStrings[ARTL_ART_directive_484] = "directive ::= . '!lcnp'  ";
  artLabelStrings[ARTL_ART_directive_484] = "";
  artlhsL[ARTL_ART_directive_484] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_484] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_484] = true;
  artLabelInternalStrings[ARTL_ART_directive_485] = "directive ::= '!lcnp'  ";
  artLabelStrings[ARTL_ART_directive_485] = "";
  artlhsL[ARTL_ART_directive_485] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_485] = true;
  artLabelInternalStrings[ARTL_ART_directive_486] = "directive ::= '!lcnp'  .";
  artLabelStrings[ARTL_ART_directive_486] = "";
  artlhsL[ARTL_ART_directive_486] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_486] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_486] = true;
  arteoR_pL[ARTL_ART_directive_486] = true;
  artPopD[ARTL_ART_directive_486] = true;
  artLabelInternalStrings[ARTL_ART_directive_488] = "directive ::= . '!lcnpLinkedAPI'  ";
  artLabelStrings[ARTL_ART_directive_488] = "";
  artlhsL[ARTL_ART_directive_488] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_488] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_488] = true;
  artLabelInternalStrings[ARTL_ART_directive_489] = "directive ::= '!lcnpLinkedAPI'  ";
  artLabelStrings[ARTL_ART_directive_489] = "";
  artlhsL[ARTL_ART_directive_489] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_489] = true;
  artLabelInternalStrings[ARTL_ART_directive_490] = "directive ::= '!lcnpLinkedAPI'  .";
  artLabelStrings[ARTL_ART_directive_490] = "";
  artlhsL[ARTL_ART_directive_490] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_490] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_490] = true;
  arteoR_pL[ARTL_ART_directive_490] = true;
  artPopD[ARTL_ART_directive_490] = true;
  artLabelInternalStrings[ARTL_ART_directive_492] = "directive ::= . '!lcnpIndexedAPI'  ";
  artLabelStrings[ARTL_ART_directive_492] = "";
  artlhsL[ARTL_ART_directive_492] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_492] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_492] = true;
  artLabelInternalStrings[ARTL_ART_directive_493] = "directive ::= '!lcnpIndexedAPI'  ";
  artLabelStrings[ARTL_ART_directive_493] = "";
  artlhsL[ARTL_ART_directive_493] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_493] = true;
  artLabelInternalStrings[ARTL_ART_directive_494] = "directive ::= '!lcnpIndexedAPI'  .";
  artLabelStrings[ARTL_ART_directive_494] = "";
  artlhsL[ARTL_ART_directive_494] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_494] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_494] = true;
  arteoR_pL[ARTL_ART_directive_494] = true;
  artPopD[ARTL_ART_directive_494] = true;
  artLabelInternalStrings[ARTL_ART_directive_496] = "directive ::= . '!lcnpIndexedPool'  ";
  artLabelStrings[ARTL_ART_directive_496] = "";
  artlhsL[ARTL_ART_directive_496] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_496] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_496] = true;
  artLabelInternalStrings[ARTL_ART_directive_497] = "directive ::= '!lcnpIndexedPool'  ";
  artLabelStrings[ARTL_ART_directive_497] = "";
  artlhsL[ARTL_ART_directive_497] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_497] = true;
  artLabelInternalStrings[ARTL_ART_directive_498] = "directive ::= '!lcnpIndexedPool'  .";
  artLabelStrings[ARTL_ART_directive_498] = "";
  artlhsL[ARTL_ART_directive_498] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_498] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_498] = true;
  arteoR_pL[ARTL_ART_directive_498] = true;
  artPopD[ARTL_ART_directive_498] = true;
  artLabelInternalStrings[ARTL_ART_directive_500] = "directive ::= . '!lcnpGeneratorPool'  ";
  artLabelStrings[ARTL_ART_directive_500] = "";
  artlhsL[ARTL_ART_directive_500] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_500] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_500] = true;
  artLabelInternalStrings[ARTL_ART_directive_501] = "directive ::= '!lcnpGeneratorPool'  ";
  artLabelStrings[ARTL_ART_directive_501] = "";
  artlhsL[ARTL_ART_directive_501] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_501] = true;
  artLabelInternalStrings[ARTL_ART_directive_502] = "directive ::= '!lcnpGeneratorPool'  .";
  artLabelStrings[ARTL_ART_directive_502] = "";
  artlhsL[ARTL_ART_directive_502] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_502] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_502] = true;
  arteoR_pL[ARTL_ART_directive_502] = true;
  artPopD[ARTL_ART_directive_502] = true;
  artLabelInternalStrings[ARTL_ART_directive_504] = "directive ::= . '!gll'  ";
  artLabelStrings[ARTL_ART_directive_504] = "";
  artlhsL[ARTL_ART_directive_504] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_504] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_504] = true;
  artLabelInternalStrings[ARTL_ART_directive_505] = "directive ::= '!gll'  ";
  artLabelStrings[ARTL_ART_directive_505] = "";
  artlhsL[ARTL_ART_directive_505] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_505] = true;
  artLabelInternalStrings[ARTL_ART_directive_506] = "directive ::= '!gll'  .";
  artLabelStrings[ARTL_ART_directive_506] = "";
  artlhsL[ARTL_ART_directive_506] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_506] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_506] = true;
  arteoR_pL[ARTL_ART_directive_506] = true;
  artPopD[ARTL_ART_directive_506] = true;
  artLabelInternalStrings[ARTL_ART_directive_508] = "directive ::= . '!gllGeneratorPool'  ";
  artLabelStrings[ARTL_ART_directive_508] = "";
  artlhsL[ARTL_ART_directive_508] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_508] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_508] = true;
  artLabelInternalStrings[ARTL_ART_directive_509] = "directive ::= '!gllGeneratorPool'  ";
  artLabelStrings[ARTL_ART_directive_509] = "";
  artlhsL[ARTL_ART_directive_509] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_509] = true;
  artLabelInternalStrings[ARTL_ART_directive_510] = "directive ::= '!gllGeneratorPool'  .";
  artLabelStrings[ARTL_ART_directive_510] = "";
  artlhsL[ARTL_ART_directive_510] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_510] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_510] = true;
  arteoR_pL[ARTL_ART_directive_510] = true;
  artPopD[ARTL_ART_directive_510] = true;
  artLabelInternalStrings[ARTL_ART_directive_512] = "directive ::= . '!gllTWEGeneratorPool'  ";
  artLabelStrings[ARTL_ART_directive_512] = "";
  artlhsL[ARTL_ART_directive_512] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_512] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_512] = true;
  artLabelInternalStrings[ARTL_ART_directive_513] = "directive ::= '!gllTWEGeneratorPool'  ";
  artLabelStrings[ARTL_ART_directive_513] = "";
  artlhsL[ARTL_ART_directive_513] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_513] = true;
  artLabelInternalStrings[ARTL_ART_directive_514] = "directive ::= '!gllTWEGeneratorPool'  .";
  artLabelStrings[ARTL_ART_directive_514] = "";
  artlhsL[ARTL_ART_directive_514] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_514] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_514] = true;
  arteoR_pL[ARTL_ART_directive_514] = true;
  artPopD[ARTL_ART_directive_514] = true;
  artLabelInternalStrings[ARTL_ART_directive_516] = "directive ::= . '!gllClusteredGeneratorPool'  ";
  artLabelStrings[ARTL_ART_directive_516] = "";
  artlhsL[ARTL_ART_directive_516] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_516] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_516] = true;
  artLabelInternalStrings[ARTL_ART_directive_517] = "directive ::= '!gllClusteredGeneratorPool'  ";
  artLabelStrings[ARTL_ART_directive_517] = "";
  artlhsL[ARTL_ART_directive_517] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_517] = true;
  artLabelInternalStrings[ARTL_ART_directive_518] = "directive ::= '!gllClusteredGeneratorPool'  .";
  artLabelStrings[ARTL_ART_directive_518] = "";
  artlhsL[ARTL_ART_directive_518] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_518] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_518] = true;
  arteoR_pL[ARTL_ART_directive_518] = true;
  artPopD[ARTL_ART_directive_518] = true;
  artLabelInternalStrings[ARTL_ART_directive_520] = "directive ::= . '!mgll'  ";
  artLabelStrings[ARTL_ART_directive_520] = "";
  artlhsL[ARTL_ART_directive_520] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_520] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_520] = true;
  artLabelInternalStrings[ARTL_ART_directive_521] = "directive ::= '!mgll'  ";
  artLabelStrings[ARTL_ART_directive_521] = "";
  artlhsL[ARTL_ART_directive_521] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_521] = true;
  artLabelInternalStrings[ARTL_ART_directive_522] = "directive ::= '!mgll'  .";
  artLabelStrings[ARTL_ART_directive_522] = "";
  artlhsL[ARTL_ART_directive_522] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_522] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_522] = true;
  arteoR_pL[ARTL_ART_directive_522] = true;
  artPopD[ARTL_ART_directive_522] = true;
  artLabelInternalStrings[ARTL_ART_directive_524] = "directive ::= . '!mgllGeneratorPool'  ";
  artLabelStrings[ARTL_ART_directive_524] = "";
  artlhsL[ARTL_ART_directive_524] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_524] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_524] = true;
  artLabelInternalStrings[ARTL_ART_directive_525] = "directive ::= '!mgllGeneratorPool'  ";
  artLabelStrings[ARTL_ART_directive_525] = "";
  artlhsL[ARTL_ART_directive_525] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_525] = true;
  artLabelInternalStrings[ARTL_ART_directive_526] = "directive ::= '!mgllGeneratorPool'  .";
  artLabelStrings[ARTL_ART_directive_526] = "";
  artlhsL[ARTL_ART_directive_526] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_526] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_526] = true;
  arteoR_pL[ARTL_ART_directive_526] = true;
  artPopD[ARTL_ART_directive_526] = true;
  artLabelInternalStrings[ARTL_ART_directive_528] = "directive ::= . '!osbrd'  ";
  artLabelStrings[ARTL_ART_directive_528] = "";
  artlhsL[ARTL_ART_directive_528] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_528] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_528] = true;
  artLabelInternalStrings[ARTL_ART_directive_529] = "directive ::= '!osbrd'  ";
  artLabelStrings[ARTL_ART_directive_529] = "";
  artlhsL[ARTL_ART_directive_529] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_529] = true;
  artLabelInternalStrings[ARTL_ART_directive_530] = "directive ::= '!osbrd'  .";
  artLabelStrings[ARTL_ART_directive_530] = "";
  artlhsL[ARTL_ART_directive_530] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_530] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_530] = true;
  arteoR_pL[ARTL_ART_directive_530] = true;
  artPopD[ARTL_ART_directive_530] = true;
  artLabelInternalStrings[ARTL_ART_directive_532] = "directive ::= . '!osbrdGenerator'  ";
  artLabelStrings[ARTL_ART_directive_532] = "";
  artlhsL[ARTL_ART_directive_532] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_532] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_532] = true;
  artLabelInternalStrings[ARTL_ART_directive_533] = "directive ::= '!osbrdGenerator'  ";
  artLabelStrings[ARTL_ART_directive_533] = "";
  artlhsL[ARTL_ART_directive_533] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_533] = true;
  artLabelInternalStrings[ARTL_ART_directive_534] = "directive ::= '!osbrdGenerator'  .";
  artLabelStrings[ARTL_ART_directive_534] = "";
  artlhsL[ARTL_ART_directive_534] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_534] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_534] = true;
  arteoR_pL[ARTL_ART_directive_534] = true;
  artPopD[ARTL_ART_directive_534] = true;
  artLabelInternalStrings[ARTL_ART_directive_536] = "directive ::= . '!sml97Parser'  ";
  artLabelStrings[ARTL_ART_directive_536] = "";
  artlhsL[ARTL_ART_directive_536] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_536] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_536] = true;
  artLabelInternalStrings[ARTL_ART_directive_537] = "directive ::= '!sml97Parser'  ";
  artLabelStrings[ARTL_ART_directive_537] = "";
  artlhsL[ARTL_ART_directive_537] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_537] = true;
  artLabelInternalStrings[ARTL_ART_directive_538] = "directive ::= '!sml97Parser'  .";
  artLabelStrings[ARTL_ART_directive_538] = "";
  artlhsL[ARTL_ART_directive_538] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_538] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_538] = true;
  arteoR_pL[ARTL_ART_directive_538] = true;
  artPopD[ARTL_ART_directive_538] = true;
  artLabelInternalStrings[ARTL_ART_directive_540] = "directive ::= . '!lexerData'  ";
  artLabelStrings[ARTL_ART_directive_540] = "";
  artlhsL[ARTL_ART_directive_540] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_540] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_540] = true;
  artLabelInternalStrings[ARTL_ART_directive_541] = "directive ::= '!lexerData'  ";
  artLabelStrings[ARTL_ART_directive_541] = "";
  artlhsL[ARTL_ART_directive_541] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_541] = true;
  artLabelInternalStrings[ARTL_ART_directive_542] = "directive ::= '!lexerData'  .";
  artLabelStrings[ARTL_ART_directive_542] = "";
  artlhsL[ARTL_ART_directive_542] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_542] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_542] = true;
  arteoR_pL[ARTL_ART_directive_542] = true;
  artPopD[ARTL_ART_directive_542] = true;
  artLabelInternalStrings[ARTL_ART_directive_544] = "directive ::= . '!relation'  TRRELATION ";
  artLabelStrings[ARTL_ART_directive_544] = "";
  artlhsL[ARTL_ART_directive_544] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_544] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_545] = "directive ::= '!relation'  TRRELATION ";
  artLabelStrings[ARTL_ART_directive_545] = "";
  artlhsL[ARTL_ART_directive_545] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_546] = "directive ::= '!relation'  . TRRELATION ";
  artLabelStrings[ARTL_ART_directive_546] = "";
  artlhsL[ARTL_ART_directive_546] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_546] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_546] = true;
  artFolds[ARTL_ART_directive_548] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_directive_548] = "directive ::= '!relation'  TRRELATION .";
  artLabelStrings[ARTL_ART_directive_548] = "";
  artlhsL[ARTL_ART_directive_548] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_548] = ARTL_ART_TRRELATION;
  artKindOfs[ARTL_ART_directive_548] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_548] = true;
  arteoR_pL[ARTL_ART_directive_548] = true;
  artPopD[ARTL_ART_directive_548] = true;
  artLabelInternalStrings[ARTL_ART_directive_550] = "directive ::= . '!relation'  TRRELATION ','  trEntities ";
  artLabelStrings[ARTL_ART_directive_550] = "";
  artlhsL[ARTL_ART_directive_550] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_550] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_551] = "directive ::= '!relation'  TRRELATION ','  trEntities ";
  artLabelStrings[ARTL_ART_directive_551] = "";
  artlhsL[ARTL_ART_directive_551] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_552] = "directive ::= '!relation'  . TRRELATION ','  trEntities ";
  artLabelStrings[ARTL_ART_directive_552] = "";
  artlhsL[ARTL_ART_directive_552] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_552] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_552] = true;
  artFolds[ARTL_ART_directive_554] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_directive_554] = "directive ::= '!relation'  TRRELATION . ','  trEntities ";
  artLabelStrings[ARTL_ART_directive_554] = "";
  artlhsL[ARTL_ART_directive_554] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_554] = ARTL_ART_TRRELATION;
  artKindOfs[ARTL_ART_directive_554] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_directive_556] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_directive_555] = "directive ::= '!relation'  TRRELATION ','  trEntities ";
  artLabelStrings[ARTL_ART_directive_555] = "";
  artlhsL[ARTL_ART_directive_555] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_556] = "directive ::= '!relation'  TRRELATION ','  . trEntities ";
  artLabelStrings[ARTL_ART_directive_556] = "";
  artlhsL[ARTL_ART_directive_556] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_556] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_558] = "directive ::= '!relation'  TRRELATION ','  trEntities .";
  artLabelStrings[ARTL_ART_directive_558] = "";
  artlhsL[ARTL_ART_directive_558] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_558] = ARTL_ART_trEntities;
  artKindOfs[ARTL_ART_directive_558] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_558] = true;
  arteoR_pL[ARTL_ART_directive_558] = true;
  artPopD[ARTL_ART_directive_558] = true;
  artLabelInternalStrings[ARTL_ART_directive_560] = "directive ::= . '!main'  idART ";
  artLabelStrings[ARTL_ART_directive_560] = "";
  artlhsL[ARTL_ART_directive_560] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_560] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_561] = "directive ::= '!main'  idART ";
  artLabelStrings[ARTL_ART_directive_561] = "";
  artlhsL[ARTL_ART_directive_561] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_562] = "directive ::= '!main'  . idART ";
  artLabelStrings[ARTL_ART_directive_562] = "";
  artlhsL[ARTL_ART_directive_562] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_562] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_562] = true;
  artLabelInternalStrings[ARTL_ART_directive_564] = "directive ::= '!main'  idART .";
  artLabelStrings[ARTL_ART_directive_564] = "";
  artlhsL[ARTL_ART_directive_564] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_564] = ARTL_ART_idART;
  artKindOfs[ARTL_ART_directive_564] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_564] = true;
  arteoR_pL[ARTL_ART_directive_564] = true;
  artPopD[ARTL_ART_directive_564] = true;
  artLabelInternalStrings[ARTL_ART_directive_566] = "directive ::= . '!start'  cfgNonterminal ";
  artLabelStrings[ARTL_ART_directive_566] = "";
  artlhsL[ARTL_ART_directive_566] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_566] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_567] = "directive ::= '!start'  cfgNonterminal ";
  artLabelStrings[ARTL_ART_directive_567] = "";
  artlhsL[ARTL_ART_directive_567] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_568] = "directive ::= '!start'  . cfgNonterminal ";
  artLabelStrings[ARTL_ART_directive_568] = "";
  artlhsL[ARTL_ART_directive_568] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_568] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_568] = true;
  artLabelInternalStrings[ARTL_ART_directive_570] = "directive ::= '!start'  cfgNonterminal .";
  artLabelStrings[ARTL_ART_directive_570] = "";
  artlhsL[ARTL_ART_directive_570] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_570] = ARTL_ART_cfgNonterminal;
  artKindOfs[ARTL_ART_directive_570] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_570] = true;
  arteoR_pL[ARTL_ART_directive_570] = true;
  artPopD[ARTL_ART_directive_570] = true;
  artLabelInternalStrings[ARTL_ART_directive_572] = "directive ::= . '!start'  TRRELATION ";
  artLabelStrings[ARTL_ART_directive_572] = "";
  artlhsL[ARTL_ART_directive_572] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_572] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_573] = "directive ::= '!start'  TRRELATION ";
  artLabelStrings[ARTL_ART_directive_573] = "";
  artlhsL[ARTL_ART_directive_573] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_574] = "directive ::= '!start'  . TRRELATION ";
  artLabelStrings[ARTL_ART_directive_574] = "";
  artlhsL[ARTL_ART_directive_574] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_574] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_574] = true;
  artLabelInternalStrings[ARTL_ART_directive_576] = "directive ::= '!start'  TRRELATION .";
  artLabelStrings[ARTL_ART_directive_576] = "";
  artlhsL[ARTL_ART_directive_576] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_576] = ARTL_ART_TRRELATION;
  artKindOfs[ARTL_ART_directive_576] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_576] = true;
  arteoR_pL[ARTL_ART_directive_576] = true;
  artPopD[ARTL_ART_directive_576] = true;
  artLabelInternalStrings[ARTL_ART_directive_578] = "directive ::= . '!input'  tryArgument ";
  artLabelStrings[ARTL_ART_directive_578] = "";
  artlhsL[ARTL_ART_directive_578] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_578] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_579] = "directive ::= '!input'  tryArgument ";
  artLabelStrings[ARTL_ART_directive_579] = "";
  artlhsL[ARTL_ART_directive_579] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_580] = "directive ::= '!input'  . tryArgument ";
  artLabelStrings[ARTL_ART_directive_580] = "";
  artlhsL[ARTL_ART_directive_580] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_580] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_580] = true;
  artLabelInternalStrings[ARTL_ART_directive_582] = "directive ::= '!input'  tryArgument .";
  artLabelStrings[ARTL_ART_directive_582] = "";
  artlhsL[ARTL_ART_directive_582] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_582] = ARTL_ART_tryArgument;
  artKindOfs[ARTL_ART_directive_582] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_582] = true;
  arteoR_pL[ARTL_ART_directive_582] = true;
  artPopD[ARTL_ART_directive_582] = true;
  artLabelInternalStrings[ARTL_ART_directive_584] = "directive ::= . '!result'  tryArgument ";
  artLabelStrings[ARTL_ART_directive_584] = "";
  artlhsL[ARTL_ART_directive_584] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_584] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_585] = "directive ::= '!result'  tryArgument ";
  artLabelStrings[ARTL_ART_directive_585] = "";
  artlhsL[ARTL_ART_directive_585] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_586] = "directive ::= '!result'  . tryArgument ";
  artLabelStrings[ARTL_ART_directive_586] = "";
  artlhsL[ARTL_ART_directive_586] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_586] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_586] = true;
  artLabelInternalStrings[ARTL_ART_directive_588] = "directive ::= '!result'  tryArgument .";
  artLabelStrings[ARTL_ART_directive_588] = "";
  artlhsL[ARTL_ART_directive_588] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_588] = ARTL_ART_tryArgument;
  artKindOfs[ARTL_ART_directive_588] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_588] = true;
  arteoR_pL[ARTL_ART_directive_588] = true;
  artPopD[ARTL_ART_directive_588] = true;
  artLabelInternalStrings[ARTL_ART_directive_590] = "directive ::= . '!strategy'  'root'  ";
  artLabelStrings[ARTL_ART_directive_590] = "";
  artlhsL[ARTL_ART_directive_590] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_590] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_590] = true;
  artLabelInternalStrings[ARTL_ART_directive_591] = "directive ::= '!strategy'  'root'  ";
  artLabelStrings[ARTL_ART_directive_591] = "";
  artlhsL[ARTL_ART_directive_591] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_591] = true;
  artLabelInternalStrings[ARTL_ART_directive_592] = "directive ::= '!strategy'  . 'root'  ";
  artLabelStrings[ARTL_ART_directive_592] = "";
  artlhsL[ARTL_ART_directive_592] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_592] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_592] = true;
  artPopD[ARTL_ART_directive_592] = true;
  artLabelInternalStrings[ARTL_ART_directive_593] = "directive ::= '!strategy'  'root'  ";
  artLabelStrings[ARTL_ART_directive_593] = "";
  artlhsL[ARTL_ART_directive_593] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_593] = true;
  artLabelInternalStrings[ARTL_ART_directive_594] = "directive ::= '!strategy'  'root'  .";
  artLabelStrings[ARTL_ART_directive_594] = "";
  artlhsL[ARTL_ART_directive_594] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_594] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_594] = true;
  arteoR_pL[ARTL_ART_directive_594] = true;
  artPopD[ARTL_ART_directive_594] = true;
  artLabelInternalStrings[ARTL_ART_directive_596] = "directive ::= . '!strategy'  'postOrder'  ";
  artLabelStrings[ARTL_ART_directive_596] = "";
  artlhsL[ARTL_ART_directive_596] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_596] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_596] = true;
  artLabelInternalStrings[ARTL_ART_directive_597] = "directive ::= '!strategy'  'postOrder'  ";
  artLabelStrings[ARTL_ART_directive_597] = "";
  artlhsL[ARTL_ART_directive_597] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_597] = true;
  artLabelInternalStrings[ARTL_ART_directive_598] = "directive ::= '!strategy'  . 'postOrder'  ";
  artLabelStrings[ARTL_ART_directive_598] = "";
  artlhsL[ARTL_ART_directive_598] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_598] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_598] = true;
  artPopD[ARTL_ART_directive_598] = true;
  artLabelInternalStrings[ARTL_ART_directive_599] = "directive ::= '!strategy'  'postOrder'  ";
  artLabelStrings[ARTL_ART_directive_599] = "";
  artlhsL[ARTL_ART_directive_599] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_599] = true;
  artLabelInternalStrings[ARTL_ART_directive_600] = "directive ::= '!strategy'  'postOrder'  .";
  artLabelStrings[ARTL_ART_directive_600] = "";
  artlhsL[ARTL_ART_directive_600] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_600] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_600] = true;
  arteoR_pL[ARTL_ART_directive_600] = true;
  artPopD[ARTL_ART_directive_600] = true;
  artLabelInternalStrings[ARTL_ART_directive_602] = "directive ::= . '!strategy'  'preOrderOneShot'  ";
  artLabelStrings[ARTL_ART_directive_602] = "";
  artlhsL[ARTL_ART_directive_602] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_602] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_602] = true;
  artLabelInternalStrings[ARTL_ART_directive_603] = "directive ::= '!strategy'  'preOrderOneShot'  ";
  artLabelStrings[ARTL_ART_directive_603] = "";
  artlhsL[ARTL_ART_directive_603] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_603] = true;
  artLabelInternalStrings[ARTL_ART_directive_604] = "directive ::= '!strategy'  . 'preOrderOneShot'  ";
  artLabelStrings[ARTL_ART_directive_604] = "";
  artlhsL[ARTL_ART_directive_604] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_604] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_604] = true;
  artPopD[ARTL_ART_directive_604] = true;
  artLabelInternalStrings[ARTL_ART_directive_605] = "directive ::= '!strategy'  'preOrderOneShot'  ";
  artLabelStrings[ARTL_ART_directive_605] = "";
  artlhsL[ARTL_ART_directive_605] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_605] = true;
  artLabelInternalStrings[ARTL_ART_directive_606] = "directive ::= '!strategy'  'preOrderOneShot'  .";
  artLabelStrings[ARTL_ART_directive_606] = "";
  artlhsL[ARTL_ART_directive_606] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_606] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_606] = true;
  arteoR_pL[ARTL_ART_directive_606] = true;
  artPopD[ARTL_ART_directive_606] = true;
  artLabelInternalStrings[ARTL_ART_directive_608] = "directive ::= . '!try'  ";
  artLabelStrings[ARTL_ART_directive_608] = "";
  artlhsL[ARTL_ART_directive_608] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_608] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_directive_608] = true;
  artLabelInternalStrings[ARTL_ART_directive_609] = "directive ::= '!try'  ";
  artLabelStrings[ARTL_ART_directive_609] = "";
  artlhsL[ARTL_ART_directive_609] = ARTL_ART_directive;
  artPopD[ARTL_ART_directive_609] = true;
  artLabelInternalStrings[ARTL_ART_directive_610] = "directive ::= '!try'  .";
  artLabelStrings[ARTL_ART_directive_610] = "";
  artlhsL[ARTL_ART_directive_610] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_610] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_610] = true;
  arteoR_pL[ARTL_ART_directive_610] = true;
  artPopD[ARTL_ART_directive_610] = true;
  artLabelInternalStrings[ARTL_ART_directive_612] = "directive ::= . '!try'  tryArgument ";
  artLabelStrings[ARTL_ART_directive_612] = "";
  artlhsL[ARTL_ART_directive_612] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_612] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_613] = "directive ::= '!try'  tryArgument ";
  artLabelStrings[ARTL_ART_directive_613] = "";
  artlhsL[ARTL_ART_directive_613] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_614] = "directive ::= '!try'  . tryArgument ";
  artLabelStrings[ARTL_ART_directive_614] = "";
  artlhsL[ARTL_ART_directive_614] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_614] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_614] = true;
  artLabelInternalStrings[ARTL_ART_directive_616] = "directive ::= '!try'  tryArgument .";
  artLabelStrings[ARTL_ART_directive_616] = "";
  artlhsL[ARTL_ART_directive_616] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_616] = ARTL_ART_tryArgument;
  artKindOfs[ARTL_ART_directive_616] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_616] = true;
  arteoR_pL[ARTL_ART_directive_616] = true;
  artPopD[ARTL_ART_directive_616] = true;
  artLabelInternalStrings[ARTL_ART_directive_618] = "directive ::= . '!try'  tryArgument '='  tryArgument ";
  artLabelStrings[ARTL_ART_directive_618] = "";
  artlhsL[ARTL_ART_directive_618] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_618] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_619] = "directive ::= '!try'  tryArgument '='  tryArgument ";
  artLabelStrings[ARTL_ART_directive_619] = "";
  artlhsL[ARTL_ART_directive_619] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_620] = "directive ::= '!try'  . tryArgument '='  tryArgument ";
  artLabelStrings[ARTL_ART_directive_620] = "";
  artlhsL[ARTL_ART_directive_620] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_620] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_directive_620] = true;
  artLabelInternalStrings[ARTL_ART_directive_622] = "directive ::= '!try'  tryArgument . '='  tryArgument ";
  artLabelStrings[ARTL_ART_directive_622] = "";
  artlhsL[ARTL_ART_directive_622] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_622] = ARTL_ART_tryArgument;
  artKindOfs[ARTL_ART_directive_622] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_directive_624] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_directive_623] = "directive ::= '!try'  tryArgument '='  tryArgument ";
  artLabelStrings[ARTL_ART_directive_623] = "";
  artlhsL[ARTL_ART_directive_623] = ARTL_ART_directive;
  artLabelInternalStrings[ARTL_ART_directive_624] = "directive ::= '!try'  tryArgument '='  . tryArgument ";
  artLabelStrings[ARTL_ART_directive_624] = "";
  artlhsL[ARTL_ART_directive_624] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_directive_624] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_directive_626] = "directive ::= '!try'  tryArgument '='  tryArgument .";
  artLabelStrings[ARTL_ART_directive_626] = "";
  artlhsL[ARTL_ART_directive_626] = ARTL_ART_directive;
  artSlotInstanceOfs[ARTL_ART_directive_626] = ARTL_ART_tryArgument;
  artKindOfs[ARTL_ART_directive_626] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_directive_626] = true;
  arteoR_pL[ARTL_ART_directive_626] = true;
  artPopD[ARTL_ART_directive_626] = true;
}

public void artTableInitialiser_ART_idART() {
  artLabelInternalStrings[ARTL_ART_idART] = "idART";
  artLabelStrings[ARTL_ART_idART] = "idART";
  artKindOfs[ARTL_ART_idART] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_idART_1420] = "idART ::= . ID ";
  artLabelStrings[ARTL_ART_idART_1420] = "";
  artlhsL[ARTL_ART_idART_1420] = ARTL_ART_idART;
  artKindOfs[ARTL_ART_idART_1420] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_idART_1422] = "idART ::= ID .";
  artLabelStrings[ARTL_ART_idART_1422] = "";
  artlhsL[ARTL_ART_idART_1422] = ARTL_ART_idART;
  artSlotInstanceOfs[ARTL_ART_idART_1422] = ARTL_ART_ID;
  artKindOfs[ARTL_ART_idART_1422] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_idART_1422] = true;
  arteoR_pL[ARTL_ART_idART_1422] = true;
  artPopD[ARTL_ART_idART_1422] = true;
  artLabelInternalStrings[ARTL_ART_idART_1424] = "idART ::= . ID '.art'  ";
  artLabelStrings[ARTL_ART_idART_1424] = "";
  artlhsL[ARTL_ART_idART_1424] = ARTL_ART_idART;
  artKindOfs[ARTL_ART_idART_1424] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_idART_1426] = "idART ::= ID . '.art'  ";
  artLabelStrings[ARTL_ART_idART_1426] = "";
  artlhsL[ARTL_ART_idART_1426] = ARTL_ART_idART;
  artSlotInstanceOfs[ARTL_ART_idART_1426] = ARTL_ART_ID;
  artKindOfs[ARTL_ART_idART_1426] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_idART_1426] = true;
  artPopD[ARTL_ART_idART_1426] = true;
  artFolds[ARTL_ART_idART_1428] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_idART_1427] = "idART ::= ID '.art'  ";
  artLabelStrings[ARTL_ART_idART_1427] = "";
  artlhsL[ARTL_ART_idART_1427] = ARTL_ART_idART;
  artPopD[ARTL_ART_idART_1427] = true;
  artLabelInternalStrings[ARTL_ART_idART_1428] = "idART ::= ID '.art'  .";
  artLabelStrings[ARTL_ART_idART_1428] = "";
  artlhsL[ARTL_ART_idART_1428] = ARTL_ART_idART;
  artKindOfs[ARTL_ART_idART_1428] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_idART_1428] = true;
  arteoR_pL[ARTL_ART_idART_1428] = true;
  artPopD[ARTL_ART_idART_1428] = true;
}

public void artTableInitialiser_ART_idJAVA() {
  artLabelInternalStrings[ARTL_ART_idJAVA] = "idJAVA";
  artLabelStrings[ARTL_ART_idJAVA] = "idJAVA";
  artKindOfs[ARTL_ART_idJAVA] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_idJAVA_1440] = "idJAVA ::= . ID ";
  artLabelStrings[ARTL_ART_idJAVA_1440] = "";
  artlhsL[ARTL_ART_idJAVA_1440] = ARTL_ART_idJAVA;
  artKindOfs[ARTL_ART_idJAVA_1440] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_idJAVA_1442] = "idJAVA ::= ID .";
  artLabelStrings[ARTL_ART_idJAVA_1442] = "";
  artlhsL[ARTL_ART_idJAVA_1442] = ARTL_ART_idJAVA;
  artSlotInstanceOfs[ARTL_ART_idJAVA_1442] = ARTL_ART_ID;
  artKindOfs[ARTL_ART_idJAVA_1442] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_idJAVA_1442] = true;
  arteoR_pL[ARTL_ART_idJAVA_1442] = true;
  artPopD[ARTL_ART_idJAVA_1442] = true;
  artLabelInternalStrings[ARTL_ART_idJAVA_1444] = "idJAVA ::= . ID '.java'  ";
  artLabelStrings[ARTL_ART_idJAVA_1444] = "";
  artlhsL[ARTL_ART_idJAVA_1444] = ARTL_ART_idJAVA;
  artKindOfs[ARTL_ART_idJAVA_1444] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_idJAVA_1446] = "idJAVA ::= ID . '.java'  ";
  artLabelStrings[ARTL_ART_idJAVA_1446] = "";
  artlhsL[ARTL_ART_idJAVA_1446] = ARTL_ART_idJAVA;
  artSlotInstanceOfs[ARTL_ART_idJAVA_1446] = ARTL_ART_ID;
  artKindOfs[ARTL_ART_idJAVA_1446] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_idJAVA_1446] = true;
  artPopD[ARTL_ART_idJAVA_1446] = true;
  artFolds[ARTL_ART_idJAVA_1448] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_idJAVA_1447] = "idJAVA ::= ID '.java'  ";
  artLabelStrings[ARTL_ART_idJAVA_1447] = "";
  artlhsL[ARTL_ART_idJAVA_1447] = ARTL_ART_idJAVA;
  artPopD[ARTL_ART_idJAVA_1447] = true;
  artLabelInternalStrings[ARTL_ART_idJAVA_1448] = "idJAVA ::= ID '.java'  .";
  artLabelStrings[ARTL_ART_idJAVA_1448] = "";
  artlhsL[ARTL_ART_idJAVA_1448] = ARTL_ART_idJAVA;
  artKindOfs[ARTL_ART_idJAVA_1448] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_idJAVA_1448] = true;
  arteoR_pL[ARTL_ART_idJAVA_1448] = true;
  artPopD[ARTL_ART_idJAVA_1448] = true;
}

public void artTableInitialiser_ART_idRAW() {
  artLabelInternalStrings[ARTL_ART_idRAW] = "idRAW";
  artLabelStrings[ARTL_ART_idRAW] = "idRAW";
  artKindOfs[ARTL_ART_idRAW] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_idRAW_1430] = "idRAW ::= . ID ";
  artLabelStrings[ARTL_ART_idRAW_1430] = "";
  artlhsL[ARTL_ART_idRAW_1430] = ARTL_ART_idRAW;
  artKindOfs[ARTL_ART_idRAW_1430] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_idRAW_1432] = "idRAW ::= ID .";
  artLabelStrings[ARTL_ART_idRAW_1432] = "";
  artlhsL[ARTL_ART_idRAW_1432] = ARTL_ART_idRAW;
  artSlotInstanceOfs[ARTL_ART_idRAW_1432] = ARTL_ART_ID;
  artKindOfs[ARTL_ART_idRAW_1432] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_idRAW_1432] = true;
  arteoR_pL[ARTL_ART_idRAW_1432] = true;
  artPopD[ARTL_ART_idRAW_1432] = true;
  artLabelInternalStrings[ARTL_ART_idRAW_1434] = "idRAW ::= . ID '.raw'  ";
  artLabelStrings[ARTL_ART_idRAW_1434] = "";
  artlhsL[ARTL_ART_idRAW_1434] = ARTL_ART_idRAW;
  artKindOfs[ARTL_ART_idRAW_1434] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_idRAW_1436] = "idRAW ::= ID . '.raw'  ";
  artLabelStrings[ARTL_ART_idRAW_1436] = "";
  artlhsL[ARTL_ART_idRAW_1436] = ARTL_ART_idRAW;
  artSlotInstanceOfs[ARTL_ART_idRAW_1436] = ARTL_ART_ID;
  artKindOfs[ARTL_ART_idRAW_1436] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_idRAW_1436] = true;
  artPopD[ARTL_ART_idRAW_1436] = true;
  artFolds[ARTL_ART_idRAW_1438] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_idRAW_1437] = "idRAW ::= ID '.raw'  ";
  artLabelStrings[ARTL_ART_idRAW_1437] = "";
  artlhsL[ARTL_ART_idRAW_1437] = ARTL_ART_idRAW;
  artPopD[ARTL_ART_idRAW_1437] = true;
  artLabelInternalStrings[ARTL_ART_idRAW_1438] = "idRAW ::= ID '.raw'  .";
  artLabelStrings[ARTL_ART_idRAW_1438] = "";
  artlhsL[ARTL_ART_idRAW_1438] = ARTL_ART_idRAW;
  artKindOfs[ARTL_ART_idRAW_1438] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_idRAW_1438] = true;
  arteoR_pL[ARTL_ART_idRAW_1438] = true;
  artPopD[ARTL_ART_idRAW_1438] = true;
}

public void artTableInitialiser_ART_latexDeclaration() {
  artLabelInternalStrings[ARTL_ART_latexDeclaration] = "latexDeclaration";
  artLabelStrings[ARTL_ART_latexDeclaration] = "latexDeclaration";
  artKindOfs[ARTL_ART_latexDeclaration] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_latexDeclaration_1542] = "latexDeclaration ::= . __string '='  __string ";
  artLabelStrings[ARTL_ART_latexDeclaration_1542] = "";
  artlhsL[ARTL_ART_latexDeclaration_1542] = ARTL_ART_latexDeclaration;
  artKindOfs[ARTL_ART_latexDeclaration_1542] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_latexDeclaration_1544] = "latexDeclaration ::= __string . '='  __string ";
  artLabelStrings[ARTL_ART_latexDeclaration_1544] = "";
  artlhsL[ARTL_ART_latexDeclaration_1544] = ARTL_ART_latexDeclaration;
  artSlotInstanceOfs[ARTL_ART_latexDeclaration_1544] = ARTL_ART___string;
  artKindOfs[ARTL_ART_latexDeclaration_1544] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_latexDeclaration_1544] = true;
  artFolds[ARTL_ART_latexDeclaration_1546] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_latexDeclaration_1545] = "latexDeclaration ::= __string '='  __string ";
  artLabelStrings[ARTL_ART_latexDeclaration_1545] = "";
  artlhsL[ARTL_ART_latexDeclaration_1545] = ARTL_ART_latexDeclaration;
  artLabelInternalStrings[ARTL_ART_latexDeclaration_1546] = "latexDeclaration ::= __string '='  . __string ";
  artLabelStrings[ARTL_ART_latexDeclaration_1546] = "";
  artlhsL[ARTL_ART_latexDeclaration_1546] = ARTL_ART_latexDeclaration;
  artKindOfs[ARTL_ART_latexDeclaration_1546] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_latexDeclaration_1548] = "latexDeclaration ::= __string '='  __string .";
  artLabelStrings[ARTL_ART_latexDeclaration_1548] = "";
  artlhsL[ARTL_ART_latexDeclaration_1548] = ARTL_ART_latexDeclaration;
  artSlotInstanceOfs[ARTL_ART_latexDeclaration_1548] = ARTL_ART___string;
  artKindOfs[ARTL_ART_latexDeclaration_1548] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_latexDeclaration_1548] = true;
  arteoR_pL[ARTL_ART_latexDeclaration_1548] = true;
  artPopD[ARTL_ART_latexDeclaration_1548] = true;
}

public void artTableInitialiser_ART_latexDeclarations() {
  artLabelInternalStrings[ARTL_ART_latexDeclarations] = "latexDeclarations";
  artLabelStrings[ARTL_ART_latexDeclarations] = "latexDeclarations";
  artKindOfs[ARTL_ART_latexDeclarations] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_latexDeclarations_1486] = "latexDeclarations ::= . latexDeclaration ";
  artLabelStrings[ARTL_ART_latexDeclarations_1486] = "";
  artlhsL[ARTL_ART_latexDeclarations_1486] = ARTL_ART_latexDeclarations;
  artKindOfs[ARTL_ART_latexDeclarations_1486] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_latexDeclarations_1488] = "latexDeclarations ::= latexDeclaration .";
  artLabelStrings[ARTL_ART_latexDeclarations_1488] = "";
  artlhsL[ARTL_ART_latexDeclarations_1488] = ARTL_ART_latexDeclarations;
  artSlotInstanceOfs[ARTL_ART_latexDeclarations_1488] = ARTL_ART_latexDeclaration;
  artKindOfs[ARTL_ART_latexDeclarations_1488] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_latexDeclarations_1488] = true;
  arteoR_pL[ARTL_ART_latexDeclarations_1488] = true;
  artPopD[ARTL_ART_latexDeclarations_1488] = true;
  artLabelInternalStrings[ARTL_ART_latexDeclarations_1490] = "latexDeclarations ::= . latexDeclaration ','  latexDeclarations ";
  artLabelStrings[ARTL_ART_latexDeclarations_1490] = "";
  artlhsL[ARTL_ART_latexDeclarations_1490] = ARTL_ART_latexDeclarations;
  artKindOfs[ARTL_ART_latexDeclarations_1490] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_latexDeclarations_1492] = "latexDeclarations ::= latexDeclaration . ','  latexDeclarations ";
  artLabelStrings[ARTL_ART_latexDeclarations_1492] = "";
  artlhsL[ARTL_ART_latexDeclarations_1492] = ARTL_ART_latexDeclarations;
  artSlotInstanceOfs[ARTL_ART_latexDeclarations_1492] = ARTL_ART_latexDeclaration;
  artKindOfs[ARTL_ART_latexDeclarations_1492] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_latexDeclarations_1492] = true;
  artFolds[ARTL_ART_latexDeclarations_1494] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_latexDeclarations_1493] = "latexDeclarations ::= latexDeclaration ','  latexDeclarations ";
  artLabelStrings[ARTL_ART_latexDeclarations_1493] = "";
  artlhsL[ARTL_ART_latexDeclarations_1493] = ARTL_ART_latexDeclarations;
  artLabelInternalStrings[ARTL_ART_latexDeclarations_1494] = "latexDeclarations ::= latexDeclaration ','  . latexDeclarations ";
  artLabelStrings[ARTL_ART_latexDeclarations_1494] = "";
  artlhsL[ARTL_ART_latexDeclarations_1494] = ARTL_ART_latexDeclarations;
  artKindOfs[ARTL_ART_latexDeclarations_1494] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_latexDeclarations_1496] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_latexDeclarations_1496] = "latexDeclarations ::= latexDeclaration ','  latexDeclarations .";
  artLabelStrings[ARTL_ART_latexDeclarations_1496] = "";
  artlhsL[ARTL_ART_latexDeclarations_1496] = ARTL_ART_latexDeclarations;
  artSlotInstanceOfs[ARTL_ART_latexDeclarations_1496] = ARTL_ART_latexDeclarations;
  artKindOfs[ARTL_ART_latexDeclarations_1496] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_latexDeclarations_1496] = true;
  arteoR_pL[ARTL_ART_latexDeclarations_1496] = true;
  artPopD[ARTL_ART_latexDeclarations_1496] = true;
}

public void artTableInitialiser_ART_paraterminalisers() {
  artLabelInternalStrings[ARTL_ART_paraterminalisers] = "paraterminalisers";
  artLabelStrings[ARTL_ART_paraterminalisers] = "paraterminalisers";
  artKindOfs[ARTL_ART_paraterminalisers] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_paraterminalisers_1474] = "paraterminalisers ::= . aliasedCFGNonterminal ";
  artLabelStrings[ARTL_ART_paraterminalisers_1474] = "";
  artlhsL[ARTL_ART_paraterminalisers_1474] = ARTL_ART_paraterminalisers;
  artKindOfs[ARTL_ART_paraterminalisers_1474] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_paraterminalisers_1476] = "paraterminalisers ::= aliasedCFGNonterminal .";
  artLabelStrings[ARTL_ART_paraterminalisers_1476] = "";
  artlhsL[ARTL_ART_paraterminalisers_1476] = ARTL_ART_paraterminalisers;
  artSlotInstanceOfs[ARTL_ART_paraterminalisers_1476] = ARTL_ART_aliasedCFGNonterminal;
  artKindOfs[ARTL_ART_paraterminalisers_1476] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_paraterminalisers_1476] = true;
  arteoR_pL[ARTL_ART_paraterminalisers_1476] = true;
  artPopD[ARTL_ART_paraterminalisers_1476] = true;
  artLabelInternalStrings[ARTL_ART_paraterminalisers_1478] = "paraterminalisers ::= . aliasedCFGNonterminal ','  paraterminalisers ";
  artLabelStrings[ARTL_ART_paraterminalisers_1478] = "";
  artlhsL[ARTL_ART_paraterminalisers_1478] = ARTL_ART_paraterminalisers;
  artKindOfs[ARTL_ART_paraterminalisers_1478] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_paraterminalisers_1480] = "paraterminalisers ::= aliasedCFGNonterminal . ','  paraterminalisers ";
  artLabelStrings[ARTL_ART_paraterminalisers_1480] = "";
  artlhsL[ARTL_ART_paraterminalisers_1480] = ARTL_ART_paraterminalisers;
  artSlotInstanceOfs[ARTL_ART_paraterminalisers_1480] = ARTL_ART_aliasedCFGNonterminal;
  artKindOfs[ARTL_ART_paraterminalisers_1480] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_paraterminalisers_1480] = true;
  artFolds[ARTL_ART_paraterminalisers_1482] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_paraterminalisers_1481] = "paraterminalisers ::= aliasedCFGNonterminal ','  paraterminalisers ";
  artLabelStrings[ARTL_ART_paraterminalisers_1481] = "";
  artlhsL[ARTL_ART_paraterminalisers_1481] = ARTL_ART_paraterminalisers;
  artLabelInternalStrings[ARTL_ART_paraterminalisers_1482] = "paraterminalisers ::= aliasedCFGNonterminal ','  . paraterminalisers ";
  artLabelStrings[ARTL_ART_paraterminalisers_1482] = "";
  artlhsL[ARTL_ART_paraterminalisers_1482] = ARTL_ART_paraterminalisers;
  artKindOfs[ARTL_ART_paraterminalisers_1482] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_paraterminalisers_1484] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_paraterminalisers_1484] = "paraterminalisers ::= aliasedCFGNonterminal ','  paraterminalisers .";
  artLabelStrings[ARTL_ART_paraterminalisers_1484] = "";
  artlhsL[ARTL_ART_paraterminalisers_1484] = ARTL_ART_paraterminalisers;
  artSlotInstanceOfs[ARTL_ART_paraterminalisers_1484] = ARTL_ART_paraterminalisers;
  artKindOfs[ARTL_ART_paraterminalisers_1484] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_paraterminalisers_1484] = true;
  arteoR_pL[ARTL_ART_paraterminalisers_1484] = true;
  artPopD[ARTL_ART_paraterminalisers_1484] = true;
}

public void artTableInitialiser_ART_text() {
  artLabelInternalStrings[ARTL_ART_text] = "text";
  artLabelStrings[ARTL_ART_text] = "text";
  artKindOfs[ARTL_ART_text] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_text_2] = "text ::= . textElement ";
  artLabelStrings[ARTL_ART_text_2] = "";
  artlhsL[ARTL_ART_text_2] = ARTL_ART_text;
  artKindOfs[ARTL_ART_text_2] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_text_4] = "text ::= textElement .";
  artLabelStrings[ARTL_ART_text_4] = "";
  artlhsL[ARTL_ART_text_4] = ARTL_ART_text;
  artSlotInstanceOfs[ARTL_ART_text_4] = ARTL_ART_textElement;
  artKindOfs[ARTL_ART_text_4] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_text_4] = true;
  arteoR_pL[ARTL_ART_text_4] = true;
  artPopD[ARTL_ART_text_4] = true;
  artLabelInternalStrings[ARTL_ART_text_6] = "text ::= . textElement text ";
  artLabelStrings[ARTL_ART_text_6] = "";
  artlhsL[ARTL_ART_text_6] = ARTL_ART_text;
  artKindOfs[ARTL_ART_text_6] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_text_8] = "text ::= textElement . text ";
  artLabelStrings[ARTL_ART_text_8] = "";
  artlhsL[ARTL_ART_text_8] = ARTL_ART_text;
  artSlotInstanceOfs[ARTL_ART_text_8] = ARTL_ART_textElement;
  artKindOfs[ARTL_ART_text_8] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_text_8] = true;
  artLabelInternalStrings[ARTL_ART_text_10] = "text ::= textElement text .";
  artLabelStrings[ARTL_ART_text_10] = "";
  artlhsL[ARTL_ART_text_10] = ARTL_ART_text;
  artSlotInstanceOfs[ARTL_ART_text_10] = ARTL_ART_text;
  artKindOfs[ARTL_ART_text_10] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_text_10] = true;
  arteoR_pL[ARTL_ART_text_10] = true;
  artPopD[ARTL_ART_text_10] = true;
}

public void artTableInitialiser_ART_textElement() {
  artLabelInternalStrings[ARTL_ART_textElement] = "textElement";
  artLabelStrings[ARTL_ART_textElement] = "textElement";
  artKindOfs[ARTL_ART_textElement] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_textElement_12] = "textElement ::= . cfgRule ";
  artLabelStrings[ARTL_ART_textElement_12] = "";
  artlhsL[ARTL_ART_textElement_12] = ARTL_ART_textElement;
  artKindOfs[ARTL_ART_textElement_12] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_textElement_14] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_textElement_14] = "textElement ::= cfgRule .";
  artLabelStrings[ARTL_ART_textElement_14] = "";
  artlhsL[ARTL_ART_textElement_14] = ARTL_ART_textElement;
  artSlotInstanceOfs[ARTL_ART_textElement_14] = ARTL_ART_cfgRule;
  artKindOfs[ARTL_ART_textElement_14] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_textElement_14] = true;
  arteoR_pL[ARTL_ART_textElement_14] = true;
  artPopD[ARTL_ART_textElement_14] = true;
  artLabelInternalStrings[ARTL_ART_textElement_16] = "textElement ::= . trRule ";
  artLabelStrings[ARTL_ART_textElement_16] = "";
  artlhsL[ARTL_ART_textElement_16] = ARTL_ART_textElement;
  artKindOfs[ARTL_ART_textElement_16] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_textElement_18] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_textElement_18] = "textElement ::= trRule .";
  artLabelStrings[ARTL_ART_textElement_18] = "";
  artlhsL[ARTL_ART_textElement_18] = ARTL_ART_textElement;
  artSlotInstanceOfs[ARTL_ART_textElement_18] = ARTL_ART_trRule;
  artKindOfs[ARTL_ART_textElement_18] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_textElement_18] = true;
  arteoR_pL[ARTL_ART_textElement_18] = true;
  artPopD[ARTL_ART_textElement_18] = true;
  artLabelInternalStrings[ARTL_ART_textElement_20] = "textElement ::= . chooseRule ";
  artLabelStrings[ARTL_ART_textElement_20] = "";
  artlhsL[ARTL_ART_textElement_20] = ARTL_ART_textElement;
  artKindOfs[ARTL_ART_textElement_20] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_textElement_22] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_textElement_22] = "textElement ::= chooseRule .";
  artLabelStrings[ARTL_ART_textElement_22] = "";
  artlhsL[ARTL_ART_textElement_22] = ARTL_ART_textElement;
  artSlotInstanceOfs[ARTL_ART_textElement_22] = ARTL_ART_chooseRule;
  artKindOfs[ARTL_ART_textElement_22] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_textElement_22] = true;
  arteoR_pL[ARTL_ART_textElement_22] = true;
  artPopD[ARTL_ART_textElement_22] = true;
  artLabelInternalStrings[ARTL_ART_textElement_24] = "textElement ::= . directive ";
  artLabelStrings[ARTL_ART_textElement_24] = "";
  artlhsL[ARTL_ART_textElement_24] = ARTL_ART_textElement;
  artKindOfs[ARTL_ART_textElement_24] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_textElement_26] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_textElement_26] = "textElement ::= directive .";
  artLabelStrings[ARTL_ART_textElement_26] = "";
  artlhsL[ARTL_ART_textElement_26] = ARTL_ART_textElement;
  artSlotInstanceOfs[ARTL_ART_textElement_26] = ARTL_ART_directive;
  artKindOfs[ARTL_ART_textElement_26] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_textElement_26] = true;
  arteoR_pL[ARTL_ART_textElement_26] = true;
  artPopD[ARTL_ART_textElement_26] = true;
}

public void artTableInitialiser_ART_tr() {
  artLabelInternalStrings[ARTL_ART_tr] = "tr";
  artLabelStrings[ARTL_ART_tr] = "tr";
  artKindOfs[ARTL_ART_tr] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_tr_1064] = "tr ::= . trPremises '---'  trTransition trEquations ";
  artLabelStrings[ARTL_ART_tr_1064] = "";
  artlhsL[ARTL_ART_tr_1064] = ARTL_ART_tr;
  artKindOfs[ARTL_ART_tr_1064] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_tr_1066] = "tr ::= trPremises . '---'  trTransition trEquations ";
  artLabelStrings[ARTL_ART_tr_1066] = "";
  artlhsL[ARTL_ART_tr_1066] = ARTL_ART_tr;
  artSlotInstanceOfs[ARTL_ART_tr_1066] = ARTL_ART_trPremises;
  artKindOfs[ARTL_ART_tr_1066] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_tr_1066] = true;
  artFolds[ARTL_ART_tr_1068] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_tr_1067] = "tr ::= trPremises '---'  trTransition trEquations ";
  artLabelStrings[ARTL_ART_tr_1067] = "";
  artlhsL[ARTL_ART_tr_1067] = ARTL_ART_tr;
  artLabelInternalStrings[ARTL_ART_tr_1068] = "tr ::= trPremises '---'  . trTransition trEquations ";
  artLabelStrings[ARTL_ART_tr_1068] = "";
  artlhsL[ARTL_ART_tr_1068] = ARTL_ART_tr;
  artKindOfs[ARTL_ART_tr_1068] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_tr_1070] = "tr ::= trPremises '---'  trTransition . trEquations ";
  artLabelStrings[ARTL_ART_tr_1070] = "";
  artlhsL[ARTL_ART_tr_1070] = ARTL_ART_tr;
  artSlotInstanceOfs[ARTL_ART_tr_1070] = ARTL_ART_trTransition;
  artKindOfs[ARTL_ART_tr_1070] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_tr_1072] = "tr ::= trPremises '---'  trTransition trEquations .";
  artLabelStrings[ARTL_ART_tr_1072] = "";
  artlhsL[ARTL_ART_tr_1072] = ARTL_ART_tr;
  artSlotInstanceOfs[ARTL_ART_tr_1072] = ARTL_ART_trEquations;
  artKindOfs[ARTL_ART_tr_1072] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_tr_1072] = true;
  arteoR_pL[ARTL_ART_tr_1072] = true;
  artPopD[ARTL_ART_tr_1072] = true;
  artLabelInternalStrings[ARTL_ART_tr_1074] = "tr ::= . trPremises '---'  trTransition ";
  artLabelStrings[ARTL_ART_tr_1074] = "";
  artlhsL[ARTL_ART_tr_1074] = ARTL_ART_tr;
  artKindOfs[ARTL_ART_tr_1074] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_tr_1076] = "tr ::= trPremises . '---'  trTransition ";
  artLabelStrings[ARTL_ART_tr_1076] = "";
  artlhsL[ARTL_ART_tr_1076] = ARTL_ART_tr;
  artSlotInstanceOfs[ARTL_ART_tr_1076] = ARTL_ART_trPremises;
  artKindOfs[ARTL_ART_tr_1076] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_tr_1076] = true;
  artFolds[ARTL_ART_tr_1078] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_tr_1077] = "tr ::= trPremises '---'  trTransition ";
  artLabelStrings[ARTL_ART_tr_1077] = "";
  artlhsL[ARTL_ART_tr_1077] = ARTL_ART_tr;
  artLabelInternalStrings[ARTL_ART_tr_1078] = "tr ::= trPremises '---'  . trTransition ";
  artLabelStrings[ARTL_ART_tr_1078] = "";
  artlhsL[ARTL_ART_tr_1078] = ARTL_ART_tr;
  artKindOfs[ARTL_ART_tr_1078] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_tr_1080] = "tr ::= trPremises '---'  trTransition .";
  artLabelStrings[ARTL_ART_tr_1080] = "";
  artlhsL[ARTL_ART_tr_1080] = ARTL_ART_tr;
  artSlotInstanceOfs[ARTL_ART_tr_1080] = ARTL_ART_trTransition;
  artKindOfs[ARTL_ART_tr_1080] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_tr_1080] = true;
  arteoR_pL[ARTL_ART_tr_1080] = true;
  artPopD[ARTL_ART_tr_1080] = true;
}

public void artTableInitialiser_ART_trConfiguration() {
  artLabelInternalStrings[ARTL_ART_trConfiguration] = "trConfiguration";
  artLabelStrings[ARTL_ART_trConfiguration] = "trConfiguration";
  artKindOfs[ARTL_ART_trConfiguration] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_trConfiguration_1126] = "trConfiguration ::= . trPrimaryTerm trEntityReferences ";
  artLabelStrings[ARTL_ART_trConfiguration_1126] = "";
  artlhsL[ARTL_ART_trConfiguration_1126] = ARTL_ART_trConfiguration;
  artKindOfs[ARTL_ART_trConfiguration_1126] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_trConfiguration_1128] = "trConfiguration ::= trPrimaryTerm . trEntityReferences ";
  artLabelStrings[ARTL_ART_trConfiguration_1128] = "";
  artlhsL[ARTL_ART_trConfiguration_1128] = ARTL_ART_trConfiguration;
  artSlotInstanceOfs[ARTL_ART_trConfiguration_1128] = ARTL_ART_trPrimaryTerm;
  artKindOfs[ARTL_ART_trConfiguration_1128] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_trConfiguration_1128] = true;
  artLabelInternalStrings[ARTL_ART_trConfiguration_1130] = "trConfiguration ::= trPrimaryTerm trEntityReferences .";
  artLabelStrings[ARTL_ART_trConfiguration_1130] = "";
  artlhsL[ARTL_ART_trConfiguration_1130] = ARTL_ART_trConfiguration;
  artSlotInstanceOfs[ARTL_ART_trConfiguration_1130] = ARTL_ART_trEntityReferences;
  artKindOfs[ARTL_ART_trConfiguration_1130] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_trConfiguration_1130] = true;
  arteoR_pL[ARTL_ART_trConfiguration_1130] = true;
  artPopD[ARTL_ART_trConfiguration_1130] = true;
  artLabelInternalStrings[ARTL_ART_trConfiguration_1132] = "trConfiguration ::= . '<'  trPrimaryTerm trEntityReferences '>'  ";
  artLabelStrings[ARTL_ART_trConfiguration_1132] = "";
  artlhsL[ARTL_ART_trConfiguration_1132] = ARTL_ART_trConfiguration;
  artKindOfs[ARTL_ART_trConfiguration_1132] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_trConfiguration_1133] = "trConfiguration ::= '<'  trPrimaryTerm trEntityReferences '>'  ";
  artLabelStrings[ARTL_ART_trConfiguration_1133] = "";
  artlhsL[ARTL_ART_trConfiguration_1133] = ARTL_ART_trConfiguration;
  artLabelInternalStrings[ARTL_ART_trConfiguration_1134] = "trConfiguration ::= '<'  . trPrimaryTerm trEntityReferences '>'  ";
  artLabelStrings[ARTL_ART_trConfiguration_1134] = "";
  artlhsL[ARTL_ART_trConfiguration_1134] = ARTL_ART_trConfiguration;
  artKindOfs[ARTL_ART_trConfiguration_1134] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_trConfiguration_1134] = true;
  artLabelInternalStrings[ARTL_ART_trConfiguration_1136] = "trConfiguration ::= '<'  trPrimaryTerm . trEntityReferences '>'  ";
  artLabelStrings[ARTL_ART_trConfiguration_1136] = "";
  artlhsL[ARTL_ART_trConfiguration_1136] = ARTL_ART_trConfiguration;
  artSlotInstanceOfs[ARTL_ART_trConfiguration_1136] = ARTL_ART_trPrimaryTerm;
  artKindOfs[ARTL_ART_trConfiguration_1136] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_trConfiguration_1138] = "trConfiguration ::= '<'  trPrimaryTerm trEntityReferences . '>'  ";
  artLabelStrings[ARTL_ART_trConfiguration_1138] = "";
  artlhsL[ARTL_ART_trConfiguration_1138] = ARTL_ART_trConfiguration;
  artSlotInstanceOfs[ARTL_ART_trConfiguration_1138] = ARTL_ART_trEntityReferences;
  artKindOfs[ARTL_ART_trConfiguration_1138] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_trConfiguration_1138] = true;
  artLabelInternalStrings[ARTL_ART_trConfiguration_1139] = "trConfiguration ::= '<'  trPrimaryTerm trEntityReferences '>'  ";
  artLabelStrings[ARTL_ART_trConfiguration_1139] = "";
  artlhsL[ARTL_ART_trConfiguration_1139] = ARTL_ART_trConfiguration;
  artPopD[ARTL_ART_trConfiguration_1139] = true;
  artLabelInternalStrings[ARTL_ART_trConfiguration_1140] = "trConfiguration ::= '<'  trPrimaryTerm trEntityReferences '>'  .";
  artLabelStrings[ARTL_ART_trConfiguration_1140] = "";
  artlhsL[ARTL_ART_trConfiguration_1140] = ARTL_ART_trConfiguration;
  artKindOfs[ARTL_ART_trConfiguration_1140] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_trConfiguration_1140] = true;
  arteoR_pL[ARTL_ART_trConfiguration_1140] = true;
  artPopD[ARTL_ART_trConfiguration_1140] = true;
}

public void artTableInitialiser_ART_trEntities() {
  artLabelInternalStrings[ARTL_ART_trEntities] = "trEntities";
  artLabelStrings[ARTL_ART_trEntities] = "trEntities";
  artKindOfs[ARTL_ART_trEntities] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_trEntities_1498] = "trEntities ::= . trTerm ";
  artLabelStrings[ARTL_ART_trEntities_1498] = "";
  artlhsL[ARTL_ART_trEntities_1498] = ARTL_ART_trEntities;
  artKindOfs[ARTL_ART_trEntities_1498] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_trEntities_1500] = "trEntities ::= trTerm .";
  artLabelStrings[ARTL_ART_trEntities_1500] = "";
  artlhsL[ARTL_ART_trEntities_1500] = ARTL_ART_trEntities;
  artSlotInstanceOfs[ARTL_ART_trEntities_1500] = ARTL_ART_trTerm;
  artKindOfs[ARTL_ART_trEntities_1500] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_trEntities_1500] = true;
  arteoR_pL[ARTL_ART_trEntities_1500] = true;
  artPopD[ARTL_ART_trEntities_1500] = true;
  artLabelInternalStrings[ARTL_ART_trEntities_1502] = "trEntities ::= . trTerm ':'  trEntityKind ";
  artLabelStrings[ARTL_ART_trEntities_1502] = "";
  artlhsL[ARTL_ART_trEntities_1502] = ARTL_ART_trEntities;
  artKindOfs[ARTL_ART_trEntities_1502] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_trEntities_1504] = "trEntities ::= trTerm . ':'  trEntityKind ";
  artLabelStrings[ARTL_ART_trEntities_1504] = "";
  artlhsL[ARTL_ART_trEntities_1504] = ARTL_ART_trEntities;
  artSlotInstanceOfs[ARTL_ART_trEntities_1504] = ARTL_ART_trTerm;
  artKindOfs[ARTL_ART_trEntities_1504] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_trEntities_1504] = true;
  artFolds[ARTL_ART_trEntities_1506] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_trEntities_1505] = "trEntities ::= trTerm ':'  trEntityKind ";
  artLabelStrings[ARTL_ART_trEntities_1505] = "";
  artlhsL[ARTL_ART_trEntities_1505] = ARTL_ART_trEntities;
  artLabelInternalStrings[ARTL_ART_trEntities_1506] = "trEntities ::= trTerm ':'  . trEntityKind ";
  artLabelStrings[ARTL_ART_trEntities_1506] = "";
  artlhsL[ARTL_ART_trEntities_1506] = ARTL_ART_trEntities;
  artKindOfs[ARTL_ART_trEntities_1506] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_trEntities_1508] = "trEntities ::= trTerm ':'  trEntityKind .";
  artLabelStrings[ARTL_ART_trEntities_1508] = "";
  artlhsL[ARTL_ART_trEntities_1508] = ARTL_ART_trEntities;
  artSlotInstanceOfs[ARTL_ART_trEntities_1508] = ARTL_ART_trEntityKind;
  artKindOfs[ARTL_ART_trEntities_1508] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_trEntities_1508] = true;
  arteoR_pL[ARTL_ART_trEntities_1508] = true;
  artPopD[ARTL_ART_trEntities_1508] = true;
  artLabelInternalStrings[ARTL_ART_trEntities_1510] = "trEntities ::= . trTerm ','  trEntities ";
  artLabelStrings[ARTL_ART_trEntities_1510] = "";
  artlhsL[ARTL_ART_trEntities_1510] = ARTL_ART_trEntities;
  artKindOfs[ARTL_ART_trEntities_1510] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_trEntities_1512] = "trEntities ::= trTerm . ','  trEntities ";
  artLabelStrings[ARTL_ART_trEntities_1512] = "";
  artlhsL[ARTL_ART_trEntities_1512] = ARTL_ART_trEntities;
  artSlotInstanceOfs[ARTL_ART_trEntities_1512] = ARTL_ART_trTerm;
  artKindOfs[ARTL_ART_trEntities_1512] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_trEntities_1512] = true;
  artFolds[ARTL_ART_trEntities_1514] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_trEntities_1513] = "trEntities ::= trTerm ','  trEntities ";
  artLabelStrings[ARTL_ART_trEntities_1513] = "";
  artlhsL[ARTL_ART_trEntities_1513] = ARTL_ART_trEntities;
  artLabelInternalStrings[ARTL_ART_trEntities_1514] = "trEntities ::= trTerm ','  . trEntities ";
  artLabelStrings[ARTL_ART_trEntities_1514] = "";
  artlhsL[ARTL_ART_trEntities_1514] = ARTL_ART_trEntities;
  artKindOfs[ARTL_ART_trEntities_1514] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_trEntities_1516] = "trEntities ::= trTerm ','  trEntities .";
  artLabelStrings[ARTL_ART_trEntities_1516] = "";
  artlhsL[ARTL_ART_trEntities_1516] = ARTL_ART_trEntities;
  artSlotInstanceOfs[ARTL_ART_trEntities_1516] = ARTL_ART_trEntities;
  artKindOfs[ARTL_ART_trEntities_1516] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_trEntities_1516] = true;
  arteoR_pL[ARTL_ART_trEntities_1516] = true;
  artPopD[ARTL_ART_trEntities_1516] = true;
  artLabelInternalStrings[ARTL_ART_trEntities_1518] = "trEntities ::= . trTerm ':'  trEntityKind ','  trEntities ";
  artLabelStrings[ARTL_ART_trEntities_1518] = "";
  artlhsL[ARTL_ART_trEntities_1518] = ARTL_ART_trEntities;
  artKindOfs[ARTL_ART_trEntities_1518] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_trEntities_1520] = "trEntities ::= trTerm . ':'  trEntityKind ','  trEntities ";
  artLabelStrings[ARTL_ART_trEntities_1520] = "";
  artlhsL[ARTL_ART_trEntities_1520] = ARTL_ART_trEntities;
  artSlotInstanceOfs[ARTL_ART_trEntities_1520] = ARTL_ART_trTerm;
  artKindOfs[ARTL_ART_trEntities_1520] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_trEntities_1520] = true;
  artFolds[ARTL_ART_trEntities_1522] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_trEntities_1521] = "trEntities ::= trTerm ':'  trEntityKind ','  trEntities ";
  artLabelStrings[ARTL_ART_trEntities_1521] = "";
  artlhsL[ARTL_ART_trEntities_1521] = ARTL_ART_trEntities;
  artLabelInternalStrings[ARTL_ART_trEntities_1522] = "trEntities ::= trTerm ':'  . trEntityKind ','  trEntities ";
  artLabelStrings[ARTL_ART_trEntities_1522] = "";
  artlhsL[ARTL_ART_trEntities_1522] = ARTL_ART_trEntities;
  artKindOfs[ARTL_ART_trEntities_1522] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_trEntities_1524] = "trEntities ::= trTerm ':'  trEntityKind . ','  trEntities ";
  artLabelStrings[ARTL_ART_trEntities_1524] = "";
  artlhsL[ARTL_ART_trEntities_1524] = ARTL_ART_trEntities;
  artSlotInstanceOfs[ARTL_ART_trEntities_1524] = ARTL_ART_trEntityKind;
  artKindOfs[ARTL_ART_trEntities_1524] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_trEntities_1526] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_trEntities_1525] = "trEntities ::= trTerm ':'  trEntityKind ','  trEntities ";
  artLabelStrings[ARTL_ART_trEntities_1525] = "";
  artlhsL[ARTL_ART_trEntities_1525] = ARTL_ART_trEntities;
  artLabelInternalStrings[ARTL_ART_trEntities_1526] = "trEntities ::= trTerm ':'  trEntityKind ','  . trEntities ";
  artLabelStrings[ARTL_ART_trEntities_1526] = "";
  artlhsL[ARTL_ART_trEntities_1526] = ARTL_ART_trEntities;
  artKindOfs[ARTL_ART_trEntities_1526] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_trEntities_1528] = "trEntities ::= trTerm ':'  trEntityKind ','  trEntities .";
  artLabelStrings[ARTL_ART_trEntities_1528] = "";
  artlhsL[ARTL_ART_trEntities_1528] = ARTL_ART_trEntities;
  artSlotInstanceOfs[ARTL_ART_trEntities_1528] = ARTL_ART_trEntities;
  artKindOfs[ARTL_ART_trEntities_1528] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_trEntities_1528] = true;
  arteoR_pL[ARTL_ART_trEntities_1528] = true;
  artPopD[ARTL_ART_trEntities_1528] = true;
}

public void artTableInitialiser_ART_trEntityKind() {
  artLabelInternalStrings[ARTL_ART_trEntityKind] = "trEntityKind";
  artLabelStrings[ARTL_ART_trEntityKind] = "trEntityKind";
  artKindOfs[ARTL_ART_trEntityKind] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_trEntityKind_1574] = "trEntityKind ::= . 'map'  ";
  artLabelStrings[ARTL_ART_trEntityKind_1574] = "";
  artlhsL[ARTL_ART_trEntityKind_1574] = ARTL_ART_trEntityKind;
  artKindOfs[ARTL_ART_trEntityKind_1574] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_trEntityKind_1574] = true;
  artLabelInternalStrings[ARTL_ART_trEntityKind_1575] = "trEntityKind ::= 'map'  ";
  artLabelStrings[ARTL_ART_trEntityKind_1575] = "";
  artlhsL[ARTL_ART_trEntityKind_1575] = ARTL_ART_trEntityKind;
  artPopD[ARTL_ART_trEntityKind_1575] = true;
  artLabelInternalStrings[ARTL_ART_trEntityKind_1576] = "trEntityKind ::= 'map'  .";
  artLabelStrings[ARTL_ART_trEntityKind_1576] = "";
  artlhsL[ARTL_ART_trEntityKind_1576] = ARTL_ART_trEntityKind;
  artKindOfs[ARTL_ART_trEntityKind_1576] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_trEntityKind_1576] = true;
  arteoR_pL[ARTL_ART_trEntityKind_1576] = true;
  artPopD[ARTL_ART_trEntityKind_1576] = true;
  artLabelInternalStrings[ARTL_ART_trEntityKind_1578] = "trEntityKind ::= . 'mapFixed'  ";
  artLabelStrings[ARTL_ART_trEntityKind_1578] = "";
  artlhsL[ARTL_ART_trEntityKind_1578] = ARTL_ART_trEntityKind;
  artKindOfs[ARTL_ART_trEntityKind_1578] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_trEntityKind_1578] = true;
  artLabelInternalStrings[ARTL_ART_trEntityKind_1579] = "trEntityKind ::= 'mapFixed'  ";
  artLabelStrings[ARTL_ART_trEntityKind_1579] = "";
  artlhsL[ARTL_ART_trEntityKind_1579] = ARTL_ART_trEntityKind;
  artPopD[ARTL_ART_trEntityKind_1579] = true;
  artLabelInternalStrings[ARTL_ART_trEntityKind_1580] = "trEntityKind ::= 'mapFixed'  .";
  artLabelStrings[ARTL_ART_trEntityKind_1580] = "";
  artlhsL[ARTL_ART_trEntityKind_1580] = ARTL_ART_trEntityKind;
  artKindOfs[ARTL_ART_trEntityKind_1580] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_trEntityKind_1580] = true;
  arteoR_pL[ARTL_ART_trEntityKind_1580] = true;
  artPopD[ARTL_ART_trEntityKind_1580] = true;
  artLabelInternalStrings[ARTL_ART_trEntityKind_1582] = "trEntityKind ::= . 'listIn'  ";
  artLabelStrings[ARTL_ART_trEntityKind_1582] = "";
  artlhsL[ARTL_ART_trEntityKind_1582] = ARTL_ART_trEntityKind;
  artKindOfs[ARTL_ART_trEntityKind_1582] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_trEntityKind_1582] = true;
  artLabelInternalStrings[ARTL_ART_trEntityKind_1583] = "trEntityKind ::= 'listIn'  ";
  artLabelStrings[ARTL_ART_trEntityKind_1583] = "";
  artlhsL[ARTL_ART_trEntityKind_1583] = ARTL_ART_trEntityKind;
  artPopD[ARTL_ART_trEntityKind_1583] = true;
  artLabelInternalStrings[ARTL_ART_trEntityKind_1584] = "trEntityKind ::= 'listIn'  .";
  artLabelStrings[ARTL_ART_trEntityKind_1584] = "";
  artlhsL[ARTL_ART_trEntityKind_1584] = ARTL_ART_trEntityKind;
  artKindOfs[ARTL_ART_trEntityKind_1584] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_trEntityKind_1584] = true;
  arteoR_pL[ARTL_ART_trEntityKind_1584] = true;
  artPopD[ARTL_ART_trEntityKind_1584] = true;
  artLabelInternalStrings[ARTL_ART_trEntityKind_1586] = "trEntityKind ::= . 'listOut'  ";
  artLabelStrings[ARTL_ART_trEntityKind_1586] = "";
  artlhsL[ARTL_ART_trEntityKind_1586] = ARTL_ART_trEntityKind;
  artKindOfs[ARTL_ART_trEntityKind_1586] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_trEntityKind_1586] = true;
  artLabelInternalStrings[ARTL_ART_trEntityKind_1587] = "trEntityKind ::= 'listOut'  ";
  artLabelStrings[ARTL_ART_trEntityKind_1587] = "";
  artlhsL[ARTL_ART_trEntityKind_1587] = ARTL_ART_trEntityKind;
  artPopD[ARTL_ART_trEntityKind_1587] = true;
  artLabelInternalStrings[ARTL_ART_trEntityKind_1588] = "trEntityKind ::= 'listOut'  .";
  artLabelStrings[ARTL_ART_trEntityKind_1588] = "";
  artlhsL[ARTL_ART_trEntityKind_1588] = ARTL_ART_trEntityKind;
  artKindOfs[ARTL_ART_trEntityKind_1588] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_trEntityKind_1588] = true;
  arteoR_pL[ARTL_ART_trEntityKind_1588] = true;
  artPopD[ARTL_ART_trEntityKind_1588] = true;
  artLabelInternalStrings[ARTL_ART_trEntityKind_1590] = "trEntityKind ::= . 'singleton'  ";
  artLabelStrings[ARTL_ART_trEntityKind_1590] = "";
  artlhsL[ARTL_ART_trEntityKind_1590] = ARTL_ART_trEntityKind;
  artKindOfs[ARTL_ART_trEntityKind_1590] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_trEntityKind_1590] = true;
  artLabelInternalStrings[ARTL_ART_trEntityKind_1591] = "trEntityKind ::= 'singleton'  ";
  artLabelStrings[ARTL_ART_trEntityKind_1591] = "";
  artlhsL[ARTL_ART_trEntityKind_1591] = ARTL_ART_trEntityKind;
  artPopD[ARTL_ART_trEntityKind_1591] = true;
  artLabelInternalStrings[ARTL_ART_trEntityKind_1592] = "trEntityKind ::= 'singleton'  .";
  artLabelStrings[ARTL_ART_trEntityKind_1592] = "";
  artlhsL[ARTL_ART_trEntityKind_1592] = ARTL_ART_trEntityKind;
  artKindOfs[ARTL_ART_trEntityKind_1592] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_trEntityKind_1592] = true;
  arteoR_pL[ARTL_ART_trEntityKind_1592] = true;
  artPopD[ARTL_ART_trEntityKind_1592] = true;
  artLabelInternalStrings[ARTL_ART_trEntityKind_1594] = "trEntityKind ::= . 'untyped'  ";
  artLabelStrings[ARTL_ART_trEntityKind_1594] = "";
  artlhsL[ARTL_ART_trEntityKind_1594] = ARTL_ART_trEntityKind;
  artKindOfs[ARTL_ART_trEntityKind_1594] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_trEntityKind_1594] = true;
  artLabelInternalStrings[ARTL_ART_trEntityKind_1595] = "trEntityKind ::= 'untyped'  ";
  artLabelStrings[ARTL_ART_trEntityKind_1595] = "";
  artlhsL[ARTL_ART_trEntityKind_1595] = ARTL_ART_trEntityKind;
  artPopD[ARTL_ART_trEntityKind_1595] = true;
  artLabelInternalStrings[ARTL_ART_trEntityKind_1596] = "trEntityKind ::= 'untyped'  .";
  artLabelStrings[ARTL_ART_trEntityKind_1596] = "";
  artlhsL[ARTL_ART_trEntityKind_1596] = ARTL_ART_trEntityKind;
  artKindOfs[ARTL_ART_trEntityKind_1596] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_trEntityKind_1596] = true;
  arteoR_pL[ARTL_ART_trEntityKind_1596] = true;
  artPopD[ARTL_ART_trEntityKind_1596] = true;
}

public void artTableInitialiser_ART_trEntityReferences() {
  artLabelInternalStrings[ARTL_ART_trEntityReferences] = "trEntityReferences";
  artLabelStrings[ARTL_ART_trEntityReferences] = "trEntityReferences";
  artKindOfs[ARTL_ART_trEntityReferences] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_trEntityReferences_1206] = "trEntityReferences ::= . # ";
  artLabelStrings[ARTL_ART_trEntityReferences_1206] = "";
  artlhsL[ARTL_ART_trEntityReferences_1206] = ARTL_ART_trEntityReferences;
  artKindOfs[ARTL_ART_trEntityReferences_1206] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_trEntityReferences_1206] = true;
  artFolds[ARTL_ART_trEntityReferences_1208] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_trEntityReferences_1208] = "trEntityReferences ::= # .";
  artLabelStrings[ARTL_ART_trEntityReferences_1208] = "";
  artlhsL[ARTL_ART_trEntityReferences_1208] = ARTL_ART_trEntityReferences;
  artKindOfs[ARTL_ART_trEntityReferences_1208] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_trEntityReferences_1208] = true;
  arteoR_pL[ARTL_ART_trEntityReferences_1208] = true;
  artPopD[ARTL_ART_trEntityReferences_1208] = true;
  artLabelInternalStrings[ARTL_ART_trEntityReferences_1210] = "trEntityReferences ::= . ','  trUnamedTerm trEntityReferences ";
  artLabelStrings[ARTL_ART_trEntityReferences_1210] = "";
  artlhsL[ARTL_ART_trEntityReferences_1210] = ARTL_ART_trEntityReferences;
  artKindOfs[ARTL_ART_trEntityReferences_1210] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_trEntityReferences_1212] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_trEntityReferences_1211] = "trEntityReferences ::= ','  trUnamedTerm trEntityReferences ";
  artLabelStrings[ARTL_ART_trEntityReferences_1211] = "";
  artlhsL[ARTL_ART_trEntityReferences_1211] = ARTL_ART_trEntityReferences;
  artLabelInternalStrings[ARTL_ART_trEntityReferences_1212] = "trEntityReferences ::= ','  . trUnamedTerm trEntityReferences ";
  artLabelStrings[ARTL_ART_trEntityReferences_1212] = "";
  artlhsL[ARTL_ART_trEntityReferences_1212] = ARTL_ART_trEntityReferences;
  artKindOfs[ARTL_ART_trEntityReferences_1212] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_trEntityReferences_1212] = true;
  artLabelInternalStrings[ARTL_ART_trEntityReferences_1214] = "trEntityReferences ::= ','  trUnamedTerm . trEntityReferences ";
  artLabelStrings[ARTL_ART_trEntityReferences_1214] = "";
  artlhsL[ARTL_ART_trEntityReferences_1214] = ARTL_ART_trEntityReferences;
  artSlotInstanceOfs[ARTL_ART_trEntityReferences_1214] = ARTL_ART_trUnamedTerm;
  artKindOfs[ARTL_ART_trEntityReferences_1214] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_trEntityReferences_1216] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_trEntityReferences_1216] = "trEntityReferences ::= ','  trUnamedTerm trEntityReferences .";
  artLabelStrings[ARTL_ART_trEntityReferences_1216] = "";
  artlhsL[ARTL_ART_trEntityReferences_1216] = ARTL_ART_trEntityReferences;
  artSlotInstanceOfs[ARTL_ART_trEntityReferences_1216] = ARTL_ART_trEntityReferences;
  artKindOfs[ARTL_ART_trEntityReferences_1216] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_trEntityReferences_1216] = true;
  arteoR_pL[ARTL_ART_trEntityReferences_1216] = true;
  artPopD[ARTL_ART_trEntityReferences_1216] = true;
  artLabelInternalStrings[ARTL_ART_trEntityReferences_1218] = "trEntityReferences ::= . ','  trNamedTerm trEntityReferences ";
  artLabelStrings[ARTL_ART_trEntityReferences_1218] = "";
  artlhsL[ARTL_ART_trEntityReferences_1218] = ARTL_ART_trEntityReferences;
  artKindOfs[ARTL_ART_trEntityReferences_1218] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_trEntityReferences_1220] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_trEntityReferences_1219] = "trEntityReferences ::= ','  trNamedTerm trEntityReferences ";
  artLabelStrings[ARTL_ART_trEntityReferences_1219] = "";
  artlhsL[ARTL_ART_trEntityReferences_1219] = ARTL_ART_trEntityReferences;
  artLabelInternalStrings[ARTL_ART_trEntityReferences_1220] = "trEntityReferences ::= ','  . trNamedTerm trEntityReferences ";
  artLabelStrings[ARTL_ART_trEntityReferences_1220] = "";
  artlhsL[ARTL_ART_trEntityReferences_1220] = ARTL_ART_trEntityReferences;
  artKindOfs[ARTL_ART_trEntityReferences_1220] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_trEntityReferences_1220] = true;
  artLabelInternalStrings[ARTL_ART_trEntityReferences_1222] = "trEntityReferences ::= ','  trNamedTerm . trEntityReferences ";
  artLabelStrings[ARTL_ART_trEntityReferences_1222] = "";
  artlhsL[ARTL_ART_trEntityReferences_1222] = ARTL_ART_trEntityReferences;
  artSlotInstanceOfs[ARTL_ART_trEntityReferences_1222] = ARTL_ART_trNamedTerm;
  artKindOfs[ARTL_ART_trEntityReferences_1222] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_trEntityReferences_1224] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_trEntityReferences_1224] = "trEntityReferences ::= ','  trNamedTerm trEntityReferences .";
  artLabelStrings[ARTL_ART_trEntityReferences_1224] = "";
  artlhsL[ARTL_ART_trEntityReferences_1224] = ARTL_ART_trEntityReferences;
  artSlotInstanceOfs[ARTL_ART_trEntityReferences_1224] = ARTL_ART_trEntityReferences;
  artKindOfs[ARTL_ART_trEntityReferences_1224] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_trEntityReferences_1224] = true;
  arteoR_pL[ARTL_ART_trEntityReferences_1224] = true;
  artPopD[ARTL_ART_trEntityReferences_1224] = true;
}

public void artTableInitialiser_ART_trEquations() {
  artLabelInternalStrings[ARTL_ART_trEquations] = "trEquations";
  artLabelStrings[ARTL_ART_trEquations] = "trEquations";
  artKindOfs[ARTL_ART_trEquations] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_trEquations_1106] = "trEquations ::= . cfgAttributeEquation ";
  artLabelStrings[ARTL_ART_trEquations_1106] = "";
  artlhsL[ARTL_ART_trEquations_1106] = ARTL_ART_trEquations;
  artKindOfs[ARTL_ART_trEquations_1106] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_trEquations_1108] = "trEquations ::= cfgAttributeEquation .";
  artLabelStrings[ARTL_ART_trEquations_1108] = "";
  artlhsL[ARTL_ART_trEquations_1108] = ARTL_ART_trEquations;
  artSlotInstanceOfs[ARTL_ART_trEquations_1108] = ARTL_ART_cfgAttributeEquation;
  artKindOfs[ARTL_ART_trEquations_1108] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_trEquations_1108] = true;
  arteoR_pL[ARTL_ART_trEquations_1108] = true;
  artPopD[ARTL_ART_trEquations_1108] = true;
  artLabelInternalStrings[ARTL_ART_trEquations_1110] = "trEquations ::= . cfgAttributeEquation ','  trEquations ";
  artLabelStrings[ARTL_ART_trEquations_1110] = "";
  artlhsL[ARTL_ART_trEquations_1110] = ARTL_ART_trEquations;
  artKindOfs[ARTL_ART_trEquations_1110] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_trEquations_1112] = "trEquations ::= cfgAttributeEquation . ','  trEquations ";
  artLabelStrings[ARTL_ART_trEquations_1112] = "";
  artlhsL[ARTL_ART_trEquations_1112] = ARTL_ART_trEquations;
  artSlotInstanceOfs[ARTL_ART_trEquations_1112] = ARTL_ART_cfgAttributeEquation;
  artKindOfs[ARTL_ART_trEquations_1112] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_trEquations_1112] = true;
  artFolds[ARTL_ART_trEquations_1114] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_trEquations_1113] = "trEquations ::= cfgAttributeEquation ','  trEquations ";
  artLabelStrings[ARTL_ART_trEquations_1113] = "";
  artlhsL[ARTL_ART_trEquations_1113] = ARTL_ART_trEquations;
  artLabelInternalStrings[ARTL_ART_trEquations_1114] = "trEquations ::= cfgAttributeEquation ','  . trEquations ";
  artLabelStrings[ARTL_ART_trEquations_1114] = "";
  artlhsL[ARTL_ART_trEquations_1114] = ARTL_ART_trEquations;
  artKindOfs[ARTL_ART_trEquations_1114] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_trEquations_1116] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_trEquations_1116] = "trEquations ::= cfgAttributeEquation ','  trEquations .";
  artLabelStrings[ARTL_ART_trEquations_1116] = "";
  artlhsL[ARTL_ART_trEquations_1116] = ARTL_ART_trEquations;
  artSlotInstanceOfs[ARTL_ART_trEquations_1116] = ARTL_ART_trEquations;
  artKindOfs[ARTL_ART_trEquations_1116] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_trEquations_1116] = true;
  arteoR_pL[ARTL_ART_trEquations_1116] = true;
  artPopD[ARTL_ART_trEquations_1116] = true;
}

public void artTableInitialiser_ART_trLabel() {
  artLabelInternalStrings[ARTL_ART_trLabel] = "trLabel";
  artLabelStrings[ARTL_ART_trLabel] = "trLabel";
  artKindOfs[ARTL_ART_trLabel] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_trLabel_1048] = "trLabel ::= . # ";
  artLabelStrings[ARTL_ART_trLabel_1048] = "";
  artlhsL[ARTL_ART_trLabel_1048] = ARTL_ART_trLabel;
  artKindOfs[ARTL_ART_trLabel_1048] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_trLabel_1048] = true;
  artFolds[ARTL_ART_trLabel_1050] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_trLabel_1050] = "trLabel ::= # .";
  artLabelStrings[ARTL_ART_trLabel_1050] = "";
  artlhsL[ARTL_ART_trLabel_1050] = ARTL_ART_trLabel;
  artKindOfs[ARTL_ART_trLabel_1050] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_trLabel_1050] = true;
  arteoR_pL[ARTL_ART_trLabel_1050] = true;
  artPopD[ARTL_ART_trLabel_1050] = true;
  artLabelInternalStrings[ARTL_ART_trLabel_1052] = "trLabel ::= . '-'  ID ";
  artLabelStrings[ARTL_ART_trLabel_1052] = "";
  artlhsL[ARTL_ART_trLabel_1052] = ARTL_ART_trLabel;
  artKindOfs[ARTL_ART_trLabel_1052] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_trLabel_1054] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_trLabel_1053] = "trLabel ::= '-'  ID ";
  artLabelStrings[ARTL_ART_trLabel_1053] = "";
  artlhsL[ARTL_ART_trLabel_1053] = ARTL_ART_trLabel;
  artLabelInternalStrings[ARTL_ART_trLabel_1054] = "trLabel ::= '-'  . ID ";
  artLabelStrings[ARTL_ART_trLabel_1054] = "";
  artlhsL[ARTL_ART_trLabel_1054] = ARTL_ART_trLabel;
  artKindOfs[ARTL_ART_trLabel_1054] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_trLabel_1054] = true;
  artLabelInternalStrings[ARTL_ART_trLabel_1056] = "trLabel ::= '-'  ID .";
  artLabelStrings[ARTL_ART_trLabel_1056] = "";
  artlhsL[ARTL_ART_trLabel_1056] = ARTL_ART_trLabel;
  artSlotInstanceOfs[ARTL_ART_trLabel_1056] = ARTL_ART_ID;
  artKindOfs[ARTL_ART_trLabel_1056] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_trLabel_1056] = true;
  arteoR_pL[ARTL_ART_trLabel_1056] = true;
  artPopD[ARTL_ART_trLabel_1056] = true;
  artLabelInternalStrings[ARTL_ART_trLabel_1058] = "trLabel ::= . '-'  STRING_DQ ";
  artLabelStrings[ARTL_ART_trLabel_1058] = "";
  artlhsL[ARTL_ART_trLabel_1058] = ARTL_ART_trLabel;
  artKindOfs[ARTL_ART_trLabel_1058] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_trLabel_1060] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_trLabel_1059] = "trLabel ::= '-'  STRING_DQ ";
  artLabelStrings[ARTL_ART_trLabel_1059] = "";
  artlhsL[ARTL_ART_trLabel_1059] = ARTL_ART_trLabel;
  artLabelInternalStrings[ARTL_ART_trLabel_1060] = "trLabel ::= '-'  . STRING_DQ ";
  artLabelStrings[ARTL_ART_trLabel_1060] = "";
  artlhsL[ARTL_ART_trLabel_1060] = ARTL_ART_trLabel;
  artKindOfs[ARTL_ART_trLabel_1060] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_trLabel_1060] = true;
  artLabelInternalStrings[ARTL_ART_trLabel_1062] = "trLabel ::= '-'  STRING_DQ .";
  artLabelStrings[ARTL_ART_trLabel_1062] = "";
  artlhsL[ARTL_ART_trLabel_1062] = ARTL_ART_trLabel;
  artSlotInstanceOfs[ARTL_ART_trLabel_1062] = ARTL_ART_STRING_DQ;
  artKindOfs[ARTL_ART_trLabel_1062] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_trLabel_1062] = true;
  arteoR_pL[ARTL_ART_trLabel_1062] = true;
  artPopD[ARTL_ART_trLabel_1062] = true;
}

public void artTableInitialiser_ART_trMatch() {
  artLabelInternalStrings[ARTL_ART_trMatch] = "trMatch";
  artLabelStrings[ARTL_ART_trMatch] = "trMatch";
  artKindOfs[ARTL_ART_trMatch] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_trMatch_1118] = "trMatch ::= . trTerm '|>'  trTerm ";
  artLabelStrings[ARTL_ART_trMatch_1118] = "";
  artlhsL[ARTL_ART_trMatch_1118] = ARTL_ART_trMatch;
  artKindOfs[ARTL_ART_trMatch_1118] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_trMatch_1120] = "trMatch ::= trTerm . '|>'  trTerm ";
  artLabelStrings[ARTL_ART_trMatch_1120] = "";
  artlhsL[ARTL_ART_trMatch_1120] = ARTL_ART_trMatch;
  artSlotInstanceOfs[ARTL_ART_trMatch_1120] = ARTL_ART_trTerm;
  artKindOfs[ARTL_ART_trMatch_1120] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_trMatch_1120] = true;
  artFolds[ARTL_ART_trMatch_1122] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_trMatch_1121] = "trMatch ::= trTerm '|>'  trTerm ";
  artLabelStrings[ARTL_ART_trMatch_1121] = "";
  artlhsL[ARTL_ART_trMatch_1121] = ARTL_ART_trMatch;
  artLabelInternalStrings[ARTL_ART_trMatch_1122] = "trMatch ::= trTerm '|>'  . trTerm ";
  artLabelStrings[ARTL_ART_trMatch_1122] = "";
  artlhsL[ARTL_ART_trMatch_1122] = ARTL_ART_trMatch;
  artKindOfs[ARTL_ART_trMatch_1122] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_trMatch_1124] = "trMatch ::= trTerm '|>'  trTerm .";
  artLabelStrings[ARTL_ART_trMatch_1124] = "";
  artlhsL[ARTL_ART_trMatch_1124] = ARTL_ART_trMatch;
  artSlotInstanceOfs[ARTL_ART_trMatch_1124] = ARTL_ART_trTerm;
  artKindOfs[ARTL_ART_trMatch_1124] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_trMatch_1124] = true;
  arteoR_pL[ARTL_ART_trMatch_1124] = true;
  artPopD[ARTL_ART_trMatch_1124] = true;
}

public void artTableInitialiser_ART_trNamedTerm() {
  artLabelInternalStrings[ARTL_ART_trNamedTerm] = "trNamedTerm";
  artLabelStrings[ARTL_ART_trNamedTerm] = "trNamedTerm";
  artKindOfs[ARTL_ART_trNamedTerm] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_trNamedTerm_1230] = "trNamedTerm ::= . ID '='  trTerm ";
  artLabelStrings[ARTL_ART_trNamedTerm_1230] = "";
  artlhsL[ARTL_ART_trNamedTerm_1230] = ARTL_ART_trNamedTerm;
  artKindOfs[ARTL_ART_trNamedTerm_1230] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_trNamedTerm_1232] = "trNamedTerm ::= ID . '='  trTerm ";
  artLabelStrings[ARTL_ART_trNamedTerm_1232] = "";
  artlhsL[ARTL_ART_trNamedTerm_1232] = ARTL_ART_trNamedTerm;
  artSlotInstanceOfs[ARTL_ART_trNamedTerm_1232] = ARTL_ART_ID;
  artKindOfs[ARTL_ART_trNamedTerm_1232] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_trNamedTerm_1232] = true;
  artFolds[ARTL_ART_trNamedTerm_1234] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_trNamedTerm_1233] = "trNamedTerm ::= ID '='  trTerm ";
  artLabelStrings[ARTL_ART_trNamedTerm_1233] = "";
  artlhsL[ARTL_ART_trNamedTerm_1233] = ARTL_ART_trNamedTerm;
  artLabelInternalStrings[ARTL_ART_trNamedTerm_1234] = "trNamedTerm ::= ID '='  . trTerm ";
  artLabelStrings[ARTL_ART_trNamedTerm_1234] = "";
  artlhsL[ARTL_ART_trNamedTerm_1234] = ARTL_ART_trNamedTerm;
  artKindOfs[ARTL_ART_trNamedTerm_1234] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_trNamedTerm_1236] = "trNamedTerm ::= ID '='  trTerm .";
  artLabelStrings[ARTL_ART_trNamedTerm_1236] = "";
  artlhsL[ARTL_ART_trNamedTerm_1236] = ARTL_ART_trNamedTerm;
  artSlotInstanceOfs[ARTL_ART_trNamedTerm_1236] = ARTL_ART_trTerm;
  artKindOfs[ARTL_ART_trNamedTerm_1236] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_trNamedTerm_1236] = true;
  arteoR_pL[ARTL_ART_trNamedTerm_1236] = true;
  artPopD[ARTL_ART_trNamedTerm_1236] = true;
}

public void artTableInitialiser_ART_trPremises() {
  artLabelInternalStrings[ARTL_ART_trPremises] = "trPremises";
  artLabelStrings[ARTL_ART_trPremises] = "trPremises";
  artKindOfs[ARTL_ART_trPremises] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_trPremises_1082] = "trPremises ::= . # ";
  artLabelStrings[ARTL_ART_trPremises_1082] = "";
  artlhsL[ARTL_ART_trPremises_1082] = ARTL_ART_trPremises;
  artKindOfs[ARTL_ART_trPremises_1082] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_trPremises_1082] = true;
  artFolds[ARTL_ART_trPremises_1084] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_trPremises_1084] = "trPremises ::= # .";
  artLabelStrings[ARTL_ART_trPremises_1084] = "";
  artlhsL[ARTL_ART_trPremises_1084] = ARTL_ART_trPremises;
  artKindOfs[ARTL_ART_trPremises_1084] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_trPremises_1084] = true;
  arteoR_pL[ARTL_ART_trPremises_1084] = true;
  artPopD[ARTL_ART_trPremises_1084] = true;
  artLabelInternalStrings[ARTL_ART_trPremises_1086] = "trPremises ::= . trTransition trPremises ";
  artLabelStrings[ARTL_ART_trPremises_1086] = "";
  artlhsL[ARTL_ART_trPremises_1086] = ARTL_ART_trPremises;
  artKindOfs[ARTL_ART_trPremises_1086] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_trPremises_1088] = "trPremises ::= trTransition . trPremises ";
  artLabelStrings[ARTL_ART_trPremises_1088] = "";
  artlhsL[ARTL_ART_trPremises_1088] = ARTL_ART_trPremises;
  artSlotInstanceOfs[ARTL_ART_trPremises_1088] = ARTL_ART_trTransition;
  artKindOfs[ARTL_ART_trPremises_1088] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_trPremises_1088] = true;
  artFolds[ARTL_ART_trPremises_1090] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_trPremises_1090] = "trPremises ::= trTransition trPremises .";
  artLabelStrings[ARTL_ART_trPremises_1090] = "";
  artlhsL[ARTL_ART_trPremises_1090] = ARTL_ART_trPremises;
  artSlotInstanceOfs[ARTL_ART_trPremises_1090] = ARTL_ART_trPremises;
  artKindOfs[ARTL_ART_trPremises_1090] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_trPremises_1090] = true;
  arteoR_pL[ARTL_ART_trPremises_1090] = true;
  artPopD[ARTL_ART_trPremises_1090] = true;
  artLabelInternalStrings[ARTL_ART_trPremises_1092] = "trPremises ::= . trMatch trPremises ";
  artLabelStrings[ARTL_ART_trPremises_1092] = "";
  artlhsL[ARTL_ART_trPremises_1092] = ARTL_ART_trPremises;
  artKindOfs[ARTL_ART_trPremises_1092] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_trPremises_1094] = "trPremises ::= trMatch . trPremises ";
  artLabelStrings[ARTL_ART_trPremises_1094] = "";
  artlhsL[ARTL_ART_trPremises_1094] = ARTL_ART_trPremises;
  artSlotInstanceOfs[ARTL_ART_trPremises_1094] = ARTL_ART_trMatch;
  artKindOfs[ARTL_ART_trPremises_1094] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_trPremises_1094] = true;
  artFolds[ARTL_ART_trPremises_1096] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_trPremises_1096] = "trPremises ::= trMatch trPremises .";
  artLabelStrings[ARTL_ART_trPremises_1096] = "";
  artlhsL[ARTL_ART_trPremises_1096] = ARTL_ART_trPremises;
  artSlotInstanceOfs[ARTL_ART_trPremises_1096] = ARTL_ART_trPremises;
  artKindOfs[ARTL_ART_trPremises_1096] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_trPremises_1096] = true;
  arteoR_pL[ARTL_ART_trPremises_1096] = true;
  artPopD[ARTL_ART_trPremises_1096] = true;
}

public void artTableInitialiser_ART_trPrimaryTerm() {
  artLabelInternalStrings[ARTL_ART_trPrimaryTerm] = "trPrimaryTerm";
  artLabelStrings[ARTL_ART_trPrimaryTerm] = "trPrimaryTerm";
  artKindOfs[ARTL_ART_trPrimaryTerm] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_trPrimaryTerm_1202] = "trPrimaryTerm ::= . trTerm ";
  artLabelStrings[ARTL_ART_trPrimaryTerm_1202] = "";
  artlhsL[ARTL_ART_trPrimaryTerm_1202] = ARTL_ART_trPrimaryTerm;
  artKindOfs[ARTL_ART_trPrimaryTerm_1202] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_trPrimaryTerm_1204] = "trPrimaryTerm ::= trTerm .";
  artLabelStrings[ARTL_ART_trPrimaryTerm_1204] = "";
  artlhsL[ARTL_ART_trPrimaryTerm_1204] = ARTL_ART_trPrimaryTerm;
  artSlotInstanceOfs[ARTL_ART_trPrimaryTerm_1204] = ARTL_ART_trTerm;
  artKindOfs[ARTL_ART_trPrimaryTerm_1204] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_trPrimaryTerm_1204] = true;
  arteoR_pL[ARTL_ART_trPrimaryTerm_1204] = true;
  artPopD[ARTL_ART_trPrimaryTerm_1204] = true;
}

public void artTableInitialiser_ART_trRule() {
  artLabelInternalStrings[ARTL_ART_trRule] = "trRule";
  artLabelStrings[ARTL_ART_trRule] = "trRule";
  artKindOfs[ARTL_ART_trRule] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_trRule_36] = "trRule ::= . trLabel tr ";
  artLabelStrings[ARTL_ART_trRule_36] = "";
  artlhsL[ARTL_ART_trRule_36] = ARTL_ART_trRule;
  artKindOfs[ARTL_ART_trRule_36] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_trRule_38] = "trRule ::= trLabel . tr ";
  artLabelStrings[ARTL_ART_trRule_38] = "";
  artlhsL[ARTL_ART_trRule_38] = ARTL_ART_trRule;
  artSlotInstanceOfs[ARTL_ART_trRule_38] = ARTL_ART_trLabel;
  artKindOfs[ARTL_ART_trRule_38] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_trRule_38] = true;
  artLabelInternalStrings[ARTL_ART_trRule_40] = "trRule ::= trLabel tr .";
  artLabelStrings[ARTL_ART_trRule_40] = "";
  artlhsL[ARTL_ART_trRule_40] = ARTL_ART_trRule;
  artSlotInstanceOfs[ARTL_ART_trRule_40] = ARTL_ART_tr;
  artKindOfs[ARTL_ART_trRule_40] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_trRule_40] = true;
  arteoR_pL[ARTL_ART_trRule_40] = true;
  artPopD[ARTL_ART_trRule_40] = true;
}

public void artTableInitialiser_ART_trSubterms() {
  artLabelInternalStrings[ARTL_ART_trSubterms] = "trSubterms";
  artLabelStrings[ARTL_ART_trSubterms] = "trSubterms";
  artKindOfs[ARTL_ART_trSubterms] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_trSubterms_1266] = "trSubterms ::= . trTerm ";
  artLabelStrings[ARTL_ART_trSubterms_1266] = "";
  artlhsL[ARTL_ART_trSubterms_1266] = ARTL_ART_trSubterms;
  artKindOfs[ARTL_ART_trSubterms_1266] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_trSubterms_1268] = "trSubterms ::= trTerm .";
  artLabelStrings[ARTL_ART_trSubterms_1268] = "";
  artlhsL[ARTL_ART_trSubterms_1268] = ARTL_ART_trSubterms;
  artSlotInstanceOfs[ARTL_ART_trSubterms_1268] = ARTL_ART_trTerm;
  artKindOfs[ARTL_ART_trSubterms_1268] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_trSubterms_1268] = true;
  arteoR_pL[ARTL_ART_trSubterms_1268] = true;
  artPopD[ARTL_ART_trSubterms_1268] = true;
  artLabelInternalStrings[ARTL_ART_trSubterms_1270] = "trSubterms ::= . trTerm ','  trSubterms ";
  artLabelStrings[ARTL_ART_trSubterms_1270] = "";
  artlhsL[ARTL_ART_trSubterms_1270] = ARTL_ART_trSubterms;
  artKindOfs[ARTL_ART_trSubterms_1270] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_trSubterms_1272] = "trSubterms ::= trTerm . ','  trSubterms ";
  artLabelStrings[ARTL_ART_trSubterms_1272] = "";
  artlhsL[ARTL_ART_trSubterms_1272] = ARTL_ART_trSubterms;
  artSlotInstanceOfs[ARTL_ART_trSubterms_1272] = ARTL_ART_trTerm;
  artKindOfs[ARTL_ART_trSubterms_1272] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_trSubterms_1272] = true;
  artFolds[ARTL_ART_trSubterms_1274] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_trSubterms_1273] = "trSubterms ::= trTerm ','  trSubterms ";
  artLabelStrings[ARTL_ART_trSubterms_1273] = "";
  artlhsL[ARTL_ART_trSubterms_1273] = ARTL_ART_trSubterms;
  artLabelInternalStrings[ARTL_ART_trSubterms_1274] = "trSubterms ::= trTerm ','  . trSubterms ";
  artLabelStrings[ARTL_ART_trSubterms_1274] = "";
  artlhsL[ARTL_ART_trSubterms_1274] = ARTL_ART_trSubterms;
  artKindOfs[ARTL_ART_trSubterms_1274] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_trSubterms_1276] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_trSubterms_1276] = "trSubterms ::= trTerm ','  trSubterms .";
  artLabelStrings[ARTL_ART_trSubterms_1276] = "";
  artlhsL[ARTL_ART_trSubterms_1276] = ARTL_ART_trSubterms;
  artSlotInstanceOfs[ARTL_ART_trSubterms_1276] = ARTL_ART_trSubterms;
  artKindOfs[ARTL_ART_trSubterms_1276] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_trSubterms_1276] = true;
  arteoR_pL[ARTL_ART_trSubterms_1276] = true;
  artPopD[ARTL_ART_trSubterms_1276] = true;
  artLabelInternalStrings[ARTL_ART_trSubterms_1278] = "trSubterms ::= . trTerm trSubterms ";
  artLabelStrings[ARTL_ART_trSubterms_1278] = "";
  artlhsL[ARTL_ART_trSubterms_1278] = ARTL_ART_trSubterms;
  artKindOfs[ARTL_ART_trSubterms_1278] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_trSubterms_1280] = "trSubterms ::= trTerm . trSubterms ";
  artLabelStrings[ARTL_ART_trSubterms_1280] = "";
  artlhsL[ARTL_ART_trSubterms_1280] = ARTL_ART_trSubterms;
  artSlotInstanceOfs[ARTL_ART_trSubterms_1280] = ARTL_ART_trTerm;
  artKindOfs[ARTL_ART_trSubterms_1280] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_trSubterms_1280] = true;
  artFolds[ARTL_ART_trSubterms_1282] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_trSubterms_1282] = "trSubterms ::= trTerm trSubterms .";
  artLabelStrings[ARTL_ART_trSubterms_1282] = "";
  artlhsL[ARTL_ART_trSubterms_1282] = ARTL_ART_trSubterms;
  artSlotInstanceOfs[ARTL_ART_trSubterms_1282] = ARTL_ART_trSubterms;
  artKindOfs[ARTL_ART_trSubterms_1282] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_trSubterms_1282] = true;
  arteoR_pL[ARTL_ART_trSubterms_1282] = true;
  artPopD[ARTL_ART_trSubterms_1282] = true;
}

public void artTableInitialiser_ART_trTerm() {
  artLabelInternalStrings[ARTL_ART_trTerm] = "trTerm";
  artLabelStrings[ARTL_ART_trTerm] = "trTerm";
  artKindOfs[ARTL_ART_trTerm] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_trTerm_818] = "trTerm ::= . __bool ";
  artLabelStrings[ARTL_ART_trTerm_818] = "";
  artlhsL[ARTL_ART_trTerm_818] = ARTL_ART_trTerm;
  artKindOfs[ARTL_ART_trTerm_818] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_trTerm_820] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_trTerm_820] = "trTerm ::= __bool .";
  artLabelStrings[ARTL_ART_trTerm_820] = "";
  artlhsL[ARTL_ART_trTerm_820] = ARTL_ART_trTerm;
  artSlotInstanceOfs[ARTL_ART_trTerm_820] = ARTL_ART___bool;
  artKindOfs[ARTL_ART_trTerm_820] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_trTerm_820] = true;
  arteoR_pL[ARTL_ART_trTerm_820] = true;
  artPopD[ARTL_ART_trTerm_820] = true;
  artLabelInternalStrings[ARTL_ART_trTerm_822] = "trTerm ::= . __int32 ";
  artLabelStrings[ARTL_ART_trTerm_822] = "";
  artlhsL[ARTL_ART_trTerm_822] = ARTL_ART_trTerm;
  artKindOfs[ARTL_ART_trTerm_822] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_trTerm_824] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_trTerm_824] = "trTerm ::= __int32 .";
  artLabelStrings[ARTL_ART_trTerm_824] = "";
  artlhsL[ARTL_ART_trTerm_824] = ARTL_ART_trTerm;
  artSlotInstanceOfs[ARTL_ART_trTerm_824] = ARTL_ART___int32;
  artKindOfs[ARTL_ART_trTerm_824] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_trTerm_824] = true;
  arteoR_pL[ARTL_ART_trTerm_824] = true;
  artPopD[ARTL_ART_trTerm_824] = true;
  artLabelInternalStrings[ARTL_ART_trTerm_826] = "trTerm ::= . __real64 ";
  artLabelStrings[ARTL_ART_trTerm_826] = "";
  artlhsL[ARTL_ART_trTerm_826] = ARTL_ART_trTerm;
  artKindOfs[ARTL_ART_trTerm_826] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_trTerm_828] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_trTerm_828] = "trTerm ::= __real64 .";
  artLabelStrings[ARTL_ART_trTerm_828] = "";
  artlhsL[ARTL_ART_trTerm_828] = ARTL_ART_trTerm;
  artSlotInstanceOfs[ARTL_ART_trTerm_828] = ARTL_ART___real64;
  artKindOfs[ARTL_ART_trTerm_828] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_trTerm_828] = true;
  arteoR_pL[ARTL_ART_trTerm_828] = true;
  artPopD[ARTL_ART_trTerm_828] = true;
  artLabelInternalStrings[ARTL_ART_trTerm_830] = "trTerm ::= . __string ";
  artLabelStrings[ARTL_ART_trTerm_830] = "";
  artlhsL[ARTL_ART_trTerm_830] = ARTL_ART_trTerm;
  artKindOfs[ARTL_ART_trTerm_830] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_trTerm_832] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_trTerm_832] = "trTerm ::= __string .";
  artLabelStrings[ARTL_ART_trTerm_832] = "";
  artlhsL[ARTL_ART_trTerm_832] = ARTL_ART_trTerm;
  artSlotInstanceOfs[ARTL_ART_trTerm_832] = ARTL_ART___string;
  artKindOfs[ARTL_ART_trTerm_832] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_trTerm_832] = true;
  arteoR_pL[ARTL_ART_trTerm_832] = true;
  artPopD[ARTL_ART_trTerm_832] = true;
  artLabelInternalStrings[ARTL_ART_trTerm_834] = "trTerm ::= . __char ";
  artLabelStrings[ARTL_ART_trTerm_834] = "";
  artlhsL[ARTL_ART_trTerm_834] = ARTL_ART_trTerm;
  artKindOfs[ARTL_ART_trTerm_834] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_trTerm_836] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_trTerm_836] = "trTerm ::= __char .";
  artLabelStrings[ARTL_ART_trTerm_836] = "";
  artlhsL[ARTL_ART_trTerm_836] = ARTL_ART_trTerm;
  artSlotInstanceOfs[ARTL_ART_trTerm_836] = ARTL_ART___char;
  artKindOfs[ARTL_ART_trTerm_836] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_trTerm_836] = true;
  arteoR_pL[ARTL_ART_trTerm_836] = true;
  artPopD[ARTL_ART_trTerm_836] = true;
  artLabelInternalStrings[ARTL_ART_trTerm_838] = "trTerm ::= . ID ";
  artLabelStrings[ARTL_ART_trTerm_838] = "";
  artlhsL[ARTL_ART_trTerm_838] = ARTL_ART_trTerm;
  artKindOfs[ARTL_ART_trTerm_838] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_trTerm_840] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_trTerm_840] = "trTerm ::= ID .";
  artLabelStrings[ARTL_ART_trTerm_840] = "";
  artlhsL[ARTL_ART_trTerm_840] = ARTL_ART_trTerm;
  artSlotInstanceOfs[ARTL_ART_trTerm_840] = ARTL_ART_ID;
  artKindOfs[ARTL_ART_trTerm_840] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_trTerm_840] = true;
  arteoR_pL[ARTL_ART_trTerm_840] = true;
  artPopD[ARTL_ART_trTerm_840] = true;
  artLabelInternalStrings[ARTL_ART_trTerm_842] = "trTerm ::= . ID '('  ')'  ";
  artLabelStrings[ARTL_ART_trTerm_842] = "";
  artlhsL[ARTL_ART_trTerm_842] = ARTL_ART_trTerm;
  artKindOfs[ARTL_ART_trTerm_842] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_trTerm_844] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_trTerm_844] = "trTerm ::= ID . '('  ')'  ";
  artLabelStrings[ARTL_ART_trTerm_844] = "";
  artlhsL[ARTL_ART_trTerm_844] = ARTL_ART_trTerm;
  artSlotInstanceOfs[ARTL_ART_trTerm_844] = ARTL_ART_ID;
  artKindOfs[ARTL_ART_trTerm_844] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_trTerm_844] = true;
  artPopD[ARTL_ART_trTerm_844] = true;
  artFolds[ARTL_ART_trTerm_846] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_trTerm_845] = "trTerm ::= ID '('  ')'  ";
  artLabelStrings[ARTL_ART_trTerm_845] = "";
  artlhsL[ARTL_ART_trTerm_845] = ARTL_ART_trTerm;
  artPopD[ARTL_ART_trTerm_845] = true;
  artLabelInternalStrings[ARTL_ART_trTerm_846] = "trTerm ::= ID '('  . ')'  ";
  artLabelStrings[ARTL_ART_trTerm_846] = "";
  artlhsL[ARTL_ART_trTerm_846] = ARTL_ART_trTerm;
  artKindOfs[ARTL_ART_trTerm_846] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_trTerm_846] = true;
  artFolds[ARTL_ART_trTerm_848] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_trTerm_847] = "trTerm ::= ID '('  ')'  ";
  artLabelStrings[ARTL_ART_trTerm_847] = "";
  artlhsL[ARTL_ART_trTerm_847] = ARTL_ART_trTerm;
  artPopD[ARTL_ART_trTerm_847] = true;
  artLabelInternalStrings[ARTL_ART_trTerm_848] = "trTerm ::= ID '('  ')'  .";
  artLabelStrings[ARTL_ART_trTerm_848] = "";
  artlhsL[ARTL_ART_trTerm_848] = ARTL_ART_trTerm;
  artKindOfs[ARTL_ART_trTerm_848] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_trTerm_848] = true;
  arteoR_pL[ARTL_ART_trTerm_848] = true;
  artPopD[ARTL_ART_trTerm_848] = true;
  artLabelInternalStrings[ARTL_ART_trTerm_850] = "trTerm ::= . ID '('  trSubterms ')'  ";
  artLabelStrings[ARTL_ART_trTerm_850] = "";
  artlhsL[ARTL_ART_trTerm_850] = ARTL_ART_trTerm;
  artKindOfs[ARTL_ART_trTerm_850] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_trTerm_852] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_trTerm_852] = "trTerm ::= ID . '('  trSubterms ')'  ";
  artLabelStrings[ARTL_ART_trTerm_852] = "";
  artlhsL[ARTL_ART_trTerm_852] = ARTL_ART_trTerm;
  artSlotInstanceOfs[ARTL_ART_trTerm_852] = ARTL_ART_ID;
  artKindOfs[ARTL_ART_trTerm_852] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_trTerm_852] = true;
  artFolds[ARTL_ART_trTerm_854] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_trTerm_853] = "trTerm ::= ID '('  trSubterms ')'  ";
  artLabelStrings[ARTL_ART_trTerm_853] = "";
  artlhsL[ARTL_ART_trTerm_853] = ARTL_ART_trTerm;
  artLabelInternalStrings[ARTL_ART_trTerm_854] = "trTerm ::= ID '('  . trSubterms ')'  ";
  artLabelStrings[ARTL_ART_trTerm_854] = "";
  artlhsL[ARTL_ART_trTerm_854] = ARTL_ART_trTerm;
  artKindOfs[ARTL_ART_trTerm_854] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_trTerm_856] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_trTerm_856] = "trTerm ::= ID '('  trSubterms . ')'  ";
  artLabelStrings[ARTL_ART_trTerm_856] = "";
  artlhsL[ARTL_ART_trTerm_856] = ARTL_ART_trTerm;
  artSlotInstanceOfs[ARTL_ART_trTerm_856] = ARTL_ART_trSubterms;
  artKindOfs[ARTL_ART_trTerm_856] = ARTK_INTERMEDIATE;
  artPopD[ARTL_ART_trTerm_856] = true;
  artFolds[ARTL_ART_trTerm_858] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_trTerm_857] = "trTerm ::= ID '('  trSubterms ')'  ";
  artLabelStrings[ARTL_ART_trTerm_857] = "";
  artlhsL[ARTL_ART_trTerm_857] = ARTL_ART_trTerm;
  artPopD[ARTL_ART_trTerm_857] = true;
  artLabelInternalStrings[ARTL_ART_trTerm_858] = "trTerm ::= ID '('  trSubterms ')'  .";
  artLabelStrings[ARTL_ART_trTerm_858] = "";
  artlhsL[ARTL_ART_trTerm_858] = ARTL_ART_trTerm;
  artKindOfs[ARTL_ART_trTerm_858] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_trTerm_858] = true;
  arteoR_pL[ARTL_ART_trTerm_858] = true;
  artPopD[ARTL_ART_trTerm_858] = true;
  artLabelInternalStrings[ARTL_ART_trTerm_860] = "trTerm ::= . ID_ATTRIBUTE ";
  artLabelStrings[ARTL_ART_trTerm_860] = "";
  artlhsL[ARTL_ART_trTerm_860] = ARTL_ART_trTerm;
  artKindOfs[ARTL_ART_trTerm_860] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_trTerm_862] = "trTerm ::= ID_ATTRIBUTE .";
  artLabelStrings[ARTL_ART_trTerm_862] = "";
  artlhsL[ARTL_ART_trTerm_862] = ARTL_ART_trTerm;
  artSlotInstanceOfs[ARTL_ART_trTerm_862] = ARTL_ART_ID_ATTRIBUTE;
  artKindOfs[ARTL_ART_trTerm_862] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_trTerm_862] = true;
  arteoR_pL[ARTL_ART_trTerm_862] = true;
  artPopD[ARTL_ART_trTerm_862] = true;
  artLabelInternalStrings[ARTL_ART_trTerm_864] = "trTerm ::= . STRING_PLAIN_SQ ";
  artLabelStrings[ARTL_ART_trTerm_864] = "";
  artlhsL[ARTL_ART_trTerm_864] = ARTL_ART_trTerm;
  artKindOfs[ARTL_ART_trTerm_864] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_trTerm_866] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_trTerm_866] = "trTerm ::= STRING_PLAIN_SQ .";
  artLabelStrings[ARTL_ART_trTerm_866] = "";
  artlhsL[ARTL_ART_trTerm_866] = ARTL_ART_trTerm;
  artSlotInstanceOfs[ARTL_ART_trTerm_866] = ARTL_ART_STRING_PLAIN_SQ;
  artKindOfs[ARTL_ART_trTerm_866] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_trTerm_866] = true;
  arteoR_pL[ARTL_ART_trTerm_866] = true;
  artPopD[ARTL_ART_trTerm_866] = true;
}

public void artTableInitialiser_ART_trTransition() {
  artLabelInternalStrings[ARTL_ART_trTransition] = "trTransition";
  artLabelStrings[ARTL_ART_trTransition] = "trTransition";
  artKindOfs[ARTL_ART_trTransition] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_trTransition_1098] = "trTransition ::= . trConfiguration TRRELATION trConfiguration ";
  artLabelStrings[ARTL_ART_trTransition_1098] = "";
  artlhsL[ARTL_ART_trTransition_1098] = ARTL_ART_trTransition;
  artKindOfs[ARTL_ART_trTransition_1098] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_trTransition_1100] = "trTransition ::= trConfiguration . TRRELATION trConfiguration ";
  artLabelStrings[ARTL_ART_trTransition_1100] = "";
  artlhsL[ARTL_ART_trTransition_1100] = ARTL_ART_trTransition;
  artSlotInstanceOfs[ARTL_ART_trTransition_1100] = ARTL_ART_trConfiguration;
  artKindOfs[ARTL_ART_trTransition_1100] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_trTransition_1100] = true;
  artLabelInternalStrings[ARTL_ART_trTransition_1102] = "trTransition ::= trConfiguration TRRELATION . trConfiguration ";
  artLabelStrings[ARTL_ART_trTransition_1102] = "";
  artlhsL[ARTL_ART_trTransition_1102] = ARTL_ART_trTransition;
  artSlotInstanceOfs[ARTL_ART_trTransition_1102] = ARTL_ART_TRRELATION;
  artKindOfs[ARTL_ART_trTransition_1102] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_trTransition_1104] = "trTransition ::= trConfiguration TRRELATION trConfiguration .";
  artLabelStrings[ARTL_ART_trTransition_1104] = "";
  artlhsL[ARTL_ART_trTransition_1104] = ARTL_ART_trTransition;
  artSlotInstanceOfs[ARTL_ART_trTransition_1104] = ARTL_ART_trConfiguration;
  artKindOfs[ARTL_ART_trTransition_1104] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_trTransition_1104] = true;
  arteoR_pL[ARTL_ART_trTransition_1104] = true;
  artPopD[ARTL_ART_trTransition_1104] = true;
}

public void artTableInitialiser_ART_trUnamedTerm() {
  artLabelInternalStrings[ARTL_ART_trUnamedTerm] = "trUnamedTerm";
  artLabelStrings[ARTL_ART_trUnamedTerm] = "trUnamedTerm";
  artKindOfs[ARTL_ART_trUnamedTerm] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_trUnamedTerm_1226] = "trUnamedTerm ::= . trTerm ";
  artLabelStrings[ARTL_ART_trUnamedTerm_1226] = "";
  artlhsL[ARTL_ART_trUnamedTerm_1226] = ARTL_ART_trUnamedTerm;
  artKindOfs[ARTL_ART_trUnamedTerm_1226] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_trUnamedTerm_1228] = "trUnamedTerm ::= trTerm .";
  artLabelStrings[ARTL_ART_trUnamedTerm_1228] = "";
  artlhsL[ARTL_ART_trUnamedTerm_1228] = ARTL_ART_trUnamedTerm;
  artSlotInstanceOfs[ARTL_ART_trUnamedTerm_1228] = ARTL_ART_trTerm;
  artKindOfs[ARTL_ART_trUnamedTerm_1228] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_trUnamedTerm_1228] = true;
  arteoR_pL[ARTL_ART_trUnamedTerm_1228] = true;
  artPopD[ARTL_ART_trUnamedTerm_1228] = true;
}

public void artTableInitialiser_ART_tryArgument() {
  artLabelInternalStrings[ARTL_ART_tryArgument] = "tryArgument";
  artLabelStrings[ARTL_ART_tryArgument] = "tryArgument";
  artKindOfs[ARTL_ART_tryArgument] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_tryArgument_1530] = "tryArgument ::= . STRING_PLAIN_SQ ";
  artLabelStrings[ARTL_ART_tryArgument_1530] = "";
  artlhsL[ARTL_ART_tryArgument_1530] = ARTL_ART_tryArgument;
  artKindOfs[ARTL_ART_tryArgument_1530] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_tryArgument_1532] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_tryArgument_1532] = "tryArgument ::= STRING_PLAIN_SQ .";
  artLabelStrings[ARTL_ART_tryArgument_1532] = "";
  artlhsL[ARTL_ART_tryArgument_1532] = ARTL_ART_tryArgument;
  artSlotInstanceOfs[ARTL_ART_tryArgument_1532] = ARTL_ART_STRING_PLAIN_SQ;
  artKindOfs[ARTL_ART_tryArgument_1532] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_tryArgument_1532] = true;
  arteoR_pL[ARTL_ART_tryArgument_1532] = true;
  artPopD[ARTL_ART_tryArgument_1532] = true;
  artLabelInternalStrings[ARTL_ART_tryArgument_1534] = "tryArgument ::= . trConfiguration ";
  artLabelStrings[ARTL_ART_tryArgument_1534] = "";
  artlhsL[ARTL_ART_tryArgument_1534] = ARTL_ART_tryArgument;
  artKindOfs[ARTL_ART_tryArgument_1534] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_tryArgument_1536] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_tryArgument_1536] = "tryArgument ::= trConfiguration .";
  artLabelStrings[ARTL_ART_tryArgument_1536] = "";
  artlhsL[ARTL_ART_tryArgument_1536] = ARTL_ART_tryArgument;
  artSlotInstanceOfs[ARTL_ART_tryArgument_1536] = ARTL_ART_trConfiguration;
  artKindOfs[ARTL_ART_tryArgument_1536] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_tryArgument_1536] = true;
  arteoR_pL[ARTL_ART_tryArgument_1536] = true;
  artPopD[ARTL_ART_tryArgument_1536] = true;
  artLabelInternalStrings[ARTL_ART_tryArgument_1538] = "tryArgument ::= . STRING_DQ ";
  artLabelStrings[ARTL_ART_tryArgument_1538] = "";
  artlhsL[ARTL_ART_tryArgument_1538] = ARTL_ART_tryArgument;
  artKindOfs[ARTL_ART_tryArgument_1538] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_tryArgument_1540] = ARTFOLD_OVER;
  artLabelInternalStrings[ARTL_ART_tryArgument_1540] = "tryArgument ::= STRING_DQ .";
  artLabelStrings[ARTL_ART_tryArgument_1540] = "";
  artlhsL[ARTL_ART_tryArgument_1540] = ARTL_ART_tryArgument;
  artSlotInstanceOfs[ARTL_ART_tryArgument_1540] = ARTL_ART_STRING_DQ;
  artKindOfs[ARTL_ART_tryArgument_1540] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_tryArgument_1540] = true;
  arteoR_pL[ARTL_ART_tryArgument_1540] = true;
  artPopD[ARTL_ART_tryArgument_1540] = true;
}

public void artTableInitialiser_ART_useElements() {
  artLabelInternalStrings[ARTL_ART_useElements] = "useElements";
  artLabelStrings[ARTL_ART_useElements] = "useElements";
  artKindOfs[ARTL_ART_useElements] = ARTK_NONTERMINAL;
  artLabelInternalStrings[ARTL_ART_useElements_1450] = "useElements ::= . idART ";
  artLabelStrings[ARTL_ART_useElements_1450] = "";
  artlhsL[ARTL_ART_useElements_1450] = ARTL_ART_useElements;
  artKindOfs[ARTL_ART_useElements_1450] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_useElements_1452] = "useElements ::= idART .";
  artLabelStrings[ARTL_ART_useElements_1452] = "";
  artlhsL[ARTL_ART_useElements_1452] = ARTL_ART_useElements;
  artSlotInstanceOfs[ARTL_ART_useElements_1452] = ARTL_ART_idART;
  artKindOfs[ARTL_ART_useElements_1452] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_useElements_1452] = true;
  arteoR_pL[ARTL_ART_useElements_1452] = true;
  artPopD[ARTL_ART_useElements_1452] = true;
  artLabelInternalStrings[ARTL_ART_useElements_1454] = "useElements ::= . idART ','  useElements ";
  artLabelStrings[ARTL_ART_useElements_1454] = "";
  artlhsL[ARTL_ART_useElements_1454] = ARTL_ART_useElements;
  artKindOfs[ARTL_ART_useElements_1454] = ARTK_INTERMEDIATE;
  artLabelInternalStrings[ARTL_ART_useElements_1456] = "useElements ::= idART . ','  useElements ";
  artLabelStrings[ARTL_ART_useElements_1456] = "";
  artlhsL[ARTL_ART_useElements_1456] = ARTL_ART_useElements;
  artSlotInstanceOfs[ARTL_ART_useElements_1456] = ARTL_ART_idART;
  artKindOfs[ARTL_ART_useElements_1456] = ARTK_INTERMEDIATE;
  artfiRL[ARTL_ART_useElements_1456] = true;
  artFolds[ARTL_ART_useElements_1458] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_useElements_1457] = "useElements ::= idART ','  useElements ";
  artLabelStrings[ARTL_ART_useElements_1457] = "";
  artlhsL[ARTL_ART_useElements_1457] = ARTL_ART_useElements;
  artLabelInternalStrings[ARTL_ART_useElements_1458] = "useElements ::= idART ','  . useElements ";
  artLabelStrings[ARTL_ART_useElements_1458] = "";
  artlhsL[ARTL_ART_useElements_1458] = ARTL_ART_useElements;
  artKindOfs[ARTL_ART_useElements_1458] = ARTK_INTERMEDIATE;
  artFolds[ARTL_ART_useElements_1460] = ARTFOLD_UNDER;
  artLabelInternalStrings[ARTL_ART_useElements_1460] = "useElements ::= idART ','  useElements .";
  artLabelStrings[ARTL_ART_useElements_1460] = "";
  artlhsL[ARTL_ART_useElements_1460] = ARTL_ART_useElements;
  artSlotInstanceOfs[ARTL_ART_useElements_1460] = ARTL_ART_useElements;
  artKindOfs[ARTL_ART_useElements_1460] = ARTK_INTERMEDIATE;
  arteoRL[ARTL_ART_useElements_1460] = true;
  arteoR_pL[ARTL_ART_useElements_1460] = true;
  artPopD[ARTL_ART_useElements_1460] = true;
}

public void artTableInitialise() {
  artLabelInternalStrings = new String[ARTX_LABEL_EXTENT + 1];
  artLabelStrings = new String[ARTX_LABEL_EXTENT + 1];
  artLabelInternalStrings[ARTL_EOS] = "ART$";
  artLabelStrings[ARTL_EOS] = " EOS $";
  artLabelInternalStrings[ARTX_DESPATCH] = "ARTX_DESPATCH";
  artLabelStrings[ARTX_DESPATCH] = " DESPATCH";
  artLabelInternalStrings[ARTL_DUMMY] = "ARTL_DUMMY";
  artLabelStrings[ARTL_DUMMY] = " DUMMY";
  artLabelInternalStrings[ARTX_LABEL_EXTENT] = "!!ILLEGAL!!";
  artLabelStrings[ARTX_LABEL_EXTENT] = " ILLEGAL";
  artLabelStrings[ARTL_EPSILON] = "#";
  artLabelInternalStrings[ARTL_EPSILON] = "#";

  artTerminalRequiresWhiteSpace = new boolean[ARTL_EPSILON];
  artInitialiseBooleanArray(artTerminalRequiresWhiteSpace, 0, ARTL_EPSILON, false);

  artTerminalCaseInsensitive = new boolean[ARTL_EPSILON];
  artInitialiseBooleanArray(artTerminalCaseInsensitive, 0, ARTL_EPSILON, false);

  artlhsL = new int[ARTX_LABEL_EXTENT];
  artInitialiseIntegerArray(artlhsL, 0, ARTX_LABEL_EXTENT);
  artlhsL[ARTX_DESPATCH] = ARTX_DESPATCH;

  artKindOfs = new int[ARTX_LABEL_EXTENT + 1];
  artKindOfs[ARTL_EOS] = ARTK_EOS;
  artKindOfs[ARTL_EPSILON] = ARTK_EPSILON;

  artHigher = new ARTBitSet[ARTX_LABEL_EXTENT + 1];

  artLonger = new ARTBitSet[ARTX_LABEL_EXTENT + 1];

  artShorter = new ARTBitSet[ARTX_LABEL_EXTENT + 1];

  artPreSlots = new int[ARTX_LABEL_EXTENT];
  artInitialiseIntegerArray(artPreSlots, 0, ARTX_LABEL_EXTENT);

  artPostSlots = new int[ARTX_LABEL_EXTENT];
  artInitialiseIntegerArray(artPostSlots, 0, ARTX_LABEL_EXTENT);

  artInstanceOfs = new int[ARTX_LABEL_EXTENT];
  artInitialiseIntegerArray(artInstanceOfs, 0, ARTX_LABEL_EXTENT);

  artSlotInstanceOfs = new int[ARTX_LABEL_EXTENT];
  artInitialiseIntegerArray(artSlotInstanceOfs, 0, ARTX_LABEL_EXTENT);

  artUserNameOfs = new int[ARTX_LABEL_EXTENT + 1];

  artGathers = new int[ARTX_LABEL_EXTENT];
  artInitialiseIntegerArray(artGathers, 0, ARTX_LABEL_EXTENT);

  artFolds = new int[ARTX_LABEL_EXTENT];
  artInitialiseIntegerArray(artFolds, 0, ARTX_LABEL_EXTENT, 0);

  artpL = new int[ARTX_LABEL_EXTENT];
  artInitialiseIntegerArray(artpL, 0, ARTX_LABEL_EXTENT);

  artaL = new int[ARTX_LABEL_EXTENT];
  artInitialiseIntegerArray(artaL, 0, ARTX_LABEL_EXTENT);

  artcolonL = new int[ARTX_LABEL_EXTENT];
  artInitialiseIntegerArray(artcolonL, 0, ARTX_LABEL_EXTENT);

  arteoOPL = new boolean[ARTX_LABEL_EXTENT];
  artInitialiseBooleanArray(arteoOPL, 0, ARTX_LABEL_EXTENT, false);

  artfiRL = new boolean[ARTX_LABEL_EXTENT];
  artInitialiseBooleanArray(artfiRL, 0, ARTX_LABEL_EXTENT, false);

  artfiPCL = new boolean[ARTX_LABEL_EXTENT];
  artInitialiseBooleanArray(artfiPCL, 0, ARTX_LABEL_EXTENT, false);

  arteoRL = new boolean[ARTX_LABEL_EXTENT];
  artInitialiseBooleanArray(arteoRL, 0, ARTX_LABEL_EXTENT, false);

  arteoR_pL = new boolean[ARTX_LABEL_EXTENT];
  artInitialiseBooleanArray(arteoR_pL, 0, ARTX_LABEL_EXTENT, false);

  artPopD = new boolean[ARTX_LABEL_EXTENT];
  artInitialiseBooleanArray(artPopD, 0, ARTX_LABEL_EXTENT, false);

  artLabelStrings[ARTTB_CHAR_BQ] = "CHAR_BQ";
  artLabelInternalStrings[ARTTB_CHAR_BQ] = "&CHAR_BQ";
  artKindOfs[ARTTB_CHAR_BQ] = ARTK_BUILTIN_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTB_CHAR_BQ] = true;
  artLabelStrings[ARTTB_ID] = "ID";
  artLabelInternalStrings[ARTTB_ID] = "&ID";
  artKindOfs[ARTTB_ID] = ARTK_BUILTIN_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTB_ID] = true;
  artLabelStrings[ARTTB_SIGNED_INTEGER] = "SIGNED_INTEGER";
  artLabelInternalStrings[ARTTB_SIGNED_INTEGER] = "&SIGNED_INTEGER";
  artKindOfs[ARTTB_SIGNED_INTEGER] = ARTK_BUILTIN_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTB_SIGNED_INTEGER] = true;
  artLabelStrings[ARTTB_SIGNED_REAL] = "SIGNED_REAL";
  artLabelInternalStrings[ARTTB_SIGNED_REAL] = "&SIGNED_REAL";
  artKindOfs[ARTTB_SIGNED_REAL] = ARTK_BUILTIN_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTB_SIGNED_REAL] = true;
  artLabelStrings[ARTTB_STRING_BRACE_NEST] = "STRING_BRACE_NEST";
  artLabelInternalStrings[ARTTB_STRING_BRACE_NEST] = "&STRING_BRACE_NEST";
  artKindOfs[ARTTB_STRING_BRACE_NEST] = ARTK_BUILTIN_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTB_STRING_BRACE_NEST] = true;
  artLabelStrings[ARTTB_STRING_BRACKET_NEST] = "STRING_BRACKET_NEST";
  artLabelInternalStrings[ARTTB_STRING_BRACKET_NEST] = "&STRING_BRACKET_NEST";
  artKindOfs[ARTTB_STRING_BRACKET_NEST] = ARTK_BUILTIN_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTB_STRING_BRACKET_NEST] = true;
  artLabelStrings[ARTTB_STRING_DOLLAR] = "STRING_DOLLAR";
  artLabelInternalStrings[ARTTB_STRING_DOLLAR] = "&STRING_DOLLAR";
  artKindOfs[ARTTB_STRING_DOLLAR] = ARTK_BUILTIN_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTB_STRING_DOLLAR] = true;
  artLabelStrings[ARTTB_STRING_DQ] = "STRING_DQ";
  artLabelInternalStrings[ARTTB_STRING_DQ] = "&STRING_DQ";
  artKindOfs[ARTTB_STRING_DQ] = ARTK_BUILTIN_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTB_STRING_DQ] = true;
  artLabelStrings[ARTTB_STRING_PLAIN_SQ] = "STRING_PLAIN_SQ";
  artLabelInternalStrings[ARTTB_STRING_PLAIN_SQ] = "&STRING_PLAIN_SQ";
  artKindOfs[ARTTB_STRING_PLAIN_SQ] = ARTK_BUILTIN_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTB_STRING_PLAIN_SQ] = true;
  artLabelStrings[ARTTB_STRING_SQ] = "STRING_SQ";
  artLabelInternalStrings[ARTTB_STRING_SQ] = "&STRING_SQ";
  artKindOfs[ARTTB_STRING_SQ] = ARTK_BUILTIN_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTB_STRING_SQ] = true;
  artLabelStrings[ARTTS__SHREIKGLLFIFODescriptors] = "!GLLFIFODescriptors";
  artLabelInternalStrings[ARTTS__SHREIKGLLFIFODescriptors] = "'!GLLFIFODescriptors'";
  artKindOfs[ARTTS__SHREIKGLLFIFODescriptors] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKGLLFIFODescriptors] = true;
  artLabelStrings[ARTTS__SHREIKGLLPredictivePops] = "!GLLPredictivePops";
  artLabelInternalStrings[ARTTS__SHREIKGLLPredictivePops] = "'!GLLPredictivePops'";
  artKindOfs[ARTTS__SHREIKGLLPredictivePops] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKGLLPredictivePops] = true;
  artLabelStrings[ARTTS__SHREIKGLLSuppressPopGuard] = "!GLLSuppressPopGuard";
  artLabelInternalStrings[ARTTS__SHREIKGLLSuppressPopGuard] = "'!GLLSuppressPopGuard'";
  artKindOfs[ARTTS__SHREIKGLLSuppressPopGuard] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKGLLSuppressPopGuard] = true;
  artLabelStrings[ARTTS__SHREIKGLLSuppressProductionGuard] = "!GLLSuppressProductionGuard";
  artLabelInternalStrings[ARTTS__SHREIKGLLSuppressProductionGuard] = "'!GLLSuppressProductionGuard'";
  artKindOfs[ARTTS__SHREIKGLLSuppressProductionGuard] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKGLLSuppressProductionGuard] = true;
  artLabelStrings[ARTTS__SHREIKGLLSuppressSemantics] = "!GLLSuppressSemantics";
  artLabelInternalStrings[ARTTS__SHREIKGLLSuppressSemantics] = "'!GLLSuppressSemantics'";
  artKindOfs[ARTTS__SHREIKGLLSuppressSemantics] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKGLLSuppressSemantics] = true;
  artLabelStrings[ARTTS__SHREIKGLLSuppressTestRepeat] = "!GLLSuppressTestRepeat";
  artLabelInternalStrings[ARTTS__SHREIKGLLSuppressTestRepeat] = "'!GLLSuppressTestRepeat'";
  artKindOfs[ARTTS__SHREIKGLLSuppressTestRepeat] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKGLLSuppressTestRepeat] = true;
  artLabelStrings[ARTTS__SHREIKabsorb] = "!absorb";
  artLabelInternalStrings[ARTTS__SHREIKabsorb] = "'!absorb'";
  artKindOfs[ARTTS__SHREIKabsorb] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKabsorb] = true;
  artLabelStrings[ARTTS__SHREIKalphabet] = "!alphabet";
  artLabelInternalStrings[ARTTS__SHREIKalphabet] = "'!alphabet'";
  artKindOfs[ARTTS__SHREIKalphabet] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKalphabet] = true;
  artLabelStrings[ARTTS__SHREIKcfgElements] = "!cfgElements";
  artLabelInternalStrings[ARTTS__SHREIKcfgElements] = "'!cfgElements'";
  artKindOfs[ARTTS__SHREIKcfgElements] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKcfgElements] = true;
  artLabelStrings[ARTTS__SHREIKcnp] = "!cnp";
  artLabelInternalStrings[ARTTS__SHREIKcnp] = "'!cnp'";
  artKindOfs[ARTTS__SHREIKcnp] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKcnp] = true;
  artLabelStrings[ARTTS__SHREIKcnpGeneratorPool] = "!cnpGeneratorPool";
  artLabelInternalStrings[ARTTS__SHREIKcnpGeneratorPool] = "'!cnpGeneratorPool'";
  artKindOfs[ARTTS__SHREIKcnpGeneratorPool] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKcnpGeneratorPool] = true;
  artLabelStrings[ARTTS__SHREIKcnpIndexedAPI] = "!cnpIndexedAPI";
  artLabelInternalStrings[ARTTS__SHREIKcnpIndexedAPI] = "'!cnpIndexedAPI'";
  artKindOfs[ARTTS__SHREIKcnpIndexedAPI] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKcnpIndexedAPI] = true;
  artLabelStrings[ARTTS__SHREIKcnpIndexedPool] = "!cnpIndexedPool";
  artLabelInternalStrings[ARTTS__SHREIKcnpIndexedPool] = "'!cnpIndexedPool'";
  artKindOfs[ARTTS__SHREIKcnpIndexedPool] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKcnpIndexedPool] = true;
  artLabelStrings[ARTTS__SHREIKcnpLinkedAPI] = "!cnpLinkedAPI";
  artLabelInternalStrings[ARTTS__SHREIKcnpLinkedAPI] = "'!cnpLinkedAPI'";
  artKindOfs[ARTTS__SHREIKcnpLinkedAPI] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKcnpLinkedAPI] = true;
  artLabelStrings[ARTTS__SHREIKcompressWhitespaceJava] = "!compressWhitespaceJava";
  artLabelInternalStrings[ARTTS__SHREIKcompressWhitespaceJava] = "'!compressWhitespaceJava'";
  artKindOfs[ARTTS__SHREIKcompressWhitespaceJava] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKcompressWhitespaceJava] = true;
  artLabelStrings[ARTTS__SHREIKearley] = "!earley";
  artLabelInternalStrings[ARTTS__SHREIKearley] = "'!earley'";
  artKindOfs[ARTTS__SHREIKearley] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKearley] = true;
  artLabelStrings[ARTTS__SHREIKearley2007LinkedAPI] = "!earley2007LinkedAPI";
  artLabelInternalStrings[ARTTS__SHREIKearley2007LinkedAPI] = "'!earley2007LinkedAPI'";
  artKindOfs[ARTTS__SHREIKearley2007LinkedAPI] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKearley2007LinkedAPI] = true;
  artLabelStrings[ARTTS__SHREIKearleyIndexedAPI] = "!earleyIndexedAPI";
  artLabelInternalStrings[ARTTS__SHREIKearleyIndexedAPI] = "'!earleyIndexedAPI'";
  artKindOfs[ARTTS__SHREIKearleyIndexedAPI] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKearleyIndexedAPI] = true;
  artLabelStrings[ARTTS__SHREIKearleyIndexedData] = "!earleyIndexedData";
  artLabelInternalStrings[ARTTS__SHREIKearleyIndexedData] = "'!earleyIndexedData'";
  artKindOfs[ARTTS__SHREIKearleyIndexedData] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKearleyIndexedData] = true;
  artLabelStrings[ARTTS__SHREIKearleyIndexedPool] = "!earleyIndexedPool";
  artLabelInternalStrings[ARTTS__SHREIKearleyIndexedPool] = "'!earleyIndexedPool'";
  artKindOfs[ARTTS__SHREIKearleyIndexedPool] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKearleyIndexedPool] = true;
  artLabelStrings[ARTTS__SHREIKearleyLinkedAPI] = "!earleyLinkedAPI";
  artLabelInternalStrings[ARTTS__SHREIKearleyLinkedAPI] = "'!earleyLinkedAPI'";
  artKindOfs[ARTTS__SHREIKearleyLinkedAPI] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKearleyLinkedAPI] = true;
  artLabelStrings[ARTTS__SHREIKearleyTable] = "!earleyTable";
  artLabelInternalStrings[ARTTS__SHREIKearleyTable] = "'!earleyTable'";
  artKindOfs[ARTTS__SHREIKearleyTable] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKearleyTable] = true;
  artLabelStrings[ARTTS__SHREIKearleyTableIndexedAPI] = "!earleyTableIndexedAPI";
  artLabelInternalStrings[ARTTS__SHREIKearleyTableIndexedAPI] = "'!earleyTableIndexedAPI'";
  artKindOfs[ARTTS__SHREIKearleyTableIndexedAPI] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKearleyTableIndexedAPI] = true;
  artLabelStrings[ARTTS__SHREIKearleyTableIndexedData] = "!earleyTableIndexedData";
  artLabelInternalStrings[ARTTS__SHREIKearleyTableIndexedData] = "'!earleyTableIndexedData'";
  artKindOfs[ARTTS__SHREIKearleyTableIndexedData] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKearleyTableIndexedData] = true;
  artLabelStrings[ARTTS__SHREIKearleyTableIndexedPool] = "!earleyTableIndexedPool";
  artLabelInternalStrings[ARTTS__SHREIKearleyTableIndexedPool] = "'!earleyTableIndexedPool'";
  artKindOfs[ARTTS__SHREIKearleyTableIndexedPool] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKearleyTableIndexedPool] = true;
  artLabelStrings[ARTTS__SHREIKearleyTableLinkedAPI] = "!earleyTableLinkedAPI";
  artLabelInternalStrings[ARTTS__SHREIKearleyTableLinkedAPI] = "'!earleyTableLinkedAPI'";
  artKindOfs[ARTTS__SHREIKearleyTableLinkedAPI] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKearleyTableLinkedAPI] = true;
  artLabelStrings[ARTTS__SHREIKextractJLS] = "!extractJLS";
  artLabelInternalStrings[ARTTS__SHREIKextractJLS] = "'!extractJLS'";
  artKindOfs[ARTTS__SHREIKextractJLS] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKextractJLS] = true;
  artLabelStrings[ARTTS__SHREIKgenerateC_PLUS_PLUS] = "!generateC++";
  artLabelInternalStrings[ARTTS__SHREIKgenerateC_PLUS_PLUS] = "'!generateC++'";
  artKindOfs[ARTTS__SHREIKgenerateC_PLUS_PLUS] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKgenerateC_PLUS_PLUS] = true;
  artLabelStrings[ARTTS__SHREIKgenerateDynamic] = "!generateDynamic";
  artLabelInternalStrings[ARTTS__SHREIKgenerateDynamic] = "'!generateDynamic'";
  artKindOfs[ARTTS__SHREIKgenerateDynamic] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKgenerateDynamic] = true;
  artLabelStrings[ARTTS__SHREIKgenerateFragment] = "!generateFragment";
  artLabelInternalStrings[ARTTS__SHREIKgenerateFragment] = "'!generateFragment'";
  artKindOfs[ARTTS__SHREIKgenerateFragment] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKgenerateFragment] = true;
  artLabelStrings[ARTTS__SHREIKgenerateJava] = "!generateJava";
  artLabelInternalStrings[ARTTS__SHREIKgenerateJava] = "'!generateJava'";
  artKindOfs[ARTTS__SHREIKgenerateJava] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKgenerateJava] = true;
  artLabelStrings[ARTTS__SHREIKgenerateML] = "!generateML";
  artLabelInternalStrings[ARTTS__SHREIKgenerateML] = "'!generateML'";
  artKindOfs[ARTTS__SHREIKgenerateML] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKgenerateML] = true;
  artLabelStrings[ARTTS__SHREIKgeneratePool] = "!generatePool";
  artLabelInternalStrings[ARTTS__SHREIKgeneratePool] = "'!generatePool'";
  artKindOfs[ARTTS__SHREIKgeneratePool] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKgeneratePool] = true;
  artLabelStrings[ARTTS__SHREIKgenerateState] = "!generateState";
  artLabelInternalStrings[ARTTS__SHREIKgenerateState] = "'!generateState'";
  artKindOfs[ARTTS__SHREIKgenerateState] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKgenerateState] = true;
  artLabelStrings[ARTTS__SHREIKgenerateStatic] = "!generateStatic";
  artLabelInternalStrings[ARTTS__SHREIKgenerateStatic] = "'!generateStatic'";
  artKindOfs[ARTTS__SHREIKgenerateStatic] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKgenerateStatic] = true;
  artLabelStrings[ARTTS__SHREIKgll] = "!gll";
  artLabelInternalStrings[ARTTS__SHREIKgll] = "'!gll'";
  artKindOfs[ARTTS__SHREIKgll] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKgll] = true;
  artLabelStrings[ARTTS__SHREIKgllClusteredGeneratorPool] = "!gllClusteredGeneratorPool";
  artLabelInternalStrings[ARTTS__SHREIKgllClusteredGeneratorPool] = "'!gllClusteredGeneratorPool'";
  artKindOfs[ARTTS__SHREIKgllClusteredGeneratorPool] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKgllClusteredGeneratorPool] = true;
  artLabelStrings[ARTTS__SHREIKgllGeneratorPool] = "!gllGeneratorPool";
  artLabelInternalStrings[ARTTS__SHREIKgllGeneratorPool] = "'!gllGeneratorPool'";
  artKindOfs[ARTTS__SHREIKgllGeneratorPool] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKgllGeneratorPool] = true;
  artLabelStrings[ARTTS__SHREIKgllTWEGeneratorPool] = "!gllTWEGeneratorPool";
  artLabelInternalStrings[ARTTS__SHREIKgllTWEGeneratorPool] = "'!gllTWEGeneratorPool'";
  artKindOfs[ARTTS__SHREIKgllTWEGeneratorPool] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKgllTWEGeneratorPool] = true;
  artLabelStrings[ARTTS__SHREIKgrammarWrite] = "!grammarWrite";
  artLabelInternalStrings[ARTTS__SHREIKgrammarWrite] = "'!grammarWrite'";
  artKindOfs[ARTTS__SHREIKgrammarWrite] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKgrammarWrite] = true;
  artLabelStrings[ARTTS__SHREIKgssPrint] = "!gssPrint";
  artLabelInternalStrings[ARTTS__SHREIKgssPrint] = "'!gssPrint'";
  artKindOfs[ARTTS__SHREIKgssPrint] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKgssPrint] = true;
  artLabelStrings[ARTTS__SHREIKgssShow] = "!gssShow";
  artLabelInternalStrings[ARTTS__SHREIKgssShow] = "'!gssShow'";
  artKindOfs[ARTTS__SHREIKgssShow] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKgssShow] = true;
  artLabelStrings[ARTTS__SHREIKgssWrite] = "!gssWrite";
  artLabelInternalStrings[ARTTS__SHREIKgssWrite] = "'!gssWrite'";
  artKindOfs[ARTTS__SHREIKgssWrite] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKgssWrite] = true;
  artLabelStrings[ARTTS__SHREIKinjectInstance] = "!injectInstance";
  artLabelInternalStrings[ARTTS__SHREIKinjectInstance] = "'!injectInstance'";
  artKindOfs[ARTTS__SHREIKinjectInstance] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKinjectInstance] = true;
  artLabelStrings[ARTTS__SHREIKinjectProduction] = "!injectProduction";
  artLabelInternalStrings[ARTTS__SHREIKinjectProduction] = "'!injectProduction'";
  artKindOfs[ARTTS__SHREIKinjectProduction] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKinjectProduction] = true;
  artLabelStrings[ARTTS__SHREIKinput] = "!input";
  artLabelInternalStrings[ARTTS__SHREIKinput] = "'!input'";
  artKindOfs[ARTTS__SHREIKinput] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKinput] = true;
  artLabelStrings[ARTTS__SHREIKinputPrint] = "!inputPrint";
  artLabelInternalStrings[ARTTS__SHREIKinputPrint] = "'!inputPrint'";
  artKindOfs[ARTTS__SHREIKinputPrint] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKinputPrint] = true;
  artLabelStrings[ARTTS__SHREIKlatex] = "!latex";
  artLabelInternalStrings[ARTTS__SHREIKlatex] = "'!latex'";
  artKindOfs[ARTTS__SHREIKlatex] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKlatex] = true;
  artLabelStrings[ARTTS__SHREIKlcnp] = "!lcnp";
  artLabelInternalStrings[ARTTS__SHREIKlcnp] = "'!lcnp'";
  artKindOfs[ARTTS__SHREIKlcnp] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKlcnp] = true;
  artLabelStrings[ARTTS__SHREIKlcnpGeneratorPool] = "!lcnpGeneratorPool";
  artLabelInternalStrings[ARTTS__SHREIKlcnpGeneratorPool] = "'!lcnpGeneratorPool'";
  artKindOfs[ARTTS__SHREIKlcnpGeneratorPool] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKlcnpGeneratorPool] = true;
  artLabelStrings[ARTTS__SHREIKlcnpIndexedAPI] = "!lcnpIndexedAPI";
  artLabelInternalStrings[ARTTS__SHREIKlcnpIndexedAPI] = "'!lcnpIndexedAPI'";
  artKindOfs[ARTTS__SHREIKlcnpIndexedAPI] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKlcnpIndexedAPI] = true;
  artLabelStrings[ARTTS__SHREIKlcnpIndexedPool] = "!lcnpIndexedPool";
  artLabelInternalStrings[ARTTS__SHREIKlcnpIndexedPool] = "'!lcnpIndexedPool'";
  artKindOfs[ARTTS__SHREIKlcnpIndexedPool] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKlcnpIndexedPool] = true;
  artLabelStrings[ARTTS__SHREIKlcnpLinkedAPI] = "!lcnpLinkedAPI";
  artLabelInternalStrings[ARTTS__SHREIKlcnpLinkedAPI] = "'!lcnpLinkedAPI'";
  artKindOfs[ARTTS__SHREIKlcnpLinkedAPI] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKlcnpLinkedAPI] = true;
  artLabelStrings[ARTTS__SHREIKlexDFA] = "!lexDFA";
  artLabelInternalStrings[ARTTS__SHREIKlexDFA] = "'!lexDFA'";
  artKindOfs[ARTTS__SHREIKlexDFA] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKlexDFA] = true;
  artLabelStrings[ARTTS__SHREIKlexGLL] = "!lexGLL";
  artLabelInternalStrings[ARTTS__SHREIKlexGLL] = "'!lexGLL'";
  artKindOfs[ARTTS__SHREIKlexGLL] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKlexGLL] = true;
  artLabelStrings[ARTTS__SHREIKlexHardCoded] = "!lexHardCoded";
  artLabelInternalStrings[ARTTS__SHREIKlexHardCoded] = "'!lexHardCoded'";
  artKindOfs[ARTTS__SHREIKlexHardCoded] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKlexHardCoded] = true;
  artLabelStrings[ARTTS__SHREIKlexWSSuffix] = "!lexWSSuffix";
  artLabelInternalStrings[ARTTS__SHREIKlexWSSuffix] = "'!lexWSSuffix'";
  artKindOfs[ARTTS__SHREIKlexWSSuffix] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKlexWSSuffix] = true;
  artLabelStrings[ARTTS__SHREIKlexerData] = "!lexerData";
  artLabelInternalStrings[ARTTS__SHREIKlexerData] = "'!lexerData'";
  artKindOfs[ARTTS__SHREIKlexerData] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKlexerData] = true;
  artLabelStrings[ARTTS__SHREIKlexerName] = "!lexerName";
  artLabelInternalStrings[ARTTS__SHREIKlexerName] = "'!lexerName'";
  artKindOfs[ARTTS__SHREIKlexerName] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKlexerName] = true;
  artLabelStrings[ARTTS__SHREIKmain] = "!main";
  artLabelInternalStrings[ARTTS__SHREIKmain] = "'!main'";
  artKindOfs[ARTTS__SHREIKmain] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKmain] = true;
  artLabelStrings[ARTTS__SHREIKmerge] = "!merge";
  artLabelInternalStrings[ARTTS__SHREIKmerge] = "'!merge'";
  artKindOfs[ARTTS__SHREIKmerge] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKmerge] = true;
  artLabelStrings[ARTTS__SHREIKmgll] = "!mgll";
  artLabelInternalStrings[ARTTS__SHREIKmgll] = "'!mgll'";
  artKindOfs[ARTTS__SHREIKmgll] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKmgll] = true;
  artLabelStrings[ARTTS__SHREIKmgllGeneratorPool] = "!mgllGeneratorPool";
  artLabelInternalStrings[ARTTS__SHREIKmgllGeneratorPool] = "'!mgllGeneratorPool'";
  artKindOfs[ARTTS__SHREIKmgllGeneratorPool] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKmgllGeneratorPool] = true;
  artLabelStrings[ARTTS__SHREIKmodule] = "!module";
  artLabelInternalStrings[ARTTS__SHREIKmodule] = "'!module'";
  artKindOfs[ARTTS__SHREIKmodule] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKmodule] = true;
  artLabelStrings[ARTTS__SHREIKnamespace] = "!namespace";
  artLabelInternalStrings[ARTTS__SHREIKnamespace] = "'!namespace'";
  artKindOfs[ARTTS__SHREIKnamespace] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKnamespace] = true;
  artLabelStrings[ARTTS__SHREIKosbrd] = "!osbrd";
  artLabelInternalStrings[ARTTS__SHREIKosbrd] = "'!osbrd'";
  artKindOfs[ARTTS__SHREIKosbrd] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKosbrd] = true;
  artLabelStrings[ARTTS__SHREIKosbrdGenerator] = "!osbrdGenerator";
  artLabelInternalStrings[ARTTS__SHREIKosbrdGenerator] = "'!osbrdGenerator'";
  artKindOfs[ARTTS__SHREIKosbrdGenerator] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKosbrdGenerator] = true;
  artLabelStrings[ARTTS__SHREIKoutputDirectory] = "!outputDirectory";
  artLabelInternalStrings[ARTTS__SHREIKoutputDirectory] = "'!outputDirectory'";
  artKindOfs[ARTTS__SHREIKoutputDirectory] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKoutputDirectory] = true;
  artLabelStrings[ARTTS__SHREIKparaterminal] = "!paraterminal";
  artLabelInternalStrings[ARTTS__SHREIKparaterminal] = "'!paraterminal'";
  artKindOfs[ARTTS__SHREIKparaterminal] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKparaterminal] = true;
  artLabelStrings[ARTTS__SHREIKparseCountsPrint] = "!parseCountsPrint";
  artLabelInternalStrings[ARTTS__SHREIKparseCountsPrint] = "'!parseCountsPrint'";
  artKindOfs[ARTTS__SHREIKparseCountsPrint] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKparseCountsPrint] = true;
  artLabelStrings[ARTTS__SHREIKparserName] = "!parserName";
  artLabelInternalStrings[ARTTS__SHREIKparserName] = "'!parserName'";
  artKindOfs[ARTTS__SHREIKparserName] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKparserName] = true;
  artLabelStrings[ARTTS__SHREIKprelude] = "!prelude";
  artLabelInternalStrings[ARTTS__SHREIKprelude] = "'!prelude'";
  artKindOfs[ARTTS__SHREIKprelude] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKprelude] = true;
  artLabelStrings[ARTTS__SHREIKrelation] = "!relation";
  artLabelInternalStrings[ARTTS__SHREIKrelation] = "'!relation'";
  artKindOfs[ARTTS__SHREIKrelation] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKrelation] = true;
  artLabelStrings[ARTTS__SHREIKresult] = "!result";
  artLabelInternalStrings[ARTTS__SHREIKresult] = "'!result'";
  artKindOfs[ARTTS__SHREIKresult] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKresult] = true;
  artLabelStrings[ARTTS__SHREIKsml97Parser] = "!sml97Parser";
  artLabelInternalStrings[ARTTS__SHREIKsml97Parser] = "'!sml97Parser'";
  artKindOfs[ARTTS__SHREIKsml97Parser] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKsml97Parser] = true;
  artLabelStrings[ARTTS__SHREIKsppfLongest] = "!sppfLongest";
  artLabelInternalStrings[ARTTS__SHREIKsppfLongest] = "'!sppfLongest'";
  artKindOfs[ARTTS__SHREIKsppfLongest] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKsppfLongest] = true;
  artLabelStrings[ARTTS__SHREIKsppfPrint] = "!sppfPrint";
  artLabelInternalStrings[ARTTS__SHREIKsppfPrint] = "'!sppfPrint'";
  artKindOfs[ARTTS__SHREIKsppfPrint] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKsppfPrint] = true;
  artLabelStrings[ARTTS__SHREIKsppfPriority] = "!sppfPriority";
  artLabelInternalStrings[ARTTS__SHREIKsppfPriority] = "'!sppfPriority'";
  artKindOfs[ARTTS__SHREIKsppfPriority] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKsppfPriority] = true;
  artLabelStrings[ARTTS__SHREIKsppfShow] = "!sppfShow";
  artLabelInternalStrings[ARTTS__SHREIKsppfShow] = "'!sppfShow'";
  artKindOfs[ARTTS__SHREIKsppfShow] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKsppfShow] = true;
  artLabelStrings[ARTTS__SHREIKsppfWrite] = "!sppfWrite";
  artLabelInternalStrings[ARTTS__SHREIKsppfWrite] = "'!sppfWrite'";
  artKindOfs[ARTTS__SHREIKsppfWrite] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKsppfWrite] = true;
  artLabelStrings[ARTTS__SHREIKstart] = "!start";
  artLabelInternalStrings[ARTTS__SHREIKstart] = "'!start'";
  artKindOfs[ARTTS__SHREIKstart] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKstart] = true;
  artLabelStrings[ARTTS__SHREIKstatistics] = "!statistics";
  artLabelInternalStrings[ARTTS__SHREIKstatistics] = "'!statistics'";
  artKindOfs[ARTTS__SHREIKstatistics] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKstatistics] = true;
  artLabelStrings[ARTTS__SHREIKstrategy] = "!strategy";
  artLabelInternalStrings[ARTTS__SHREIKstrategy] = "'!strategy'";
  artKindOfs[ARTTS__SHREIKstrategy] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKstrategy] = true;
  artLabelStrings[ARTTS__SHREIKsupport] = "!support";
  artLabelInternalStrings[ARTTS__SHREIKsupport] = "'!support'";
  artKindOfs[ARTTS__SHREIKsupport] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKsupport] = true;
  artLabelStrings[ARTTS__SHREIKtermPrint] = "!termPrint";
  artLabelInternalStrings[ARTTS__SHREIKtermPrint] = "'!termPrint'";
  artKindOfs[ARTTS__SHREIKtermPrint] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKtermPrint] = true;
  artLabelStrings[ARTTS__SHREIKtermShow] = "!termShow";
  artLabelInternalStrings[ARTTS__SHREIKtermShow] = "'!termShow'";
  artKindOfs[ARTTS__SHREIKtermShow] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKtermShow] = true;
  artLabelStrings[ARTTS__SHREIKtermTool] = "!termTool";
  artLabelInternalStrings[ARTTS__SHREIKtermTool] = "'!termTool'";
  artKindOfs[ARTTS__SHREIKtermTool] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKtermTool] = true;
  artLabelStrings[ARTTS__SHREIKtermWrite] = "!termWrite";
  artLabelInternalStrings[ARTTS__SHREIKtermWrite] = "'!termWrite'";
  artKindOfs[ARTTS__SHREIKtermWrite] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKtermWrite] = true;
  artLabelStrings[ARTTS__SHREIKtrace] = "!trace";
  artLabelInternalStrings[ARTTS__SHREIKtrace] = "'!trace'";
  artKindOfs[ARTTS__SHREIKtrace] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKtrace] = true;
  artLabelStrings[ARTTS__SHREIKtreePrint] = "!treePrint";
  artLabelInternalStrings[ARTTS__SHREIKtreePrint] = "'!treePrint'";
  artKindOfs[ARTTS__SHREIKtreePrint] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKtreePrint] = true;
  artLabelStrings[ARTTS__SHREIKtreeShow] = "!treeShow";
  artLabelInternalStrings[ARTTS__SHREIKtreeShow] = "'!treeShow'";
  artKindOfs[ARTTS__SHREIKtreeShow] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKtreeShow] = true;
  artLabelStrings[ARTTS__SHREIKtreeWrite] = "!treeWrite";
  artLabelInternalStrings[ARTTS__SHREIKtreeWrite] = "'!treeWrite'";
  artKindOfs[ARTTS__SHREIKtreeWrite] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKtreeWrite] = true;
  artLabelStrings[ARTTS__SHREIKtry] = "!try";
  artLabelInternalStrings[ARTTS__SHREIKtry] = "'!try'";
  artKindOfs[ARTTS__SHREIKtry] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKtry] = true;
  artLabelStrings[ARTTS__SHREIKtweDead] = "!tweDead";
  artLabelInternalStrings[ARTTS__SHREIKtweDead] = "'!tweDead'";
  artKindOfs[ARTTS__SHREIKtweDead] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKtweDead] = true;
  artLabelStrings[ARTTS__SHREIKtweExtents] = "!tweExtents";
  artLabelInternalStrings[ARTTS__SHREIKtweExtents] = "'!tweExtents'";
  artKindOfs[ARTTS__SHREIKtweExtents] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKtweExtents] = true;
  artLabelStrings[ARTTS__SHREIKtweFromSPPF] = "!tweFromSPPF";
  artLabelInternalStrings[ARTTS__SHREIKtweFromSPPF] = "'!tweFromSPPF'";
  artKindOfs[ARTTS__SHREIKtweFromSPPF] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKtweFromSPPF] = true;
  artLabelStrings[ARTTS__SHREIKtweLexicalisations] = "!tweLexicalisations";
  artLabelInternalStrings[ARTTS__SHREIKtweLexicalisations] = "'!tweLexicalisations'";
  artKindOfs[ARTTS__SHREIKtweLexicalisations] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKtweLexicalisations] = true;
  artLabelStrings[ARTTS__SHREIKtweLongest] = "!tweLongest";
  artLabelInternalStrings[ARTTS__SHREIKtweLongest] = "'!tweLongest'";
  artKindOfs[ARTTS__SHREIKtweLongest] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKtweLongest] = true;
  artLabelStrings[ARTTS__SHREIKtwePrint] = "!twePrint";
  artLabelInternalStrings[ARTTS__SHREIKtwePrint] = "'!twePrint'";
  artKindOfs[ARTTS__SHREIKtwePrint] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKtwePrint] = true;
  artLabelStrings[ARTTS__SHREIKtwePrintFull] = "!twePrintFull";
  artLabelInternalStrings[ARTTS__SHREIKtwePrintFull] = "'!twePrintFull'";
  artKindOfs[ARTTS__SHREIKtwePrintFull] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKtwePrintFull] = true;
  artLabelStrings[ARTTS__SHREIKtwePrintSummary] = "!twePrintSummary";
  artLabelInternalStrings[ARTTS__SHREIKtwePrintSummary] = "'!twePrintSummary'";
  artKindOfs[ARTTS__SHREIKtwePrintSummary] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKtwePrintSummary] = true;
  artLabelStrings[ARTTS__SHREIKtwePriority] = "!twePriority";
  artLabelInternalStrings[ARTTS__SHREIKtwePriority] = "'!twePriority'";
  artKindOfs[ARTTS__SHREIKtwePriority] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKtwePriority] = true;
  artLabelStrings[ARTTS__SHREIKtweRecursive] = "!tweRecursive";
  artLabelInternalStrings[ARTTS__SHREIKtweRecursive] = "'!tweRecursive'";
  artKindOfs[ARTTS__SHREIKtweRecursive] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKtweRecursive] = true;
  artLabelStrings[ARTTS__SHREIKtweSegments] = "!tweSegments";
  artLabelInternalStrings[ARTTS__SHREIKtweSegments] = "'!tweSegments'";
  artKindOfs[ARTTS__SHREIKtweSegments] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKtweSegments] = true;
  artLabelStrings[ARTTS__SHREIKtweShow] = "!tweShow";
  artLabelInternalStrings[ARTTS__SHREIKtweShow] = "'!tweShow'";
  artKindOfs[ARTTS__SHREIKtweShow] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKtweShow] = true;
  artLabelStrings[ARTTS__SHREIKtweTokenWrite] = "!tweTokenWrite";
  artLabelInternalStrings[ARTTS__SHREIKtweTokenWrite] = "'!tweTokenWrite'";
  artKindOfs[ARTTS__SHREIKtweTokenWrite] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKtweTokenWrite] = true;
  artLabelStrings[ARTTS__SHREIKtweWrite] = "!tweWrite";
  artLabelInternalStrings[ARTTS__SHREIKtweWrite] = "'!tweWrite'";
  artKindOfs[ARTTS__SHREIKtweWrite] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKtweWrite] = true;
  artLabelStrings[ARTTS__SHREIKunicodeAsEscapeSeuences] = "!unicodeAsEscapeSeuences";
  artLabelInternalStrings[ARTTS__SHREIKunicodeAsEscapeSeuences] = "'!unicodeAsEscapeSeuences'";
  artKindOfs[ARTTS__SHREIKunicodeAsEscapeSeuences] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKunicodeAsEscapeSeuences] = true;
  artLabelStrings[ARTTS__SHREIKuse] = "!use";
  artLabelInternalStrings[ARTTS__SHREIKuse] = "'!use'";
  artKindOfs[ARTTS__SHREIKuse] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKuse] = true;
  artLabelStrings[ARTTS__SHREIKverbosity] = "!verbosity";
  artLabelInternalStrings[ARTTS__SHREIKverbosity] = "'!verbosity'";
  artKindOfs[ARTTS__SHREIKverbosity] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKverbosity] = true;
  artLabelStrings[ARTTS__SHREIKwhitespace] = "!whitespace";
  artLabelInternalStrings[ARTTS__SHREIKwhitespace] = "'!whitespace'";
  artKindOfs[ARTTS__SHREIKwhitespace] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SHREIKwhitespace] = true;
  artLabelStrings[ARTTS__HASH] = "#";
  artLabelInternalStrings[ARTTS__HASH] = "'#'";
  artKindOfs[ARTTS__HASH] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__HASH] = true;
  artLabelStrings[ARTTS__AMPERSAND] = "&";
  artLabelInternalStrings[ARTTS__AMPERSAND] = "'&'";
  artKindOfs[ARTTS__AMPERSAND] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__AMPERSAND] = true;
  artLabelStrings[ARTTS__LPAR] = "(";
  artLabelInternalStrings[ARTTS__LPAR] = "'('";
  artKindOfs[ARTTS__LPAR] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__LPAR] = true;
  artLabelStrings[ARTTS__RPAR] = ")";
  artLabelInternalStrings[ARTTS__RPAR] = "')'";
  artKindOfs[ARTTS__RPAR] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__RPAR] = true;
  artLabelStrings[ARTTS__STAR] = "*";
  artLabelInternalStrings[ARTTS__STAR] = "'*'";
  artKindOfs[ARTTS__STAR] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__STAR] = true;
  artLabelStrings[ARTTS__PLUS] = "+";
  artLabelInternalStrings[ARTTS__PLUS] = "'+'";
  artKindOfs[ARTTS__PLUS] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__PLUS] = true;
  artLabelStrings[ARTTS__COMMA] = ",";
  artLabelInternalStrings[ARTTS__COMMA] = "','";
  artKindOfs[ARTTS__COMMA] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__COMMA] = true;
  artLabelStrings[ARTTS__MINUS] = "-";
  artLabelInternalStrings[ARTTS__MINUS] = "'-'";
  artKindOfs[ARTTS__MINUS] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__MINUS] = true;
  artLabelStrings[ARTTS__MINUS_MINUS_MINUS] = "---";
  artLabelInternalStrings[ARTTS__MINUS_MINUS_MINUS] = "'---'";
  artKindOfs[ARTTS__MINUS_MINUS_MINUS] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__MINUS_MINUS_MINUS] = true;
  artLabelStrings[ARTTS__MINUS_SLASH] = "-/";
  artLabelInternalStrings[ARTTS__MINUS_SLASH] = "'-/'";
  artKindOfs[ARTTS__MINUS_SLASH] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__MINUS_SLASH] = true;
  artLabelStrings[ARTTS__MINUS_SLASH_STAR] = "-/*";
  artLabelInternalStrings[ARTTS__MINUS_SLASH_STAR] = "'-/*'";
  artKindOfs[ARTTS__MINUS_SLASH_STAR] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__MINUS_SLASH_STAR] = true;
  artLabelStrings[ARTTS__MINUS_SLASH_GT] = "-/>";
  artLabelInternalStrings[ARTTS__MINUS_SLASH_GT] = "'-/>'";
  artKindOfs[ARTTS__MINUS_SLASH_GT] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__MINUS_SLASH_GT] = true;
  artLabelStrings[ARTTS__MINUS_GT] = "->";
  artLabelInternalStrings[ARTTS__MINUS_GT] = "'->'";
  artKindOfs[ARTTS__MINUS_GT] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__MINUS_GT] = true;
  artLabelStrings[ARTTS__MINUS_GT_STAR] = "->*";
  artLabelInternalStrings[ARTTS__MINUS_GT_STAR] = "'->*'";
  artKindOfs[ARTTS__MINUS_GT_STAR] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__MINUS_GT_STAR] = true;
  artLabelStrings[ARTTS__MINUS_GT_GT] = "->>";
  artLabelInternalStrings[ARTTS__MINUS_GT_GT] = "'->>'";
  artKindOfs[ARTTS__MINUS_GT_GT] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__MINUS_GT_GT] = true;
  artLabelStrings[ARTTS__MINUS_BACKSLASH] = "-\\";
  artLabelInternalStrings[ARTTS__MINUS_BACKSLASH] = "'-\\'";
  artKindOfs[ARTTS__MINUS_BACKSLASH] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__MINUS_BACKSLASH] = true;
  artLabelStrings[ARTTS__MINUS_BACKSLASH_STAR] = "-\\*";
  artLabelInternalStrings[ARTTS__MINUS_BACKSLASH_STAR] = "'-\\*'";
  artKindOfs[ARTTS__MINUS_BACKSLASH_STAR] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__MINUS_BACKSLASH_STAR] = true;
  artLabelStrings[ARTTS__MINUS_BACKSLASH_GT] = "-\\>";
  artLabelInternalStrings[ARTTS__MINUS_BACKSLASH_GT] = "'-\\>'";
  artKindOfs[ARTTS__MINUS_BACKSLASH_GT] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__MINUS_BACKSLASH_GT] = true;
  artLabelStrings[ARTTS__PERIOD] = ".";
  artLabelInternalStrings[ARTTS__PERIOD] = "'.'";
  artKindOfs[ARTTS__PERIOD] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__PERIOD] = true;
  artLabelStrings[ARTTS__PERIOD_PERIOD] = "..";
  artLabelInternalStrings[ARTTS__PERIOD_PERIOD] = "'..'";
  artKindOfs[ARTTS__PERIOD_PERIOD] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__PERIOD_PERIOD] = true;
  artLabelStrings[ARTTS__PERIODart] = ".art";
  artLabelInternalStrings[ARTTS__PERIODart] = "'.art'";
  artKindOfs[ARTTS__PERIODart] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__PERIODart] = true;
  artLabelStrings[ARTTS__PERIODjava] = ".java";
  artLabelInternalStrings[ARTTS__PERIODjava] = "'.java'";
  artKindOfs[ARTTS__PERIODjava] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__PERIODjava] = true;
  artLabelStrings[ARTTS__PERIODraw] = ".raw";
  artLabelInternalStrings[ARTTS__PERIODraw] = "'.raw'";
  artKindOfs[ARTTS__PERIODraw] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__PERIODraw] = true;
  artLabelStrings[ARTTS__SLASH] = "/";
  artLabelInternalStrings[ARTTS__SLASH] = "'/'";
  artKindOfs[ARTTS__SLASH] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__SLASH] = true;
  artLabelStrings[ARTTS__COLON] = ":";
  artLabelInternalStrings[ARTTS__COLON] = "':'";
  artKindOfs[ARTTS__COLON] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__COLON] = true;
  artLabelStrings[ARTTS__COLON_COLON_EQUAL] = "::=";
  artLabelInternalStrings[ARTTS__COLON_COLON_EQUAL] = "'::='";
  artKindOfs[ARTTS__COLON_COLON_EQUAL] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__COLON_COLON_EQUAL] = true;
  artLabelStrings[ARTTS__LT] = "<";
  artLabelInternalStrings[ARTTS__LT] = "'<'";
  artKindOfs[ARTTS__LT] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__LT] = true;
  artLabelStrings[ARTTS__LT_LT] = "<<";
  artLabelInternalStrings[ARTTS__LT_LT] = "'<<'";
  artKindOfs[ARTTS__LT_LT] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__LT_LT] = true;
  artLabelStrings[ARTTS__EQUAL] = "=";
  artLabelInternalStrings[ARTTS__EQUAL] = "'='";
  artKindOfs[ARTTS__EQUAL] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__EQUAL] = true;
  artLabelStrings[ARTTS__EQUAL_GT] = "=>";
  artLabelInternalStrings[ARTTS__EQUAL_GT] = "'=>'";
  artKindOfs[ARTTS__EQUAL_GT] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__EQUAL_GT] = true;
  artLabelStrings[ARTTS__EQUAL_GT_STAR] = "=>*";
  artLabelInternalStrings[ARTTS__EQUAL_GT_STAR] = "'=>*'";
  artKindOfs[ARTTS__EQUAL_GT_STAR] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__EQUAL_GT_STAR] = true;
  artLabelStrings[ARTTS__EQUAL_GT_GT] = "=>>";
  artLabelInternalStrings[ARTTS__EQUAL_GT_GT] = "'=>>'";
  artKindOfs[ARTTS__EQUAL_GT_GT] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__EQUAL_GT_GT] = true;
  artLabelStrings[ARTTS__GT] = ">";
  artLabelInternalStrings[ARTTS__GT] = "'>'";
  artKindOfs[ARTTS__GT] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__GT] = true;
  artLabelStrings[ARTTS__GT_GT] = ">>";
  artLabelInternalStrings[ARTTS__GT_GT] = "'>>'";
  artKindOfs[ARTTS__GT_GT] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__GT_GT] = true;
  artLabelStrings[ARTTS__QUERY] = "?";
  artLabelInternalStrings[ARTTS__QUERY] = "'?'";
  artKindOfs[ARTTS__QUERY] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__QUERY] = true;
  artLabelStrings[ARTTS__AT] = "@";
  artLabelInternalStrings[ARTTS__AT] = "'@'";
  artKindOfs[ARTTS__AT] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__AT] = true;
  artLabelStrings[ARTTS_False] = "False";
  artLabelInternalStrings[ARTTS_False] = "'False'";
  artKindOfs[ARTTS_False] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_False] = true;
  artLabelStrings[ARTTS_True] = "True";
  artLabelInternalStrings[ARTTS_True] = "'True'";
  artKindOfs[ARTTS_True] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_True] = true;
  artLabelStrings[ARTTS__BACKSLASH] = "\\";
  artLabelInternalStrings[ARTTS__BACKSLASH] = "'\\'";
  artKindOfs[ARTTS__BACKSLASH] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__BACKSLASH] = true;
  artLabelStrings[ARTTS__BACKSLASH_BACKSLASH] = "\\\\";
  artLabelInternalStrings[ARTTS__BACKSLASH_BACKSLASH] = "'\\\\'";
  artKindOfs[ARTTS__BACKSLASH_BACKSLASH] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__BACKSLASH_BACKSLASH] = true;
  artLabelStrings[ARTTS__UPARROW] = "^";
  artLabelInternalStrings[ARTTS__UPARROW] = "'^'";
  artKindOfs[ARTTS__UPARROW] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__UPARROW] = true;
  artLabelStrings[ARTTS__UPARROW_PLUS] = "^+";
  artLabelInternalStrings[ARTTS__UPARROW_PLUS] = "'^+'";
  artKindOfs[ARTTS__UPARROW_PLUS] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__UPARROW_PLUS] = true;
  artLabelStrings[ARTTS__UPARROW_MINUS] = "^-";
  artLabelInternalStrings[ARTTS__UPARROW_MINUS] = "'^-'";
  artKindOfs[ARTTS__UPARROW_MINUS] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__UPARROW_MINUS] = true;
  artLabelStrings[ARTTS__UPARROW_UPARROW] = "^^";
  artLabelInternalStrings[ARTTS__UPARROW_UPARROW] = "'^^'";
  artKindOfs[ARTTS__UPARROW_UPARROW] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__UPARROW_UPARROW] = true;
  artLabelStrings[ARTTS__UPARROW_UPARROW_UPARROW] = "^^^";
  artLabelInternalStrings[ARTTS__UPARROW_UPARROW_UPARROW] = "'^^^'";
  artKindOfs[ARTTS__UPARROW_UPARROW_UPARROW] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__UPARROW_UPARROW_UPARROW] = true;
  artLabelStrings[ARTTS__UPARROW_] = "^_";
  artLabelInternalStrings[ARTTS__UPARROW_] = "'^_'";
  artKindOfs[ARTTS__UPARROW_] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__UPARROW_] = true;
  artLabelStrings[ARTTS_anyBuiltinTerminal] = "anyBuiltinTerminal";
  artLabelInternalStrings[ARTTS_anyBuiltinTerminal] = "'anyBuiltinTerminal'";
  artKindOfs[ARTTS_anyBuiltinTerminal] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_anyBuiltinTerminal] = true;
  artLabelStrings[ARTTS_anyCaseInsensitiveTerminal] = "anyCaseInsensitiveTerminal";
  artLabelInternalStrings[ARTTS_anyCaseInsensitiveTerminal] = "'anyCaseInsensitiveTerminal'";
  artKindOfs[ARTTS_anyCaseInsensitiveTerminal] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_anyCaseInsensitiveTerminal] = true;
  artLabelStrings[ARTTS_anyCaseSensitiveTerminal] = "anyCaseSensitiveTerminal";
  artLabelInternalStrings[ARTTS_anyCaseSensitiveTerminal] = "'anyCaseSensitiveTerminal'";
  artKindOfs[ARTTS_anyCaseSensitiveTerminal] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_anyCaseSensitiveTerminal] = true;
  artLabelStrings[ARTTS_anyCharacterTerminal] = "anyCharacterTerminal";
  artLabelInternalStrings[ARTTS_anyCharacterTerminal] = "'anyCharacterTerminal'";
  artKindOfs[ARTTS_anyCharacterTerminal] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_anyCharacterTerminal] = true;
  artLabelStrings[ARTTS_anyLiteralTerminal] = "anyLiteralTerminal";
  artLabelInternalStrings[ARTTS_anyLiteralTerminal] = "'anyLiteralTerminal'";
  artKindOfs[ARTTS_anyLiteralTerminal] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_anyLiteralTerminal] = true;
  artLabelStrings[ARTTS_anyNonterminal] = "anyNonterminal";
  artLabelInternalStrings[ARTTS_anyNonterminal] = "'anyNonterminal'";
  artKindOfs[ARTTS_anyNonterminal] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_anyNonterminal] = true;
  artLabelStrings[ARTTS_anyParaterminal] = "anyParaterminal";
  artLabelInternalStrings[ARTTS_anyParaterminal] = "'anyParaterminal'";
  artKindOfs[ARTTS_anyParaterminal] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_anyParaterminal] = true;
  artLabelStrings[ARTTS_anyTerminal] = "anyTerminal";
  artLabelInternalStrings[ARTTS_anyTerminal] = "'anyTerminal'";
  artKindOfs[ARTTS_anyTerminal] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_anyTerminal] = true;
  artLabelStrings[ARTTS_listIn] = "listIn";
  artLabelInternalStrings[ARTTS_listIn] = "'listIn'";
  artKindOfs[ARTTS_listIn] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_listIn] = true;
  artLabelStrings[ARTTS_listOut] = "listOut";
  artLabelInternalStrings[ARTTS_listOut] = "'listOut'";
  artKindOfs[ARTTS_listOut] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_listOut] = true;
  artLabelStrings[ARTTS_map] = "map";
  artLabelInternalStrings[ARTTS_map] = "'map'";
  artKindOfs[ARTTS_map] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_map] = true;
  artLabelStrings[ARTTS_mapFixed] = "mapFixed";
  artLabelInternalStrings[ARTTS_mapFixed] = "'mapFixed'";
  artKindOfs[ARTTS_mapFixed] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_mapFixed] = true;
  artLabelStrings[ARTTS_postOrder] = "postOrder";
  artLabelInternalStrings[ARTTS_postOrder] = "'postOrder'";
  artKindOfs[ARTTS_postOrder] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_postOrder] = true;
  artLabelStrings[ARTTS_preOrderOneShot] = "preOrderOneShot";
  artLabelInternalStrings[ARTTS_preOrderOneShot] = "'preOrderOneShot'";
  artKindOfs[ARTTS_preOrderOneShot] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_preOrderOneShot] = true;
  artLabelStrings[ARTTS_root] = "root";
  artLabelInternalStrings[ARTTS_root] = "'root'";
  artKindOfs[ARTTS_root] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_root] = true;
  artLabelStrings[ARTTS_singleton] = "singleton";
  artLabelInternalStrings[ARTTS_singleton] = "'singleton'";
  artKindOfs[ARTTS_singleton] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_singleton] = true;
  artLabelStrings[ARTTS_untyped] = "untyped";
  artLabelInternalStrings[ARTTS_untyped] = "'untyped'";
  artKindOfs[ARTTS_untyped] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS_untyped] = true;
  artLabelStrings[ARTTS__BAR] = "|";
  artLabelInternalStrings[ARTTS__BAR] = "'|'";
  artKindOfs[ARTTS__BAR] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__BAR] = true;
  artLabelStrings[ARTTS__BAR_GT] = "|>";
  artLabelInternalStrings[ARTTS__BAR_GT] = "'|>'";
  artKindOfs[ARTTS__BAR_GT] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__BAR_GT] = true;
  artLabelStrings[ARTTS__BAR_BAR] = "||";
  artLabelInternalStrings[ARTTS__BAR_BAR] = "'||'";
  artKindOfs[ARTTS__BAR_BAR] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__BAR_BAR] = true;
  artLabelStrings[ARTTS__TILDE_GT] = "~>";
  artLabelInternalStrings[ARTTS__TILDE_GT] = "'~>'";
  artKindOfs[ARTTS__TILDE_GT] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__TILDE_GT] = true;
  artLabelStrings[ARTTS__TILDE_GT_STAR] = "~>*";
  artLabelInternalStrings[ARTTS__TILDE_GT_STAR] = "'~>*'";
  artKindOfs[ARTTS__TILDE_GT_STAR] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__TILDE_GT_STAR] = true;
  artLabelStrings[ARTTS__TILDE_GT_GT] = "~>>";
  artLabelInternalStrings[ARTTS__TILDE_GT_GT] = "'~>>'";
  artKindOfs[ARTTS__TILDE_GT_GT] = ARTK_CASE_SENSITIVE_TERMINAL;
  artTerminalRequiresWhiteSpace[ARTTS__TILDE_GT_GT] = true;
  artTableInitialiser_ART_CHAR_BQ();
  artTableInitialiser_ART_False();
  artTableInitialiser_ART_ID();
  artTableInitialiser_ART_ID_ATTRIBUTE();
  artTableInitialiser_ART_STRING_BRACE_NEST();
  artTableInitialiser_ART_STRING_BRACKET_NEST();
  artTableInitialiser_ART_STRING_DOLLAR();
  artTableInitialiser_ART_STRING_DQ();
  artTableInitialiser_ART_STRING_PLAIN_SQ();
  artTableInitialiser_ART_TRRELATION();
  artTableInitialiser_ART_True();
  artTableInitialiser_ART___bool();
  artTableInitialiser_ART___char();
  artTableInitialiser_ART___int32();
  artTableInitialiser_ART___real64();
  artTableInitialiser_ART___string();
  artTableInitialiser_ART_aliasedCFGNonterminal();
  artTableInitialiser_ART_cfgAbbrev();
  artTableInitialiser_ART_cfgAlt();
  artTableInitialiser_ART_cfgAlt1();
  artTableInitialiser_ART_cfgAtom();
  artTableInitialiser_ART_cfgAtoms();
  artTableInitialiser_ART_cfgAttributeEquation();
  artTableInitialiser_ART_cfgBuiltinTerminal();
  artTableInitialiser_ART_cfgCaseInsensitiveTerminal();
  artTableInitialiser_ART_cfgCaseSensitiveTerminal();
  artTableInitialiser_ART_cfgCat();
  artTableInitialiser_ART_cfgCatTail();
  artTableInitialiser_ART_cfgCharacterRangeTerminal();
  artTableInitialiser_ART_cfgCharacterTerminal();
  artTableInitialiser_ART_cfgDelay();
  artTableInitialiser_ART_cfgDiff();
  artTableInitialiser_ART_cfgDoFirst();
  artTableInitialiser_ART_cfgElement();
  artTableInitialiser_ART_cfgElementDeclaration();
  artTableInitialiser_ART_cfgElementDeclarations();
  artTableInitialiser_ART_cfgEpsilon();
  artTableInitialiser_ART_cfgFoldNone();
  artTableInitialiser_ART_cfgFoldOver();
  artTableInitialiser_ART_cfgFoldUnder();
  artTableInitialiser_ART_cfgGather();
  artTableInitialiser_ART_cfgGrammarAnnotations();
  artTableInitialiser_ART_cfgInsert();
  artTableInitialiser_ART_cfgIter();
  artTableInitialiser_ART_cfgKleeneClosure();
  artTableInitialiser_ART_cfgNativeAction();
  artTableInitialiser_ART_cfgNonterminal();
  artTableInitialiser_ART_cfgNonterminals();
  artTableInitialiser_ART_cfgNot();
  artTableInitialiser_ART_cfgOptional();
  artTableInitialiser_ART_cfgPositiveClosure();
  artTableInitialiser_ART_cfgRHS();
  artTableInitialiser_ART_cfgRule();
  artTableInitialiser_ART_cfgSlot();
  artTableInitialiser_ART_cfgSlotSymbol();
  artTableInitialiser_ART_cfgTear();
  artTableInitialiser_ART_cfgUnion();
  artTableInitialiser_ART_chooseDiff();
  artTableInitialiser_ART_chooseElement();
  artTableInitialiser_ART_chooseHigher();
  artTableInitialiser_ART_chooseIntersection();
  artTableInitialiser_ART_chooseLonger();
  artTableInitialiser_ART_chooseLower();
  artTableInitialiser_ART_choosePredefinedSet();
  artTableInitialiser_ART_chooseRule();
  artTableInitialiser_ART_chooseShorter();
  artTableInitialiser_ART_chooseUnion();
  artTableInitialiser_ART_chooseUnionIntersection();
  artTableInitialiser_ART_chooserOp();
  artTableInitialiser_ART_directive();
  artTableInitialiser_ART_idART();
  artTableInitialiser_ART_idJAVA();
  artTableInitialiser_ART_idRAW();
  artTableInitialiser_ART_latexDeclaration();
  artTableInitialiser_ART_latexDeclarations();
  artTableInitialiser_ART_paraterminalisers();
  artTableInitialiser_ART_text();
  artTableInitialiser_ART_textElement();
  artTableInitialiser_ART_tr();
  artTableInitialiser_ART_trConfiguration();
  artTableInitialiser_ART_trEntities();
  artTableInitialiser_ART_trEntityKind();
  artTableInitialiser_ART_trEntityReferences();
  artTableInitialiser_ART_trEquations();
  artTableInitialiser_ART_trLabel();
  artTableInitialiser_ART_trMatch();
  artTableInitialiser_ART_trNamedTerm();
  artTableInitialiser_ART_trPremises();
  artTableInitialiser_ART_trPrimaryTerm();
  artTableInitialiser_ART_trRule();
  artTableInitialiser_ART_trSubterms();
  artTableInitialiser_ART_trTerm();
  artTableInitialiser_ART_trTransition();
  artTableInitialiser_ART_trUnamedTerm();
  artTableInitialiser_ART_tryArgument();
  artTableInitialiser_ART_useElements();
}

public ARTV4Parser(ARTLexerV3 artLexer) {
  this(null, artLexer);
}

public ARTV4Parser(ARTGrammar artGrammar, ARTLexerV3 artLexer) {
  super(artGrammar, artLexer);
  artParserKind = "GLL Gen";
  artFirstTerminalLabel = ARTTS__SHREIKGLLFIFODescriptors;
  artFirstUnusedLabel = ARTX_LABEL_EXTENT + 1;
  artSetExtent = 288;
  ARTL_EOS = ARTX_EOS;
  ARTL_EPSILON = ARTX_EPSILON;
  ARTL_DUMMY = ARTX_DUMMY;
  artGrammarKind = ARTModeGrammarKind.BNF;
  artDefaultStartSymbolLabel = ARTL_ART_text;
  artBuildDirectives = "ARTDirectives [inputs=[], inputFilenames=[], directives={suppressPopGuard=false, tweLexicalisations=false, algorithmMode=gllGeneratorPool, tweLongest=false, tweSegments=false, termWrite=false, parserName=ARTV4Parser, clusteredGSS=false, twePrint=false, inputPrint=false, lexerName=ARTV4Lexer, trace=false, tweTokenWrite=false, tweDead=false, outputDirectory=., tweWrite=false, termPrint=false, suppressTestRepeat=false, twePriority=false, treeShow=false, tweRecursive=false, parseCounts=false, predictivePops=false, suppressProductionGuard=false, twePrintFull=false, tweFromSPPF=false, sppfPriority=false, tweExtents=false, sppfShow=false, tweSuffix=false, namespace=uk.ac.rhul.cs.csle.art.v3.manager.parser, suppressSemantics=false, despatchMode=fragment, treePrintLevel=3, FIFODescriptors=false, twePrintSummary=false, treePrint=false, verbosity=0, gssShow=false, sppfLongest=false}]";
  artFIFODescriptors = false;
  artSetInitialise();
  artTableInitialise();
}

public static class ARTAT_ART_chooseElement extends ARTGLLAttributeBlock {
  public String v;
  public String toString() {
    String ret = "";
  ret += " v=" + v;
    return ret + " ";
}
}

public void ARTRD_CHAR_BQ(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*CHAR_BQ ::= &CHAR_BQ  .*/
    case ARTL_ART_CHAR_BQ_1022: 
            ARTRD_CHAR_BQ(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
            if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_False(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*False ::= 'False'  .*/
    case ARTL_ART_False_1604: 
            ARTRD_False(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
                  break;
        default: ; }}}
}

public void ARTRD_ID(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ID ::= &ID  .*/
    case ARTL_ART_ID_1000: 
            ARTRD_ID(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
            if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_ID_ATTRIBUTE(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*ID_ATTRIBUTE ::= &ID  '.'  . &ID  */
    case ARTL_ART_ID_ATTRIBUTE_814: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
                        break;
    /*ID_ATTRIBUTE ::= &ID  '.'  &ID  .*/
    case ARTL_ART_ID_ATTRIBUTE_816: 
            ARTRD_ID_ATTRIBUTE(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_STRING_BRACE_NEST(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*STRING_BRACE_NEST ::= &STRING_BRACE_NEST  .*/
    case ARTL_ART_STRING_BRACE_NEST_870: 
            ARTRD_STRING_BRACE_NEST(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
            if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_STRING_BRACKET_NEST(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*STRING_BRACKET_NEST ::= &STRING_BRACKET_NEST  .*/
    case ARTL_ART_STRING_BRACKET_NEST_1608: 
            ARTRD_STRING_BRACKET_NEST(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
            if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_STRING_DOLLAR(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*STRING_DOLLAR ::= &STRING_DOLLAR  .*/
    case ARTL_ART_STRING_DOLLAR_1010: 
            ARTRD_STRING_DOLLAR(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
            if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_STRING_DQ(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*STRING_DQ ::= &STRING_DQ  .*/
    case ARTL_ART_STRING_DQ_1018: 
            ARTRD_STRING_DQ(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
            if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_STRING_PLAIN_SQ(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*STRING_PLAIN_SQ ::= &STRING_PLAIN_SQ  .*/
    case ARTL_ART_STRING_PLAIN_SQ_1014: 
            ARTRD_STRING_PLAIN_SQ(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
            if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_TRRELATION(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*TRRELATION ::= '->'  .*/
    case ARTL_ART_TRRELATION_1144: 
            ARTRD_TRRELATION(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*TRRELATION ::= '->*'  .*/
    case ARTL_ART_TRRELATION_1148: 
            ARTRD_TRRELATION(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*TRRELATION ::= '->>'  .*/
    case ARTL_ART_TRRELATION_1152: 
            ARTRD_TRRELATION(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*TRRELATION ::= '=>'  .*/
    case ARTL_ART_TRRELATION_1156: 
            ARTRD_TRRELATION(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*TRRELATION ::= '=>*'  .*/
    case ARTL_ART_TRRELATION_1160: 
            ARTRD_TRRELATION(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*TRRELATION ::= '=>>'  .*/
    case ARTL_ART_TRRELATION_1164: 
            ARTRD_TRRELATION(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*TRRELATION ::= '-\'  .*/
    case ARTL_ART_TRRELATION_1168: 
            ARTRD_TRRELATION(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*TRRELATION ::= '-\*'  .*/
    case ARTL_ART_TRRELATION_1172: 
            ARTRD_TRRELATION(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*TRRELATION ::= '-\>'  .*/
    case ARTL_ART_TRRELATION_1176: 
            ARTRD_TRRELATION(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*TRRELATION ::= '-/'  .*/
    case ARTL_ART_TRRELATION_1180: 
            ARTRD_TRRELATION(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*TRRELATION ::= '-/*'  .*/
    case ARTL_ART_TRRELATION_1184: 
            ARTRD_TRRELATION(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*TRRELATION ::= '-/>'  .*/
    case ARTL_ART_TRRELATION_1188: 
            ARTRD_TRRELATION(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*TRRELATION ::= '~>'  .*/
    case ARTL_ART_TRRELATION_1192: 
            ARTRD_TRRELATION(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*TRRELATION ::= '~>*'  .*/
    case ARTL_ART_TRRELATION_1196: 
            ARTRD_TRRELATION(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*TRRELATION ::= '~>>'  .*/
    case ARTL_ART_TRRELATION_1200: 
            ARTRD_TRRELATION(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_True(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*True ::= 'True'  .*/
    case ARTL_ART_True_1600: 
            ARTRD_True(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
                  break;
        default: ; }}}
}

public void ARTRD___bool(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*__bool ::= True .*/
    case ARTL_ART___bool_1240: 
            ARTRD___bool(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_True(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*__bool ::= False .*/
    case ARTL_ART___bool_1244: 
            ARTRD___bool(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_False(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD___char(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*__char ::= &CHAR_BQ  .*/
    case ARTL_ART___char_1264: 
            ARTRD___char(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD___int32(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*__int32 ::= &SIGNED_INTEGER  .*/
    case ARTL_ART___int32_1248: 
            ARTRD___int32(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD___real64(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*__real64 ::= &SIGNED_REAL  .*/
    case ARTL_ART___real64_1252: 
            ARTRD___real64(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD___string(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*__string ::= &STRING_DQ  .*/
    case ARTL_ART___string_1256: 
            ARTRD___string(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*__string ::= &STRING_SQ  .*/
    case ARTL_ART___string_1260: 
            ARTRD___string(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_aliasedCFGNonterminal(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*aliasedCFGNonterminal ::= cfgNonterminal .*/
    case ARTL_ART_aliasedCFGNonterminal_1564: 
            ARTRD_aliasedCFGNonterminal(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cfgNonterminal(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*aliasedCFGNonterminal ::= cfgNonterminal '='  . __string */
    case ARTL_ART_aliasedCFGNonterminal_1570: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_cfgNonterminal(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
                        break;
    /*aliasedCFGNonterminal ::= cfgNonterminal '='  __string .*/
    case ARTL_ART_aliasedCFGNonterminal_1572: 
            ARTRD_aliasedCFGNonterminal(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD___string(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_cfgAbbrev(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*cfgAbbrev ::= cfgIter .*/
    case ARTL_ART_cfgAbbrev_706: 
            ARTRD_cfgAbbrev(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cfgIter(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*cfgAbbrev ::= cfgIter cfgKleeneClosure .*/
    case ARTL_ART_cfgAbbrev_712: 
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_cfgIter(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cfgKleeneClosure(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*cfgAbbrev ::= cfgIter cfgPositiveClosure .*/
    case ARTL_ART_cfgAbbrev_718: 
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_cfgIter(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cfgPositiveClosure(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*cfgAbbrev ::= cfgIter cfgOptional .*/
    case ARTL_ART_cfgAbbrev_724: 
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_cfgIter(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cfgOptional(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_cfgAlt(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*cfgAlt ::= cfgCat .*/
    case ARTL_ART_cfgAlt_656: 
            ARTRD_cfgAlt(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cfgCat(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*cfgAlt ::= cfgCat '|'  . cfgAlt1 */
    case ARTL_ART_cfgAlt_662: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_cfgCat(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
                        break;
    /*cfgAlt ::= cfgCat '|'  cfgAlt1 .*/
    case ARTL_ART_cfgAlt_664: 
            ARTRD_cfgAlt(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_cfgAlt1(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_cfgAlt1(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*cfgAlt1 ::= cfgCat .*/
    case ARTL_ART_cfgAlt1_668: 
            ARTRD_cfgAlt1(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cfgCat(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*cfgAlt1 ::= cfgCat '|'  . cfgAlt1 */
    case ARTL_ART_cfgAlt1_674: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_cfgCat(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
                        break;
    /*cfgAlt1 ::= cfgCat '|'  cfgAlt1 .*/
    case ARTL_ART_cfgAlt1_676: 
            ARTRD_cfgAlt1(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_cfgAlt1(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_cfgAtom(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*cfgAtom ::= cfgEpsilon .*/
    case ARTL_ART_cfgAtom_874: 
            ARTRD_cfgAtom(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cfgEpsilon(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*cfgAtom ::= cfgNonterminal .*/
    case ARTL_ART_cfgAtom_878: 
            ARTRD_cfgAtom(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cfgNonterminal(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*cfgAtom ::= cfgSlotSymbol .*/
    case ARTL_ART_cfgAtom_882: 
            ARTRD_cfgAtom(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cfgSlotSymbol(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*cfgAtom ::= cfgCaseSensitiveTerminal .*/
    case ARTL_ART_cfgAtom_886: 
            ARTRD_cfgAtom(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cfgCaseSensitiveTerminal(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*cfgAtom ::= cfgCaseInsensitiveTerminal .*/
    case ARTL_ART_cfgAtom_890: 
            ARTRD_cfgAtom(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cfgCaseInsensitiveTerminal(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*cfgAtom ::= cfgCharacterTerminal .*/
    case ARTL_ART_cfgAtom_894: 
            ARTRD_cfgAtom(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cfgCharacterTerminal(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*cfgAtom ::= cfgCharacterRangeTerminal .*/
    case ARTL_ART_cfgAtom_898: 
            ARTRD_cfgAtom(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cfgCharacterRangeTerminal(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*cfgAtom ::= cfgBuiltinTerminal .*/
    case ARTL_ART_cfgAtom_902: 
            ARTRD_cfgAtom(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cfgBuiltinTerminal(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_cfgAtoms(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*cfgAtoms ::= cfgAtom .*/
    case ARTL_ART_cfgAtoms_1026: 
            ARTRD_cfgAtoms(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cfgAtom(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*cfgAtoms ::= cfgAtom ','  . cfgAtoms */
    case ARTL_ART_cfgAtoms_1032: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_cfgAtom(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
                        break;
    /*cfgAtoms ::= cfgAtom ','  cfgAtoms .*/
    case ARTL_ART_cfgAtoms_1034: 
            ARTRD_cfgAtoms(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_cfgAtoms(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_cfgAttributeEquation(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*cfgAttributeEquation ::= ID_ATTRIBUTE '='  . trTerm */
    case ARTL_ART_cfgAttributeEquation_730: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_ID_ATTRIBUTE(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
                        break;
    /*cfgAttributeEquation ::= ID_ATTRIBUTE '='  trTerm .*/
    case ARTL_ART_cfgAttributeEquation_732: 
            ARTRD_cfgAttributeEquation(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_trTerm(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_cfgBuiltinTerminal(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*cfgBuiltinTerminal ::= '&'  ID .*/
    case ARTL_ART_cfgBuiltinTerminal_968: 
                        artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_cfgCaseInsensitiveTerminal(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*cfgCaseInsensitiveTerminal ::= STRING_DQ .*/
    case ARTL_ART_cfgCaseInsensitiveTerminal_950: 
            ARTRD_cfgCaseInsensitiveTerminal(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_STRING_DQ(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_cfgCaseSensitiveTerminal(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*cfgCaseSensitiveTerminal ::= STRING_PLAIN_SQ .*/
    case ARTL_ART_cfgCaseSensitiveTerminal_946: 
            ARTRD_cfgCaseSensitiveTerminal(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_STRING_PLAIN_SQ(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_cfgCat(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*cfgCat ::= cfgSlot cfgCatTail .*/
    case ARTL_ART_cfgCat_652: 
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_cfgSlot(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artNewWriteable = false; artNewParent = artParent;
      ARTRD_cfgCatTail(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_cfgCatTail(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*cfgCatTail ::= cfgAbbrev cfgSlot .*/
    case ARTL_ART_cfgCatTail_694: 
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_cfgAbbrev(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cfgSlot(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*cfgCatTail ::= cfgAbbrev cfgSlot . cfgCatTail */
    case ARTL_ART_cfgCatTail_700: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_cfgAbbrev(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cfgSlot(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*cfgCatTail ::= cfgAbbrev cfgSlot cfgCatTail .*/
    case ARTL_ART_cfgCatTail_702: 
            ARTRD_cfgCatTail(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_cfgCatTail(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_cfgCharacterRangeTerminal(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*cfgCharacterRangeTerminal ::= CHAR_BQ '..'  . CHAR_BQ */
    case ARTL_ART_cfgCharacterRangeTerminal_960: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_CHAR_BQ(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
                        break;
    /*cfgCharacterRangeTerminal ::= CHAR_BQ '..'  CHAR_BQ .*/
    case ARTL_ART_cfgCharacterRangeTerminal_962: 
            ARTRD_cfgCharacterRangeTerminal(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_CHAR_BQ(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_cfgCharacterTerminal(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*cfgCharacterTerminal ::= CHAR_BQ .*/
    case ARTL_ART_cfgCharacterTerminal_954: 
            ARTRD_cfgCharacterTerminal(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_CHAR_BQ(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_cfgDelay(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*cfgDelay ::= '<'  .*/
    case ARTL_ART_cfgDelay_972: 
            ARTRD_cfgDelay(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
                  break;
        default: ; }}}
}

public void ARTRD_cfgDiff(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*cfgDiff ::= cfgUnion .*/
    case ARTL_ART_cfgDiff_764: 
            ARTRD_cfgDiff(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cfgUnion(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*cfgDiff ::= cfgDiff '\\'  . cfgUnion */
    case ARTL_ART_cfgDiff_770: 
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_cfgDiff(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
                        break;
    /*cfgDiff ::= cfgDiff '\\'  cfgUnion .*/
    case ARTL_ART_cfgDiff_772: 
            ARTRD_cfgDiff(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cfgUnion(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_cfgDoFirst(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*cfgDoFirst ::= '('  cfgAlt . ')'  */
    case ARTL_ART_cfgDoFirst_932: 
                  artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cfgAlt(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*cfgDoFirst ::= '('  cfgAlt ')'  .*/
    case ARTL_ART_cfgDoFirst_934: 
            ARTRD_cfgDoFirst(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
                  break;
        default: ; }}}
}

public void ARTRD_cfgElement(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*cfgElement ::= cfgAtom .*/
    case ARTL_ART_cfgElement_798: 
            ARTRD_cfgElement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cfgAtom(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*cfgElement ::= cfgAtom cfgGrammarAnnotations .*/
    case ARTL_ART_cfgElement_804: 
            artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_cfgAtom(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cfgGrammarAnnotations(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*cfgElement ::= cfgDoFirst .*/
    case ARTL_ART_cfgElement_808: 
            ARTRD_cfgElement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cfgDoFirst(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_cfgElementDeclaration(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*cfgElementDeclaration ::= cfgAtom .*/
    case ARTL_ART_cfgElementDeclaration_1552: 
            ARTRD_cfgElementDeclaration(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cfgAtom(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*cfgElementDeclaration ::= cfgAtom '='  . ID */
    case ARTL_ART_cfgElementDeclaration_1558: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_cfgAtom(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
                        break;
    /*cfgElementDeclaration ::= cfgAtom '='  ID .*/
    case ARTL_ART_cfgElementDeclaration_1560: 
            ARTRD_cfgElementDeclaration(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_cfgElementDeclarations(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*cfgElementDeclarations ::= cfgElementDeclaration .*/
    case ARTL_ART_cfgElementDeclarations_1464: 
            ARTRD_cfgElementDeclarations(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cfgElementDeclaration(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*cfgElementDeclarations ::= cfgElementDeclaration ','  . cfgElementDeclarations */
    case ARTL_ART_cfgElementDeclarations_1470: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_cfgElementDeclaration(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
                        break;
    /*cfgElementDeclarations ::= cfgElementDeclaration ','  cfgElementDeclarations .*/
    case ARTL_ART_cfgElementDeclarations_1472: 
            ARTRD_cfgElementDeclarations(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_cfgElementDeclarations(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_cfgEpsilon(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*cfgEpsilon ::= '#'  .*/
    case ARTL_ART_cfgEpsilon_938: 
            ARTRD_cfgEpsilon(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
                  break;
        default: ; }}}
}

public void ARTRD_cfgFoldNone(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*cfgFoldNone ::= '^_'  .*/
    case ARTL_ART_cfgFoldNone_976: 
            ARTRD_cfgFoldNone(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
                  break;
        default: ; }}}
}

public void ARTRD_cfgFoldOver(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*cfgFoldOver ::= '^^'  .*/
    case ARTL_ART_cfgFoldOver_984: 
            ARTRD_cfgFoldOver(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
                  break;
        default: ; }}}
}

public void ARTRD_cfgFoldUnder(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*cfgFoldUnder ::= '^'  .*/
    case ARTL_ART_cfgFoldUnder_980: 
            ARTRD_cfgFoldUnder(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
                  break;
        default: ; }}}
}

public void ARTRD_cfgGather(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*cfgGather ::= '^^^'  ID .*/
    case ARTL_ART_cfgGather_990: 
                        artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_cfgGrammarAnnotations(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*cfgGrammarAnnotations ::= cfgDelay .*/
    case ARTL_ART_cfgGrammarAnnotations_906: 
            ARTRD_cfgGrammarAnnotations(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cfgDelay(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*cfgGrammarAnnotations ::= cfgFoldNone .*/
    case ARTL_ART_cfgGrammarAnnotations_910: 
            ARTRD_cfgGrammarAnnotations(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cfgFoldNone(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*cfgGrammarAnnotations ::= cfgFoldUnder .*/
    case ARTL_ART_cfgGrammarAnnotations_914: 
            ARTRD_cfgGrammarAnnotations(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cfgFoldUnder(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*cfgGrammarAnnotations ::= cfgFoldOver .*/
    case ARTL_ART_cfgGrammarAnnotations_918: 
            ARTRD_cfgGrammarAnnotations(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cfgFoldOver(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*cfgGrammarAnnotations ::= cfgGather .*/
    case ARTL_ART_cfgGrammarAnnotations_922: 
            ARTRD_cfgGrammarAnnotations(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cfgGather(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*cfgGrammarAnnotations ::= cfgInsert .*/
    case ARTL_ART_cfgGrammarAnnotations_926: 
            ARTRD_cfgGrammarAnnotations(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cfgInsert(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_cfgInsert(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*cfgInsert ::= '^+'  ID .*/
    case ARTL_ART_cfgInsert_996: 
                        artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_cfgIter(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*cfgIter ::= cfgDiff .*/
    case ARTL_ART_cfgIter_740: 
            ARTRD_cfgIter(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cfgDiff(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*cfgIter ::= cfgDiff '@'  . cfgIter */
    case ARTL_ART_cfgIter_746: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_cfgDiff(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
                  if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*cfgIter ::= cfgDiff '@'  cfgIter .*/
    case ARTL_ART_cfgIter_748: 
            ARTRD_cfgIter(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_cfgIter(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_cfgKleeneClosure(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*cfgKleeneClosure ::= '*'  .*/
    case ARTL_ART_cfgKleeneClosure_752: 
            ARTRD_cfgKleeneClosure(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
                  break;
        default: ; }}}
}

public void ARTRD_cfgNativeAction(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*cfgNativeAction ::= STRING_BRACE_NEST .*/
    case ARTL_ART_cfgNativeAction_736: 
            ARTRD_cfgNativeAction(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_STRING_BRACE_NEST(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_cfgNonterminal(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*cfgNonterminal ::= ID .*/
    case ARTL_ART_cfgNonterminal_630: 
            ARTRD_cfgNonterminal(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*cfgNonterminal ::= STRING_DOLLAR .*/
    case ARTL_ART_cfgNonterminal_634: 
            ARTRD_cfgNonterminal(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_STRING_DOLLAR(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_cfgNonterminals(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*cfgNonterminals ::= cfgNonterminal .*/
    case ARTL_ART_cfgNonterminals_1038: 
            ARTRD_cfgNonterminals(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cfgNonterminal(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*cfgNonterminals ::= cfgNonterminal ','  . cfgNonterminals */
    case ARTL_ART_cfgNonterminals_1044: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_cfgNonterminal(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
                        break;
    /*cfgNonterminals ::= cfgNonterminal ','  cfgNonterminals .*/
    case ARTL_ART_cfgNonterminals_1046: 
            ARTRD_cfgNonterminals(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_cfgNonterminals(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_cfgNot(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*cfgNot ::= cfgElement .*/
    case ARTL_ART_cfgNot_788: 
            ARTRD_cfgNot(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cfgElement(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*cfgNot ::= '\\'  cfgElement .*/
    case ARTL_ART_cfgNot_794: 
                        artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cfgElement(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_cfgOptional(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*cfgOptional ::= '?'  .*/
    case ARTL_ART_cfgOptional_760: 
            ARTRD_cfgOptional(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
                  break;
        default: ; }}}
}

public void ARTRD_cfgPositiveClosure(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*cfgPositiveClosure ::= '+'  .*/
    case ARTL_ART_cfgPositiveClosure_756: 
            ARTRD_cfgPositiveClosure(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
                  break;
        default: ; }}}
}

public void ARTRD_cfgRHS(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*cfgRHS ::= cfgCat .*/
    case ARTL_ART_cfgRHS_638: 
            ARTRD_cfgRHS(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cfgCat(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*cfgRHS ::= cfgCat '|'  . cfgRHS */
    case ARTL_ART_cfgRHS_644: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_cfgCat(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
                        break;
    /*cfgRHS ::= cfgCat '|'  cfgRHS .*/
    case ARTL_ART_cfgRHS_646: 
            ARTRD_cfgRHS(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_cfgRHS(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_cfgRule(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*cfgRule ::= cfgNonterminal '::='  . cfgRHS */
    case ARTL_ART_cfgRule_32: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_cfgNonterminal(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
                        break;
    /*cfgRule ::= cfgNonterminal '::='  cfgRHS .*/
    case ARTL_ART_cfgRule_34: 
            ARTRD_cfgRule(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cfgRHS(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_cfgSlot(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*cfgSlot ::= # .*/
    case ARTL_ART_cfgSlot_680: 
            ARTRD_cfgSlot(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
                  break;
    /*cfgSlot ::= cfgAttributeEquation .*/
    case ARTL_ART_cfgSlot_684: 
            ARTRD_cfgSlot(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cfgAttributeEquation(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*cfgSlot ::= cfgNativeAction .*/
    case ARTL_ART_cfgSlot_688: 
            ARTRD_cfgSlot(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cfgNativeAction(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_cfgSlotSymbol(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*cfgSlotSymbol ::= '.'  .*/
    case ARTL_ART_cfgSlotSymbol_942: 
            ARTRD_cfgSlotSymbol(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_cfgTear(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*cfgTear ::= '^-'  ID .*/
    case ARTL_ART_cfgTear_1006: 
                        artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_cfgUnion(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*cfgUnion ::= cfgNot .*/
    case ARTL_ART_cfgUnion_776: 
            ARTRD_cfgUnion(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cfgNot(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*cfgUnion ::= cfgUnion '||'  . cfgNot */
    case ARTL_ART_cfgUnion_782: 
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_cfgUnion(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
                        break;
    /*cfgUnion ::= cfgUnion '||'  cfgNot .*/
    case ARTL_ART_cfgUnion_784: 
            ARTRD_cfgUnion(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cfgNot(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_chooseDiff(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*chooseDiff ::= chooseUnionIntersection .*/
    case ARTL_ART_chooseDiff_1286: 
            ARTRD_chooseDiff(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_chooseUnionIntersection(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, null);
            break;
    /*chooseDiff ::= chooseDiff '\'  . chooseUnionIntersection */
    case ARTL_ART_chooseDiff_1292: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_chooseDiff(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
                        break;
    /*chooseDiff ::= chooseDiff '\'  chooseUnionIntersection .*/
    case ARTL_ART_chooseDiff_1294: 
            ARTRD_chooseDiff(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_chooseUnionIntersection(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, null);
            break;
        default: ; }}}
}

public void ARTRD_chooseElement(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ART_chooseElement chooseElement)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*chooseElement ::= cfgNonterminal .*/
    case ARTL_ART_chooseElement_1334: 
            ARTRD_chooseElement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, chooseElement);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cfgNonterminal(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*chooseElement ::= cfgCharacterTerminal .*/
    case ARTL_ART_chooseElement_1338: 
            ARTRD_chooseElement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, chooseElement);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cfgCharacterTerminal(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*chooseElement ::= cfgBuiltinTerminal .*/
    case ARTL_ART_chooseElement_1342: 
            ARTRD_chooseElement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, chooseElement);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cfgBuiltinTerminal(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*chooseElement ::= cfgCaseInsensitiveTerminal .*/
    case ARTL_ART_chooseElement_1346: 
            ARTRD_chooseElement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, chooseElement);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cfgCaseInsensitiveTerminal(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*chooseElement ::= cfgCaseSensitiveTerminal .*/
    case ARTL_ART_chooseElement_1350: 
            ARTRD_chooseElement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, chooseElement);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cfgCaseSensitiveTerminal(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*chooseElement ::= choosePredefinedSet .*/
    case ARTL_ART_chooseElement_1354: 
            ARTRD_chooseElement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, chooseElement);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_choosePredefinedSet(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*chooseElement ::= '('  chooseDiff . ')'  */
    case ARTL_ART_chooseElement_1360: 
                  artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_chooseDiff(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*chooseElement ::= '('  chooseDiff ')'  .*/
    case ARTL_ART_chooseElement_1362: 
            ARTRD_chooseElement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, chooseElement);
                  break;
        default: ; }}}
}

public void ARTRD_chooseHigher(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*chooseHigher ::= '>'  .*/
    case ARTL_ART_chooseHigher_1406: 
            ARTRD_chooseHigher(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
                  break;
        default: ; }}}
}

public void ARTRD_chooseIntersection(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*chooseIntersection ::= '/'  .*/
    case ARTL_ART_chooseIntersection_1370: 
            ARTRD_chooseIntersection(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
                  break;
        default: ; }}}
}

public void ARTRD_chooseLonger(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*chooseLonger ::= '>>'  .*/
    case ARTL_ART_chooseLonger_1414: 
            ARTRD_chooseLonger(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
                  break;
        default: ; }}}
}

public void ARTRD_chooseLower(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*chooseLower ::= '<'  .*/
    case ARTL_ART_chooseLower_1410: 
            ARTRD_chooseLower(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
                  break;
        default: ; }}}
}

public void ARTRD_choosePredefinedSet(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*choosePredefinedSet ::= 'anyCharacterTerminal'  .*/
    case ARTL_ART_choosePredefinedSet_1374: 
            ARTRD_choosePredefinedSet(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*choosePredefinedSet ::= 'anyBuiltinTerminal'  .*/
    case ARTL_ART_choosePredefinedSet_1378: 
            ARTRD_choosePredefinedSet(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*choosePredefinedSet ::= 'anyCaseSensitiveTerminal'  .*/
    case ARTL_ART_choosePredefinedSet_1382: 
            ARTRD_choosePredefinedSet(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*choosePredefinedSet ::= 'anyCaseInsensitiveTerminal'  .*/
    case ARTL_ART_choosePredefinedSet_1386: 
            ARTRD_choosePredefinedSet(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*choosePredefinedSet ::= 'anyNonterminal'  .*/
    case ARTL_ART_choosePredefinedSet_1390: 
            ARTRD_choosePredefinedSet(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*choosePredefinedSet ::= 'anyParaterminal'  .*/
    case ARTL_ART_choosePredefinedSet_1394: 
            ARTRD_choosePredefinedSet(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*choosePredefinedSet ::= 'anyLiteralTerminal'  .*/
    case ARTL_ART_choosePredefinedSet_1398: 
            ARTRD_choosePredefinedSet(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*choosePredefinedSet ::= 'anyTerminal'  .*/
    case ARTL_ART_choosePredefinedSet_1402: 
            ARTRD_choosePredefinedSet(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_chooseRule(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*chooseRule ::= chooseDiff chooserOp . chooseDiff */
    case ARTL_ART_chooseRule_46: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_chooseDiff(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_chooserOp(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*chooseRule ::= chooseDiff chooserOp chooseDiff .*/
    case ARTL_ART_chooseRule_48: 
            ARTRD_chooseRule(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_chooseDiff(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_chooseShorter(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*chooseShorter ::= '<<'  .*/
    case ARTL_ART_chooseShorter_1418: 
            ARTRD_chooseShorter(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
                  break;
        default: ; }}}
}

public void ARTRD_chooseUnion(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*chooseUnion ::= '|'  .*/
    case ARTL_ART_chooseUnion_1366: 
            ARTRD_chooseUnion(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
                  break;
        default: ; }}}
}

public void ARTRD_chooseUnionIntersection(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable, ARTAT_ART_chooseElement chooseElement1)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*chooseUnionIntersection ::= chooseElement .*/
    case ARTL_ART_chooseUnionIntersection_1314: 
      chooseElement1 = new ARTAT_ART_chooseElement();
            ARTRD_chooseUnionIntersection(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, chooseElement1);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), chooseElement1));
      ARTRD_chooseElement(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, chooseElement1);
            break;
    /*chooseUnionIntersection ::= chooseUnionIntersection chooseUnion . chooseElement */
    case ARTL_ART_chooseUnionIntersection_1320: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_chooseUnionIntersection(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable, null);
            artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_chooseUnion(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*chooseUnionIntersection ::= chooseUnionIntersection chooseUnion chooseElement .*/
    case ARTL_ART_chooseUnionIntersection_1322: 
      chooseElement1 = new ARTAT_ART_chooseElement();
            ARTRD_chooseUnionIntersection(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, chooseElement1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), chooseElement1));
      ARTRD_chooseElement(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, chooseElement1);
            break;
    /*chooseUnionIntersection ::= chooseUnionIntersection chooseIntersection . chooseElement */
    case ARTL_ART_chooseUnionIntersection_1328: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_chooseUnionIntersection(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable, null);
            artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_chooseIntersection(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*chooseUnionIntersection ::= chooseUnionIntersection chooseIntersection chooseElement .*/
    case ARTL_ART_chooseUnionIntersection_1330: 
      chooseElement1 = new ARTAT_ART_chooseElement();
            ARTRD_chooseUnionIntersection(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable, chooseElement1);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), chooseElement1));
      ARTRD_chooseElement(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable, chooseElement1);
            break;
        default: ; }}}
}

public void ARTRD_chooserOp(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*chooserOp ::= chooseHigher .*/
    case ARTL_ART_chooserOp_1298: 
            ARTRD_chooserOp(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_chooseHigher(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*chooserOp ::= chooseLower .*/
    case ARTL_ART_chooserOp_1302: 
            ARTRD_chooserOp(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_chooseLower(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*chooserOp ::= chooseLonger .*/
    case ARTL_ART_chooserOp_1306: 
            ARTRD_chooserOp(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_chooseLonger(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*chooserOp ::= chooseShorter .*/
    case ARTL_ART_chooserOp_1310: 
            ARTRD_chooserOp(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_chooseShorter(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_directive(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*directive ::= '!merge'  idART .*/
    case ARTL_ART_directive_54: 
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_idART(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*directive ::= '!module'  ID .*/
    case ARTL_ART_directive_60: 
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*directive ::= '!use'  useElements .*/
    case ARTL_ART_directive_66: 
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_useElements(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*directive ::= '!cfgElements'  cfgElementDeclarations .*/
    case ARTL_ART_directive_72: 
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cfgElementDeclarations(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*directive ::= '!paraterminal'  paraterminalisers .*/
    case ARTL_ART_directive_78: 
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = false; artNewParent = artParent;
      ARTRD_paraterminalisers(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*directive ::= '!alphabet'  cfgNonterminals .*/
    case ARTL_ART_directive_84: 
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cfgNonterminals(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*directive ::= '!latex'  latexDeclarations .*/
    case ARTL_ART_directive_90: 
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_latexDeclarations(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*directive ::= '!verbosity'  __int32 .*/
    case ARTL_ART_directive_96: 
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD___int32(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*directive ::= '!statistics'  __int32 .*/
    case ARTL_ART_directive_102: 
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD___int32(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*directive ::= '!trace'  __int32 .*/
    case ARTL_ART_directive_108: 
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD___int32(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*directive ::= '!inputPrint'  .*/
    case ARTL_ART_directive_112: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!twePrintFull'  .*/
    case ARTL_ART_directive_116: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!twePrintSummary'  .*/
    case ARTL_ART_directive_120: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!twePrint'  .*/
    case ARTL_ART_directive_124: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!tweWrite'  .*/
    case ARTL_ART_directive_128: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!tweShow'  .*/
    case ARTL_ART_directive_132: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!gssPrint'  .*/
    case ARTL_ART_directive_136: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!gssWrite'  .*/
    case ARTL_ART_directive_140: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!gssShow'  .*/
    case ARTL_ART_directive_144: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!sppfPrint'  .*/
    case ARTL_ART_directive_148: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!sppfWrite'  .*/
    case ARTL_ART_directive_152: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!sppfShow'  .*/
    case ARTL_ART_directive_156: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!treePrint'  .*/
    case ARTL_ART_directive_160: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!treeWrite'  .*/
    case ARTL_ART_directive_164: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!treeShow'  .*/
    case ARTL_ART_directive_168: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!termPrint'  .*/
    case ARTL_ART_directive_172: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!termWrite'  .*/
    case ARTL_ART_directive_176: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!termShow'  .*/
    case ARTL_ART_directive_180: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!parseCountsPrint'  .*/
    case ARTL_ART_directive_184: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!grammarWrite'  idART .*/
    case ARTL_ART_directive_190: 
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_idART(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*directive ::= '!termTool'  .*/
    case ARTL_ART_directive_194: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!unicodeAsEscapeSeuences'  idJAVA . idJAVA */
    case ARTL_ART_directive_200: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_idJAVA(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*directive ::= '!unicodeAsEscapeSeuences'  idJAVA idJAVA .*/
    case ARTL_ART_directive_202: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_idJAVA(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*directive ::= '!compressWhitespaceJava'  idJAVA . idJAVA */
    case ARTL_ART_directive_208: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_idJAVA(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*directive ::= '!compressWhitespaceJava'  idJAVA idJAVA .*/
    case ARTL_ART_directive_210: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_idJAVA(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*directive ::= '!extractJLS'  idRAW . idRAW idRAW idART ID */
    case ARTL_ART_directive_216: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_idRAW(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*directive ::= '!extractJLS'  idRAW idRAW . idRAW idART ID */
    case ARTL_ART_directive_218: 
      ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_idRAW(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*directive ::= '!extractJLS'  idRAW idRAW idRAW . idART ID */
    case ARTL_ART_directive_220: 
      ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_idRAW(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*directive ::= '!extractJLS'  idRAW idRAW idRAW idART . ID */
    case ARTL_ART_directive_222: 
      ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_idART(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*directive ::= '!extractJLS'  idRAW idRAW idRAW idART ID .*/
    case ARTL_ART_directive_224: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*directive ::= '!lexDFA'  .*/
    case ARTL_ART_directive_228: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!lexGLL'  .*/
    case ARTL_ART_directive_232: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!lexHardCoded'  .*/
    case ARTL_ART_directive_236: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!lexWSSuffix'  .*/
    case ARTL_ART_directive_240: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!whitespace'  cfgNonterminal .*/
    case ARTL_ART_directive_246: 
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cfgNonterminal(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*directive ::= '!absorb'  cfgNonterminal .*/
    case ARTL_ART_directive_252: 
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cfgNonterminal(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*directive ::= '!absorb'  '#'  .*/
    case ARTL_ART_directive_258: 
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
                        break;
    /*directive ::= '!injectInstance'  cfgRHS .*/
    case ARTL_ART_directive_264: 
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cfgRHS(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*directive ::= '!injectInstance'  '#'  .*/
    case ARTL_ART_directive_270: 
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!injectProduction'  cfgRHS .*/
    case ARTL_ART_directive_276: 
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cfgRHS(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*directive ::= '!injectProduction'  '#'  .*/
    case ARTL_ART_directive_282: 
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
                        break;
    /*directive ::= '!tweFromSPPF'  .*/
    case ARTL_ART_directive_286: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!tweTokenWrite'  .*/
    case ARTL_ART_directive_290: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!tweLexicalisations'  .*/
    case ARTL_ART_directive_294: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!tweExtents'  .*/
    case ARTL_ART_directive_298: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!tweSegments'  .*/
    case ARTL_ART_directive_302: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!tweRecursive'  .*/
    case ARTL_ART_directive_306: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!tweLongest'  .*/
    case ARTL_ART_directive_310: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!twePriority'  .*/
    case ARTL_ART_directive_314: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!tweDead'  .*/
    case ARTL_ART_directive_318: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!sppfLongest'  .*/
    case ARTL_ART_directive_322: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!sppfPriority'  .*/
    case ARTL_ART_directive_326: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!outputDirectory'  STRING_PLAIN_SQ .*/
    case ARTL_ART_directive_332: 
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_STRING_PLAIN_SQ(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*directive ::= '!namespace'  STRING_PLAIN_SQ .*/
    case ARTL_ART_directive_338: 
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_STRING_PLAIN_SQ(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*directive ::= '!lexerName'  STRING_PLAIN_SQ .*/
    case ARTL_ART_directive_344: 
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_STRING_PLAIN_SQ(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*directive ::= '!parserName'  STRING_PLAIN_SQ .*/
    case ARTL_ART_directive_350: 
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_STRING_PLAIN_SQ(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*directive ::= '!generateDynamic'  .*/
    case ARTL_ART_directive_354: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!generateStatic'  .*/
    case ARTL_ART_directive_358: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!generateState'  .*/
    case ARTL_ART_directive_362: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!generateFragment'  .*/
    case ARTL_ART_directive_366: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!generatePool'  .*/
    case ARTL_ART_directive_370: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!generateJava'  .*/
    case ARTL_ART_directive_374: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!generateC++'  .*/
    case ARTL_ART_directive_378: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!generateML'  .*/
    case ARTL_ART_directive_382: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!prelude'  STRING_BRACE_NEST .*/
    case ARTL_ART_directive_388: 
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_STRING_BRACE_NEST(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*directive ::= '!support'  STRING_BRACE_NEST .*/
    case ARTL_ART_directive_394: 
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_STRING_BRACE_NEST(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*directive ::= '!GLLPredictivePops'  .*/
    case ARTL_ART_directive_398: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!GLLFIFODescriptors'  .*/
    case ARTL_ART_directive_402: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!GLLSuppressPopGuard'  .*/
    case ARTL_ART_directive_406: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!GLLSuppressProductionGuard'  .*/
    case ARTL_ART_directive_410: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!GLLSuppressTestRepeat'  .*/
    case ARTL_ART_directive_414: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!GLLSuppressSemantics'  .*/
    case ARTL_ART_directive_418: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!earley2007LinkedAPI'  .*/
    case ARTL_ART_directive_422: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!earley'  .*/
    case ARTL_ART_directive_426: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!earleyLinkedAPI'  .*/
    case ARTL_ART_directive_430: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!earleyIndexedAPI'  .*/
    case ARTL_ART_directive_434: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!earleyIndexedPool'  .*/
    case ARTL_ART_directive_438: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!earleyIndexedData'  .*/
    case ARTL_ART_directive_442: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!earleyTable'  .*/
    case ARTL_ART_directive_446: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!earleyTableLinkedAPI'  .*/
    case ARTL_ART_directive_450: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!earleyTableIndexedAPI'  .*/
    case ARTL_ART_directive_454: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!earleyTableIndexedPool'  .*/
    case ARTL_ART_directive_458: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!earleyTableIndexedData'  .*/
    case ARTL_ART_directive_462: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!cnp'  .*/
    case ARTL_ART_directive_466: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!cnpLinkedAPI'  .*/
    case ARTL_ART_directive_470: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!cnpIndexedAPI'  .*/
    case ARTL_ART_directive_474: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!cnpIndexedPool'  .*/
    case ARTL_ART_directive_478: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!cnpGeneratorPool'  .*/
    case ARTL_ART_directive_482: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!lcnp'  .*/
    case ARTL_ART_directive_486: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!lcnpLinkedAPI'  .*/
    case ARTL_ART_directive_490: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!lcnpIndexedAPI'  .*/
    case ARTL_ART_directive_494: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!lcnpIndexedPool'  .*/
    case ARTL_ART_directive_498: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!lcnpGeneratorPool'  .*/
    case ARTL_ART_directive_502: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!gll'  .*/
    case ARTL_ART_directive_506: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!gllGeneratorPool'  .*/
    case ARTL_ART_directive_510: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!gllTWEGeneratorPool'  .*/
    case ARTL_ART_directive_514: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!gllClusteredGeneratorPool'  .*/
    case ARTL_ART_directive_518: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!mgll'  .*/
    case ARTL_ART_directive_522: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!mgllGeneratorPool'  .*/
    case ARTL_ART_directive_526: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!osbrd'  .*/
    case ARTL_ART_directive_530: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!osbrdGenerator'  .*/
    case ARTL_ART_directive_534: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!sml97Parser'  .*/
    case ARTL_ART_directive_538: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!lexerData'  .*/
    case ARTL_ART_directive_542: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!relation'  TRRELATION .*/
    case ARTL_ART_directive_548: 
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = false; artNewParent = artParent;
      ARTRD_TRRELATION(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*directive ::= '!relation'  TRRELATION . ','  trEntities */
    case ARTL_ART_directive_554: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = false; artNewParent = artParent;
      ARTRD_TRRELATION(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*directive ::= '!relation'  TRRELATION ','  . trEntities */
    case ARTL_ART_directive_556: 
      ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
                  break;
    /*directive ::= '!relation'  TRRELATION ','  trEntities .*/
    case ARTL_ART_directive_558: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_trEntities(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*directive ::= '!main'  idART .*/
    case ARTL_ART_directive_564: 
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_idART(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*directive ::= '!start'  cfgNonterminal .*/
    case ARTL_ART_directive_570: 
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cfgNonterminal(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*directive ::= '!start'  TRRELATION .*/
    case ARTL_ART_directive_576: 
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_TRRELATION(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*directive ::= '!input'  tryArgument .*/
    case ARTL_ART_directive_582: 
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_tryArgument(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*directive ::= '!result'  tryArgument .*/
    case ARTL_ART_directive_588: 
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_tryArgument(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*directive ::= '!strategy'  'root'  .*/
    case ARTL_ART_directive_594: 
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!strategy'  'postOrder'  .*/
    case ARTL_ART_directive_600: 
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!strategy'  'preOrderOneShot'  .*/
    case ARTL_ART_directive_606: 
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!try'  .*/
    case ARTL_ART_directive_610: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*directive ::= '!try'  tryArgument .*/
    case ARTL_ART_directive_616: 
            artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_tryArgument(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*directive ::= '!try'  tryArgument . '='  tryArgument */
    case ARTL_ART_directive_622: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_tryArgument(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*directive ::= '!try'  tryArgument '='  . tryArgument */
    case ARTL_ART_directive_624: 
      ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
                  break;
    /*directive ::= '!try'  tryArgument '='  tryArgument .*/
    case ARTL_ART_directive_626: 
            ARTRD_directive(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_tryArgument(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_idART(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*idART ::= ID .*/
    case ARTL_ART_idART_1422: 
            ARTRD_idART(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*idART ::= ID '.art'  .*/
    case ARTL_ART_idART_1428: 
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_ID(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
                        break;
        default: ; }}}
}

public void ARTRD_idJAVA(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*idJAVA ::= ID .*/
    case ARTL_ART_idJAVA_1442: 
            ARTRD_idJAVA(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*idJAVA ::= ID '.java'  .*/
    case ARTL_ART_idJAVA_1448: 
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_ID(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
                        break;
        default: ; }}}
}

public void ARTRD_idRAW(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*idRAW ::= ID .*/
    case ARTL_ART_idRAW_1432: 
            ARTRD_idRAW(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*idRAW ::= ID '.raw'  .*/
    case ARTL_ART_idRAW_1438: 
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_ID(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
                        break;
        default: ; }}}
}

public void ARTRD_latexDeclaration(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*latexDeclaration ::= __string '='  . __string */
    case ARTL_ART_latexDeclaration_1546: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD___string(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
                        break;
    /*latexDeclaration ::= __string '='  __string .*/
    case ARTL_ART_latexDeclaration_1548: 
            ARTRD_latexDeclaration(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD___string(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_latexDeclarations(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*latexDeclarations ::= latexDeclaration .*/
    case ARTL_ART_latexDeclarations_1488: 
            ARTRD_latexDeclarations(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_latexDeclaration(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*latexDeclarations ::= latexDeclaration ','  . latexDeclarations */
    case ARTL_ART_latexDeclarations_1494: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_latexDeclaration(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
                        break;
    /*latexDeclarations ::= latexDeclaration ','  latexDeclarations .*/
    case ARTL_ART_latexDeclarations_1496: 
            ARTRD_latexDeclarations(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_latexDeclarations(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_paraterminalisers(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*paraterminalisers ::= aliasedCFGNonterminal .*/
    case ARTL_ART_paraterminalisers_1476: 
            ARTRD_paraterminalisers(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_aliasedCFGNonterminal(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*paraterminalisers ::= aliasedCFGNonterminal ','  . paraterminalisers */
    case ARTL_ART_paraterminalisers_1482: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_aliasedCFGNonterminal(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
                        break;
    /*paraterminalisers ::= aliasedCFGNonterminal ','  paraterminalisers .*/
    case ARTL_ART_paraterminalisers_1484: 
            ARTRD_paraterminalisers(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_paraterminalisers(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_text(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*text ::= textElement .*/
    case ARTL_ART_text_4: 
            ARTRD_text(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_textElement(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*text ::= textElement text .*/
    case ARTL_ART_text_10: 
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_textElement(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_text(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_textElement(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*textElement ::= cfgRule .*/
    case ARTL_ART_textElement_14: 
            ARTRD_textElement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cfgRule(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*textElement ::= trRule .*/
    case ARTL_ART_textElement_18: 
            ARTRD_textElement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_trRule(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*textElement ::= chooseRule .*/
    case ARTL_ART_textElement_22: 
            ARTRD_textElement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_chooseRule(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*textElement ::= directive .*/
    case ARTL_ART_textElement_26: 
            ARTRD_textElement(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_directive(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_tr(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*tr ::= trPremises '---'  . trTransition trEquations */
    case ARTL_ART_tr_1068: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_trPremises(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
                        break;
    /*tr ::= trPremises '---'  trTransition . trEquations */
    case ARTL_ART_tr_1070: 
      ARTRD_tr(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_trTransition(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*tr ::= trPremises '---'  trTransition trEquations .*/
    case ARTL_ART_tr_1072: 
            ARTRD_tr(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_trEquations(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*tr ::= trPremises '---'  . trTransition */
    case ARTL_ART_tr_1078: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_trPremises(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
                        break;
    /*tr ::= trPremises '---'  trTransition .*/
    case ARTL_ART_tr_1080: 
            ARTRD_tr(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_trTransition(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_trConfiguration(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*trConfiguration ::= trPrimaryTerm trEntityReferences .*/
    case ARTL_ART_trConfiguration_1130: 
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_trPrimaryTerm(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_trEntityReferences(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*trConfiguration ::= '<'  trPrimaryTerm . trEntityReferences '>'  */
    case ARTL_ART_trConfiguration_1136: 
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_trPrimaryTerm(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*trConfiguration ::= '<'  trPrimaryTerm trEntityReferences . '>'  */
    case ARTL_ART_trConfiguration_1138: 
      ARTRD_trConfiguration(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_trEntityReferences(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*trConfiguration ::= '<'  trPrimaryTerm trEntityReferences '>'  .*/
    case ARTL_ART_trConfiguration_1140: 
            ARTRD_trConfiguration(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_trEntities(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*trEntities ::= trTerm .*/
    case ARTL_ART_trEntities_1500: 
            ARTRD_trEntities(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_trTerm(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*trEntities ::= trTerm ':'  . trEntityKind */
    case ARTL_ART_trEntities_1506: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_trTerm(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
                        break;
    /*trEntities ::= trTerm ':'  trEntityKind .*/
    case ARTL_ART_trEntities_1508: 
            ARTRD_trEntities(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_trEntityKind(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*trEntities ::= trTerm ','  . trEntities */
    case ARTL_ART_trEntities_1514: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_trTerm(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
                        break;
    /*trEntities ::= trTerm ','  trEntities .*/
    case ARTL_ART_trEntities_1516: 
            ARTRD_trEntities(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_trEntities(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*trEntities ::= trTerm ':'  . trEntityKind ','  trEntities */
    case ARTL_ART_trEntities_1522: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_trTerm(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
                        break;
    /*trEntities ::= trTerm ':'  trEntityKind . ','  trEntities */
    case ARTL_ART_trEntities_1524: 
      ARTRD_trEntities(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_trEntityKind(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*trEntities ::= trTerm ':'  trEntityKind ','  . trEntities */
    case ARTL_ART_trEntities_1526: 
      ARTRD_trEntities(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
                  break;
    /*trEntities ::= trTerm ':'  trEntityKind ','  trEntities .*/
    case ARTL_ART_trEntities_1528: 
            ARTRD_trEntities(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_trEntities(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_trEntityKind(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*trEntityKind ::= 'map'  .*/
    case ARTL_ART_trEntityKind_1576: 
            ARTRD_trEntityKind(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*trEntityKind ::= 'mapFixed'  .*/
    case ARTL_ART_trEntityKind_1580: 
            ARTRD_trEntityKind(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*trEntityKind ::= 'listIn'  .*/
    case ARTL_ART_trEntityKind_1584: 
            ARTRD_trEntityKind(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*trEntityKind ::= 'listOut'  .*/
    case ARTL_ART_trEntityKind_1588: 
            ARTRD_trEntityKind(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*trEntityKind ::= 'singleton'  .*/
    case ARTL_ART_trEntityKind_1592: 
            ARTRD_trEntityKind(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
    /*trEntityKind ::= 'untyped'  .*/
    case ARTL_ART_trEntityKind_1596: 
            ARTRD_trEntityKind(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
            break;
        default: ; }}}
}

public void ARTRD_trEntityReferences(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*trEntityReferences ::= # .*/
    case ARTL_ART_trEntityReferences_1208: 
            ARTRD_trEntityReferences(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
                  break;
    /*trEntityReferences ::= ','  trUnamedTerm . trEntityReferences */
    case ARTL_ART_trEntityReferences_1214: 
                  artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_trUnamedTerm(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*trEntityReferences ::= ','  trUnamedTerm trEntityReferences .*/
    case ARTL_ART_trEntityReferences_1216: 
            ARTRD_trEntityReferences(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_trEntityReferences(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*trEntityReferences ::= ','  trNamedTerm . trEntityReferences */
    case ARTL_ART_trEntityReferences_1222: 
                  artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_trNamedTerm(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*trEntityReferences ::= ','  trNamedTerm trEntityReferences .*/
    case ARTL_ART_trEntityReferences_1224: 
            ARTRD_trEntityReferences(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_trEntityReferences(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_trEquations(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*trEquations ::= cfgAttributeEquation .*/
    case ARTL_ART_trEquations_1108: 
            ARTRD_trEquations(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_cfgAttributeEquation(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*trEquations ::= cfgAttributeEquation ','  . trEquations */
    case ARTL_ART_trEquations_1114: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_cfgAttributeEquation(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
                        break;
    /*trEquations ::= cfgAttributeEquation ','  trEquations .*/
    case ARTL_ART_trEquations_1116: 
            ARTRD_trEquations(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_trEquations(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_trLabel(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*trLabel ::= # .*/
    case ARTL_ART_trLabel_1050: 
            ARTRD_trLabel(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
                  break;
    /*trLabel ::= '-'  ID .*/
    case ARTL_ART_trLabel_1056: 
                        artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*trLabel ::= '-'  STRING_DQ .*/
    case ARTL_ART_trLabel_1062: 
                        artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_STRING_DQ(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_trMatch(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*trMatch ::= trTerm '|>'  . trTerm */
    case ARTL_ART_trMatch_1122: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_trTerm(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
                        break;
    /*trMatch ::= trTerm '|>'  trTerm .*/
    case ARTL_ART_trMatch_1124: 
            ARTRD_trMatch(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_trTerm(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_trNamedTerm(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*trNamedTerm ::= ID '='  . trTerm */
    case ARTL_ART_trNamedTerm_1234: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_ID(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
                        break;
    /*trNamedTerm ::= ID '='  trTerm .*/
    case ARTL_ART_trNamedTerm_1236: 
            ARTRD_trNamedTerm(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_trTerm(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_trPremises(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*trPremises ::= # .*/
    case ARTL_ART_trPremises_1084: 
            ARTRD_trPremises(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
                  break;
    /*trPremises ::= trTransition trPremises .*/
    case ARTL_ART_trPremises_1090: 
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_trTransition(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artNewWriteable = false; artNewParent = artParent;
      ARTRD_trPremises(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*trPremises ::= trMatch trPremises .*/
    case ARTL_ART_trPremises_1096: 
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_trMatch(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artNewWriteable = false; artNewParent = artParent;
      ARTRD_trPremises(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_trPrimaryTerm(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*trPrimaryTerm ::= trTerm .*/
    case ARTL_ART_trPrimaryTerm_1204: 
            ARTRD_trPrimaryTerm(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_trTerm(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_trRule(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*trRule ::= trLabel tr .*/
    case ARTL_ART_trRule_40: 
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_trLabel(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_tr(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_trSubterms(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*trSubterms ::= trTerm .*/
    case ARTL_ART_trSubterms_1268: 
            ARTRD_trSubterms(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_trTerm(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*trSubterms ::= trTerm ','  . trSubterms */
    case ARTL_ART_trSubterms_1274: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_trTerm(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
                        break;
    /*trSubterms ::= trTerm ','  trSubterms .*/
    case ARTL_ART_trSubterms_1276: 
            ARTRD_trSubterms(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_trSubterms(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*trSubterms ::= trTerm trSubterms .*/
    case ARTL_ART_trSubterms_1282: 
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_trTerm(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artNewWriteable = false; artNewParent = artParent;
      ARTRD_trSubterms(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_trTerm(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*trTerm ::= __bool .*/
    case ARTL_ART_trTerm_820: 
            ARTRD_trTerm(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD___bool(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*trTerm ::= __int32 .*/
    case ARTL_ART_trTerm_824: 
            ARTRD_trTerm(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD___int32(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*trTerm ::= __real64 .*/
    case ARTL_ART_trTerm_828: 
            ARTRD_trTerm(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD___real64(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*trTerm ::= __string .*/
    case ARTL_ART_trTerm_832: 
            ARTRD_trTerm(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD___string(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*trTerm ::= __char .*/
    case ARTL_ART_trTerm_836: 
            ARTRD_trTerm(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD___char(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*trTerm ::= ID .*/
    case ARTL_ART_trTerm_840: 
            ARTRD_trTerm(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_ID(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*trTerm ::= ID '('  . ')'  */
    case ARTL_ART_trTerm_846: 
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_ID(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
                        break;
    /*trTerm ::= ID '('  ')'  .*/
    case ARTL_ART_trTerm_848: 
            ARTRD_trTerm(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
                  break;
    /*trTerm ::= ID '('  . trSubterms ')'  */
    case ARTL_ART_trTerm_854: 
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_ID(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
                        break;
    /*trTerm ::= ID '('  trSubterms . ')'  */
    case ARTL_ART_trTerm_856: 
      ARTRD_trTerm(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_trSubterms(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*trTerm ::= ID '('  trSubterms ')'  .*/
    case ARTL_ART_trTerm_858: 
            ARTRD_trTerm(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
                  break;
    /*trTerm ::= ID_ATTRIBUTE .*/
    case ARTL_ART_trTerm_862: 
            ARTRD_trTerm(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_ID_ATTRIBUTE(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*trTerm ::= STRING_PLAIN_SQ .*/
    case ARTL_ART_trTerm_866: 
            ARTRD_trTerm(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_STRING_PLAIN_SQ(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_trTransition(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*trTransition ::= trConfiguration TRRELATION . trConfiguration */
    case ARTL_ART_trTransition_1102: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_trConfiguration(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
            artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_TRRELATION(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*trTransition ::= trConfiguration TRRELATION trConfiguration .*/
    case ARTL_ART_trTransition_1104: 
            ARTRD_trTransition(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_trConfiguration(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_trUnamedTerm(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*trUnamedTerm ::= trTerm .*/
    case ARTL_ART_trUnamedTerm_1228: 
            ARTRD_trUnamedTerm(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_trTerm(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_tryArgument(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*tryArgument ::= STRING_PLAIN_SQ .*/
    case ARTL_ART_tryArgument_1532: 
            ARTRD_tryArgument(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_STRING_PLAIN_SQ(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*tryArgument ::= trConfiguration .*/
    case ARTL_ART_tryArgument_1536: 
            ARTRD_tryArgument(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_trConfiguration(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*tryArgument ::= STRING_DQ .*/
    case ARTL_ART_tryArgument_1540: 
            ARTRD_tryArgument(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = artWriteable; artNewParent = artParent;      if (artWriteable) artParent.setPayload(new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_STRING_DQ(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void ARTRD_useElements(int artElement, ARTGLLRDTVertex artParent, boolean artWriteable)  {
ARTGLLRDTVertex artNewParent; boolean artNewWriteable = true;
    for (int artPackedNode = artSPPFNodePackedNodeList(artElement); artPackedNode != 0; artPackedNode = artSPPFPackedNodePackedNodeList(artPackedNode)) {
      if (artSPPFPackedNodeSelected(artPackedNode)) {
        switch (artSPPFPackedNodeLabel(artPackedNode)) {
    /*useElements ::= idART .*/
    case ARTL_ART_useElements_1452: 
            ARTRD_useElements(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeRightChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeRightChild(artPackedNode)), null));
      ARTRD_idART(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
    /*useElements ::= idART ','  . useElements */
    case ARTL_ART_useElements_1458: 
      artNewWriteable = true; artNewParent = artParent.addChild(artNextFreeNodeNumber++, new ARTGLLRDTPayload(artRDT, artSPPFNodeLeftExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeRightExtent(artSPPFPackedNodeLeftChild(artPackedNode)), artSPPFNodeLabel(artSPPFPackedNodeLeftChild(artPackedNode)), null));
      ARTRD_idART(artSPPFPackedNodeLeftChild(artPackedNode), artNewParent, artNewWriteable);
                        break;
    /*useElements ::= idART ','  useElements .*/
    case ARTL_ART_useElements_1460: 
            ARTRD_useElements(artSPPFPackedNodeLeftChild(artPackedNode), artParent, artWriteable);
      artNewWriteable = false; artNewParent = artParent;
      ARTRD_useElements(artSPPFPackedNodeRightChild(artPackedNode), artNewParent, artNewWriteable);
            break;
        default: ; }}}
}

public void artEvaluate(ARTGLLRDTHandle artElement, ARTGLLAttributeBlock artAttributes, ARTGLLRDTVertex artParent, Boolean artWriteable)  {
  switch (artSPPFNodeLabel(artElement.element)) {
    case ARTL_ART_CHAR_BQ: ARTRD_CHAR_BQ(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_False: ARTRD_False(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_ID: ARTRD_ID(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_ID_ATTRIBUTE: ARTRD_ID_ATTRIBUTE(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_STRING_BRACE_NEST: ARTRD_STRING_BRACE_NEST(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_STRING_BRACKET_NEST: ARTRD_STRING_BRACKET_NEST(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_STRING_DOLLAR: ARTRD_STRING_DOLLAR(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_STRING_DQ: ARTRD_STRING_DQ(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_STRING_PLAIN_SQ: ARTRD_STRING_PLAIN_SQ(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_TRRELATION: ARTRD_TRRELATION(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_True: ARTRD_True(artElement.element, artParent, artWriteable); break;
    case ARTL_ART___bool: ARTRD___bool(artElement.element, artParent, artWriteable); break;
    case ARTL_ART___char: ARTRD___char(artElement.element, artParent, artWriteable); break;
    case ARTL_ART___int32: ARTRD___int32(artElement.element, artParent, artWriteable); break;
    case ARTL_ART___real64: ARTRD___real64(artElement.element, artParent, artWriteable); break;
    case ARTL_ART___string: ARTRD___string(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_aliasedCFGNonterminal: ARTRD_aliasedCFGNonterminal(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_cfgAbbrev: ARTRD_cfgAbbrev(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_cfgAlt: ARTRD_cfgAlt(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_cfgAlt1: ARTRD_cfgAlt1(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_cfgAtom: ARTRD_cfgAtom(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_cfgAtoms: ARTRD_cfgAtoms(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_cfgAttributeEquation: ARTRD_cfgAttributeEquation(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_cfgBuiltinTerminal: ARTRD_cfgBuiltinTerminal(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_cfgCaseInsensitiveTerminal: ARTRD_cfgCaseInsensitiveTerminal(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_cfgCaseSensitiveTerminal: ARTRD_cfgCaseSensitiveTerminal(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_cfgCat: ARTRD_cfgCat(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_cfgCatTail: ARTRD_cfgCatTail(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_cfgCharacterRangeTerminal: ARTRD_cfgCharacterRangeTerminal(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_cfgCharacterTerminal: ARTRD_cfgCharacterTerminal(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_cfgDelay: ARTRD_cfgDelay(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_cfgDiff: ARTRD_cfgDiff(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_cfgDoFirst: ARTRD_cfgDoFirst(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_cfgElement: ARTRD_cfgElement(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_cfgElementDeclaration: ARTRD_cfgElementDeclaration(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_cfgElementDeclarations: ARTRD_cfgElementDeclarations(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_cfgEpsilon: ARTRD_cfgEpsilon(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_cfgFoldNone: ARTRD_cfgFoldNone(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_cfgFoldOver: ARTRD_cfgFoldOver(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_cfgFoldUnder: ARTRD_cfgFoldUnder(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_cfgGather: ARTRD_cfgGather(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_cfgGrammarAnnotations: ARTRD_cfgGrammarAnnotations(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_cfgInsert: ARTRD_cfgInsert(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_cfgIter: ARTRD_cfgIter(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_cfgKleeneClosure: ARTRD_cfgKleeneClosure(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_cfgNativeAction: ARTRD_cfgNativeAction(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_cfgNonterminal: ARTRD_cfgNonterminal(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_cfgNonterminals: ARTRD_cfgNonterminals(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_cfgNot: ARTRD_cfgNot(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_cfgOptional: ARTRD_cfgOptional(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_cfgPositiveClosure: ARTRD_cfgPositiveClosure(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_cfgRHS: ARTRD_cfgRHS(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_cfgRule: ARTRD_cfgRule(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_cfgSlot: ARTRD_cfgSlot(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_cfgSlotSymbol: ARTRD_cfgSlotSymbol(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_cfgTear: ARTRD_cfgTear(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_cfgUnion: ARTRD_cfgUnion(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_chooseDiff: ARTRD_chooseDiff(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_chooseElement:  ARTRD_chooseElement(artElement.element, artParent, artWriteable, (ARTAT_ART_chooseElement) artAttributes); break;
    case ARTL_ART_chooseHigher: ARTRD_chooseHigher(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_chooseIntersection: ARTRD_chooseIntersection(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_chooseLonger: ARTRD_chooseLonger(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_chooseLower: ARTRD_chooseLower(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_choosePredefinedSet: ARTRD_choosePredefinedSet(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_chooseRule: ARTRD_chooseRule(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_chooseShorter: ARTRD_chooseShorter(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_chooseUnion: ARTRD_chooseUnion(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_chooseUnionIntersection: ARTRD_chooseUnionIntersection(artElement.element, artParent, artWriteable, null); break;
    case ARTL_ART_chooserOp: ARTRD_chooserOp(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_directive: ARTRD_directive(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_idART: ARTRD_idART(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_idJAVA: ARTRD_idJAVA(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_idRAW: ARTRD_idRAW(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_latexDeclaration: ARTRD_latexDeclaration(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_latexDeclarations: ARTRD_latexDeclarations(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_paraterminalisers: ARTRD_paraterminalisers(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_text: ARTRD_text(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_textElement: ARTRD_textElement(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_tr: ARTRD_tr(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_trConfiguration: ARTRD_trConfiguration(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_trEntities: ARTRD_trEntities(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_trEntityKind: ARTRD_trEntityKind(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_trEntityReferences: ARTRD_trEntityReferences(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_trEquations: ARTRD_trEquations(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_trLabel: ARTRD_trLabel(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_trMatch: ARTRD_trMatch(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_trNamedTerm: ARTRD_trNamedTerm(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_trPremises: ARTRD_trPremises(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_trPrimaryTerm: ARTRD_trPrimaryTerm(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_trRule: ARTRD_trRule(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_trSubterms: ARTRD_trSubterms(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_trTerm: ARTRD_trTerm(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_trTransition: ARTRD_trTransition(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_trUnamedTerm: ARTRD_trUnamedTerm(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_tryArgument: ARTRD_tryArgument(artElement.element, artParent, artWriteable); break;
    case ARTL_ART_useElements: ARTRD_useElements(artElement.element, artParent, artWriteable); break;
  }
}

};
